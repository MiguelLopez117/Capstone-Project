
c:/Users/User/Documents/IoT/GPS_Location/target/1.5.2/argon/GPS_Location.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003e30  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7e50  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000047c  2003de44  000d7e54  0001de44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000530  2003e2c0  2003e2c0  0002e2c0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d82d0  000d82d0  000282d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d82f8  000d82f8  000282f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f2941  00000000  00000000  000282fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012fd0  00000000  00000000  0011ac3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001eb55  00000000  00000000  0012dc0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002658  00000000  00000000  0014c762  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004530  00000000  00000000  0014edba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003984e  00000000  00000000  001532ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002fa50  00000000  00000000  0018cb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107d34  00000000  00000000  001bc588  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d13c  00000000  00000000  002c42bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f8d3 	bl	d71dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f8d8 	bl	d71f2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003de44 	.word	0x2003de44
   d404c:	000d7e54 	.word	0x000d7e54
   d4050:	2003e2c0 	.word	0x2003e2c0
   d4054:	2003e2c0 	.word	0x2003e2c0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 febf 	bl	d5de0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7e44 	.word	0x000d7e44
   d4084:	000d7df8 	.word	0x000d7df8

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b820 	b.w	d40cc <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f93b 	bl	d4308 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 be65 	b.w	d5d64 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f001 bc3f 	b.w	d591c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bc3d 	b.w	d591c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 fba2 	bl	d57f4 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d55d5 	.word	0x000d55d5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr
	...

000d40cc <setup>:
unsigned long lastPublish = 0;
unsigned long startFix = 0;
bool gettingFix = false;

void setup()
{
   d40cc:	b508      	push	{r3, lr}
	 Serial.begin(9600);
   d40ce:	f001 ff87 	bl	d5fe0 <_Z16_fetch_usbserialv>
   d40d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d6:	f001 ff77 	bl	d5fc8 <_ZN9USBSerial5beginEl>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d40da:	223c      	movs	r2, #60	; 0x3c
   d40dc:	2102      	movs	r1, #2
   d40de:	4808      	ldr	r0, [pc, #32]	; (d4100 <setup+0x34>)
   d40e0:	f000 fb94 	bl	d480c <_ZN16Adafruit_SSD13065beginEhh>

	// The GPS module initialization
	Serial1.begin(9600);
   d40e4:	f002 f804 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d40e8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ec:	f001 fffa 	bl	d60e4 <_ZN11USARTSerial5beginEm>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40f0:	f001 fa78 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
  startFix = millis();
   d40f4:	4b03      	ldr	r3, [pc, #12]	; (d4104 <setup+0x38>)
   d40f6:	6018      	str	r0, [r3, #0]
  gettingFix = true;
   d40f8:	4b03      	ldr	r3, [pc, #12]	; (d4108 <setup+0x3c>)
   d40fa:	2201      	movs	r2, #1
   d40fc:	701a      	strb	r2, [r3, #0]
   d40fe:	bd08      	pop	{r3, pc}
   d4100:	2003e39c 	.word	0x2003e39c
   d4104:	2003e3c4 	.word	0x2003e3c4
   d4108:	2003e3c0 	.word	0x2003e3c0

000d410c <_Z18displayGPSLocationffiii>:
	}
	delay(1000);
}

void displayGPSLocation(float lat, float lon, int sat, int hr, int mn)
{
   d410c:	b5f0      	push	{r4, r5, r6, r7, lr}
  display.clearDisplay();
   d410e:	4c25      	ldr	r4, [pc, #148]	; (d41a4 <_Z18displayGPSLocationffiii+0x98>)
	}
	delay(1000);
}

void displayGPSLocation(float lat, float lon, int sat, int hr, int mn)
{
   d4110:	b087      	sub	sp, #28
   d4112:	4605      	mov	r5, r0
  display.clearDisplay();
   d4114:	4620      	mov	r0, r4
	}
	delay(1000);
}

void displayGPSLocation(float lat, float lon, int sat, int hr, int mn)
{
   d4116:	ed8d 0a05 	vstr	s0, [sp, #20]
   d411a:	edcd 0a04 	vstr	s1, [sp, #16]
   d411e:	4617      	mov	r7, r2
   d4120:	460e      	mov	r6, r1
  display.clearDisplay();
   d4122:	f000 fb0b 	bl	d473c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setRotation(0);
   d4126:	4620      	mov	r0, r4
   d4128:	2100      	movs	r1, #0
   d412a:	f000 fe83 	bl	d4e34 <_ZN12Adafruit_GFX11setRotationEh>
  display.setTextSize(1);
   d412e:	4620      	mov	r0, r4
   d4130:	2101      	movs	r1, #1
   d4132:	f000 fe75 	bl	d4e20 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(0,0);
   d4136:	2200      	movs	r2, #0
   d4138:	4611      	mov	r1, r2
   d413a:	4620      	mov	r0, r4
   d413c:	f000 fe6d 	bl	d4e1a <_ZN12Adafruit_GFX9setCursorEss>
  display.setTextColor(WHITE);
   d4140:	4620      	mov	r0, r4
   d4142:	2101      	movs	r1, #1
   d4144:	f000 fe71 	bl	d4e2a <_ZN12Adafruit_GFX12setTextColorEt>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4148:	4a17      	ldr	r2, [pc, #92]	; (d41a8 <_Z18displayGPSLocationffiii+0x9c>)
   d414a:	2100      	movs	r1, #0
   d414c:	4620      	mov	r0, r4
   d414e:	f001 fd86 	bl	d5c5e <_ZN5Print11printf_implEbPKcz>
   d4152:	eddd 0a04 	vldr	s1, [sp, #16]
   d4156:	ee10 0a90 	vmov	r0, s1
   d415a:	f002 fd77 	bl	d6c4c <__aeabi_f2d>
   d415e:	ed9d 0a05 	vldr	s0, [sp, #20]
   d4162:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4166:	ee10 0a10 	vmov	r0, s0
   d416a:	f002 fd6f 	bl	d6c4c <__aeabi_f2d>
   d416e:	4a0f      	ldr	r2, [pc, #60]	; (d41ac <_Z18displayGPSLocationffiii+0xa0>)
   d4170:	e9cd 0100 	strd	r0, r1, [sp]
   d4174:	2100      	movs	r1, #0
   d4176:	4620      	mov	r0, r4
   d4178:	f001 fd71 	bl	d5c5e <_ZN5Print11printf_implEbPKcz>
   d417c:	4633      	mov	r3, r6
   d417e:	9700      	str	r7, [sp, #0]
   d4180:	4a0b      	ldr	r2, [pc, #44]	; (d41b0 <_Z18displayGPSLocationffiii+0xa4>)
   d4182:	2100      	movs	r1, #0
   d4184:	4620      	mov	r0, r4
   d4186:	f001 fd6a 	bl	d5c5e <_ZN5Print11printf_implEbPKcz>
   d418a:	462b      	mov	r3, r5
   d418c:	4a09      	ldr	r2, [pc, #36]	; (d41b4 <_Z18displayGPSLocationffiii+0xa8>)
   d418e:	2100      	movs	r1, #0
   d4190:	4620      	mov	r0, r4
   d4192:	f001 fd64 	bl	d5c5e <_ZN5Print11printf_implEbPKcz>
  display.printf("GPS Location\n");
  display.printf("lat: %f, long: %f\n", lat, lon);
	display.printf("Time: %i:%i\n", hr, mn);
  display.printf("sat = %i\n", sat);
  display.display();
   d4196:	4620      	mov	r0, r4
}
   d4198:	b007      	add	sp, #28
   d419a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  display.setTextColor(WHITE);
  display.printf("GPS Location\n");
  display.printf("lat: %f, long: %f\n", lat, lon);
	display.printf("Time: %i:%i\n", hr, mn);
  display.printf("sat = %i\n", sat);
  display.display();
   d419e:	f000 bc07 	b.w	d49b0 <_ZN16Adafruit_SSD13067displayEv>
   d41a2:	bf00      	nop
   d41a4:	2003e39c 	.word	0x2003e39c
   d41a8:	000d73e4 	.word	0x000d73e4
   d41ac:	000d73f2 	.word	0x000d73f2
   d41b0:	000d7405 	.word	0x000d7405
   d41b4:	000d7412 	.word	0x000d7412

000d41b8 <_Z11displayInfov>:
}

void displayInfo() 
{
   d41b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float lat,lon;
	uint8_t hr,mn,se,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) 
   d41bc:	4c4a      	ldr	r4, [pc, #296]	; (d42e8 <_Z11displayInfov+0x130>)
  display.printf("sat = %i\n", sat);
  display.display();
}

void displayInfo() 
{
   d41be:	b0a4      	sub	sp, #144	; 0x90
   d41c0:	f001 fa10 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
	float lat,lon;
	uint8_t hr,mn,se,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) 
   d41c4:	6823      	ldr	r3, [r4, #0]
   d41c6:	1ac0      	subs	r0, r0, r3
   d41c8:	f241 3387 	movw	r3, #4999	; 0x1387
   d41cc:	4298      	cmp	r0, r3
   d41ce:	f240 8087 	bls.w	d42e0 <_Z11displayInfov+0x128>
   d41d2:	f8df a130 	ldr.w	sl, [pc, #304]	; d4304 <_Z11displayInfov+0x14c>
   d41d6:	f8df 8118 	ldr.w	r8, [pc, #280]	; d42f0 <_Z11displayInfov+0x138>
   d41da:	f001 fa03 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
  {
		lastSerial = millis();

		char buf[128];
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) 
   d41de:	f89a 3000 	ldrb.w	r3, [sl]
{
	float lat,lon;
	uint8_t hr,mn,se,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) 
  {
		lastSerial = millis();
   d41e2:	6020      	str	r0, [r4, #0]

		char buf[128];
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) 
   d41e4:	b143      	cbz	r3, d41f8 <_Z11displayInfov+0x40>
   d41e6:	f001 f9fd 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
   d41ea:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
   d41ee:	1ac0      	subs	r0, r0, r3
   d41f0:	f242 730f 	movw	r3, #9999	; 0x270f
   d41f4:	4298      	cmp	r0, r3
   d41f6:	d90f      	bls.n	d4218 <_Z11displayInfov+0x60>
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
			}
		}
		else 
    {
			strcpy(buf, "no location");
   d41f8:	493c      	ldr	r1, [pc, #240]	; (d42ec <_Z11displayInfov+0x134>)
   d41fa:	a804      	add	r0, sp, #16
   d41fc:	f003 f834 	bl	d7268 <strcpy>
			if (!gettingFix) 
   d4200:	f898 3000 	ldrb.w	r3, [r8]
   d4204:	2b00      	cmp	r3, #0
   d4206:	d16b      	bne.n	d42e0 <_Z11displayInfov+0x128>
      {
				gettingFix = true;
   d4208:	4b39      	ldr	r3, [pc, #228]	; (d42f0 <_Z11displayInfov+0x138>)
   d420a:	2201      	movs	r2, #1
   d420c:	701a      	strb	r2, [r3, #0]
   d420e:	f001 f9e9 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d4212:	4b38      	ldr	r3, [pc, #224]	; (d42f4 <_Z11displayInfov+0x13c>)
   d4214:	6018      	str	r0, [r3, #0]
			}
		}
	}
   d4216:	e063      	b.n	d42e0 <_Z11displayInfov+0x128>
		lastSerial = millis();

		char buf[128];
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) 
    {
			lat = gps.location.lat();
   d4218:	4650      	mov	r0, sl
   d421a:	f000 ff05 	bl	d5028 <_ZN15TinyGPSLocation3latEv>
   d421e:	ec51 0b10 	vmov	r0, r1, d0
   d4222:	f002 ff79 	bl	d7118 <__aeabi_d2f>
   d4226:	4605      	mov	r5, r0
			lon = gps.location.lng(); 
   d4228:	4650      	mov	r0, sl
   d422a:	f000 ff25 	bl	d5078 <_ZN15TinyGPSLocation3lngEv>
   d422e:	ec51 0b10 	vmov	r0, r1, d0
   d4232:	f002 ff71 	bl	d7118 <__aeabi_d2f>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }
   d4236:	2300      	movs	r3, #0
   d4238:	f88a 3089 	strb.w	r3, [sl, #137]	; 0x89
   d423c:	4606      	mov	r6, r0
			sat = gps.satellites.value();
			hr = gps.time.hour();
   d423e:	f10a 0048 	add.w	r0, sl, #72	; 0x48
   d4242:	f8da 9090 	ldr.w	r9, [sl, #144]	; 0x90
   d4246:	f000 ff63 	bl	d5110 <_ZN11TinyGPSTime4hourEv>
   d424a:	4604      	mov	r4, r0
			mn = gps.time.minute();
   d424c:	f10a 0048 	add.w	r0, sl, #72	; 0x48
   d4250:	f000 ff68 	bl	d5124 <_ZN11TinyGPSTime6minuteEv>
   d4254:	4607      	mov	r7, r0
			se = gps.time.second();
   d4256:	f10a 0048 	add.w	r0, sl, #72	; 0x48
   d425a:	f000 ff71 	bl	d5140 <_ZN11TinyGPSTime6secondEv>

			if(hr > 7) 
   d425e:	2c07      	cmp	r4, #7
			lat = gps.location.lat();
			lon = gps.location.lng(); 
			sat = gps.satellites.value();
			hr = gps.time.hour();
			mn = gps.time.minute();
			se = gps.time.second();
   d4260:	4682      	mov	sl, r0

			if(hr > 7) 
   d4262:	d901      	bls.n	d4268 <_Z11displayInfov+0xb0>
      {
				hr = hr + UTC_offset;
   d4264:	3c06      	subs	r4, #6
   d4266:	e000      	b.n	d426a <_Z11displayInfov+0xb2>
			}
			else 
      {
				hr = hr + 24 + UTC_offset;
   d4268:	3412      	adds	r4, #18
   d426a:	b2e4      	uxtb	r4, r4
			}
			Serial.printf("Time: %02i:%02i:%02i --- ",hr,mn,se);
   d426c:	f001 feb8 	bl	d5fe0 <_Z16_fetch_usbserialv>
   d4270:	4623      	mov	r3, r4
   d4272:	4a21      	ldr	r2, [pc, #132]	; (d42f8 <_Z11displayInfov+0x140>)
   d4274:	2100      	movs	r1, #0
   d4276:	e88d 0480 	stmia.w	sp, {r7, sl}
   d427a:	f001 fcf0 	bl	d5c5e <_ZN5Print11printf_implEbPKcz>
			Serial.printf("lat: %f, long: %f \n", lat,lon);
   d427e:	f001 feaf 	bl	d5fe0 <_Z16_fetch_usbserialv>
   d4282:	4682      	mov	sl, r0
   d4284:	4630      	mov	r0, r6
   d4286:	f002 fce1 	bl	d6c4c <__aeabi_f2d>
   d428a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d428e:	4628      	mov	r0, r5
   d4290:	f002 fcdc 	bl	d6c4c <__aeabi_f2d>
   d4294:	4a19      	ldr	r2, [pc, #100]	; (d42fc <_Z11displayInfov+0x144>)
   d4296:	e9cd 0100 	strd	r0, r1, [sp]
   d429a:	2100      	movs	r1, #0
   d429c:	4650      	mov	r0, sl
   d429e:	f001 fcde 	bl	d5c5e <_ZN5Print11printf_implEbPKcz>
			displayGPSLocation(lat, lon, sat, hr, mn);
   d42a2:	463a      	mov	r2, r7
   d42a4:	4621      	mov	r1, r4
   d42a6:	fa5f f089 	uxtb.w	r0, r9
   d42aa:	ee00 6a90 	vmov	s1, r6
   d42ae:	ee00 5a10 	vmov	s0, r5
   d42b2:	f7ff ff2b 	bl	d410c <_Z18displayGPSLocationffiii>
			if (gettingFix) 
   d42b6:	f898 3000 	ldrb.w	r3, [r8]
   d42ba:	b18b      	cbz	r3, d42e0 <_Z11displayInfov+0x128>
      {
				gettingFix = false;
   d42bc:	4b0c      	ldr	r3, [pc, #48]	; (d42f0 <_Z11displayInfov+0x138>)
   d42be:	2200      	movs	r2, #0
   d42c0:	701a      	strb	r2, [r3, #0]
   d42c2:	f001 f98f 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d42c6:	4b0b      	ldr	r3, [pc, #44]	; (d42f4 <_Z11displayInfov+0x13c>)
   d42c8:	681c      	ldr	r4, [r3, #0]
   d42ca:	1b04      	subs	r4, r0, r4
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
   d42cc:	f001 fe88 	bl	d5fe0 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d42d0:	4a0b      	ldr	r2, [pc, #44]	; (d4300 <_Z11displayInfov+0x148>)
   d42d2:	4623      	mov	r3, r4
   d42d4:	2101      	movs	r1, #1
				gettingFix = true;
				startFix = millis();
			}
		}
	}
   d42d6:	b024      	add	sp, #144	; 0x90
   d42d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d42dc:	f001 bcbf 	b.w	d5c5e <_ZN5Print11printf_implEbPKcz>
   d42e0:	b024      	add	sp, #144	; 0x90
   d42e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d42e6:	bf00      	nop
   d42e8:	2003e3c8 	.word	0x2003e3c8
   d42ec:	000d746a 	.word	0x000d746a
   d42f0:	2003e3c0 	.word	0x2003e3c0
   d42f4:	2003e3c4 	.word	0x2003e3c4
   d42f8:	000d741c 	.word	0x000d741c
   d42fc:	000d7436 	.word	0x000d7436
   d4300:	000d744a 	.word	0x000d744a
   d4304:	2003e2c4 	.word	0x2003e2c4

000d4308 <loop>:
  startFix = millis();
  gettingFix = true;
}

void loop()
{
   d4308:	b508      	push	{r3, lr}
	while (Serial1.available() > 0) 
   d430a:	f001 fef1 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d430e:	6803      	ldr	r3, [r0, #0]
   d4310:	691b      	ldr	r3, [r3, #16]
   d4312:	4798      	blx	r3
   d4314:	2800      	cmp	r0, #0
   d4316:	dd0d      	ble.n	d4334 <loop+0x2c>
  {
		if (gps.encode(Serial1.read())) 
   d4318:	f001 feea 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d431c:	6803      	ldr	r3, [r0, #0]
   d431e:	695b      	ldr	r3, [r3, #20]
   d4320:	4798      	blx	r3
   d4322:	b2c1      	uxtb	r1, r0
   d4324:	4806      	ldr	r0, [pc, #24]	; (d4340 <loop+0x38>)
   d4326:	f001 f871 	bl	d540c <_ZN11TinyGPSPlus6encodeEc>
   d432a:	2800      	cmp	r0, #0
   d432c:	d0ed      	beq.n	d430a <loop+0x2>
    {
			displayInfo();
   d432e:	f7ff ff43 	bl	d41b8 <_Z11displayInfov>
   d4332:	e7ea      	b.n	d430a <loop+0x2>
      //displayGPSLocation();
		}
	}
	delay(1000);
   d4334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d4338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
			displayInfo();
      //displayGPSLocation();
		}
	}
	delay(1000);
   d433c:	f001 bcdc 	b.w	d5cf8 <delay>
   d4340:	2003e2c4 	.word	0x2003e2c4

000d4344 <_ZN16Adafruit_SSD1306D0Ev>:
   d4344:	b510      	push	{r4, lr}
   d4346:	2124      	movs	r1, #36	; 0x24
   d4348:	4604      	mov	r4, r0
   d434a:	f002 f9bf 	bl	d66cc <_ZdlPvj>
   d434e:	4620      	mov	r0, r4
   d4350:	bd10      	pop	{r4, pc}
	...

000d4354 <_GLOBAL__sub_I_display>:
				gettingFix = true;
				startFix = millis();
			}
		}
	}
   d4354:	b510      	push	{r4, lr}
#include "Particle.h"
#include "TinyGPS++.h"
#include "Adafruit_SSD1306.h"

#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d4356:	4c0a      	ldr	r4, [pc, #40]	; (d4380 <_GLOBAL__sub_I_display+0x2c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4358:	f001 f8c4 	bl	d54e4 <HAL_Pin_Map>
   d435c:	2104      	movs	r1, #4
   d435e:	4620      	mov	r0, r4
   d4360:	f000 f9d6 	bl	d4710 <_ZN16Adafruit_SSD1306C1Ea>
   d4364:	4a07      	ldr	r2, [pc, #28]	; (d4384 <_GLOBAL__sub_I_display+0x30>)
   d4366:	4908      	ldr	r1, [pc, #32]	; (d4388 <_GLOBAL__sub_I_display+0x34>)
   d4368:	4620      	mov	r0, r4
   d436a:	f002 f9a1 	bl	d66b0 <__aeabi_atexit>
 * GPS Module Connections
 * GPS Unit Rx connects to Argon Pin D9  (UART1_TX)
 * GPS Unit Tx connects to Argon Pin D10 (UART1_RX)
*/

SYSTEM_THREAD(ENABLED);
   d436e:	2001      	movs	r0, #1
   d4370:	2100      	movs	r1, #0
   d4372:	f001 fa57 	bl	d5824 <system_thread_set_state>
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

// The TinyGPS++ object
TinyGPSPlus gps;
   d4376:	4805      	ldr	r0, [pc, #20]	; (d438c <_GLOBAL__sub_I_display+0x38>)
				gettingFix = true;
				startFix = millis();
			}
		}
	}
   d4378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

// The TinyGPS++ object
TinyGPSPlus gps;
   d437c:	f000 bd82 	b.w	d4e84 <_ZN11TinyGPSPlusC1Ev>
   d4380:	2003e39c 	.word	0x2003e39c
   d4384:	2003e2c0 	.word	0x2003e2c0
   d4388:	000d40c9 	.word	0x000d40c9
   d438c:	2003e2c4 	.word	0x2003e2c4

000d4390 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4390:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4392:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4394:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4398:	2c02      	cmp	r4, #2
   d439a:	d008      	beq.n	d43ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d439c:	2c03      	cmp	r4, #3
   d439e:	d00f      	beq.n	d43c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d43a0:	2c01      	cmp	r4, #1
   d43a2:	d170      	bne.n	d4486 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d43a4:	8904      	ldrh	r4, [r0, #8]
   d43a6:	3c01      	subs	r4, #1
   d43a8:	1aa2      	subs	r2, r4, r2
   d43aa:	b212      	sxth	r2, r2
      break;
   d43ac:	e00c      	b.n	d43c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d43ae:	8944      	ldrh	r4, [r0, #10]
   d43b0:	3c01      	subs	r4, #1
   d43b2:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d43b4:	8904      	ldrh	r4, [r0, #8]
   d43b6:	1ae4      	subs	r4, r4, r3
   d43b8:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d43ba:	b212      	sxth	r2, r2
      x -= (w-1);
   d43bc:	b209      	sxth	r1, r1
      break;
   d43be:	e062      	b.n	d4486 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d43c0:	8944      	ldrh	r4, [r0, #10]
   d43c2:	1ae4      	subs	r4, r4, r3
   d43c4:	1a61      	subs	r1, r4, r1
   d43c6:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d43c8:	2a00      	cmp	r2, #0
   d43ca:	db5b      	blt.n	d4484 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d43cc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d43d0:	4294      	cmp	r4, r2
   d43d2:	f340 8090 	ble.w	d44f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d43d6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d43d8:	bfbe      	ittt	lt
   d43da:	185b      	addlt	r3, r3, r1
   d43dc:	b21b      	sxthlt	r3, r3
    __y = 0;
   d43de:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d43e0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d43e4:	18cc      	adds	r4, r1, r3
   d43e6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d43e8:	bfc4      	itt	gt
   d43ea:	1a43      	subgt	r3, r0, r1
   d43ec:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d43ee:	2b00      	cmp	r3, #0
   d43f0:	f340 8081 	ble.w	d44f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d43f4:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d43f6:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d43f8:	4f3f      	ldr	r7, [pc, #252]	; (d44f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d43fa:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d43fe:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4402:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4404:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4408:	d017      	beq.n	d443a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d440a:	f1c1 0108 	rsb	r1, r1, #8
   d440e:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4410:	493a      	ldr	r1, [pc, #232]	; (d44fc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4412:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4414:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4416:	bf3f      	itttt	cc
   d4418:	ebc3 0e00 	rsbcc	lr, r3, r0
   d441c:	21ff      	movcc	r1, #255	; 0xff
   d441e:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4422:	400e      	andcc	r6, r1
   d4424:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4426:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4428:	bf0c      	ite	eq
   d442a:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d442c:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d442e:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4430:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4432:	d360      	bcc.n	d44f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4434:	1a18      	subs	r0, r3, r0
   d4436:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4438:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d443a:	2b07      	cmp	r3, #7
   d443c:	d917      	bls.n	d446e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d443e:	2d01      	cmp	r5, #1
   d4440:	bf0c      	ite	eq
   d4442:	20ff      	moveq	r0, #255	; 0xff
   d4444:	2000      	movne	r0, #0
   d4446:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d444a:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d444c:	3a08      	subs	r2, #8
   d444e:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4450:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4452:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4456:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d445a:	d8f7      	bhi.n	d444c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d445c:	f1a3 0208 	sub.w	r2, r3, #8
   d4460:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4464:	3201      	adds	r2, #1
   d4466:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d446a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d446e:	2b00      	cmp	r3, #0
   d4470:	d041      	beq.n	d44f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4472:	4a23      	ldr	r2, [pc, #140]	; (d4500 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4474:	5cd2      	ldrb	r2, [r2, r3]
   d4476:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4478:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d447a:	bf0c      	ite	eq
   d447c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d447e:	4393      	bicne	r3, r2
   d4480:	7023      	strb	r3, [r4, #0]
   d4482:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4484:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4486:	2a00      	cmp	r2, #0
   d4488:	db35      	blt.n	d44f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d448a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d448e:	4294      	cmp	r4, r2
   d4490:	dd31      	ble.n	d44f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4492:	2900      	cmp	r1, #0
    w += x;
   d4494:	bfbc      	itt	lt
   d4496:	18c9      	addlt	r1, r1, r3
   d4498:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d449a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d449e:	bfb8      	it	lt
   d44a0:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d44a2:	18ce      	adds	r6, r1, r3
   d44a4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d44a6:	bfc4      	itt	gt
   d44a8:	1a63      	subgt	r3, r4, r1
   d44aa:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d44ac:	2b00      	cmp	r3, #0
   d44ae:	dd22      	ble.n	d44f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d44b0:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d44b2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d44b6:	4810      	ldr	r0, [pc, #64]	; (d44f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d44b8:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d44bc:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d44be:	2001      	movs	r0, #1
   d44c0:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d44c4:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d44c6:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d44c8:	d109      	bne.n	d44de <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d44ca:	3b01      	subs	r3, #1
   d44cc:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d44ce:	1c5c      	adds	r4, r3, #1
   d44d0:	d011      	beq.n	d44f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d44d2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d44d6:	4310      	orrs	r0, r2
   d44d8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d44dc:	e7f5      	b.n	d44ca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d44de:	43d2      	mvns	r2, r2
   d44e0:	b2d2      	uxtb	r2, r2
   d44e2:	3b01      	subs	r3, #1
   d44e4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d44e6:	1c58      	adds	r0, r3, #1
   d44e8:	d005      	beq.n	d44f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d44ea:	f811 0b01 	ldrb.w	r0, [r1], #1
   d44ee:	4010      	ands	r0, r2
   d44f0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d44f4:	e7f5      	b.n	d44e2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d44f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44f8:	2003de54 	.word	0x2003de54
   d44fc:	2003de4c 	.word	0x2003de4c
   d4500:	2003de44 	.word	0x2003de44

000d4504 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4504:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4506:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4508:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d450c:	2c02      	cmp	r4, #2
   d450e:	d008      	beq.n	d4522 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4510:	2c03      	cmp	r4, #3
   d4512:	d00f      	beq.n	d4534 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4514:	2c01      	cmp	r4, #1
   d4516:	d112      	bne.n	d453e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4518:	8904      	ldrh	r4, [r0, #8]
   d451a:	1ae4      	subs	r4, r4, r3
   d451c:	1aa2      	subs	r2, r4, r2
   d451e:	b212      	sxth	r2, r2
      break;
   d4520:	e06d      	b.n	d45fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4522:	8904      	ldrh	r4, [r0, #8]
   d4524:	3c01      	subs	r4, #1
   d4526:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4528:	8944      	ldrh	r4, [r0, #10]
   d452a:	1ae4      	subs	r4, r4, r3
   d452c:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d452e:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4530:	b212      	sxth	r2, r2
      break;
   d4532:	e004      	b.n	d453e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4534:	8944      	ldrh	r4, [r0, #10]
   d4536:	3c01      	subs	r4, #1
   d4538:	1a61      	subs	r1, r4, r1
   d453a:	b209      	sxth	r1, r1
      break;
   d453c:	e05f      	b.n	d45fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d453e:	2900      	cmp	r1, #0
   d4540:	db5c      	blt.n	d45fc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4542:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4546:	428c      	cmp	r4, r1
   d4548:	f340 8091 	ble.w	d466e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d454c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d454e:	bfbc      	itt	lt
   d4550:	18d2      	addlt	r2, r2, r3
   d4552:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4554:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4558:	bfb8      	it	lt
   d455a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d455c:	18d4      	adds	r4, r2, r3
   d455e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4560:	bfc4      	itt	gt
   d4562:	1a83      	subgt	r3, r0, r2
   d4564:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4566:	2b00      	cmp	r3, #0
   d4568:	f340 8081 	ble.w	d466e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d456c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d456e:	4e40      	ldr	r6, [pc, #256]	; (d4670 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4570:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4572:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4574:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4578:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d457c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4580:	d017      	beq.n	d45b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4582:	f1c4 0408 	rsb	r4, r4, #8
   d4586:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4588:	4c3a      	ldr	r4, [pc, #232]	; (d4674 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d458a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d458c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d458e:	bf3f      	itttt	cc
   d4590:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4594:	24ff      	movcc	r4, #255	; 0xff
   d4596:	fa44 f40e 	asrcc.w	r4, r4, lr
   d459a:	4027      	andcc	r7, r4
   d459c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d459e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d45a0:	bf0c      	ite	eq
   d45a2:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d45a4:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d45a6:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d45a8:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d45aa:	d360      	bcc.n	d466e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d45ac:	1a10      	subs	r0, r2, r0
   d45ae:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d45b0:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d45b2:	2a07      	cmp	r2, #7
   d45b4:	d917      	bls.n	d45e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d45b6:	2d01      	cmp	r5, #1
   d45b8:	bf0c      	ite	eq
   d45ba:	24ff      	moveq	r4, #255	; 0xff
   d45bc:	2400      	movne	r4, #0
   d45be:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d45c2:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d45c4:	3908      	subs	r1, #8
   d45c6:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d45c8:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d45ca:	f800 4c80 	strb.w	r4, [r0, #-128]
   d45ce:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d45d2:	d8f7      	bhi.n	d45c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d45d4:	f1a2 0108 	sub.w	r1, r2, #8
   d45d8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d45dc:	3101      	adds	r1, #1
   d45de:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d45e2:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d45e6:	2a00      	cmp	r2, #0
   d45e8:	d041      	beq.n	d466e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d45ea:	4923      	ldr	r1, [pc, #140]	; (d4678 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d45ec:	5c89      	ldrb	r1, [r1, r2]
   d45ee:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d45f0:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d45f2:	bf0c      	ite	eq
   d45f4:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d45f6:	438a      	bicne	r2, r1
   d45f8:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d45fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d45fe:	2900      	cmp	r1, #0
   d4600:	db35      	blt.n	d466e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4602:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4606:	428c      	cmp	r4, r1
   d4608:	dd31      	ble.n	d466e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d460a:	2a00      	cmp	r2, #0
    w += x;
   d460c:	bfbc      	itt	lt
   d460e:	18d2      	addlt	r2, r2, r3
   d4610:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4612:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4616:	bfb8      	it	lt
   d4618:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d461a:	18d6      	adds	r6, r2, r3
   d461c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d461e:	bfc4      	itt	gt
   d4620:	1aa3      	subgt	r3, r4, r2
   d4622:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4624:	2b00      	cmp	r3, #0
   d4626:	dd22      	ble.n	d466e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4628:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d462a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d462e:	4810      	ldr	r0, [pc, #64]	; (d4670 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d4630:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4634:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d4636:	2201      	movs	r2, #1
   d4638:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d463c:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d463e:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4640:	d109      	bne.n	d4656 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4642:	1e5a      	subs	r2, r3, #1
   d4644:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d4646:	1c5c      	adds	r4, r3, #1
   d4648:	d011      	beq.n	d466e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d464a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d464e:	430a      	orrs	r2, r1
   d4650:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4654:	e7f5      	b.n	d4642 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4656:	43c9      	mvns	r1, r1
   d4658:	b2c9      	uxtb	r1, r1
   d465a:	1e5a      	subs	r2, r3, #1
   d465c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d465e:	1c5a      	adds	r2, r3, #1
   d4660:	d005      	beq.n	d466e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4662:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4666:	400a      	ands	r2, r1
   d4668:	f800 2c01 	strb.w	r2, [r0, #-1]
   d466c:	e7f5      	b.n	d465a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d466e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4670:	2003de54 	.word	0x2003de54
   d4674:	2003de4c 	.word	0x2003de4c
   d4678:	2003de44 	.word	0x2003de44

000d467c <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d467e:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4680:	4606      	mov	r6, r0
   d4682:	4614      	mov	r4, r2
   d4684:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4686:	db3f      	blt.n	d4708 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4688:	f000 fbe3 	bl	d4e52 <_ZN12Adafruit_GFX5widthEv>
   d468c:	4285      	cmp	r5, r0
   d468e:	da3b      	bge.n	d4708 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4690:	2c00      	cmp	r4, #0
   d4692:	db39      	blt.n	d4708 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4694:	4630      	mov	r0, r6
   d4696:	f000 fbdf 	bl	d4e58 <_ZN12Adafruit_GFX6heightEv>
   d469a:	4284      	cmp	r4, r0
   d469c:	da34      	bge.n	d4708 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d469e:	4630      	mov	r0, r6
   d46a0:	f000 fbc6 	bl	d4e30 <_ZN12Adafruit_GFX11getRotationEv>
   d46a4:	2802      	cmp	r0, #2
   d46a6:	d127      	bne.n	d46f8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d46a8:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d46aa:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d46ac:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d46ae:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d46b0:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d46b2:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d46b4:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d46b6:	b204      	sxth	r4, r0
   d46b8:	e006      	b.n	d46c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d46ba:	2801      	cmp	r0, #1
   d46bc:	d104      	bne.n	d46c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d46be:	8933      	ldrh	r3, [r6, #8]
   d46c0:	3b01      	subs	r3, #1
   d46c2:	1b1b      	subs	r3, r3, r4
   d46c4:	462c      	mov	r4, r5
   d46c6:	b21d      	sxth	r5, r3
   d46c8:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d46ca:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d46cc:	fb94 f0f0 	sdiv	r0, r4, r0
   d46d0:	b200      	sxth	r0, r0
   d46d2:	4b0e      	ldr	r3, [pc, #56]	; (d470c <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d46d4:	f004 0207 	and.w	r2, r4, #7
   d46d8:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d46dc:	d104      	bne.n	d46e8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d46de:	4097      	lsls	r7, r2
   d46e0:	5c5a      	ldrb	r2, [r3, r1]
   d46e2:	4317      	orrs	r7, r2
   d46e4:	545f      	strb	r7, [r3, r1]
   d46e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d46e8:	5c58      	ldrb	r0, [r3, r1]
   d46ea:	2701      	movs	r7, #1
   d46ec:	fa07 f202 	lsl.w	r2, r7, r2
   d46f0:	ea20 0202 	bic.w	r2, r0, r2
   d46f4:	545a      	strb	r2, [r3, r1]
   d46f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d46f8:	2803      	cmp	r0, #3
   d46fa:	d1de      	bne.n	d46ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d46fc:	8973      	ldrh	r3, [r6, #10]
   d46fe:	3b01      	subs	r3, #1
   d4700:	1b5b      	subs	r3, r3, r5
   d4702:	4625      	mov	r5, r4
   d4704:	b21c      	sxth	r4, r3
   d4706:	e7df      	b.n	d46c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d4708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d470a:	bf00      	nop
   d470c:	2003de54 	.word	0x2003de54

000d4710 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4710:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4712:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4714:	4604      	mov	r4, r0
   d4716:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4718:	2180      	movs	r1, #128	; 0x80
   d471a:	f000 fa9f 	bl	d4c5c <_ZN12Adafruit_GFXC1Ess>
   d471e:	4b06      	ldr	r3, [pc, #24]	; (d4738 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d4720:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d4722:	23ff      	movs	r3, #255	; 0xff
   d4724:	7763      	strb	r3, [r4, #29]
   d4726:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d472a:	77e3      	strb	r3, [r4, #31]
   d472c:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d472e:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4732:	4620      	mov	r0, r4
   d4734:	bd38      	pop	{r3, r4, r5, pc}
   d4736:	bf00      	nop
   d4738:	000d7480 	.word	0x000d7480

000d473c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d473c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4740:	2100      	movs	r1, #0
   d4742:	4801      	ldr	r0, [pc, #4]	; (d4748 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4744:	f002 bd55 	b.w	d71f2 <memset>
   d4748:	2003de54 	.word	0x2003de54

000d474c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d474c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d474e:	4d09      	ldr	r5, [pc, #36]	; (d4774 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4750:	6829      	ldr	r1, [r5, #0]
   d4752:	f011 0401 	ands.w	r4, r1, #1
   d4756:	d10a      	bne.n	d476e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4758:	4628      	mov	r0, r5
   d475a:	f7ff fcad 	bl	d40b8 <__cxa_guard_acquire>
   d475e:	b130      	cbz	r0, d476e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4760:	4621      	mov	r1, r4
   d4762:	4805      	ldr	r0, [pc, #20]	; (d4778 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4764:	f001 f92e 	bl	d59c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4768:	4628      	mov	r0, r5
   d476a:	f7ff fcaa 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d476e:	4802      	ldr	r0, [pc, #8]	; (d4778 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4770:	bd38      	pop	{r3, r4, r5, pc}
   d4772:	bf00      	nop
   d4774:	2003e3cc 	.word	0x2003e3cc
   d4778:	2003e3d0 	.word	0x2003e3d0

000d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d477c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d477e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4782:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4784:	4604      	mov	r4, r0
   d4786:	460d      	mov	r5, r1
  if (sid != -1)
   d4788:	d028      	beq.n	d47dc <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d478a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d478e:	2101      	movs	r1, #1
   d4790:	b280      	uxth	r0, r0
   d4792:	f001 ff10 	bl	d65b6 <digitalWrite>
    digitalWrite(dc, LOW);
   d4796:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d479a:	2100      	movs	r1, #0
   d479c:	b280      	uxth	r0, r0
   d479e:	f001 ff0a 	bl	d65b6 <digitalWrite>
    digitalWrite(cs, LOW);
   d47a2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d47a6:	2100      	movs	r1, #0
   d47a8:	b280      	uxth	r0, r0
   d47aa:	f001 ff04 	bl	d65b6 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d47ae:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d47b2:	b12b      	cbz	r3, d47c0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d47b4:	f7ff ffca 	bl	d474c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d47b8:	4629      	mov	r1, r5
   d47ba:	f001 f9ad 	bl	d5b18 <_ZN8SPIClass8transferEh>
   d47be:	e005      	b.n	d47cc <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d47c0:	462b      	mov	r3, r5
   d47c2:	2201      	movs	r2, #1
   d47c4:	7fa1      	ldrb	r1, [r4, #30]
   d47c6:	7f60      	ldrb	r0, [r4, #29]
   d47c8:	f001 ff0e 	bl	d65e8 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d47cc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d47d0:	2101      	movs	r1, #1
   d47d2:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d47d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d47d8:	f001 beed 	b.w	d65b6 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d47dc:	f001 ff42 	bl	d6664 <_Z19__fetch_global_Wirev>
   d47e0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d47e4:	f001 fcf2 	bl	d61cc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d47e8:	f001 ff3c 	bl	d6664 <_Z19__fetch_global_Wirev>
   d47ec:	6803      	ldr	r3, [r0, #0]
   d47ee:	2100      	movs	r1, #0
   d47f0:	689b      	ldr	r3, [r3, #8]
   d47f2:	4798      	blx	r3
    Wire.write(c);
   d47f4:	f001 ff36 	bl	d6664 <_Z19__fetch_global_Wirev>
   d47f8:	6803      	ldr	r3, [r0, #0]
   d47fa:	4629      	mov	r1, r5
   d47fc:	689b      	ldr	r3, [r3, #8]
   d47fe:	4798      	blx	r3
    Wire.endTransmission();
   d4800:	f001 ff30 	bl	d6664 <_Z19__fetch_global_Wirev>
  }
}
   d4804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4808:	f001 bce7 	b.w	d61da <_ZN7TwoWire15endTransmissionEv>

000d480c <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d480c:	b538      	push	{r3, r4, r5, lr}
   d480e:	4604      	mov	r4, r0
   d4810:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4812:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4814:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4818:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d481a:	3301      	adds	r3, #1
   d481c:	d037      	beq.n	d488e <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d481e:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4822:	2101      	movs	r1, #1
   d4824:	b280      	uxth	r0, r0
   d4826:	f001 feb5 	bl	d6594 <pinMode>
    pinMode(cs, OUTPUT);
   d482a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d482e:	2101      	movs	r1, #1
   d4830:	b280      	uxth	r0, r0
   d4832:	f001 feaf 	bl	d6594 <pinMode>
    if (!hwSPI){
   d4836:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d483a:	b95b      	cbnz	r3, d4854 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d483c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4840:	2101      	movs	r1, #1
   d4842:	b280      	uxth	r0, r0
   d4844:	f001 fea6 	bl	d6594 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4848:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d484c:	2101      	movs	r1, #1
   d484e:	b280      	uxth	r0, r0
   d4850:	f001 fea0 	bl	d6594 <pinMode>
    	}
    if (hwSPI){
   d4854:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4858:	b1eb      	cbz	r3, d4896 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d485a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d485e:	2101      	movs	r1, #1
   d4860:	b280      	uxth	r0, r0
   d4862:	f001 fea8 	bl	d65b6 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d4866:	f7ff ff71 	bl	d474c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d486a:	2101      	movs	r1, #1
   d486c:	f001 f8c5 	bl	d59fa <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d4870:	f7ff ff6c 	bl	d474c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4874:	2110      	movs	r1, #16
   d4876:	f001 f92b 	bl	d5ad0 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d487a:	f7ff ff67 	bl	d474c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d487e:	2100      	movs	r1, #0
   d4880:	f001 f8cc 	bl	d5a1c <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4884:	f7ff ff62 	bl	d474c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4888:	f001 f8a6 	bl	d59d8 <_ZN8SPIClass5beginEv>
   d488c:	e003      	b.n	d4896 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d488e:	f001 fee9 	bl	d6664 <_Z19__fetch_global_Wirev>
   d4892:	f001 fc91 	bl	d61b8 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4896:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d489a:	2101      	movs	r1, #1
   d489c:	b280      	uxth	r0, r0
   d489e:	f001 fe79 	bl	d6594 <pinMode>
  digitalWrite(rst, HIGH);
   d48a2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d48a6:	2101      	movs	r1, #1
   d48a8:	b280      	uxth	r0, r0
   d48aa:	f001 fe84 	bl	d65b6 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d48ae:	2001      	movs	r0, #1
   d48b0:	f001 fa22 	bl	d5cf8 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d48b4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d48b8:	2100      	movs	r1, #0
   d48ba:	b280      	uxth	r0, r0
   d48bc:	f001 fe7b 	bl	d65b6 <digitalWrite>
  // wait 10ms
  delay(10);
   d48c0:	200a      	movs	r0, #10
   d48c2:	f001 fa19 	bl	d5cf8 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d48c6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d48ca:	2101      	movs	r1, #1
   d48cc:	b280      	uxth	r0, r0
   d48ce:	f001 fe72 	bl	d65b6 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d48d2:	4620      	mov	r0, r4
   d48d4:	21ae      	movs	r1, #174	; 0xae
   d48d6:	f7ff ff51 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d48da:	4620      	mov	r0, r4
   d48dc:	21d5      	movs	r1, #213	; 0xd5
   d48de:	f7ff ff4d 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d48e2:	4620      	mov	r0, r4
   d48e4:	2180      	movs	r1, #128	; 0x80
   d48e6:	f7ff ff49 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d48ea:	4620      	mov	r0, r4
   d48ec:	21a8      	movs	r1, #168	; 0xa8
   d48ee:	f7ff ff45 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d48f2:	4620      	mov	r0, r4
   d48f4:	213f      	movs	r1, #63	; 0x3f
   d48f6:	f7ff ff41 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d48fa:	4620      	mov	r0, r4
   d48fc:	21d3      	movs	r1, #211	; 0xd3
   d48fe:	f7ff ff3d 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4902:	4620      	mov	r0, r4
   d4904:	2100      	movs	r1, #0
   d4906:	f7ff ff39 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d490a:	4620      	mov	r0, r4
   d490c:	2140      	movs	r1, #64	; 0x40
   d490e:	f7ff ff35 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4912:	218d      	movs	r1, #141	; 0x8d
   d4914:	4620      	mov	r0, r4
   d4916:	f7ff ff31 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d491a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d491c:	bf0c      	ite	eq
   d491e:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d4920:	2114      	movne	r1, #20
   d4922:	4620      	mov	r0, r4
   d4924:	f7ff ff2a 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4928:	4620      	mov	r0, r4
   d492a:	2120      	movs	r1, #32
   d492c:	f7ff ff26 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4930:	4620      	mov	r0, r4
   d4932:	2100      	movs	r1, #0
   d4934:	f7ff ff22 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4938:	4620      	mov	r0, r4
   d493a:	21a1      	movs	r1, #161	; 0xa1
   d493c:	f7ff ff1e 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4940:	4620      	mov	r0, r4
   d4942:	21c8      	movs	r1, #200	; 0xc8
   d4944:	f7ff ff1a 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4948:	4620      	mov	r0, r4
   d494a:	21da      	movs	r1, #218	; 0xda
   d494c:	f7ff ff16 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4950:	4620      	mov	r0, r4
   d4952:	2112      	movs	r1, #18
   d4954:	f7ff ff12 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4958:	2181      	movs	r1, #129	; 0x81
   d495a:	4620      	mov	r0, r4
   d495c:	f7ff ff0e 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4960:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4962:	bf0c      	ite	eq
   d4964:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d4966:	21cf      	movne	r1, #207	; 0xcf
   d4968:	4620      	mov	r0, r4
   d496a:	f7ff ff07 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d496e:	21d9      	movs	r1, #217	; 0xd9
   d4970:	4620      	mov	r0, r4
   d4972:	f7ff ff03 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4976:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4978:	bf0c      	ite	eq
   d497a:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d497c:	21f1      	movne	r1, #241	; 0xf1
   d497e:	4620      	mov	r0, r4
   d4980:	f7ff fefc 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4984:	4620      	mov	r0, r4
   d4986:	21db      	movs	r1, #219	; 0xdb
   d4988:	f7ff fef8 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d498c:	4620      	mov	r0, r4
   d498e:	2140      	movs	r1, #64	; 0x40
   d4990:	f7ff fef4 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4994:	4620      	mov	r0, r4
   d4996:	21a4      	movs	r1, #164	; 0xa4
   d4998:	f7ff fef0 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d499c:	4620      	mov	r0, r4
   d499e:	21a6      	movs	r1, #166	; 0xa6
   d49a0:	f7ff feec 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d49a4:	4620      	mov	r0, r4
   d49a6:	21af      	movs	r1, #175	; 0xaf
}
   d49a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d49ac:	f7ff bee6 	b.w	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d49b0 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d49b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d49b4:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d49b6:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d49b8:	f7ff fee0 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d49bc:	2100      	movs	r1, #0
   d49be:	4620      	mov	r0, r4
   d49c0:	f7ff fedc 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d49c4:	217f      	movs	r1, #127	; 0x7f
   d49c6:	4620      	mov	r0, r4
   d49c8:	f7ff fed8 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d49cc:	2122      	movs	r1, #34	; 0x22
   d49ce:	4620      	mov	r0, r4
   d49d0:	f7ff fed4 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d49d4:	2100      	movs	r1, #0
   d49d6:	4620      	mov	r0, r4
   d49d8:	f7ff fed0 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d49dc:	2107      	movs	r1, #7
   d49de:	4620      	mov	r0, r4
   d49e0:	f7ff fecc 	bl	d477c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d49e4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d49e8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d4aa8 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d49ec:	3301      	adds	r3, #1
   d49ee:	d035      	beq.n	d4a5c <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d49f0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d49f4:	2101      	movs	r1, #1
   d49f6:	b280      	uxth	r0, r0
   d49f8:	f001 fddd 	bl	d65b6 <digitalWrite>
    digitalWrite(dc, HIGH);
   d49fc:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4a00:	2101      	movs	r1, #1
   d4a02:	b280      	uxth	r0, r0
   d4a04:	f001 fdd7 	bl	d65b6 <digitalWrite>
    digitalWrite(cs, LOW);
   d4a08:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4a0c:	2100      	movs	r1, #0
   d4a0e:	b280      	uxth	r0, r0
   d4a10:	f001 fdd1 	bl	d65b6 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4a14:	2001      	movs	r0, #1
   d4a16:	f000 fddd 	bl	d55d4 <HAL_Delay_Microseconds>
   d4a1a:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4a1c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d4a20:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4a24:	b12b      	cbz	r3, d4a32 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4a26:	f7ff fe91 	bl	d474c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4a2a:	4631      	mov	r1, r6
   d4a2c:	f001 f874 	bl	d5b18 <_ZN8SPIClass8transferEh>
   d4a30:	e005      	b.n	d4a3e <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4a32:	4633      	mov	r3, r6
   d4a34:	2201      	movs	r2, #1
   d4a36:	7fa1      	ldrb	r1, [r4, #30]
   d4a38:	7f60      	ldrb	r0, [r4, #29]
   d4a3a:	f001 fdd5 	bl	d65e8 <shiftOut>
   d4a3e:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4a40:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4a44:	d1ea      	bne.n	d4a1c <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d4a46:	2001      	movs	r0, #1
   d4a48:	f000 fdc4 	bl	d55d4 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4a4c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4a50:	2101      	movs	r1, #1
   d4a52:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4a58:	f001 bdad 	b.w	d65b6 <digitalWrite>
   d4a5c:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d4a5e:	f001 fe01 	bl	d6664 <_Z19__fetch_global_Wirev>
   d4a62:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4a66:	f001 fbb1 	bl	d61cc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4a6a:	f001 fdfb 	bl	d6664 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4a6e:	6803      	ldr	r3, [r0, #0]
   d4a70:	2140      	movs	r1, #64	; 0x40
   d4a72:	689b      	ldr	r3, [r3, #8]
   d4a74:	4798      	blx	r3
   d4a76:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d4a78:	f001 fdf4 	bl	d6664 <_Z19__fetch_global_Wirev>
   d4a7c:	19af      	adds	r7, r5, r6
   d4a7e:	6803      	ldr	r3, [r0, #0]
   d4a80:	b2bf      	uxth	r7, r7
   d4a82:	689b      	ldr	r3, [r3, #8]
   d4a84:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4a88:	3601      	adds	r6, #1
   d4a8a:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d4a8c:	2e10      	cmp	r6, #16
   d4a8e:	d1f3      	bne.n	d4a78 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d4a90:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d4a92:	f001 fde7 	bl	d6664 <_Z19__fetch_global_Wirev>
   d4a96:	b2ad      	uxth	r5, r5
   d4a98:	f001 fb9f 	bl	d61da <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4a9c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4aa0:	d1dd      	bne.n	d4a5e <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4aa6:	bf00      	nop
   d4aa8:	2003de54 	.word	0x2003de54

000d4aac <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4aac:	f000 bd1a 	b.w	d54e4 <HAL_Pin_Map>

000d4ab0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ab4:	b085      	sub	sp, #20
   d4ab6:	461e      	mov	r6, r3
   d4ab8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4abc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4ac0:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4ac2:	1a9a      	subs	r2, r3, r2
   d4ac4:	2a00      	cmp	r2, #0
   d4ac6:	bfb8      	it	lt
   d4ac8:	4252      	neglt	r2, r2
   d4aca:	9200      	str	r2, [sp, #0]
   d4acc:	1a72      	subs	r2, r6, r1
   d4ace:	2a00      	cmp	r2, #0
   d4ad0:	bfb8      	it	lt
   d4ad2:	4252      	neglt	r2, r2
   d4ad4:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4ad6:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4ad8:	9a00      	ldr	r2, [sp, #0]
   d4ada:	9901      	ldr	r1, [sp, #4]
   d4adc:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4ade:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4ae0:	dd05      	ble.n	d4aee <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d4ae2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d4ae4:	461e      	mov	r6, r3
   d4ae6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4ae8:	4622      	mov	r2, r4
    swap(x0, y0);
   d4aea:	462c      	mov	r4, r5
   d4aec:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4aee:	42b4      	cmp	r4, r6
   d4af0:	dd05      	ble.n	d4afe <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d4af2:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4af4:	461d      	mov	r5, r3
   d4af6:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4af8:	4622      	mov	r2, r4
   d4afa:	4634      	mov	r4, r6
   d4afc:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4afe:	1b5a      	subs	r2, r3, r5
   d4b00:	2a00      	cmp	r2, #0
   d4b02:	bfb8      	it	lt
   d4b04:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4b06:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4b0a:	429d      	cmp	r5, r3
   d4b0c:	bfb4      	ite	lt
   d4b0e:	2301      	movlt	r3, #1
   d4b10:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4b14:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4b18:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4b1a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4b1c:	fa0f f788 	sxth.w	r7, r8
   d4b20:	2202      	movs	r2, #2
   d4b22:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4b26:	42b4      	cmp	r4, r6
   d4b28:	dc1f      	bgt.n	d4b6a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d4b2a:	9a01      	ldr	r2, [sp, #4]
   d4b2c:	9b00      	ldr	r3, [sp, #0]
   d4b2e:	4293      	cmp	r3, r2
   d4b30:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4b34:	bfc8      	it	gt
   d4b36:	4622      	movgt	r2, r4
   d4b38:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4b3c:	bfc8      	it	gt
   d4b3e:	4629      	movgt	r1, r5
   d4b40:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d4b42:	bfdc      	itt	le
   d4b44:	462a      	movle	r2, r5
   d4b46:	4621      	movle	r1, r4
   d4b48:	4648      	mov	r0, r9
   d4b4a:	47d8      	blx	fp
    }
    err -= dy;
   d4b4c:	9b03      	ldr	r3, [sp, #12]
   d4b4e:	1aff      	subs	r7, r7, r3
   d4b50:	b2bb      	uxth	r3, r7
   d4b52:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4b54:	2f00      	cmp	r7, #0
   d4b56:	da05      	bge.n	d4b64 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4b58:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d4b5a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d4b5e:	4415      	add	r5, r2
   d4b60:	b22d      	sxth	r5, r5
      err += dx;
   d4b62:	b23f      	sxth	r7, r7
   d4b64:	3401      	adds	r4, #1
   d4b66:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4b68:	e7dd      	b.n	d4b26 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d4b6a:	b005      	add	sp, #20
   d4b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4b70 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4b70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4b74:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4b78:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4b7a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4b7e:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4b80:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4b82:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4b84:	4691      	mov	r9, r2
   d4b86:	460d      	mov	r5, r1
   d4b88:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4b8a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4b8c:	6823      	ldr	r3, [r4, #0]
   d4b8e:	9600      	str	r6, [sp, #0]
   d4b90:	f10a 32ff 	add.w	r2, sl, #4294967295
   d4b94:	444a      	add	r2, r9
   d4b96:	69df      	ldr	r7, [r3, #28]
   d4b98:	4629      	mov	r1, r5
   d4b9a:	4643      	mov	r3, r8
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	b212      	sxth	r2, r2
   d4ba0:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4ba2:	6823      	ldr	r3, [r4, #0]
   d4ba4:	9600      	str	r6, [sp, #0]
   d4ba6:	699f      	ldr	r7, [r3, #24]
   d4ba8:	464a      	mov	r2, r9
   d4baa:	4653      	mov	r3, sl
   d4bac:	4629      	mov	r1, r5
   d4bae:	4620      	mov	r0, r4
   d4bb0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4bb2:	6823      	ldr	r3, [r4, #0]
   d4bb4:	960a      	str	r6, [sp, #40]	; 0x28
   d4bb6:	f108 31ff 	add.w	r1, r8, #4294967295
   d4bba:	4429      	add	r1, r5
   d4bbc:	699d      	ldr	r5, [r3, #24]
   d4bbe:	464a      	mov	r2, r9
   d4bc0:	4653      	mov	r3, sl
   d4bc2:	b209      	sxth	r1, r1
   d4bc4:	4620      	mov	r0, r4
   d4bc6:	46ac      	mov	ip, r5
}
   d4bc8:	b002      	add	sp, #8
   d4bca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4bce:	4760      	bx	ip

000d4bd0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4bd2:	3b01      	subs	r3, #1
   d4bd4:	4413      	add	r3, r2
   d4bd6:	6804      	ldr	r4, [r0, #0]
   d4bd8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4bdc:	9501      	str	r5, [sp, #4]
   d4bde:	b21b      	sxth	r3, r3
   d4be0:	9300      	str	r3, [sp, #0]
   d4be2:	6964      	ldr	r4, [r4, #20]
   d4be4:	460b      	mov	r3, r1
   d4be6:	47a0      	blx	r4
}
   d4be8:	b003      	add	sp, #12
   d4bea:	bd30      	pop	{r4, r5, pc}

000d4bec <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4bee:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4bf2:	6804      	ldr	r4, [r0, #0]
   d4bf4:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4bf8:	3b01      	subs	r3, #1
   d4bfa:	440b      	add	r3, r1
   d4bfc:	6964      	ldr	r4, [r4, #20]
   d4bfe:	b21b      	sxth	r3, r3
   d4c00:	47a0      	blx	r4
}
   d4c02:	b003      	add	sp, #12
   d4c04:	bd30      	pop	{r4, r5, pc}

000d4c06 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4c06:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4c0a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4c0e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4c12:	4605      	mov	r5, r0
   d4c14:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4c16:	460c      	mov	r4, r1
   d4c18:	eb01 0a03 	add.w	sl, r1, r3
   d4c1c:	4554      	cmp	r4, sl
   d4c1e:	da0b      	bge.n	d4c38 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4c20:	682b      	ldr	r3, [r5, #0]
   d4c22:	f8cd 9000 	str.w	r9, [sp]
   d4c26:	699e      	ldr	r6, [r3, #24]
   d4c28:	4621      	mov	r1, r4
   d4c2a:	4643      	mov	r3, r8
   d4c2c:	463a      	mov	r2, r7
   d4c2e:	4628      	mov	r0, r5
   d4c30:	3401      	adds	r4, #1
   d4c32:	47b0      	blx	r6
   d4c34:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4c36:	e7f1      	b.n	d4c1c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4c38:	b002      	add	sp, #8
   d4c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4c3e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4c3e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4c40:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4c44:	6804      	ldr	r4, [r0, #0]
   d4c46:	9101      	str	r1, [sp, #4]
   d4c48:	9200      	str	r2, [sp, #0]
   d4c4a:	2200      	movs	r2, #0
   d4c4c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4c50:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4c52:	4611      	mov	r1, r2
   d4c54:	47a0      	blx	r4
}
   d4c56:	b002      	add	sp, #8
   d4c58:	bd10      	pop	{r4, pc}

000d4c5a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4c5a:	4770      	bx	lr

000d4c5c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4c5c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4c5e:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c60:	2400      	movs	r4, #0
   d4c62:	4d08      	ldr	r5, [pc, #32]	; (d4c84 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4c64:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4c66:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4c68:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4c6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d4c6e:	2201      	movs	r2, #1
   d4c70:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4c72:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4c74:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4c76:	8204      	strh	r4, [r0, #16]
   d4c78:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4c7a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4c7c:	82c1      	strh	r1, [r0, #22]
   d4c7e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4c80:	7682      	strb	r2, [r0, #26]
}
   d4c82:	bd30      	pop	{r4, r5, pc}
   d4c84:	000d74b8 	.word	0x000d74b8

000d4c88 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c8c:	b08f      	sub	sp, #60	; 0x3c
   d4c8e:	4605      	mov	r5, r0
   d4c90:	9106      	str	r1, [sp, #24]
   d4c92:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4c96:	9107      	str	r1, [sp, #28]
   d4c98:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4c9c:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4c9e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4ca2:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4ca4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4ca8:	4281      	cmp	r1, r0
   d4caa:	dd7c      	ble.n	d4da6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4cac:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4cb0:	4291      	cmp	r1, r2
   d4cb2:	dd78      	ble.n	d4da6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d4cb4:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d4cb6:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4cba:	2800      	cmp	r0, #0
   d4cbc:	dd73      	ble.n	d4da6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4cbe:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d4cc2:	2800      	cmp	r0, #0
   d4cc4:	dd6f      	ble.n	d4da6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4cc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4cca:	b296      	uxth	r6, r2
   d4ccc:	930c      	str	r3, [sp, #48]	; 0x30
   d4cce:	f106 0308 	add.w	r3, r6, #8
   d4cd2:	b29b      	uxth	r3, r3
   d4cd4:	9109      	str	r1, [sp, #36]	; 0x24
   d4cd6:	2400      	movs	r4, #0
   d4cd8:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4cda:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4cdc:	bf1c      	itt	ne
   d4cde:	4b33      	ldrne	r3, [pc, #204]	; (d4dac <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4ce0:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4ce2:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4ce4:	bf16      	itet	ne
   d4ce6:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4ce8:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4cec:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4cf0:	9604      	str	r6, [sp, #16]
   d4cf2:	fa1f f388 	uxth.w	r3, r8
   d4cf6:	9303      	str	r3, [sp, #12]
   d4cf8:	9a03      	ldr	r2, [sp, #12]
   d4cfa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4cfe:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4d02:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4d06:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4d08:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4d0a:	920a      	str	r2, [sp, #40]	; 0x28
   d4d0c:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4d0e:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4d12:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4d14:	f019 0f01 	tst.w	r9, #1
   d4d18:	d011      	beq.n	d4d3e <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4d1a:	f1b8 0f01 	cmp.w	r8, #1
   d4d1e:	682b      	ldr	r3, [r5, #0]
   d4d20:	d103      	bne.n	d4d2a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4d22:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4d26:	9b07      	ldr	r3, [sp, #28]
   d4d28:	e014      	b.n	d4d54 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4d2a:	9a07      	ldr	r2, [sp, #28]
   d4d2c:	9201      	str	r2, [sp, #4]
   d4d2e:	f8cd a000 	str.w	sl, [sp]
   d4d32:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4d36:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4d3a:	4653      	mov	r3, sl
   d4d3c:	e018      	b.n	d4d70 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d4d3e:	9b07      	ldr	r3, [sp, #28]
   d4d40:	9a08      	ldr	r2, [sp, #32]
   d4d42:	4293      	cmp	r3, r2
   d4d44:	d017      	beq.n	d4d76 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4d46:	f1b8 0f01 	cmp.w	r8, #1
   d4d4a:	682b      	ldr	r3, [r5, #0]
   d4d4c:	d107      	bne.n	d4d5e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d4d4e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4d52:	4613      	mov	r3, r2
   d4d54:	b23a      	sxth	r2, r7
   d4d56:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4d58:	4628      	mov	r0, r5
   d4d5a:	47d8      	blx	fp
   d4d5c:	e00b      	b.n	d4d76 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4d5e:	9a08      	ldr	r2, [sp, #32]
   d4d60:	9201      	str	r2, [sp, #4]
   d4d62:	f8cd a000 	str.w	sl, [sp]
   d4d66:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4d6a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4d6e:	4653      	mov	r3, sl
   d4d70:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4d72:	4628      	mov	r0, r5
   d4d74:	47d8      	blx	fp
   d4d76:	9b04      	ldr	r3, [sp, #16]
   d4d78:	9a03      	ldr	r2, [sp, #12]
   d4d7a:	4413      	add	r3, r2
   d4d7c:	b29b      	uxth	r3, r3
   d4d7e:	9304      	str	r3, [sp, #16]
   d4d80:	9b05      	ldr	r3, [sp, #20]
   d4d82:	4413      	add	r3, r2
   d4d84:	b29b      	uxth	r3, r3
   d4d86:	3701      	adds	r7, #1
   d4d88:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4d8c:	b2bf      	uxth	r7, r7
   d4d8e:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4d90:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4d94:	d1be      	bne.n	d4d14 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d4d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4d98:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4d9a:	3401      	adds	r4, #1
   d4d9c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4da0:	b264      	sxtb	r4, r4
   d4da2:	9309      	str	r3, [sp, #36]	; 0x24
   d4da4:	d199      	bne.n	d4cda <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d4da6:	b00f      	add	sp, #60	; 0x3c
   d4da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4dac:	000d74e8 	.word	0x000d74e8

000d4db0 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4db0:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d4db2:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4db4:	b085      	sub	sp, #20
   d4db6:	4604      	mov	r4, r0
   d4db8:	460b      	mov	r3, r1

  if (c == '\n') {
   d4dba:	d104      	bne.n	d4dc6 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d4dbc:	7e02      	ldrb	r2, [r0, #24]
   d4dbe:	8a43      	ldrh	r3, [r0, #18]
   d4dc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4dc4:	e023      	b.n	d4e0e <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d4dc6:	290d      	cmp	r1, #13
   d4dc8:	d024      	beq.n	d4e14 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4dca:	7e05      	ldrb	r5, [r0, #24]
   d4dcc:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4dd0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4dd4:	9502      	str	r5, [sp, #8]
   d4dd6:	8ac5      	ldrh	r5, [r0, #22]
   d4dd8:	9501      	str	r5, [sp, #4]
   d4dda:	8a85      	ldrh	r5, [r0, #20]
   d4ddc:	9500      	str	r5, [sp, #0]
   d4dde:	f7ff ff53 	bl	d4c88 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4de2:	7e22      	ldrb	r2, [r4, #24]
   d4de4:	8a23      	ldrh	r3, [r4, #16]
   d4de6:	b291      	uxth	r1, r2
   d4de8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4dec:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4df0:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d4df2:	b21b      	sxth	r3, r3
   d4df4:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4df6:	b168      	cbz	r0, d4e14 <_ZN12Adafruit_GFX5writeEh+0x64>
   d4df8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4dfc:	f06f 0505 	mvn.w	r5, #5
   d4e00:	fb05 0202 	mla	r2, r5, r2, r0
   d4e04:	4293      	cmp	r3, r2
   d4e06:	dd05      	ble.n	d4e14 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4e08:	8a63      	ldrh	r3, [r4, #18]
   d4e0a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4e0e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4e10:	2300      	movs	r3, #0
   d4e12:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d4e14:	2001      	movs	r0, #1
   d4e16:	b005      	add	sp, #20
   d4e18:	bd30      	pop	{r4, r5, pc}

000d4e1a <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d4e1a:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4e1c:	8242      	strh	r2, [r0, #18]
   d4e1e:	4770      	bx	lr

000d4e20 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d4e20:	2900      	cmp	r1, #0
   d4e22:	bf08      	it	eq
   d4e24:	2101      	moveq	r1, #1
   d4e26:	7601      	strb	r1, [r0, #24]
   d4e28:	4770      	bx	lr

000d4e2a <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d4e2a:	82c1      	strh	r1, [r0, #22]
   d4e2c:	8281      	strh	r1, [r0, #20]
   d4e2e:	4770      	bx	lr

000d4e30 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d4e30:	7e40      	ldrb	r0, [r0, #25]
   d4e32:	4770      	bx	lr

000d4e34 <_ZN12Adafruit_GFX11setRotationEh>:

void Adafruit_GFX::setRotation(uint8_t x) {
  rotation = (x & 3);
   d4e34:	f001 0103 	and.w	r1, r1, #3
  switch(rotation) {
   d4e38:	2901      	cmp	r1, #1
uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}

void Adafruit_GFX::setRotation(uint8_t x) {
  rotation = (x & 3);
   d4e3a:	7641      	strb	r1, [r0, #25]
   d4e3c:	8903      	ldrh	r3, [r0, #8]
   d4e3e:	8942      	ldrh	r2, [r0, #10]
  switch(rotation) {
   d4e40:	d004      	beq.n	d4e4c <_ZN12Adafruit_GFX11setRotationEh+0x18>
   d4e42:	2903      	cmp	r1, #3
   d4e44:	d002      	beq.n	d4e4c <_ZN12Adafruit_GFX11setRotationEh+0x18>
   case 0:
   case 2:
    _width  = WIDTH;
   d4e46:	8183      	strh	r3, [r0, #12]
    _height = HEIGHT;
   d4e48:	81c2      	strh	r2, [r0, #14]
    break;
   d4e4a:	4770      	bx	lr
   case 1:
   case 3:
    _width  = HEIGHT;
   d4e4c:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
   d4e4e:	81c3      	strh	r3, [r0, #14]
   d4e50:	4770      	bx	lr

000d4e52 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d4e52:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4e56:	4770      	bx	lr

000d4e58 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d4e58:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d4e5c:	4770      	bx	lr

000d4e5e <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4e5e:	f000 bb41 	b.w	d54e4 <HAL_Pin_Map>

000d4e62 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e62:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e64:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e66:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4e68:	b113      	cbz	r3, d4e70 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e6a:	2203      	movs	r2, #3
   d4e6c:	4601      	mov	r1, r0
   d4e6e:	4798      	blx	r3
    }
   d4e70:	4620      	mov	r0, r4
   d4e72:	bd10      	pop	{r4, pc}

000d4e74 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4e74:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d4e76:	2201      	movs	r2, #1
   d4e78:	701a      	strb	r2, [r3, #0]
   d4e7a:	f000 bb33 	b.w	d54e4 <HAL_Pin_Map>
   d4e7e:	bf00      	nop
   d4e80:	2003e3d8 	.word	0x2003e3d8

000d4e84 <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
   d4e84:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d4e86:	2102      	movs	r1, #2
   d4e88:	7002      	strb	r2, [r0, #0]
   d4e8a:	7042      	strb	r2, [r0, #1]
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
   d4e8c:	8082      	strh	r2, [r0, #4]
   d4e8e:	6082      	str	r2, [r0, #8]
   d4e90:	7302      	strb	r2, [r0, #12]
   d4e92:	8202      	strh	r2, [r0, #16]
   d4e94:	6142      	str	r2, [r0, #20]
   d4e96:	7602      	strb	r2, [r0, #24]
   d4e98:	8382      	strh	r2, [r0, #28]
   d4e9a:	6202      	str	r2, [r0, #32]
   d4e9c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d4ea0:	8502      	strh	r2, [r0, #40]	; 0x28
   d4ea2:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4ea4:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
   d4ea8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d4eac:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d4eb0:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
   d4eb2:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d4eb6:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d4eba:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d4ebc:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d4ec0:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d4ec4:	6602      	str	r2, [r0, #96]	; 0x60
   d4ec6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d4eca:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d4ece:	6702      	str	r2, [r0, #112]	; 0x70
   d4ed0:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d4ed4:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d4ed8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
   d4edc:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d4ee0:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d4ee4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d4ee8:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d4eec:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d4ef0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d4ef4:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d4ef8:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d4efc:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d4f00:	f880 20ba 	strb.w	r2, [r0, #186]	; 0xba
   d4f04:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
   d4f08:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d4f0c:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
   d4f10:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   d4f14:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
   d4f18:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
   d4f1c:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   d4f20:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
{
  term[0] = '\0';
   d4f24:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d4f28:	4770      	bx	lr

000d4f2a <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d4f2a:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d4f2e:	2b05      	cmp	r3, #5
   d4f30:	d802      	bhi.n	d4f38 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d4f32:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d4f36:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d4f38:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d4f3c:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d4f3e:	bf94      	ite	ls
   d4f40:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d4f44:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d4f48:	4770      	bx	lr

000d4f4a <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d4f4a:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d4f4c:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d4f4e:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d4f50:	2d2d      	cmp	r5, #45	; 0x2d
   d4f52:	bf08      	it	eq
   d4f54:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d4f56:	4620      	mov	r0, r4
   d4f58:	f002 f92e 	bl	d71b8 <atol>
   d4f5c:	2364      	movs	r3, #100	; 0x64
   d4f5e:	4358      	muls	r0, r3
   d4f60:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d4f62:	f814 3b01 	ldrb.w	r3, [r4], #1
   d4f66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d4f6a:	2909      	cmp	r1, #9
   d4f6c:	d9f8      	bls.n	d4f60 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d4f6e:	2b2e      	cmp	r3, #46	; 0x2e
   d4f70:	d10b      	bne.n	d4f8a <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d4f72:	7853      	ldrb	r3, [r2, #1]
   d4f74:	3b30      	subs	r3, #48	; 0x30
   d4f76:	2b09      	cmp	r3, #9
   d4f78:	d807      	bhi.n	d4f8a <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d4f7a:	210a      	movs	r1, #10
   d4f7c:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d4f80:	7893      	ldrb	r3, [r2, #2]
   d4f82:	3b30      	subs	r3, #48	; 0x30
   d4f84:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d4f86:	bf98      	it	ls
   d4f88:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d4f8a:	2d2d      	cmp	r5, #45	; 0x2d
   d4f8c:	bf08      	it	eq
   d4f8e:	4240      	negeq	r0, r0
}
   d4f90:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f94 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d4f94:	b538      	push	{r3, r4, r5, lr}
   d4f96:	4604      	mov	r4, r0
   d4f98:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d4f9a:	f002 f90d 	bl	d71b8 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d4f9e:	2364      	movs	r3, #100	; 0x64
   d4fa0:	fbb0 f2f3 	udiv	r2, r0, r3
   d4fa4:	fb03 0012 	mls	r0, r3, r2, r0
   d4fa8:	4b11      	ldr	r3, [pc, #68]	; (d4ff0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d4faa:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d4fac:	4343      	muls	r3, r0
   d4fae:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d4fb0:	7802      	ldrb	r2, [r0, #0]
   d4fb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d4fb6:	2909      	cmp	r1, #9
   d4fb8:	4604      	mov	r4, r0
   d4fba:	f100 0001 	add.w	r0, r0, #1
   d4fbe:	d9f7      	bls.n	d4fb0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d4fc0:	2a2e      	cmp	r2, #46	; 0x2e
   d4fc2:	d10b      	bne.n	d4fdc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d4fc4:	490a      	ldr	r1, [pc, #40]	; (d4ff0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d4fc6:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d4fc8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d4fcc:	3a30      	subs	r2, #48	; 0x30
   d4fce:	2a09      	cmp	r2, #9
   d4fd0:	d804      	bhi.n	d4fdc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d4fd2:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d4fd6:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d4fda:	e7f5      	b.n	d4fc8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d4fdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4fe0:	3301      	adds	r3, #1
   d4fe2:	2203      	movs	r2, #3
   d4fe4:	fbb3 f3f2 	udiv	r3, r3, r2
   d4fe8:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d4fea:	2300      	movs	r3, #0
   d4fec:	722b      	strb	r3, [r5, #8]
   d4fee:	bd38      	pop	{r3, r4, r5, pc}
   d4ff0:	00989680 	.word	0x00989680

000d4ff4 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d4ff4:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d4ff6:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d4ff8:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d4ffa:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d4ffe:	6042      	str	r2, [r0, #4]
   d5000:	685a      	ldr	r2, [r3, #4]
   d5002:	6082      	str	r2, [r0, #8]
   d5004:	7a1b      	ldrb	r3, [r3, #8]
   d5006:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d5008:	4603      	mov	r3, r0
   d500a:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d500e:	6102      	str	r2, [r0, #16]
   d5010:	685a      	ldr	r2, [r3, #4]
   d5012:	6142      	str	r2, [r0, #20]
   d5014:	7a1b      	ldrb	r3, [r3, #8]
   d5016:	7603      	strb	r3, [r0, #24]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5018:	f000 fae4 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d501c:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d501e:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d5020:	7063      	strb	r3, [r4, #1]
   d5022:	7023      	strb	r3, [r4, #0]
   d5024:	bd10      	pop	{r4, pc}
	...

000d5028 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d5028:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d502a:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d502c:	4604      	mov	r4, r0
   updated = false;
   d502e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d5030:	6880      	ldr	r0, [r0, #8]
   d5032:	f001 fde9 	bl	d6c08 <__aeabi_ui2d>
   d5036:	a30e      	add	r3, pc, #56	; (adr r3, d5070 <_ZN15TinyGPSLocation3latEv+0x48>)
   d5038:	e9d3 2300 	ldrd	r2, r3, [r3]
   d503c:	f001 ff84 	bl	d6f48 <__aeabi_ddiv>
   d5040:	4606      	mov	r6, r0
   d5042:	88a0      	ldrh	r0, [r4, #4]
   d5044:	460f      	mov	r7, r1
   d5046:	f001 fdef 	bl	d6c28 <__aeabi_i2d>
   d504a:	460b      	mov	r3, r1
   d504c:	4602      	mov	r2, r0
   d504e:	4639      	mov	r1, r7
   d5050:	4630      	mov	r0, r6
   d5052:	f001 fc9d 	bl	d6990 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d5056:	7b23      	ldrb	r3, [r4, #12]
   d5058:	b11b      	cbz	r3, d5062 <_ZN15TinyGPSLocation3latEv+0x3a>
   d505a:	4602      	mov	r2, r0
   d505c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5060:	e001      	b.n	d5066 <_ZN15TinyGPSLocation3latEv+0x3e>
   d5062:	4602      	mov	r2, r0
   d5064:	460b      	mov	r3, r1
}
   d5066:	ec43 2b10 	vmov	d0, r2, r3
   d506a:	bdd0      	pop	{r4, r6, r7, pc}
   d506c:	f3af 8000 	nop.w
   d5070:	00000000 	.word	0x00000000
   d5074:	41cdcd65 	.word	0x41cdcd65

000d5078 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d5078:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d507a:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d507c:	4604      	mov	r4, r0
   updated = false;
   d507e:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d5080:	6940      	ldr	r0, [r0, #20]
   d5082:	f001 fdc1 	bl	d6c08 <__aeabi_ui2d>
   d5086:	a30e      	add	r3, pc, #56	; (adr r3, d50c0 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d5088:	e9d3 2300 	ldrd	r2, r3, [r3]
   d508c:	f001 ff5c 	bl	d6f48 <__aeabi_ddiv>
   d5090:	4606      	mov	r6, r0
   d5092:	8a20      	ldrh	r0, [r4, #16]
   d5094:	460f      	mov	r7, r1
   d5096:	f001 fdc7 	bl	d6c28 <__aeabi_i2d>
   d509a:	460b      	mov	r3, r1
   d509c:	4602      	mov	r2, r0
   d509e:	4639      	mov	r1, r7
   d50a0:	4630      	mov	r0, r6
   d50a2:	f001 fc75 	bl	d6990 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d50a6:	7e23      	ldrb	r3, [r4, #24]
   d50a8:	b11b      	cbz	r3, d50b2 <_ZN15TinyGPSLocation3lngEv+0x3a>
   d50aa:	4602      	mov	r2, r0
   d50ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d50b0:	e001      	b.n	d50b6 <_ZN15TinyGPSLocation3lngEv+0x3e>
   d50b2:	4602      	mov	r2, r0
   d50b4:	460b      	mov	r3, r1
}
   d50b6:	ec43 2b10 	vmov	d0, r2, r3
   d50ba:	bdd0      	pop	{r4, r6, r7, pc}
   d50bc:	f3af 8000 	nop.w
   d50c0:	00000000 	.word	0x00000000
   d50c4:	41cdcd65 	.word	0x41cdcd65

000d50c8 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d50c8:	b510      	push	{r4, lr}
   date = newDate;
   d50ca:	6883      	ldr	r3, [r0, #8]
   d50cc:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d50ce:	4604      	mov	r4, r0
   d50d0:	f000 fa88 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d50d4:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d50d6:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d50d8:	7063      	strb	r3, [r4, #1]
   d50da:	7023      	strb	r3, [r4, #0]
   d50dc:	bd10      	pop	{r4, pc}

000d50de <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d50de:	b510      	push	{r4, lr}
   time = newTime;
   d50e0:	6883      	ldr	r3, [r0, #8]
   d50e2:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d50e4:	4604      	mov	r4, r0
   d50e6:	f000 fa7d 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d50ea:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d50ec:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d50ee:	7063      	strb	r3, [r4, #1]
   d50f0:	7023      	strb	r3, [r4, #0]
   d50f2:	bd10      	pop	{r4, pc}

000d50f4 <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d50f4:	b510      	push	{r4, lr}
   d50f6:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d50f8:	4608      	mov	r0, r1
   d50fa:	f7ff ff26 	bl	d4f4a <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d50fe:	60a0      	str	r0, [r4, #8]
   d5100:	bd10      	pop	{r4, pc}

000d5102 <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d5102:	b510      	push	{r4, lr}
   d5104:	4604      	mov	r4, r0
   newDate = atol(term);
   d5106:	4608      	mov	r0, r1
   d5108:	f002 f856 	bl	d71b8 <atol>
   d510c:	60a0      	str	r0, [r4, #8]
   d510e:	bd10      	pop	{r4, pc}

000d5110 <_ZN11TinyGPSTime4hourEv>:
   return date / 10000;
}

uint8_t TinyGPSTime::hour()
{
   updated = false;
   d5110:	2300      	movs	r3, #0
   d5112:	7043      	strb	r3, [r0, #1]
   return time / 1000000;
   d5114:	6843      	ldr	r3, [r0, #4]
   d5116:	4802      	ldr	r0, [pc, #8]	; (d5120 <_ZN11TinyGPSTime4hourEv+0x10>)
   d5118:	fbb3 f0f0 	udiv	r0, r3, r0
}
   d511c:	b2c0      	uxtb	r0, r0
   d511e:	4770      	bx	lr
   d5120:	000f4240 	.word	0x000f4240

000d5124 <_ZN11TinyGPSTime6minuteEv>:

uint8_t TinyGPSTime::minute()
{
   updated = false;
   d5124:	2300      	movs	r3, #0
   d5126:	7043      	strb	r3, [r0, #1]
   return (time / 10000) % 100;
   d5128:	6843      	ldr	r3, [r0, #4]
   d512a:	f242 7010 	movw	r0, #10000	; 0x2710
   d512e:	fbb3 f3f0 	udiv	r3, r3, r0
   d5132:	2064      	movs	r0, #100	; 0x64
   d5134:	fbb3 f2f0 	udiv	r2, r3, r0
   d5138:	fb00 3012 	mls	r0, r0, r2, r3
}
   d513c:	b2c0      	uxtb	r0, r0
   d513e:	4770      	bx	lr

000d5140 <_ZN11TinyGPSTime6secondEv>:

uint8_t TinyGPSTime::second()
{
   updated = false;
   d5140:	2300      	movs	r3, #0
   d5142:	7043      	strb	r3, [r0, #1]
   return (time / 100) % 100;
   d5144:	6843      	ldr	r3, [r0, #4]
   d5146:	2064      	movs	r0, #100	; 0x64
   d5148:	fbb3 f3f0 	udiv	r3, r3, r0
   d514c:	fbb3 f2f0 	udiv	r2, r3, r0
   d5150:	fb00 3012 	mls	r0, r0, r2, r3
}
   d5154:	b2c0      	uxtb	r0, r0
   d5156:	4770      	bx	lr

000d5158 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d5158:	b510      	push	{r4, lr}
   val = newval;
   d515a:	68c3      	ldr	r3, [r0, #12]
   d515c:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d515e:	4604      	mov	r4, r0
   d5160:	f000 fa40 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d5164:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d5166:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5168:	7063      	strb	r3, [r4, #1]
   d516a:	7023      	strb	r3, [r4, #0]
   d516c:	bd10      	pop	{r4, pc}

000d516e <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d516e:	b510      	push	{r4, lr}
   d5170:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d5172:	4608      	mov	r0, r1
   d5174:	f7ff fee9 	bl	d4f4a <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5178:	60e0      	str	r0, [r4, #12]
   d517a:	bd10      	pop	{r4, pc}

000d517c <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d517c:	b510      	push	{r4, lr}
   val = newval;
   d517e:	68c3      	ldr	r3, [r0, #12]
   d5180:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d5182:	4604      	mov	r4, r0
   d5184:	f000 fa2e 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d5188:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d518a:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d518c:	7063      	strb	r3, [r4, #1]
   d518e:	7023      	strb	r3, [r4, #0]
   d5190:	bd10      	pop	{r4, pc}

000d5192 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d5192:	b510      	push	{r4, lr}
   d5194:	4604      	mov	r4, r0
   newval = atol(term);
   d5196:	4608      	mov	r0, r1
   d5198:	f002 f80e 	bl	d71b8 <atol>
   d519c:	60e0      	str	r0, [r4, #12]
   d519e:	bd10      	pop	{r4, pc}

000d51a0 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d51a0:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d51a2:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d51a4:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d51a6:	3010      	adds	r0, #16
   d51a8:	f002 f85e 	bl	d7268 <strcpy>
   d51ac:	f000 fa1a 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d51b0:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d51b2:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d51b4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d51b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d51bc:	bd10      	pop	{r4, pc}

000d51be <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d51be:	2210      	movs	r2, #16
   d51c0:	f002 b862 	b.w	d7288 <strncpy>

000d51c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d51c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d51c6:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d51ca:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d51cc:	2d00      	cmp	r5, #0
   d51ce:	d067      	beq.n	d52a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xdc>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d51d0:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d51d4:	f7ff fea9 	bl	d4f2a <_ZN11TinyGPSPlus7fromHexEc>
   d51d8:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d51dc:	4602      	mov	r2, r0
   d51de:	4620      	mov	r0, r4
   d51e0:	f7ff fea3 	bl	d4f2a <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d51e4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   d51e8:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d51ec:	b2c0      	uxtb	r0, r0
   d51ee:	4283      	cmp	r3, r0
   d51f0:	d14f      	bne.n	d5292 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xce>
    {
      passedChecksumCount++;
   d51f2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d51f6:	3301      	adds	r3, #1
   d51f8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d51fc:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d5200:	b123      	cbz	r3, d520c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d5202:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d5206:	3301      	adds	r3, #1
   d5208:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

      switch(curSentenceType)
   d520c:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d5210:	b1b3      	cbz	r3, d5240 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7c>
   d5212:	2b01      	cmp	r3, #1
   d5214:	d12a      	bne.n	d526c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
      {
      case GPS_SENTENCE_GPRMC:
        date.commit();
   d5216:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d521a:	f7ff ff55 	bl	d50c8 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d521e:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5222:	f7ff ff5c 	bl	d50de <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d5226:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d522a:	b1fb      	cbz	r3, d526c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
        {
           location.commit();
   d522c:	4620      	mov	r0, r4
   d522e:	f7ff fee1 	bl	d4ff4 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d5232:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5236:	f7ff ff8f 	bl	d5158 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d523a:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d523e:	e013      	b.n	d5268 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa4>
        }
        break;
      case GPS_SENTENCE_GPGGA:
        time.commit();
   d5240:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5244:	f7ff ff4b 	bl	d50de <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d5248:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d524c:	b133      	cbz	r3, d525c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x98>
        {
          location.commit();
   d524e:	4620      	mov	r0, r4
   d5250:	f7ff fed0 	bl	d4ff4 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d5254:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d5258:	f7ff ff7e 	bl	d5158 <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
   d525c:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d5260:	f7ff ff8c 	bl	d517c <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d5264:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d5268:	f7ff ff76 	bl	d5158 <_ZN14TinyGPSDecimal6commitEv>
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d526c:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d5270:	2e00      	cmp	r6, #0
   d5272:	f000 80c5 	beq.w	d5400 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d5276:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d527a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d527c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d527e:	f001 ffe9 	bl	d7254 <strcmp>
   d5282:	2800      	cmp	r0, #0
   d5284:	f040 80bc 	bne.w	d5400 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
         p->commit();
   d5288:	4630      	mov	r0, r6
   d528a:	f7ff ff89 	bl	d51a0 <_ZN13TinyGPSCustom6commitEv>
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d528e:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d5290:	e7ee      	b.n	d5270 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d5292:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d5296:	3301      	adds	r3, #1
   d5298:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    }

    return false;
   d529c:	2500      	movs	r5, #0
   d529e:	e0af      	b.n	d5400 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d52a0:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d52a4:	bb2a      	cbnz	r2, d52f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x12e>
  {
    if (!strcmp(term, _GPRMCterm))
   d52a6:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
   d52aa:	4956      	ldr	r1, [pc, #344]	; (d5404 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
   d52ac:	4638      	mov	r0, r7
   d52ae:	f001 ffd1 	bl	d7254 <strcmp>
   d52b2:	b908      	cbnz	r0, d52b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d52b4:	2301      	movs	r3, #1
   d52b6:	e008      	b.n	d52ca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
    else if (!strcmp(term, _GPGGAterm))
   d52b8:	4953      	ldr	r1, [pc, #332]	; (d5408 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x244>)
   d52ba:	4638      	mov	r0, r7
   d52bc:	f001 ffca 	bl	d7254 <strcmp>
   d52c0:	b910      	cbnz	r0, d52c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d52c2:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
   d52c6:	e002      	b.n	d52ce <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10a>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d52c8:	2302      	movs	r3, #2
   d52ca:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d52ce:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d52d2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d52d6:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d52da:	2e00      	cmp	r6, #0
   d52dc:	f000 8090 	beq.w	d5400 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d52e0:	4639      	mov	r1, r7
   d52e2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d52e4:	f001 ffb6 	bl	d7254 <strcmp>
   d52e8:	2800      	cmp	r0, #0
   d52ea:	f280 8085 	bge.w	d53f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x234>
   d52ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
   d52f0:	e7ef      	b.n	d52d2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d52f2:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d52f6:	2902      	cmp	r1, #2
   d52f8:	d066      	beq.n	d53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d52fa:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d52fe:	2b00      	cmp	r3, #0
   d5300:	d062      	beq.n	d53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    switch(COMBINE(curSentenceType, curTermNumber))
   d5302:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d5306:	3a01      	subs	r2, #1
   d5308:	2a28      	cmp	r2, #40	; 0x28
   d530a:	d85d      	bhi.n	d53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d530c:	e8df f002 	tbb	[pc, r2]
   d5310:	2a232015 	.word	0x2a232015
   d5314:	534d4631 	.word	0x534d4631
   d5318:	5c5c5c57 	.word	0x5c5c5c57
   d531c:	5c5c5c5c 	.word	0x5c5c5c5c
   d5320:	5c5c5c5c 	.word	0x5c5c5c5c
   d5324:	5c5c5c5c 	.word	0x5c5c5c5c
   d5328:	5c5c5c5c 	.word	0x5c5c5c5c
   d532c:	5c5c5c5c 	.word	0x5c5c5c5c
   d5330:	23201b15 	.word	0x23201b15
   d5334:	3c38312a 	.word	0x3c38312a
   d5338:	40          	.byte	0x40
   d5339:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
   d533a:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d533e:	3048      	adds	r0, #72	; 0x48
   d5340:	f7ff fed8 	bl	d50f4 <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d5344:	e040      	b.n	d53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d5346:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d534a:	4243      	negs	r3, r0
   d534c:	4143      	adcs	r3, r0
   d534e:	e029      	b.n	d53a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1e0>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d5350:	f100 011c 	add.w	r1, r0, #28
   d5354:	e008      	b.n	d5368 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
   d5356:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d535a:	424b      	negs	r3, r1
   d535c:	414b      	adcs	r3, r1
   d535e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d5362:	e031      	b.n	d53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d5364:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d5368:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d536c:	f7ff fe12 	bl	d4f94 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d5370:	e02a      	b.n	d53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
   d5372:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d5376:	4253      	negs	r3, r2
   d5378:	4153      	adcs	r3, r2
   d537a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d537e:	e023      	b.n	d53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
   d5380:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5384:	3058      	adds	r0, #88	; 0x58
   d5386:	e01d      	b.n	d53c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
   d5388:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d538c:	3068      	adds	r0, #104	; 0x68
   d538e:	e019      	b.n	d53c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
   d5390:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5394:	3038      	adds	r0, #56	; 0x38
   d5396:	f7ff feb4 	bl	d5102 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d539a:	e015      	b.n	d53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d539c:	2b30      	cmp	r3, #48	; 0x30
   d539e:	bf94      	ite	ls
   d53a0:	2300      	movls	r3, #0
   d53a2:	2301      	movhi	r3, #1
   d53a4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d53a8:	e00e      	b.n	d53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
   d53aa:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d53ae:	3088      	adds	r0, #136	; 0x88
   d53b0:	f7ff feef 	bl	d5192 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d53b4:	e008      	b.n	d53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
   d53b6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d53ba:	3098      	adds	r0, #152	; 0x98
   d53bc:	e002      	b.n	d53c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
   d53be:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d53c2:	3078      	adds	r0, #120	; 0x78
   d53c4:	f7ff fed3 	bl	d516e <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d53c8:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
    if (p->termNumber == curTermNumber)
         p->set(term);
   d53cc:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d53d0:	b1b6      	cbz	r6, d5400 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d53d2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d53d6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d53d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d53da:	f001 ff3b 	bl	d7254 <strcmp>
   d53de:	b978      	cbnz	r0, d5400 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d53e0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d53e2:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d53e6:	429a      	cmp	r2, r3
   d53e8:	dc0a      	bgt.n	d5400 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
    if (p->termNumber == curTermNumber)
   d53ea:	d103      	bne.n	d53f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x230>
         p->set(term);
   d53ec:	4639      	mov	r1, r7
   d53ee:	4630      	mov	r0, r6
   d53f0:	f7ff fee5 	bl	d51be <_ZN13TinyGPSCustom3setEPKc>
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d53f4:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d53f6:	e7eb      	b.n	d53d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d53f8:	d002      	beq.n	d5400 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
       customCandidates = NULL;
   d53fa:	2300      	movs	r3, #0
   d53fc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d5400:	4628      	mov	r0, r5
   d5402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5404:	000d79e3 	.word	0x000d79e3
   d5408:	000d79e9 	.word	0x000d79e9

000d540c <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d540c:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d540e:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d5412:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d5414:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d5418:	4604      	mov	r4, r0
   d541a:	460d      	mov	r5, r1
  ++encodedCharCount;
   d541c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d5420:	d02a      	beq.n	d5478 <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d5422:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d5426:	d804      	bhi.n	d5432 <_ZN11TinyGPSPlus6encodeEc+0x26>
   d5428:	290a      	cmp	r1, #10
   d542a:	d00c      	beq.n	d5446 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d542c:	290d      	cmp	r1, #13
   d542e:	d132      	bne.n	d5496 <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d5430:	e009      	b.n	d5446 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d5432:	292a      	cmp	r1, #42	; 0x2a
   d5434:	d007      	beq.n	d5446 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d5436:	292c      	cmp	r1, #44	; 0x2c
   d5438:	d12d      	bne.n	d5496 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d543a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d543e:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d5442:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d5446:	2b0e      	cmp	r3, #14
   d5448:	f04f 0000 	mov.w	r0, #0
   d544c:	d805      	bhi.n	d545a <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d544e:	4423      	add	r3, r4
   d5450:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d5454:	4620      	mov	r0, r4
   d5456:	f7ff feb5 	bl	d51c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d545a:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d545e:	3301      	adds	r3, #1
   d5460:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d5464:	2300      	movs	r3, #0
   d5466:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d546a:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d546e:	425d      	negs	r5, r3
   d5470:	415d      	adcs	r5, r3
   d5472:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
      return isValidSentence;
   d5476:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d5478:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d547a:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d547c:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
   d5480:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    parity = 0;
   d5484:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d5488:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    isChecksumTerm = false;
   d548c:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    sentenceHasFix = false;
   d5490:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d5494:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d5496:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d5498:	bf9f      	itttt	ls
   d549a:	1c5a      	addls	r2, r3, #1
   d549c:	191b      	addls	r3, r3, r4
   d549e:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d54a2:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d54a6:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d54aa:	b928      	cbnz	r0, d54b8 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d54ac:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d54b0:	404d      	eors	r5, r1
   d54b2:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d54b6:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d54b8:	2000      	movs	r0, #0
  }

  return false;
}
   d54ba:	bd38      	pop	{r3, r4, r5, pc}

000d54bc <_GLOBAL__sub_I__ZN11TinyGPSPlusC2Ev>:
   d54bc:	f000 b812 	b.w	d54e4 <HAL_Pin_Map>

000d54c0 <_GLOBAL__sub_I_CellularHelper.cpp>:
   d54c0:	f000 b810 	b.w	d54e4 <HAL_Pin_Map>

000d54c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <netdb_freeaddrinfo+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	689b      	ldr	r3, [r3, #8]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030268 	.word	0x00030268

000d54d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <netdb_getaddrinfo+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	68db      	ldr	r3, [r3, #12]
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030268 	.word	0x00030268

000d54e4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <HAL_Pin_Map+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	681b      	ldr	r3, [r3, #0]
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	0003022c 	.word	0x0003022c

000d54f4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <HAL_Pin_Mode+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	689b      	ldr	r3, [r3, #8]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	0003022c 	.word	0x0003022c

000d5504 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <HAL_Get_Pin_Mode+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	68db      	ldr	r3, [r3, #12]
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	0003022c 	.word	0x0003022c

000d5514 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <HAL_GPIO_Write+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	691b      	ldr	r3, [r3, #16]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	0003022c 	.word	0x0003022c

000d5524 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <HAL_SPI_Begin+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	681b      	ldr	r3, [r3, #0]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030230 	.word	0x00030230

000d5534 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <HAL_SPI_Set_Bit_Order+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	689b      	ldr	r3, [r3, #8]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	00030230 	.word	0x00030230

000d5544 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <HAL_SPI_Set_Data_Mode+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	68db      	ldr	r3, [r3, #12]
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	00030230 	.word	0x00030230

000d5554 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <HAL_SPI_Set_Clock_Divider+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	691b      	ldr	r3, [r3, #16]
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	00030230 	.word	0x00030230

000d5564 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <HAL_SPI_Send_Receive_Data+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	695b      	ldr	r3, [r3, #20]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	00030230 	.word	0x00030230

000d5574 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <HAL_SPI_Init+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	69db      	ldr	r3, [r3, #28]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	00030230 	.word	0x00030230

000d5584 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <HAL_SPI_Is_Enabled+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	6a1b      	ldr	r3, [r3, #32]
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	00030230 	.word	0x00030230

000d5594 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <HAL_SPI_Info+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	00030230 	.word	0x00030230

000d55a4 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <HAL_SPI_Acquire+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	00030230 	.word	0x00030230

000d55b4 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <HAL_SPI_Release+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030230 	.word	0x00030230

000d55c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <HAL_RNG_GetRandomNumber+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	685b      	ldr	r3, [r3, #4]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030218 	.word	0x00030218

000d55d4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <HAL_Delay_Microseconds+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	68db      	ldr	r3, [r3, #12]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030218 	.word	0x00030218

000d55e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	695b      	ldr	r3, [r3, #20]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030218 	.word	0x00030218

000d55f4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <os_thread_is_current+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	689b      	ldr	r3, [r3, #8]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030248 	.word	0x00030248

000d5604 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <os_thread_join+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	691b      	ldr	r3, [r3, #16]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030248 	.word	0x00030248

000d5614 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <os_thread_cleanup+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	695b      	ldr	r3, [r3, #20]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030248 	.word	0x00030248

000d5624 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <os_mutex_recursive_create+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030248 	.word	0x00030248

000d5634 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <os_mutex_recursive_destroy+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030248 	.word	0x00030248

000d5644 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <inet_inet_ntop+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	695b      	ldr	r3, [r3, #20]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030264 	.word	0x00030264

000d5654 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <HAL_USART_Init+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	681b      	ldr	r3, [r3, #0]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	0003023c 	.word	0x0003023c

000d5664 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <HAL_USART_Write_Data+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	68db      	ldr	r3, [r3, #12]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	0003023c 	.word	0x0003023c

000d5674 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <HAL_USART_Available_Data+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	691b      	ldr	r3, [r3, #16]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	0003023c 	.word	0x0003023c

000d5684 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <HAL_USART_Read_Data+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	695b      	ldr	r3, [r3, #20]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	0003023c 	.word	0x0003023c

000d5694 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <HAL_USART_Peek_Data+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	699b      	ldr	r3, [r3, #24]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	0003023c 	.word	0x0003023c

000d56a4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <HAL_USART_Flush_Data+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	69db      	ldr	r3, [r3, #28]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	0003023c 	.word	0x0003023c

000d56b4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <HAL_USART_Is_Enabled+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6a1b      	ldr	r3, [r3, #32]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	0003023c 	.word	0x0003023c

000d56c4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <HAL_USART_Available_Data_For_Write+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	0003023c 	.word	0x0003023c

000d56d4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <HAL_USART_BeginConfig+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	0003023c 	.word	0x0003023c

000d56e4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <HAL_I2C_Begin+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	68db      	ldr	r3, [r3, #12]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030228 	.word	0x00030228

000d56f4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <HAL_I2C_Begin_Transmission+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	699b      	ldr	r3, [r3, #24]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030228 	.word	0x00030228

000d5704 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <HAL_I2C_End_Transmission+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	69db      	ldr	r3, [r3, #28]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030228 	.word	0x00030228

000d5714 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <HAL_I2C_Write_Data+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	6a1b      	ldr	r3, [r3, #32]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030228 	.word	0x00030228

000d5724 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <HAL_I2C_Available_Data+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030228 	.word	0x00030228

000d5734 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <HAL_I2C_Read_Data+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	00030228 	.word	0x00030228

000d5744 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <HAL_I2C_Peek_Data+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	00030228 	.word	0x00030228

000d5754 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <HAL_I2C_Flush_Data+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	00030228 	.word	0x00030228

000d5764 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <HAL_I2C_Is_Enabled+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	00030228 	.word	0x00030228

000d5774 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <HAL_I2C_Init+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030228 	.word	0x00030228

000d5784 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <HAL_USB_USART_Init+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	681b      	ldr	r3, [r3, #0]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	0003024c 	.word	0x0003024c

000d5794 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <HAL_USB_USART_Begin+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	685b      	ldr	r3, [r3, #4]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	0003024c 	.word	0x0003024c

000d57a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <HAL_USB_USART_Available_Data+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	691b      	ldr	r3, [r3, #16]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	0003024c 	.word	0x0003024c

000d57b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	695b      	ldr	r3, [r3, #20]
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	0003024c 	.word	0x0003024c

000d57c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <HAL_USB_USART_Receive_Data+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	699b      	ldr	r3, [r3, #24]
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	0003024c 	.word	0x0003024c

000d57d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <HAL_USB_USART_Send_Data+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	69db      	ldr	r3, [r3, #28]
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	0003024c 	.word	0x0003024c

000d57e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <HAL_USB_USART_Flush_Data+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	6a1b      	ldr	r3, [r3, #32]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	0003024c 	.word	0x0003024c

000d57f4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <panic_+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030260 	.word	0x00030260

000d5804 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <set_system_mode+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	685b      	ldr	r3, [r3, #4]
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030220 	.word	0x00030220

000d5814 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <system_delay_ms+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	695b      	ldr	r3, [r3, #20]
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030220 	.word	0x00030220

000d5824 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <system_thread_set_state+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030220 	.word	0x00030220

000d5834 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b03      	ldr	r3, [pc, #12]	; (d5844 <system_ctrl_set_app_request_handler+0x10>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d583e:	9301      	str	r3, [sp, #4]
   d5840:	bd08      	pop	{r3, pc}
   d5842:	0000      	.short	0x0000
   d5844:	00030220 	.word	0x00030220

000d5848 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b03      	ldr	r3, [pc, #12]	; (d5858 <system_ctrl_set_result+0x10>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5852:	9301      	str	r3, [sp, #4]
   d5854:	bd08      	pop	{r3, pc}
   d5856:	0000      	.short	0x0000
   d5858:	00030220 	.word	0x00030220

000d585c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <network_connect+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	685b      	ldr	r3, [r3, #4]
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	00030240 	.word	0x00030240

000d586c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <network_connecting+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	689b      	ldr	r3, [r3, #8]
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030240 	.word	0x00030240

000d587c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <network_disconnect+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	68db      	ldr	r3, [r3, #12]
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	00030240 	.word	0x00030240

000d588c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <network_ready+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	691b      	ldr	r3, [r3, #16]
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030240 	.word	0x00030240

000d589c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <network_on+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	695b      	ldr	r3, [r3, #20]
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	00030240 	.word	0x00030240

000d58ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b02      	ldr	r3, [pc, #8]	; (d58b8 <network_off+0xc>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	699b      	ldr	r3, [r3, #24]
   d58b4:	9301      	str	r3, [sp, #4]
   d58b6:	bd08      	pop	{r3, pc}
   d58b8:	00030240 	.word	0x00030240

000d58bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <network_listen+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	69db      	ldr	r3, [r3, #28]
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	00030240 	.word	0x00030240

000d58cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <network_listening+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	6a1b      	ldr	r3, [r3, #32]
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	00030240 	.word	0x00030240

000d58dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <network_set_listen_timeout+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	00030240 	.word	0x00030240

000d58ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <network_get_listen_timeout+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	00030240 	.word	0x00030240

000d58fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d58fc:	b508      	push	{r3, lr}
   d58fe:	4b02      	ldr	r3, [pc, #8]	; (d5908 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5904:	9301      	str	r3, [sp, #4]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	00030244 	.word	0x00030244

000d590c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <malloc+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	681b      	ldr	r3, [r3, #0]
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	0003021c 	.word	0x0003021c

000d591c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <free+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	685b      	ldr	r3, [r3, #4]
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	0003021c 	.word	0x0003021c

000d592c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <vsnprintf+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	0003021c 	.word	0x0003021c

000d593c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d593c:	2200      	movs	r2, #0
   d593e:	4611      	mov	r1, r2
   d5940:	6840      	ldr	r0, [r0, #4]
   d5942:	f7ff bfc3 	b.w	d58cc <network_listening>

000d5946 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5946:	2200      	movs	r2, #0
   d5948:	4611      	mov	r1, r2
   d594a:	6840      	ldr	r0, [r0, #4]
   d594c:	f7ff bfce 	b.w	d58ec <network_get_listen_timeout>

000d5950 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5950:	2200      	movs	r2, #0
   d5952:	6840      	ldr	r0, [r0, #4]
   d5954:	f7ff bfc2 	b.w	d58dc <network_set_listen_timeout>

000d5958 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5958:	2200      	movs	r2, #0
   d595a:	f081 0101 	eor.w	r1, r1, #1
   d595e:	6840      	ldr	r0, [r0, #4]
   d5960:	f7ff bfac 	b.w	d58bc <network_listen>

000d5964 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5964:	2300      	movs	r3, #0
   d5966:	461a      	mov	r2, r3
   d5968:	4619      	mov	r1, r3
   d596a:	6840      	ldr	r0, [r0, #4]
   d596c:	f7ff bf9e 	b.w	d58ac <network_off>

000d5970 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5970:	2300      	movs	r3, #0
   d5972:	461a      	mov	r2, r3
   d5974:	4619      	mov	r1, r3
   d5976:	6840      	ldr	r0, [r0, #4]
   d5978:	f7ff bf90 	b.w	d589c <network_on>

000d597c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d597c:	2200      	movs	r2, #0
   d597e:	4611      	mov	r1, r2
   d5980:	6840      	ldr	r0, [r0, #4]
   d5982:	f7ff bf83 	b.w	d588c <network_ready>

000d5986 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5986:	2200      	movs	r2, #0
   d5988:	4611      	mov	r1, r2
   d598a:	6840      	ldr	r0, [r0, #4]
   d598c:	f7ff bf6e 	b.w	d586c <network_connecting>

000d5990 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5990:	2200      	movs	r2, #0
   d5992:	2102      	movs	r1, #2
   d5994:	6840      	ldr	r0, [r0, #4]
   d5996:	f7ff bf71 	b.w	d587c <network_disconnect>

000d599a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d599a:	2300      	movs	r3, #0
   d599c:	461a      	mov	r2, r3
   d599e:	6840      	ldr	r0, [r0, #4]
   d59a0:	f7ff bf5c 	b.w	d585c <network_connect>

000d59a4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d59a4:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d59a6:	2203      	movs	r2, #3
   d59a8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d59aa:	4a02      	ldr	r2, [pc, #8]	; (d59b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d59ac:	601a      	str	r2, [r3, #0]
   d59ae:	4770      	bx	lr
   d59b0:	2003e3dc 	.word	0x2003e3dc
   d59b4:	000d7a1c 	.word	0x000d7a1c

000d59b8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d59b8:	2100      	movs	r1, #0
   d59ba:	f7ff bdf3 	b.w	d55a4 <HAL_SPI_Acquire>

000d59be <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d59be:	2100      	movs	r1, #0
   d59c0:	f7ff bdf8 	b.w	d55b4 <HAL_SPI_Release>

000d59c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d59c4:	b510      	push	{r4, lr}
   d59c6:	4604      	mov	r4, r0
{
    _spi = spi;
   d59c8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d59ca:	4608      	mov	r0, r1
   d59cc:	f7ff fdd2 	bl	d5574 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d59d0:	2300      	movs	r3, #0
   d59d2:	6063      	str	r3, [r4, #4]
}
   d59d4:	4620      	mov	r0, r4
   d59d6:	bd10      	pop	{r4, pc}

000d59d8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d59d8:	b510      	push	{r4, lr}
   d59da:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d59dc:	7800      	ldrb	r0, [r0, #0]
   d59de:	f7ff ffeb 	bl	d59b8 <_ZN8SPIClass4lockEv.isra.0>
   d59e2:	b948      	cbnz	r0, d59f8 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d59e4:	7820      	ldrb	r0, [r4, #0]
   d59e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d59ea:	f7ff fd9b 	bl	d5524 <HAL_SPI_Begin>
        unlock();
   d59ee:	7820      	ldrb	r0, [r4, #0]
    }
}
   d59f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d59f4:	f7ff bfe3 	b.w	d59be <_ZN8SPIClass6unlockEv.isra.1>
   d59f8:	bd10      	pop	{r4, pc}

000d59fa <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d59fa:	b538      	push	{r3, r4, r5, lr}
   d59fc:	4604      	mov	r4, r0
    if (!lock())
   d59fe:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5a00:	460d      	mov	r5, r1
    if (!lock())
   d5a02:	f7ff ffd9 	bl	d59b8 <_ZN8SPIClass4lockEv.isra.0>
   d5a06:	b940      	cbnz	r0, d5a1a <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5a08:	7820      	ldrb	r0, [r4, #0]
   d5a0a:	4629      	mov	r1, r5
   d5a0c:	f7ff fd92 	bl	d5534 <HAL_SPI_Set_Bit_Order>
        unlock();
   d5a10:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5a16:	f7ff bfd2 	b.w	d59be <_ZN8SPIClass6unlockEv.isra.1>
   d5a1a:	bd38      	pop	{r3, r4, r5, pc}

000d5a1c <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5a1c:	b538      	push	{r3, r4, r5, lr}
   d5a1e:	4604      	mov	r4, r0
    if (!lock())
   d5a20:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5a22:	460d      	mov	r5, r1
    if (!lock())
   d5a24:	f7ff ffc8 	bl	d59b8 <_ZN8SPIClass4lockEv.isra.0>
   d5a28:	b940      	cbnz	r0, d5a3c <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5a2a:	7820      	ldrb	r0, [r4, #0]
   d5a2c:	4629      	mov	r1, r5
   d5a2e:	f7ff fd89 	bl	d5544 <HAL_SPI_Set_Data_Mode>
        unlock();
   d5a32:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5a38:	f7ff bfc1 	b.w	d59be <_ZN8SPIClass6unlockEv.isra.1>
   d5a3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5a40 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5a40:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5a42:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5a44:	6018      	str	r0, [r3, #0]
   d5a46:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5a48:	6818      	ldr	r0, [r3, #0]
   d5a4a:	4288      	cmp	r0, r1
   d5a4c:	b2e5      	uxtb	r5, r4
   d5a4e:	d906      	bls.n	d5a5e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5a50:	3401      	adds	r4, #1
   d5a52:	2c08      	cmp	r4, #8
   d5a54:	d002      	beq.n	d5a5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5a56:	0840      	lsrs	r0, r0, #1
   d5a58:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5a5a:	e7f5      	b.n	d5a48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5a5c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5a60:	5d5b      	ldrb	r3, [r3, r5]
   d5a62:	7013      	strb	r3, [r2, #0]
   d5a64:	bd30      	pop	{r4, r5, pc}
   d5a66:	bf00      	nop
   d5a68:	000d7a48 	.word	0x000d7a48

000d5a6c <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a70:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5a72:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5a74:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5a76:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d5a78:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5a7a:	460e      	mov	r6, r1
   d5a7c:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5a7e:	f7ff ff9b 	bl	d59b8 <_ZN8SPIClass4lockEv.isra.0>
   d5a82:	4605      	mov	r5, r0
   d5a84:	bb00      	cbnz	r0, d5ac8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5a86:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5a8a:	4601      	mov	r1, r0
   d5a8c:	2214      	movs	r2, #20
   d5a8e:	a803      	add	r0, sp, #12
   d5a90:	f001 fbaf 	bl	d71f2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a94:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5a96:	462a      	mov	r2, r5
   d5a98:	a903      	add	r1, sp, #12
   d5a9a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a9c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d5aa0:	f7ff fd78 	bl	d5594 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5aa4:	ab02      	add	r3, sp, #8
   d5aa6:	f10d 0207 	add.w	r2, sp, #7
   d5aaa:	fb07 f106 	mul.w	r1, r7, r6
   d5aae:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d5ab0:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5ab4:	f7ff ffc4 	bl	d5a40 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d5ab8:	7820      	ldrb	r0, [r4, #0]
   d5aba:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5abe:	f7ff fd49 	bl	d5554 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d5ac2:	7820      	ldrb	r0, [r4, #0]
   d5ac4:	f7ff ff7b 	bl	d59be <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d5ac8:	9802      	ldr	r0, [sp, #8]
   d5aca:	b008      	add	sp, #32
   d5acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5ad0 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5ad0:	b538      	push	{r3, r4, r5, lr}
   d5ad2:	4604      	mov	r4, r0
    if (!lock())
   d5ad4:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5ad6:	460d      	mov	r5, r1
    if (!lock())
   d5ad8:	f7ff ff6e 	bl	d59b8 <_ZN8SPIClass4lockEv.isra.0>
   d5adc:	b9c8      	cbnz	r0, d5b12 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d5ade:	6861      	ldr	r1, [r4, #4]
   d5ae0:	b171      	cbz	r1, d5b00 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d5ae2:	4b0c      	ldr	r3, [pc, #48]	; (d5b14 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d5ae4:	5cc2      	ldrb	r2, [r0, r3]
   d5ae6:	42aa      	cmp	r2, r5
   d5ae8:	d002      	beq.n	d5af0 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d5aea:	3001      	adds	r0, #1
   d5aec:	2808      	cmp	r0, #8
   d5aee:	d1f9      	bne.n	d5ae4 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d5af0:	3001      	adds	r0, #1
   d5af2:	b2c0      	uxtb	r0, r0
   d5af4:	40c1      	lsrs	r1, r0
   d5af6:	2201      	movs	r2, #1
   d5af8:	4620      	mov	r0, r4
   d5afa:	f7ff ffb7 	bl	d5a6c <_ZN8SPIClass13setClockSpeedEjj>
   d5afe:	e003      	b.n	d5b08 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5b00:	4629      	mov	r1, r5
   d5b02:	7820      	ldrb	r0, [r4, #0]
   d5b04:	f7ff fd26 	bl	d5554 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d5b08:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d5b0e:	f7ff bf56 	b.w	d59be <_ZN8SPIClass6unlockEv.isra.1>
   d5b12:	bd38      	pop	{r3, r4, r5, pc}
   d5b14:	000d7a48 	.word	0x000d7a48

000d5b18 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5b18:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d5b1a:	7800      	ldrb	r0, [r0, #0]
   d5b1c:	f7ff fd22 	bl	d5564 <HAL_SPI_Send_Receive_Data>
}
   d5b20:	b2c0      	uxtb	r0, r0
   d5b22:	bd08      	pop	{r3, pc}

000d5b24 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5b24:	7800      	ldrb	r0, [r0, #0]
   d5b26:	f7ff bd2d 	b.w	d5584 <HAL_SPI_Is_Enabled>

000d5b2a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5b2a:	b510      	push	{r4, lr}
   d5b2c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5b2e:	6800      	ldr	r0, [r0, #0]
   d5b30:	b118      	cbz	r0, d5b3a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5b32:	f7ff fef3 	bl	d591c <free>
            wakeupSource_ = nullptr;
   d5b36:	2300      	movs	r3, #0
   d5b38:	6023      	str	r3, [r4, #0]
   d5b3a:	bd10      	pop	{r4, pc}

000d5b3c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b3c:	b510      	push	{r4, lr}
   d5b3e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5b40:	f7ff fff3 	bl	d5b2a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b44:	4620      	mov	r0, r4
   d5b46:	bd10      	pop	{r4, pc}

000d5b48 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b48:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b4a:	4c09      	ldr	r4, [pc, #36]	; (d5b70 <_GLOBAL__sub_I_System+0x28>)
   d5b4c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b52:	6020      	str	r0, [r4, #0]
   d5b54:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b56:	71a0      	strb	r0, [r4, #6]
   d5b58:	8120      	strh	r0, [r4, #8]
   d5b5a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b5c:	f7ff fe52 	bl	d5804 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5b60:	4620      	mov	r0, r4
   d5b62:	4a04      	ldr	r2, [pc, #16]	; (d5b74 <_GLOBAL__sub_I_System+0x2c>)
   d5b64:	4904      	ldr	r1, [pc, #16]	; (d5b78 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5b6a:	f000 bda1 	b.w	d66b0 <__aeabi_atexit>
   d5b6e:	bf00      	nop
   d5b70:	2003e3e4 	.word	0x2003e3e4
   d5b74:	2003e2c0 	.word	0x2003e2c0
   d5b78:	000d5b3d 	.word	0x000d5b3d

000d5b7c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5b7c:	b510      	push	{r4, lr}
   d5b7e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5b80:	6800      	ldr	r0, [r0, #0]
   d5b82:	b108      	cbz	r0, d5b88 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5b84:	f7ff fd56 	bl	d5634 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5b88:	4620      	mov	r0, r4
   d5b8a:	bd10      	pop	{r4, pc}

000d5b8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5b8c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b8e:	4c06      	ldr	r4, [pc, #24]	; (d5ba8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5b90:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5b92:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b94:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5b96:	f7ff fd45 	bl	d5624 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5b9a:	4620      	mov	r0, r4
   d5b9c:	4a03      	ldr	r2, [pc, #12]	; (d5bac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5b9e:	4904      	ldr	r1, [pc, #16]	; (d5bb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5ba4:	f000 bd84 	b.w	d66b0 <__aeabi_atexit>
   d5ba8:	2003e3f0 	.word	0x2003e3f0
   d5bac:	2003e2c0 	.word	0x2003e2c0
   d5bb0:	000d5b7d 	.word	0x000d5b7d

000d5bb4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bb6:	4606      	mov	r6, r0
   d5bb8:	460d      	mov	r5, r1
   d5bba:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5bbc:	2400      	movs	r4, #0
  while (size--) {
   d5bbe:	42bd      	cmp	r5, r7
   d5bc0:	d00c      	beq.n	d5bdc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5bc2:	6833      	ldr	r3, [r6, #0]
   d5bc4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5bc8:	689b      	ldr	r3, [r3, #8]
   d5bca:	4630      	mov	r0, r6
   d5bcc:	4798      	blx	r3
     if (chunk>=0)
   d5bce:	2800      	cmp	r0, #0
   d5bd0:	db01      	blt.n	d5bd6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5bd2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5bd4:	e7f3      	b.n	d5bbe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5bd6:	2c00      	cmp	r4, #0
   d5bd8:	bf08      	it	eq
   d5bda:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5bdc:	4620      	mov	r0, r4
   d5bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5be0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5be0:	b570      	push	{r4, r5, r6, lr}
   d5be2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5be4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5be6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5be8:	b149      	cbz	r1, d5bfe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5bea:	f001 fb45 	bl	d7278 <strlen>
   d5bee:	682b      	ldr	r3, [r5, #0]
   d5bf0:	4602      	mov	r2, r0
   d5bf2:	4621      	mov	r1, r4
   d5bf4:	4628      	mov	r0, r5
   d5bf6:	68db      	ldr	r3, [r3, #12]
    }
   d5bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5bfc:	4718      	bx	r3
    }
   d5bfe:	bd70      	pop	{r4, r5, r6, pc}

000d5c00 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c00:	6803      	ldr	r3, [r0, #0]
   d5c02:	689b      	ldr	r3, [r3, #8]
   d5c04:	4718      	bx	r3

000d5c06 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c06:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c08:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c0a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c0c:	f7ff fff8 	bl	d5c00 <_ZN5Print5printEc>
  n += print('\n');
   d5c10:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5c12:	4604      	mov	r4, r0
  n += print('\n');
   d5c14:	4628      	mov	r0, r5
   d5c16:	f7ff fff3 	bl	d5c00 <_ZN5Print5printEc>
  return n;
}
   d5c1a:	4420      	add	r0, r4
   d5c1c:	bd38      	pop	{r3, r4, r5, pc}

000d5c1e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c1e:	b530      	push	{r4, r5, lr}
   d5c20:	b08b      	sub	sp, #44	; 0x2c
   d5c22:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c24:	2100      	movs	r1, #0
   d5c26:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c2a:	2a01      	cmp	r2, #1
   d5c2c:	bf98      	it	ls
   d5c2e:	220a      	movls	r2, #10
   d5c30:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5c34:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5c38:	fb05 3312 	mls	r3, r5, r2, r3
   d5c3c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c40:	2b09      	cmp	r3, #9
   d5c42:	bf94      	ite	ls
   d5c44:	3330      	addls	r3, #48	; 0x30
   d5c46:	3337      	addhi	r3, #55	; 0x37
   d5c48:	b2db      	uxtb	r3, r3
   d5c4a:	4621      	mov	r1, r4
   d5c4c:	f804 3901 	strb.w	r3, [r4], #-1
   d5c50:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5c52:	2d00      	cmp	r5, #0
   d5c54:	d1ee      	bne.n	d5c34 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5c56:	f7ff ffc3 	bl	d5be0 <_ZN5Print5writeEPKc>
}
   d5c5a:	b00b      	add	sp, #44	; 0x2c
   d5c5c:	bd30      	pop	{r4, r5, pc}

000d5c5e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5c5e:	b40c      	push	{r2, r3}
   d5c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c64:	b087      	sub	sp, #28
   d5c66:	af00      	add	r7, sp, #0
   d5c68:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5c6c:	4605      	mov	r5, r0
   d5c6e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5c72:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5c74:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5c76:	4623      	mov	r3, r4
   d5c78:	464a      	mov	r2, r9
   d5c7a:	2114      	movs	r1, #20
   d5c7c:	1d38      	adds	r0, r7, #4
   d5c7e:	f7ff fe55 	bl	d592c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5c82:	2813      	cmp	r0, #19
   d5c84:	d805      	bhi.n	d5c92 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5c86:	1d39      	adds	r1, r7, #4
   d5c88:	4628      	mov	r0, r5
   d5c8a:	f7ff ffa9 	bl	d5be0 <_ZN5Print5writeEPKc>
   d5c8e:	4604      	mov	r4, r0
   d5c90:	e013      	b.n	d5cba <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5c92:	f100 0308 	add.w	r3, r0, #8
   d5c96:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5c9a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5c9c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5ca0:	1c41      	adds	r1, r0, #1
   d5ca2:	4623      	mov	r3, r4
   d5ca4:	464a      	mov	r2, r9
   d5ca6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5ca8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5caa:	f7ff fe3f 	bl	d592c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5cae:	4669      	mov	r1, sp
   d5cb0:	4628      	mov	r0, r5
   d5cb2:	f7ff ff95 	bl	d5be0 <_ZN5Print5writeEPKc>
   d5cb6:	4604      	mov	r4, r0
   d5cb8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5cba:	b11e      	cbz	r6, d5cc4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5cbc:	4628      	mov	r0, r5
   d5cbe:	f7ff ffa2 	bl	d5c06 <_ZN5Print7printlnEv>
   d5cc2:	4404      	add	r4, r0
    return n;
}
   d5cc4:	4620      	mov	r0, r4
   d5cc6:	371c      	adds	r7, #28
   d5cc8:	46bd      	mov	sp, r7
   d5cca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5cce:	b002      	add	sp, #8
   d5cd0:	4770      	bx	lr
	...

000d5cd4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5cd4:	4b01      	ldr	r3, [pc, #4]	; (d5cdc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5cd6:	4a02      	ldr	r2, [pc, #8]	; (d5ce0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5cd8:	601a      	str	r2, [r3, #0]
   d5cda:	4770      	bx	lr
   d5cdc:	2003e3f4 	.word	0x2003e3f4
   d5ce0:	000d7ac3 	.word	0x000d7ac3

000d5ce4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5ce4:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5ce6:	681a      	ldr	r2, [r3, #0]
   d5ce8:	4b02      	ldr	r3, [pc, #8]	; (d5cf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5cea:	601a      	str	r2, [r3, #0]
   d5cec:	4770      	bx	lr
   d5cee:	bf00      	nop
   d5cf0:	2003e254 	.word	0x2003e254
   d5cf4:	2003e3f8 	.word	0x2003e3f8

000d5cf8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5cf8:	2100      	movs	r1, #0
   d5cfa:	f7ff bd8b 	b.w	d5814 <system_delay_ms>

000d5cfe <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5cfe:	b510      	push	{r4, lr}
   d5d00:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d02:	f7ff f8ae 	bl	d4e62 <_ZNSt14_Function_baseD1Ev>
   d5d06:	4620      	mov	r0, r4
   d5d08:	bd10      	pop	{r4, pc}
	...

000d5d0c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5d0c:	4803      	ldr	r0, [pc, #12]	; (d5d1c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5d0e:	4a04      	ldr	r2, [pc, #16]	; (d5d20 <_GLOBAL__sub_I_RGB+0x14>)
   d5d10:	4904      	ldr	r1, [pc, #16]	; (d5d24 <_GLOBAL__sub_I_RGB+0x18>)
   d5d12:	2300      	movs	r3, #0
   d5d14:	6083      	str	r3, [r0, #8]
   d5d16:	f000 bccb 	b.w	d66b0 <__aeabi_atexit>
   d5d1a:	bf00      	nop
   d5d1c:	2003e3fc 	.word	0x2003e3fc
   d5d20:	2003e2c0 	.word	0x2003e2c0
   d5d24:	000d5cff 	.word	0x000d5cff

000d5d28 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5d28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5d2a:	4b0c      	ldr	r3, [pc, #48]	; (d5d5c <serialEventRun+0x34>)
   d5d2c:	b133      	cbz	r3, d5d3c <serialEventRun+0x14>
   d5d2e:	f000 f957 	bl	d5fe0 <_Z16_fetch_usbserialv>
   d5d32:	6803      	ldr	r3, [r0, #0]
   d5d34:	691b      	ldr	r3, [r3, #16]
   d5d36:	4798      	blx	r3
   d5d38:	2800      	cmp	r0, #0
   d5d3a:	dc09      	bgt.n	d5d50 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5d3c:	4b08      	ldr	r3, [pc, #32]	; (d5d60 <serialEventRun+0x38>)
   d5d3e:	b163      	cbz	r3, d5d5a <serialEventRun+0x32>
   d5d40:	f000 f9d6 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d5d44:	6803      	ldr	r3, [r0, #0]
   d5d46:	691b      	ldr	r3, [r3, #16]
   d5d48:	4798      	blx	r3
   d5d4a:	2800      	cmp	r0, #0
   d5d4c:	dc03      	bgt.n	d5d56 <serialEventRun+0x2e>
   d5d4e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5d50:	f3af 8000 	nop.w
   d5d54:	e7f2      	b.n	d5d3c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5d56:	f3af 8000 	nop.w
   d5d5a:	bd08      	pop	{r3, pc}
	...

000d5d64 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5d64:	b508      	push	{r3, lr}
	serialEventRun();
   d5d66:	f7ff ffdf 	bl	d5d28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5d6a:	f7ff fc3b 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5d6e:	4b01      	ldr	r3, [pc, #4]	; (d5d74 <_post_loop+0x10>)
   d5d70:	6018      	str	r0, [r3, #0]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	2003e730 	.word	0x2003e730

000d5d78 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5d78:	4802      	ldr	r0, [pc, #8]	; (d5d84 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5d7a:	4a03      	ldr	r2, [pc, #12]	; (d5d88 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5d7c:	4903      	ldr	r1, [pc, #12]	; (d5d8c <_Z33system_initialize_user_backup_ramv+0x14>)
   d5d7e:	1a12      	subs	r2, r2, r0
   d5d80:	f001 ba2c 	b.w	d71dc <memcpy>
   d5d84:	2003f400 	.word	0x2003f400
   d5d88:	2003f404 	.word	0x2003f404
   d5d8c:	000d7e50 	.word	0x000d7e50

000d5d90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5d90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d92:	2300      	movs	r3, #0
   d5d94:	9300      	str	r3, [sp, #0]
   d5d96:	461a      	mov	r2, r3
   d5d98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d9c:	f7ff fd54 	bl	d5848 <system_ctrl_set_result>
}
   d5da0:	b003      	add	sp, #12
   d5da2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5da8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5da8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5daa:	8843      	ldrh	r3, [r0, #2]
   d5dac:	2b0a      	cmp	r3, #10
   d5dae:	d008      	beq.n	d5dc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5db0:	2b50      	cmp	r3, #80	; 0x50
   d5db2:	d109      	bne.n	d5dc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5db4:	4b09      	ldr	r3, [pc, #36]	; (d5ddc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5db6:	681b      	ldr	r3, [r3, #0]
   d5db8:	b13b      	cbz	r3, d5dca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5dba:	b003      	add	sp, #12
   d5dbc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5dc0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5dc2:	f7ff ffe5 	bl	d5d90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5dc6:	e006      	b.n	d5dd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5dc8:	2300      	movs	r3, #0
   d5dca:	9300      	str	r3, [sp, #0]
   d5dcc:	461a      	mov	r2, r3
   d5dce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5dd2:	f7ff fd39 	bl	d5848 <system_ctrl_set_result>
        break;
    }
}
   d5dd6:	b003      	add	sp, #12
   d5dd8:	f85d fb04 	ldr.w	pc, [sp], #4
   d5ddc:	2003e40c 	.word	0x2003e40c

000d5de0 <module_user_init_hook>:

void module_user_init_hook()
{
   d5de0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5de2:	4c10      	ldr	r4, [pc, #64]	; (d5e24 <module_user_init_hook+0x44>)
   d5de4:	4d10      	ldr	r5, [pc, #64]	; (d5e28 <module_user_init_hook+0x48>)
   d5de6:	6823      	ldr	r3, [r4, #0]
   d5de8:	42ab      	cmp	r3, r5
   d5dea:	4b10      	ldr	r3, [pc, #64]	; (d5e2c <module_user_init_hook+0x4c>)
   d5dec:	bf0c      	ite	eq
   d5dee:	2201      	moveq	r2, #1
   d5df0:	2200      	movne	r2, #0
   d5df2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5df4:	d002      	beq.n	d5dfc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5df6:	f7ff ffbf 	bl	d5d78 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5dfa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5dfc:	f7ff fbe2 	bl	d55c4 <HAL_RNG_GetRandomNumber>
   d5e00:	4604      	mov	r4, r0
    srand(seed);
   d5e02:	f001 f9ff 	bl	d7204 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e06:	4b0a      	ldr	r3, [pc, #40]	; (d5e30 <module_user_init_hook+0x50>)
   d5e08:	b113      	cbz	r3, d5e10 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e10:	2100      	movs	r1, #0
   d5e12:	4807      	ldr	r0, [pc, #28]	; (d5e30 <module_user_init_hook+0x50>)
   d5e14:	f7ff fd72 	bl	d58fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e18:	2100      	movs	r1, #0
   d5e1a:	4806      	ldr	r0, [pc, #24]	; (d5e34 <module_user_init_hook+0x54>)
}
   d5e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e20:	f7ff bd08 	b.w	d5834 <system_ctrl_set_app_request_handler>
   d5e24:	2003f400 	.word	0x2003f400
   d5e28:	9a271c1e 	.word	0x9a271c1e
   d5e2c:	2003e410 	.word	0x2003e410
   d5e30:	00000000 	.word	0x00000000
   d5e34:	000d5da9 	.word	0x000d5da9

000d5e38 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5e38:	4770      	bx	lr

000d5e3a <_ZN9IPAddressD0Ev>:
   d5e3a:	b510      	push	{r4, lr}
   d5e3c:	2118      	movs	r1, #24
   d5e3e:	4604      	mov	r4, r0
   d5e40:	f000 fc44 	bl	d66cc <_ZdlPvj>
   d5e44:	4620      	mov	r0, r4
   d5e46:	bd10      	pop	{r4, pc}

000d5e48 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5e48:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5e4a:	7d03      	ldrb	r3, [r0, #20]
   d5e4c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5e4e:	b08d      	sub	sp, #52	; 0x34
   d5e50:	460e      	mov	r6, r1
   d5e52:	f100 0704 	add.w	r7, r0, #4
   d5e56:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5e5a:	d002      	beq.n	d5e62 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5e5c:	f100 0508 	add.w	r5, r0, #8
   d5e60:	e018      	b.n	d5e94 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5e62:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5e64:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5e66:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5e6a:	232f      	movs	r3, #47	; 0x2f
   d5e6c:	462a      	mov	r2, r5
   d5e6e:	200a      	movs	r0, #10
   d5e70:	f7ff fbe8 	bl	d5644 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5e74:	4628      	mov	r0, r5
   d5e76:	f001 f9ff 	bl	d7278 <strlen>
   d5e7a:	6833      	ldr	r3, [r6, #0]
   d5e7c:	4602      	mov	r2, r0
   d5e7e:	68db      	ldr	r3, [r3, #12]
   d5e80:	4629      	mov	r1, r5
   d5e82:	4630      	mov	r0, r6
   d5e84:	4798      	blx	r3
   d5e86:	e00f      	b.n	d5ea8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5e88:	b124      	cbz	r4, d5e94 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5e8a:	212e      	movs	r1, #46	; 0x2e
   d5e8c:	4630      	mov	r0, r6
   d5e8e:	f7ff feb7 	bl	d5c00 <_ZN5Print5printEc>
   d5e92:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5e94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5e98:	220a      	movs	r2, #10
   d5e9a:	4630      	mov	r0, r6
   d5e9c:	f7ff febf 	bl	d5c1e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5ea0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5ea2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5ea4:	d1f0      	bne.n	d5e88 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5ea6:	4620      	mov	r0, r4
    }
    return n;
}
   d5ea8:	b00d      	add	sp, #52	; 0x34
   d5eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5eac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5eac:	b510      	push	{r4, lr}
   d5eae:	4b05      	ldr	r3, [pc, #20]	; (d5ec4 <_ZN9IPAddressC1Ev+0x18>)
   d5eb0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5eb2:	2211      	movs	r2, #17
   d5eb4:	f840 3b04 	str.w	r3, [r0], #4
   d5eb8:	2100      	movs	r1, #0
   d5eba:	f001 f99a 	bl	d71f2 <memset>
{
    clear();
}
   d5ebe:	4620      	mov	r0, r4
   d5ec0:	bd10      	pop	{r4, pc}
   d5ec2:	bf00      	nop
   d5ec4:	000d7b64 	.word	0x000d7b64

000d5ec8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5ec8:	4603      	mov	r3, r0
   d5eca:	4a07      	ldr	r2, [pc, #28]	; (d5ee8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5ecc:	b510      	push	{r4, lr}
   d5ece:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5ed2:	f101 0210 	add.w	r2, r1, #16
   d5ed6:	f851 4b04 	ldr.w	r4, [r1], #4
   d5eda:	f843 4b04 	str.w	r4, [r3], #4
   d5ede:	4291      	cmp	r1, r2
   d5ee0:	d1f9      	bne.n	d5ed6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5ee2:	780a      	ldrb	r2, [r1, #0]
   d5ee4:	701a      	strb	r2, [r3, #0]
}
   d5ee6:	bd10      	pop	{r4, pc}
   d5ee8:	000d7b64 	.word	0x000d7b64

000d5eec <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5eec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5eee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5ef2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5ef6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5efa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5efe:	2304      	movs	r3, #4
   d5f00:	6041      	str	r1, [r0, #4]
   d5f02:	7503      	strb	r3, [r0, #20]
   d5f04:	bd10      	pop	{r4, pc}

000d5f06 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5f06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5f08:	780d      	ldrb	r5, [r1, #0]
   d5f0a:	788b      	ldrb	r3, [r1, #2]
   d5f0c:	784a      	ldrb	r2, [r1, #1]
   d5f0e:	78c9      	ldrb	r1, [r1, #3]
   d5f10:	9100      	str	r1, [sp, #0]
   d5f12:	4629      	mov	r1, r5
   d5f14:	f7ff ffea 	bl	d5eec <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5f18:	b003      	add	sp, #12
   d5f1a:	bd30      	pop	{r4, r5, pc}

000d5f1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f1c:	7441      	strb	r1, [r0, #17]
   d5f1e:	4770      	bx	lr

000d5f20 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f20:	4770      	bx	lr

000d5f22 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5f22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5f24:	2100      	movs	r1, #0
   d5f26:	7c00      	ldrb	r0, [r0, #16]
   d5f28:	f7ff fc4c 	bl	d57c4 <HAL_USB_USART_Receive_Data>
}
   d5f2c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5f30:	bf28      	it	cs
   d5f32:	f04f 30ff 	movcs.w	r0, #4294967295
   d5f36:	bd08      	pop	{r3, pc}

000d5f38 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5f38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5f3a:	2101      	movs	r1, #1
   d5f3c:	7c00      	ldrb	r0, [r0, #16]
   d5f3e:	f7ff fc41 	bl	d57c4 <HAL_USB_USART_Receive_Data>
}
   d5f42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5f46:	bf28      	it	cs
   d5f48:	f04f 30ff 	movcs.w	r0, #4294967295
   d5f4c:	bd08      	pop	{r3, pc}

000d5f4e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5f4e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5f50:	7c00      	ldrb	r0, [r0, #16]
   d5f52:	f7ff fc2f 	bl	d57b4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5f56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f5a:	bd08      	pop	{r3, pc}

000d5f5c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5f5c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5f5e:	7c00      	ldrb	r0, [r0, #16]
   d5f60:	f7ff fc20 	bl	d57a4 <HAL_USB_USART_Available_Data>
}
   d5f64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f68:	bd08      	pop	{r3, pc}

000d5f6a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5f6a:	7c00      	ldrb	r0, [r0, #16]
   d5f6c:	f7ff bc3a 	b.w	d57e4 <HAL_USB_USART_Flush_Data>

000d5f70 <_ZN9USBSerialD0Ev>:
   d5f70:	b510      	push	{r4, lr}
   d5f72:	2114      	movs	r1, #20
   d5f74:	4604      	mov	r4, r0
   d5f76:	f000 fba9 	bl	d66cc <_ZdlPvj>
   d5f7a:	4620      	mov	r0, r4
   d5f7c:	bd10      	pop	{r4, pc}

000d5f7e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5f7e:	b538      	push	{r3, r4, r5, lr}
   d5f80:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f82:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5f84:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f86:	f7ff fc15 	bl	d57b4 <HAL_USB_USART_Available_Data_For_Write>
   d5f8a:	2800      	cmp	r0, #0
   d5f8c:	dc01      	bgt.n	d5f92 <_ZN9USBSerial5writeEh+0x14>
   d5f8e:	7c60      	ldrb	r0, [r4, #17]
   d5f90:	b128      	cbz	r0, d5f9e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5f92:	4629      	mov	r1, r5
   d5f94:	7c20      	ldrb	r0, [r4, #16]
   d5f96:	f7ff fc1d 	bl	d57d4 <HAL_USB_USART_Send_Data>
   d5f9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5f9e:	bd38      	pop	{r3, r4, r5, pc}

000d5fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5fa0:	b510      	push	{r4, lr}
   d5fa2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5fa4:	2300      	movs	r3, #0
   d5fa6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5fac:	60a3      	str	r3, [r4, #8]
   d5fae:	4b05      	ldr	r3, [pc, #20]	; (d5fc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5fb0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5fb2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5fb4:	4608      	mov	r0, r1
{
  _serial = serial;
   d5fb6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5fb8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5fba:	4611      	mov	r1, r2
   d5fbc:	f7ff fbe2 	bl	d5784 <HAL_USB_USART_Init>
}
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	bd10      	pop	{r4, pc}
   d5fc4:	000d7b78 	.word	0x000d7b78

000d5fc8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5fc8:	2200      	movs	r2, #0
   d5fca:	7c00      	ldrb	r0, [r0, #16]
   d5fcc:	f7ff bbe2 	b.w	d5794 <HAL_USB_USART_Begin>

000d5fd0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5fd0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5fd2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5fd4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5fd6:	2100      	movs	r1, #0
   d5fd8:	f001 f90b 	bl	d71f2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5fdc:	4620      	mov	r0, r4
   d5fde:	bd10      	pop	{r4, pc}

000d5fe0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5fe0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5fe2:	4d0e      	ldr	r5, [pc, #56]	; (d601c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5fe4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5fe6:	a801      	add	r0, sp, #4
   d5fe8:	f7ff fff2 	bl	d5fd0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5fec:	6829      	ldr	r1, [r5, #0]
   d5fee:	f011 0401 	ands.w	r4, r1, #1
   d5ff2:	d110      	bne.n	d6016 <_Z16_fetch_usbserialv+0x36>
   d5ff4:	4628      	mov	r0, r5
   d5ff6:	f7fe f85f 	bl	d40b8 <__cxa_guard_acquire>
   d5ffa:	b160      	cbz	r0, d6016 <_Z16_fetch_usbserialv+0x36>
   d5ffc:	aa01      	add	r2, sp, #4
   d5ffe:	4621      	mov	r1, r4
   d6000:	4807      	ldr	r0, [pc, #28]	; (d6020 <_Z16_fetch_usbserialv+0x40>)
   d6002:	f7ff ffcd 	bl	d5fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6006:	4628      	mov	r0, r5
   d6008:	f7fe f85b 	bl	d40c2 <__cxa_guard_release>
   d600c:	4a05      	ldr	r2, [pc, #20]	; (d6024 <_Z16_fetch_usbserialv+0x44>)
   d600e:	4906      	ldr	r1, [pc, #24]	; (d6028 <_Z16_fetch_usbserialv+0x48>)
   d6010:	4803      	ldr	r0, [pc, #12]	; (d6020 <_Z16_fetch_usbserialv+0x40>)
   d6012:	f000 fb4d 	bl	d66b0 <__aeabi_atexit>
	return _usbserial;
}
   d6016:	4802      	ldr	r0, [pc, #8]	; (d6020 <_Z16_fetch_usbserialv+0x40>)
   d6018:	b007      	add	sp, #28
   d601a:	bd30      	pop	{r4, r5, pc}
   d601c:	2003e414 	.word	0x2003e414
   d6020:	2003e418 	.word	0x2003e418
   d6024:	2003e2c0 	.word	0x2003e2c0
   d6028:	000d5f21 	.word	0x000d5f21

000d602c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d602c:	4770      	bx	lr

000d602e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d602e:	7441      	strb	r1, [r0, #17]
   d6030:	4770      	bx	lr

000d6032 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6032:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6034:	7c00      	ldrb	r0, [r0, #16]
   d6036:	f7ff fb45 	bl	d56c4 <HAL_USART_Available_Data_For_Write>
}
   d603a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d603e:	bd08      	pop	{r3, pc}

000d6040 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6040:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6042:	7c00      	ldrb	r0, [r0, #16]
   d6044:	f7ff fb16 	bl	d5674 <HAL_USART_Available_Data>
}
   d6048:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d604c:	bd08      	pop	{r3, pc}

000d604e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d604e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6050:	7c00      	ldrb	r0, [r0, #16]
   d6052:	f7ff fb1f 	bl	d5694 <HAL_USART_Peek_Data>
}
   d6056:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d605a:	bf28      	it	cs
   d605c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6060:	bd08      	pop	{r3, pc}

000d6062 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6062:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6064:	7c00      	ldrb	r0, [r0, #16]
   d6066:	f7ff fb0d 	bl	d5684 <HAL_USART_Read_Data>
}
   d606a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d606e:	bf28      	it	cs
   d6070:	f04f 30ff 	movcs.w	r0, #4294967295
   d6074:	bd08      	pop	{r3, pc}

000d6076 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6076:	7c00      	ldrb	r0, [r0, #16]
   d6078:	f7ff bb14 	b.w	d56a4 <HAL_USART_Flush_Data>

000d607c <_ZN11USARTSerialD0Ev>:
   d607c:	b510      	push	{r4, lr}
   d607e:	2114      	movs	r1, #20
   d6080:	4604      	mov	r4, r0
   d6082:	f000 fb23 	bl	d66cc <_ZdlPvj>
   d6086:	4620      	mov	r0, r4
   d6088:	bd10      	pop	{r4, pc}

000d608a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d608a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d608c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d608e:	4604      	mov	r4, r0
   d6090:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6092:	b925      	cbnz	r5, d609e <_ZN11USARTSerial5writeEh+0x14>
   d6094:	7c00      	ldrb	r0, [r0, #16]
   d6096:	f7ff fb15 	bl	d56c4 <HAL_USART_Available_Data_For_Write>
   d609a:	2800      	cmp	r0, #0
   d609c:	dd05      	ble.n	d60aa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d609e:	4631      	mov	r1, r6
   d60a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d60a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d60a6:	f7ff badd 	b.w	d5664 <HAL_USART_Write_Data>
  }
  return 0;
}
   d60aa:	4628      	mov	r0, r5
   d60ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d60b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d60b0:	b510      	push	{r4, lr}
   d60b2:	4604      	mov	r4, r0
   d60b4:	4608      	mov	r0, r1
   d60b6:	4611      	mov	r1, r2
   d60b8:	2200      	movs	r2, #0
   d60ba:	6062      	str	r2, [r4, #4]
   d60bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d60c0:	60a2      	str	r2, [r4, #8]
   d60c2:	4a05      	ldr	r2, [pc, #20]	; (d60d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d60c4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d60c6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d60c8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d60ca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d60cc:	461a      	mov	r2, r3
   d60ce:	f7ff fac1 	bl	d5654 <HAL_USART_Init>
}
   d60d2:	4620      	mov	r0, r4
   d60d4:	bd10      	pop	{r4, pc}
   d60d6:	bf00      	nop
   d60d8:	000d7ba8 	.word	0x000d7ba8

000d60dc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d60dc:	2300      	movs	r3, #0
   d60de:	7c00      	ldrb	r0, [r0, #16]
   d60e0:	f7ff baf8 	b.w	d56d4 <HAL_USART_BeginConfig>

000d60e4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d60e4:	2200      	movs	r2, #0
   d60e6:	f7ff bff9 	b.w	d60dc <_ZN11USARTSerial5beginEmm>

000d60ea <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d60ea:	7c00      	ldrb	r0, [r0, #16]
   d60ec:	f7ff bae2 	b.w	d56b4 <HAL_USART_Is_Enabled>

000d60f0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d60f0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d60f2:	4d0c      	ldr	r5, [pc, #48]	; (d6124 <_Z22__fetch_global_Serial1v+0x34>)
   d60f4:	6829      	ldr	r1, [r5, #0]
   d60f6:	f011 0401 	ands.w	r4, r1, #1
   d60fa:	d111      	bne.n	d6120 <_Z22__fetch_global_Serial1v+0x30>
   d60fc:	4628      	mov	r0, r5
   d60fe:	f7fd ffdb 	bl	d40b8 <__cxa_guard_acquire>
   d6102:	b168      	cbz	r0, d6120 <_Z22__fetch_global_Serial1v+0x30>
   d6104:	4a08      	ldr	r2, [pc, #32]	; (d6128 <_Z22__fetch_global_Serial1v+0x38>)
   d6106:	4b09      	ldr	r3, [pc, #36]	; (d612c <_Z22__fetch_global_Serial1v+0x3c>)
   d6108:	4809      	ldr	r0, [pc, #36]	; (d6130 <_Z22__fetch_global_Serial1v+0x40>)
   d610a:	4621      	mov	r1, r4
   d610c:	f7ff ffd0 	bl	d60b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6110:	4628      	mov	r0, r5
   d6112:	f7fd ffd6 	bl	d40c2 <__cxa_guard_release>
   d6116:	4a07      	ldr	r2, [pc, #28]	; (d6134 <_Z22__fetch_global_Serial1v+0x44>)
   d6118:	4907      	ldr	r1, [pc, #28]	; (d6138 <_Z22__fetch_global_Serial1v+0x48>)
   d611a:	4805      	ldr	r0, [pc, #20]	; (d6130 <_Z22__fetch_global_Serial1v+0x40>)
   d611c:	f000 fac8 	bl	d66b0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6120:	4803      	ldr	r0, [pc, #12]	; (d6130 <_Z22__fetch_global_Serial1v+0x40>)
   d6122:	bd38      	pop	{r3, r4, r5, pc}
   d6124:	2003e4c4 	.word	0x2003e4c4
   d6128:	2003e4c8 	.word	0x2003e4c8
   d612c:	2003e440 	.word	0x2003e440
   d6130:	2003e42c 	.word	0x2003e42c
   d6134:	2003e2c0 	.word	0x2003e2c0
   d6138:	000d602d 	.word	0x000d602d

000d613c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d613c:	4770      	bx	lr

000d613e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d613e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6140:	4606      	mov	r6, r0
   d6142:	4615      	mov	r5, r2
   d6144:	460c      	mov	r4, r1
   d6146:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6148:	42bc      	cmp	r4, r7
   d614a:	d006      	beq.n	d615a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d614c:	6833      	ldr	r3, [r6, #0]
   d614e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6152:	689b      	ldr	r3, [r3, #8]
   d6154:	4630      	mov	r0, r6
   d6156:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6158:	e7f6      	b.n	d6148 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d615a:	4628      	mov	r0, r5
   d615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d615e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d615e:	2200      	movs	r2, #0
   d6160:	7c00      	ldrb	r0, [r0, #16]
   d6162:	f7ff bad7 	b.w	d5714 <HAL_I2C_Write_Data>

000d6166 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6166:	2100      	movs	r1, #0
   d6168:	7c00      	ldrb	r0, [r0, #16]
   d616a:	f7ff badb 	b.w	d5724 <HAL_I2C_Available_Data>

000d616e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d616e:	2100      	movs	r1, #0
   d6170:	7c00      	ldrb	r0, [r0, #16]
   d6172:	f7ff badf 	b.w	d5734 <HAL_I2C_Read_Data>

000d6176 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6176:	2100      	movs	r1, #0
   d6178:	7c00      	ldrb	r0, [r0, #16]
   d617a:	f7ff bae3 	b.w	d5744 <HAL_I2C_Peek_Data>

000d617e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d617e:	2100      	movs	r1, #0
   d6180:	7c00      	ldrb	r0, [r0, #16]
   d6182:	f7ff bae7 	b.w	d5754 <HAL_I2C_Flush_Data>

000d6186 <_ZN7TwoWireD0Ev>:
   d6186:	b510      	push	{r4, lr}
   d6188:	2114      	movs	r1, #20
   d618a:	4604      	mov	r4, r0
   d618c:	f000 fa9e 	bl	d66cc <_ZdlPvj>
   d6190:	4620      	mov	r0, r4
   d6192:	bd10      	pop	{r4, pc}

000d6194 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6194:	b510      	push	{r4, lr}
   d6196:	4604      	mov	r4, r0
   d6198:	2300      	movs	r3, #0
   d619a:	6063      	str	r3, [r4, #4]
   d619c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61a0:	60a3      	str	r3, [r4, #8]
   d61a2:	4b04      	ldr	r3, [pc, #16]	; (d61b4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d61a4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d61a6:	4608      	mov	r0, r1
   d61a8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d61aa:	4611      	mov	r1, r2
   d61ac:	f7ff fae2 	bl	d5774 <HAL_I2C_Init>
}
   d61b0:	4620      	mov	r0, r4
   d61b2:	bd10      	pop	{r4, pc}
   d61b4:	000d7bd8 	.word	0x000d7bd8

000d61b8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d61b8:	2300      	movs	r3, #0
   d61ba:	461a      	mov	r2, r3
   d61bc:	4619      	mov	r1, r3
   d61be:	7c00      	ldrb	r0, [r0, #16]
   d61c0:	f7ff ba90 	b.w	d56e4 <HAL_I2C_Begin>

000d61c4 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d61c4:	2200      	movs	r2, #0
   d61c6:	7c00      	ldrb	r0, [r0, #16]
   d61c8:	f7ff ba94 	b.w	d56f4 <HAL_I2C_Begin_Transmission>

000d61cc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d61cc:	b2c9      	uxtb	r1, r1
   d61ce:	f7ff bff9 	b.w	d61c4 <_ZN7TwoWire17beginTransmissionEh>

000d61d2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d61d2:	2200      	movs	r2, #0
   d61d4:	7c00      	ldrb	r0, [r0, #16]
   d61d6:	f7ff ba95 	b.w	d5704 <HAL_I2C_End_Transmission>

000d61da <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d61da:	2101      	movs	r1, #1
   d61dc:	f7ff bff9 	b.w	d61d2 <_ZN7TwoWire15endTransmissionEh>

000d61e0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d61e0:	2100      	movs	r1, #0
   d61e2:	7c00      	ldrb	r0, [r0, #16]
   d61e4:	f7ff babe 	b.w	d5764 <HAL_I2C_Is_Enabled>

000d61e8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d61e8:	2200      	movs	r2, #0
   d61ea:	4611      	mov	r1, r2
   d61ec:	6840      	ldr	r0, [r0, #4]
   d61ee:	f7ff bb6d 	b.w	d58cc <network_listening>

000d61f2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d61f2:	2200      	movs	r2, #0
   d61f4:	4611      	mov	r1, r2
   d61f6:	6840      	ldr	r0, [r0, #4]
   d61f8:	f7ff bb78 	b.w	d58ec <network_get_listen_timeout>

000d61fc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d61fc:	2200      	movs	r2, #0
   d61fe:	6840      	ldr	r0, [r0, #4]
   d6200:	f7ff bb6c 	b.w	d58dc <network_set_listen_timeout>

000d6204 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6204:	2200      	movs	r2, #0
   d6206:	f081 0101 	eor.w	r1, r1, #1
   d620a:	6840      	ldr	r0, [r0, #4]
   d620c:	f7ff bb56 	b.w	d58bc <network_listen>

000d6210 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6210:	2300      	movs	r3, #0
   d6212:	461a      	mov	r2, r3
   d6214:	2101      	movs	r1, #1
   d6216:	6840      	ldr	r0, [r0, #4]
   d6218:	f7ff bb48 	b.w	d58ac <network_off>

000d621c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d621c:	2300      	movs	r3, #0
   d621e:	461a      	mov	r2, r3
   d6220:	4619      	mov	r1, r3
   d6222:	6840      	ldr	r0, [r0, #4]
   d6224:	f7ff bb3a 	b.w	d589c <network_on>

000d6228 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6228:	2200      	movs	r2, #0
   d622a:	4611      	mov	r1, r2
   d622c:	6840      	ldr	r0, [r0, #4]
   d622e:	f7ff bb2d 	b.w	d588c <network_ready>

000d6232 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6232:	2200      	movs	r2, #0
   d6234:	4611      	mov	r1, r2
   d6236:	6840      	ldr	r0, [r0, #4]
   d6238:	f7ff bb18 	b.w	d586c <network_connecting>

000d623c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d623c:	2200      	movs	r2, #0
   d623e:	2102      	movs	r1, #2
   d6240:	6840      	ldr	r0, [r0, #4]
   d6242:	f7ff bb1b 	b.w	d587c <network_disconnect>

000d6246 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6246:	2300      	movs	r3, #0
   d6248:	461a      	mov	r2, r3
   d624a:	6840      	ldr	r0, [r0, #4]
   d624c:	f7ff bb06 	b.w	d585c <network_connect>

000d6250 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6250:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6252:	4605      	mov	r5, r0
   d6254:	b188      	cbz	r0, d627a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6256:	6804      	ldr	r4, [r0, #0]
   d6258:	b14c      	cbz	r4, d626e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d625a:	68a3      	ldr	r3, [r4, #8]
   d625c:	b11b      	cbz	r3, d6266 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d625e:	2203      	movs	r2, #3
   d6260:	4621      	mov	r1, r4
   d6262:	4620      	mov	r0, r4
   d6264:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6266:	2110      	movs	r1, #16
   d6268:	4620      	mov	r0, r4
   d626a:	f000 fa2f 	bl	d66cc <_ZdlPvj>
   d626e:	4628      	mov	r0, r5
   d6270:	2114      	movs	r1, #20
      }
   d6272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6276:	f000 ba29 	b.w	d66cc <_ZdlPvj>
   d627a:	bd38      	pop	{r3, r4, r5, pc}

000d627c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d627c:	b110      	cbz	r0, d6284 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d627e:	6803      	ldr	r3, [r0, #0]
   d6280:	685b      	ldr	r3, [r3, #4]
   d6282:	4718      	bx	r3
   d6284:	4770      	bx	lr

000d6286 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6286:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6288:	6803      	ldr	r3, [r0, #0]
   d628a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d628c:	b1bb      	cbz	r3, d62be <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d628e:	6858      	ldr	r0, [r3, #4]
   d6290:	f7ff f9b0 	bl	d55f4 <os_thread_is_current>
   d6294:	b978      	cbnz	r0, d62b6 <_ZN6ThreadD1Ev+0x30>
   d6296:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6298:	7c5a      	ldrb	r2, [r3, #17]
   d629a:	b912      	cbnz	r2, d62a2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d629c:	6858      	ldr	r0, [r3, #4]
   d629e:	f7ff f9b1 	bl	d5604 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d62a2:	6823      	ldr	r3, [r4, #0]
   d62a4:	6858      	ldr	r0, [r3, #4]
   d62a6:	f7ff f9b5 	bl	d5614 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62aa:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d62ac:	2300      	movs	r3, #0
   d62ae:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d62b0:	b128      	cbz	r0, d62be <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d62b2:	f7ff ffcd 	bl	d6250 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62b6:	6820      	ldr	r0, [r4, #0]
   d62b8:	b108      	cbz	r0, d62be <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d62ba:	f7ff ffc9 	bl	d6250 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d62be:	4620      	mov	r0, r4
   d62c0:	bd10      	pop	{r4, pc}

000d62c2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d62c2:	b538      	push	{r3, r4, r5, lr}
   d62c4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62c6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d62ca:	b108      	cbz	r0, d62d0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d62cc:	f7fd fee7 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d62d0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d62d4:	b108      	cbz	r0, d62da <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d62d6:	f7ff f9ad 	bl	d5634 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62da:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d62de:	b135      	cbz	r5, d62ee <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62e0:	4628      	mov	r0, r5
   d62e2:	f7ff ffd0 	bl	d6286 <_ZN6ThreadD1Ev>
   d62e6:	2104      	movs	r1, #4
   d62e8:	4628      	mov	r0, r5
   d62ea:	f000 f9ef 	bl	d66cc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62ee:	6820      	ldr	r0, [r4, #0]
   d62f0:	b108      	cbz	r0, d62f6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d62f2:	f7ff ffc3 	bl	d627c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d62f6:	4620      	mov	r0, r4
   d62f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d62fc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d62fc:	b510      	push	{r4, lr}
   d62fe:	4b04      	ldr	r3, [pc, #16]	; (d6310 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6300:	4604      	mov	r4, r0
   d6302:	f840 3b08 	str.w	r3, [r0], #8
   d6306:	f7ff ffdc 	bl	d62c2 <_ZN5spark11MeshPublishD1Ev>
   d630a:	4620      	mov	r0, r4
   d630c:	bd10      	pop	{r4, pc}
   d630e:	bf00      	nop
   d6310:	000d7c00 	.word	0x000d7c00

000d6314 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6314:	b538      	push	{r3, r4, r5, lr}
   d6316:	4c0e      	ldr	r4, [pc, #56]	; (d6350 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6318:	4b0e      	ldr	r3, [pc, #56]	; (d6354 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d631a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d631c:	2500      	movs	r5, #0
   d631e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6320:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6324:	6063      	str	r3, [r4, #4]
   d6326:	60a5      	str	r5, [r4, #8]
   d6328:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d632c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6330:	f7ff f978 	bl	d5624 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6334:	4b08      	ldr	r3, [pc, #32]	; (d6358 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6336:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d633a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d633e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6340:	4620      	mov	r0, r4
   d6342:	4a06      	ldr	r2, [pc, #24]	; (d635c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6344:	4906      	ldr	r1, [pc, #24]	; (d6360 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d634a:	f000 b9b1 	b.w	d66b0 <__aeabi_atexit>
   d634e:	bf00      	nop
   d6350:	2003e54c 	.word	0x2003e54c
   d6354:	000d7c68 	.word	0x000d7c68
   d6358:	000d7c00 	.word	0x000d7c00
   d635c:	2003e2c0 	.word	0x2003e2c0
   d6360:	000d62fd 	.word	0x000d62fd

000d6364 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6364:	2200      	movs	r2, #0
   d6366:	4611      	mov	r1, r2
   d6368:	6840      	ldr	r0, [r0, #4]
   d636a:	f7ff ba8f 	b.w	d588c <network_ready>

000d636e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d636e:	2200      	movs	r2, #0
   d6370:	4611      	mov	r1, r2
   d6372:	6840      	ldr	r0, [r0, #4]
   d6374:	f7ff baaa 	b.w	d58cc <network_listening>

000d6378 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6378:	2200      	movs	r2, #0
   d637a:	4611      	mov	r1, r2
   d637c:	6840      	ldr	r0, [r0, #4]
   d637e:	f7ff bab5 	b.w	d58ec <network_get_listen_timeout>

000d6382 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6382:	2200      	movs	r2, #0
   d6384:	6840      	ldr	r0, [r0, #4]
   d6386:	f7ff baa9 	b.w	d58dc <network_set_listen_timeout>

000d638a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d638a:	2200      	movs	r2, #0
   d638c:	f081 0101 	eor.w	r1, r1, #1
   d6390:	6840      	ldr	r0, [r0, #4]
   d6392:	f7ff ba93 	b.w	d58bc <network_listen>

000d6396 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6396:	2300      	movs	r3, #0
   d6398:	461a      	mov	r2, r3
   d639a:	4619      	mov	r1, r3
   d639c:	6840      	ldr	r0, [r0, #4]
   d639e:	f7ff ba85 	b.w	d58ac <network_off>

000d63a2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d63a2:	2300      	movs	r3, #0
   d63a4:	461a      	mov	r2, r3
   d63a6:	4619      	mov	r1, r3
   d63a8:	6840      	ldr	r0, [r0, #4]
   d63aa:	f7ff ba77 	b.w	d589c <network_on>

000d63ae <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d63ae:	2200      	movs	r2, #0
   d63b0:	4611      	mov	r1, r2
   d63b2:	6840      	ldr	r0, [r0, #4]
   d63b4:	f7ff ba5a 	b.w	d586c <network_connecting>

000d63b8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63b8:	2200      	movs	r2, #0
   d63ba:	2102      	movs	r1, #2
   d63bc:	6840      	ldr	r0, [r0, #4]
   d63be:	f7ff ba5d 	b.w	d587c <network_disconnect>

000d63c2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d63c2:	2300      	movs	r3, #0
   d63c4:	461a      	mov	r2, r3
   d63c6:	6840      	ldr	r0, [r0, #4]
   d63c8:	f7ff ba48 	b.w	d585c <network_connect>

000d63cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d63cc:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d63ce:	2204      	movs	r2, #4
   d63d0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d63d2:	4a02      	ldr	r2, [pc, #8]	; (d63dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d63d4:	601a      	str	r2, [r3, #0]
   d63d6:	4770      	bx	lr
   d63d8:	2003e720 	.word	0x2003e720
   d63dc:	000d7c34 	.word	0x000d7c34

000d63e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d63e0:	2300      	movs	r3, #0
   d63e2:	461a      	mov	r2, r3
   d63e4:	6840      	ldr	r0, [r0, #4]
   d63e6:	f7ff ba39 	b.w	d585c <network_connect>

000d63ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d63ea:	2200      	movs	r2, #0
   d63ec:	2102      	movs	r1, #2
   d63ee:	6840      	ldr	r0, [r0, #4]
   d63f0:	f7ff ba44 	b.w	d587c <network_disconnect>

000d63f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d63f4:	2200      	movs	r2, #0
   d63f6:	4611      	mov	r1, r2
   d63f8:	6840      	ldr	r0, [r0, #4]
   d63fa:	f7ff ba37 	b.w	d586c <network_connecting>

000d63fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d63fe:	2200      	movs	r2, #0
   d6400:	4611      	mov	r1, r2
   d6402:	6840      	ldr	r0, [r0, #4]
   d6404:	f7ff ba42 	b.w	d588c <network_ready>

000d6408 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6408:	2300      	movs	r3, #0
   d640a:	461a      	mov	r2, r3
   d640c:	4619      	mov	r1, r3
   d640e:	6840      	ldr	r0, [r0, #4]
   d6410:	f7ff ba44 	b.w	d589c <network_on>

000d6414 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6414:	2300      	movs	r3, #0
   d6416:	461a      	mov	r2, r3
   d6418:	4619      	mov	r1, r3
   d641a:	6840      	ldr	r0, [r0, #4]
   d641c:	f7ff ba46 	b.w	d58ac <network_off>

000d6420 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6420:	2200      	movs	r2, #0
   d6422:	f081 0101 	eor.w	r1, r1, #1
   d6426:	6840      	ldr	r0, [r0, #4]
   d6428:	f7ff ba48 	b.w	d58bc <network_listen>

000d642c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d642c:	2200      	movs	r2, #0
   d642e:	6840      	ldr	r0, [r0, #4]
   d6430:	f7ff ba54 	b.w	d58dc <network_set_listen_timeout>

000d6434 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6434:	2200      	movs	r2, #0
   d6436:	4611      	mov	r1, r2
   d6438:	6840      	ldr	r0, [r0, #4]
   d643a:	f7ff ba57 	b.w	d58ec <network_get_listen_timeout>

000d643e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d643e:	2200      	movs	r2, #0
   d6440:	4611      	mov	r1, r2
   d6442:	6840      	ldr	r0, [r0, #4]
   d6444:	f7ff ba42 	b.w	d58cc <network_listening>

000d6448 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d644c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d644e:	b095      	sub	sp, #84	; 0x54
   d6450:	4616      	mov	r6, r2
   d6452:	460d      	mov	r5, r1
   d6454:	4607      	mov	r7, r0
    IPAddress addr;
   d6456:	f7ff fd29 	bl	d5eac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d645a:	4621      	mov	r1, r4
   d645c:	2220      	movs	r2, #32
   d645e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6460:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6462:	f000 fec6 	bl	d71f2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6466:	2340      	movs	r3, #64	; 0x40
   d6468:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d646a:	4621      	mov	r1, r4
   d646c:	466b      	mov	r3, sp
   d646e:	aa0c      	add	r2, sp, #48	; 0x30
   d6470:	4630      	mov	r0, r6
   d6472:	f7ff f82f 	bl	d54d4 <netdb_getaddrinfo>
    if (!r) {
   d6476:	4604      	mov	r4, r0
   d6478:	2800      	cmp	r0, #0
   d647a:	d144      	bne.n	d6506 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d647c:	4602      	mov	r2, r0
   d647e:	2101      	movs	r1, #1
   d6480:	6868      	ldr	r0, [r5, #4]
   d6482:	f7ff fa03 	bl	d588c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6486:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6488:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d648a:	4622      	mov	r2, r4
   d648c:	6868      	ldr	r0, [r5, #4]
   d648e:	f7ff f9fd 	bl	d588c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6492:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6494:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6496:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6498:	2e00      	cmp	r6, #0
   d649a:	d034      	beq.n	d6506 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d649c:	2900      	cmp	r1, #0
   d649e:	d132      	bne.n	d6506 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d64a0:	6873      	ldr	r3, [r6, #4]
   d64a2:	2b02      	cmp	r3, #2
   d64a4:	d002      	beq.n	d64ac <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d64a6:	2b0a      	cmp	r3, #10
   d64a8:	d009      	beq.n	d64be <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d64aa:	e02a      	b.n	d6502 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d64ac:	f1b8 0f00 	cmp.w	r8, #0
   d64b0:	d027      	beq.n	d6502 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d64b2:	6971      	ldr	r1, [r6, #20]
   d64b4:	4638      	mov	r0, r7
   d64b6:	3104      	adds	r1, #4
   d64b8:	f7ff fd25 	bl	d5f06 <_ZN9IPAddressaSEPKh>
   d64bc:	e020      	b.n	d6500 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d64be:	f1b9 0f00 	cmp.w	r9, #0
   d64c2:	d01e      	beq.n	d6502 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d64c4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d64c6:	2211      	movs	r2, #17
   d64c8:	a801      	add	r0, sp, #4
   d64ca:	f000 fe92 	bl	d71f2 <memset>
                    a.v = 6;
   d64ce:	2306      	movs	r3, #6
   d64d0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d64d4:	ad01      	add	r5, sp, #4
   d64d6:	f104 0308 	add.w	r3, r4, #8
   d64da:	3418      	adds	r4, #24
   d64dc:	6818      	ldr	r0, [r3, #0]
   d64de:	6859      	ldr	r1, [r3, #4]
   d64e0:	462a      	mov	r2, r5
   d64e2:	c203      	stmia	r2!, {r0, r1}
   d64e4:	3308      	adds	r3, #8
   d64e6:	42a3      	cmp	r3, r4
   d64e8:	4615      	mov	r5, r2
   d64ea:	d1f7      	bne.n	d64dc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d64ec:	a901      	add	r1, sp, #4
   d64ee:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d64f0:	ad07      	add	r5, sp, #28
   d64f2:	f7ff fce9 	bl	d5ec8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d64f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d64f8:	1d3c      	adds	r4, r7, #4
   d64fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64fc:	682b      	ldr	r3, [r5, #0]
   d64fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6500:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6502:	69f6      	ldr	r6, [r6, #28]
   d6504:	e7c8      	b.n	d6498 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6506:	9800      	ldr	r0, [sp, #0]
   d6508:	f7fe ffdc 	bl	d54c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d650c:	4638      	mov	r0, r7
   d650e:	b015      	add	sp, #84	; 0x54
   d6510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6514 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6514:	4b02      	ldr	r3, [pc, #8]	; (d6520 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6516:	4a03      	ldr	r2, [pc, #12]	; (d6524 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6518:	601a      	str	r2, [r3, #0]
   d651a:	2200      	movs	r2, #0
   d651c:	605a      	str	r2, [r3, #4]
   d651e:	4770      	bx	lr
   d6520:	2003e728 	.word	0x2003e728
   d6524:	000d7c68 	.word	0x000d7c68

000d6528 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6528:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d652a:	4e18      	ldr	r6, [pc, #96]	; (d658c <pinAvailable+0x64>)
   d652c:	6831      	ldr	r1, [r6, #0]
   d652e:	f011 0501 	ands.w	r5, r1, #1
   d6532:	4604      	mov	r4, r0
   d6534:	d10a      	bne.n	d654c <pinAvailable+0x24>
   d6536:	4630      	mov	r0, r6
   d6538:	f7fd fdbe 	bl	d40b8 <__cxa_guard_acquire>
   d653c:	b130      	cbz	r0, d654c <pinAvailable+0x24>
   d653e:	4629      	mov	r1, r5
   d6540:	4813      	ldr	r0, [pc, #76]	; (d6590 <pinAvailable+0x68>)
   d6542:	f7ff fa3f 	bl	d59c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6546:	4630      	mov	r0, r6
   d6548:	f7fd fdbb 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d654c:	4810      	ldr	r0, [pc, #64]	; (d6590 <pinAvailable+0x68>)
   d654e:	f7ff fae9 	bl	d5b24 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6552:	b128      	cbz	r0, d6560 <pinAvailable+0x38>
   d6554:	f1a4 030b 	sub.w	r3, r4, #11
   d6558:	2b02      	cmp	r3, #2
   d655a:	d801      	bhi.n	d6560 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d655c:	2000      	movs	r0, #0
   d655e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6560:	f000 f880 	bl	d6664 <_Z19__fetch_global_Wirev>
   d6564:	f7ff fe3c 	bl	d61e0 <_ZN7TwoWire9isEnabledEv>
   d6568:	b108      	cbz	r0, d656e <pinAvailable+0x46>
   d656a:	2c01      	cmp	r4, #1
   d656c:	d9f6      	bls.n	d655c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d656e:	f7ff fdbf 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d6572:	f7ff fdba 	bl	d60ea <_ZN11USARTSerial9isEnabledEv>
   d6576:	b118      	cbz	r0, d6580 <pinAvailable+0x58>
   d6578:	f1a4 0309 	sub.w	r3, r4, #9
   d657c:	2b01      	cmp	r3, #1
   d657e:	d9ed      	bls.n	d655c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6580:	2c23      	cmp	r4, #35	; 0x23
   d6582:	bf8c      	ite	hi
   d6584:	2000      	movhi	r0, #0
   d6586:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6588:	bd70      	pop	{r4, r5, r6, pc}
   d658a:	bf00      	nop
   d658c:	2003e3cc 	.word	0x2003e3cc
   d6590:	2003e3d0 	.word	0x2003e3d0

000d6594 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6594:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6596:	b538      	push	{r3, r4, r5, lr}
   d6598:	4604      	mov	r4, r0
   d659a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d659c:	d80a      	bhi.n	d65b4 <pinMode+0x20>
   d659e:	29ff      	cmp	r1, #255	; 0xff
   d65a0:	d008      	beq.n	d65b4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d65a2:	f7ff ffc1 	bl	d6528 <pinAvailable>
   d65a6:	b128      	cbz	r0, d65b4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d65a8:	4629      	mov	r1, r5
   d65aa:	4620      	mov	r0, r4
}
   d65ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d65b0:	f7fe bfa0 	b.w	d54f4 <HAL_Pin_Mode>
   d65b4:	bd38      	pop	{r3, r4, r5, pc}

000d65b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d65b6:	b538      	push	{r3, r4, r5, lr}
   d65b8:	4604      	mov	r4, r0
   d65ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d65bc:	f7fe ffa2 	bl	d5504 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d65c0:	28ff      	cmp	r0, #255	; 0xff
   d65c2:	d010      	beq.n	d65e6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d65c4:	2806      	cmp	r0, #6
   d65c6:	d804      	bhi.n	d65d2 <digitalWrite+0x1c>
   d65c8:	234d      	movs	r3, #77	; 0x4d
   d65ca:	fa23 f000 	lsr.w	r0, r3, r0
   d65ce:	07c3      	lsls	r3, r0, #31
   d65d0:	d409      	bmi.n	d65e6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d65d2:	4620      	mov	r0, r4
   d65d4:	f7ff ffa8 	bl	d6528 <pinAvailable>
   d65d8:	b128      	cbz	r0, d65e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d65da:	4629      	mov	r1, r5
   d65dc:	4620      	mov	r0, r4
}
   d65de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d65e2:	f7fe bf97 	b.w	d5514 <HAL_GPIO_Write>
   d65e6:	bd38      	pop	{r3, r4, r5, pc}

000d65e8 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d65e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65ec:	4690      	mov	r8, r2
   d65ee:	461e      	mov	r6, r3
   d65f0:	2407      	movs	r4, #7
   d65f2:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d65f4:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d65f6:	f1b8 0f00 	cmp.w	r8, #0
   d65fa:	d104      	bne.n	d6606 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d65fc:	f1c4 0107 	rsb	r1, r4, #7
   d6600:	fa46 f101 	asr.w	r1, r6, r1
   d6604:	e001      	b.n	d660a <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d6606:	fa46 f104 	asr.w	r1, r6, r4
   d660a:	f001 0101 	and.w	r1, r1, #1
   d660e:	4638      	mov	r0, r7
   d6610:	f7ff ffd1 	bl	d65b6 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d6614:	2101      	movs	r1, #1
   d6616:	4628      	mov	r0, r5
   d6618:	f7ff ffcd 	bl	d65b6 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d661c:	2100      	movs	r1, #0
   d661e:	4628      	mov	r0, r5
   d6620:	f7ff ffc9 	bl	d65b6 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d6624:	f114 34ff 	adds.w	r4, r4, #4294967295
   d6628:	d2e5      	bcs.n	d65f6 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d662a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6630 <_Z17acquireWireBufferv>:
   d6630:	b570      	push	{r4, r5, r6, lr}
   d6632:	4604      	mov	r4, r0
   d6634:	2514      	movs	r5, #20
   d6636:	462a      	mov	r2, r5
   d6638:	4e09      	ldr	r6, [pc, #36]	; (d6660 <_Z17acquireWireBufferv+0x30>)
   d663a:	2100      	movs	r1, #0
   d663c:	f000 fdd9 	bl	d71f2 <memset>
   d6640:	8025      	strh	r5, [r4, #0]
   d6642:	2520      	movs	r5, #32
   d6644:	4631      	mov	r1, r6
   d6646:	60a5      	str	r5, [r4, #8]
   d6648:	6125      	str	r5, [r4, #16]
   d664a:	4628      	mov	r0, r5
   d664c:	f000 f840 	bl	d66d0 <_ZnajRKSt9nothrow_t>
   d6650:	4631      	mov	r1, r6
   d6652:	6060      	str	r0, [r4, #4]
   d6654:	4628      	mov	r0, r5
   d6656:	f000 f83b 	bl	d66d0 <_ZnajRKSt9nothrow_t>
   d665a:	60e0      	str	r0, [r4, #12]
   d665c:	4620      	mov	r0, r4
   d665e:	bd70      	pop	{r4, r5, r6, pc}
   d6660:	000d7c94 	.word	0x000d7c94

000d6664 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6664:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6666:	4d0e      	ldr	r5, [pc, #56]	; (d66a0 <_Z19__fetch_global_Wirev+0x3c>)
   d6668:	6829      	ldr	r1, [r5, #0]
   d666a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d666e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6670:	d113      	bne.n	d669a <_Z19__fetch_global_Wirev+0x36>
   d6672:	4628      	mov	r0, r5
   d6674:	f7fd fd20 	bl	d40b8 <__cxa_guard_acquire>
   d6678:	b178      	cbz	r0, d669a <_Z19__fetch_global_Wirev+0x36>
   d667a:	a801      	add	r0, sp, #4
   d667c:	f7ff ffd8 	bl	d6630 <_Z17acquireWireBufferv>
   d6680:	aa01      	add	r2, sp, #4
   d6682:	4621      	mov	r1, r4
   d6684:	4807      	ldr	r0, [pc, #28]	; (d66a4 <_Z19__fetch_global_Wirev+0x40>)
   d6686:	f7ff fd85 	bl	d6194 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d668a:	4628      	mov	r0, r5
   d668c:	f7fd fd19 	bl	d40c2 <__cxa_guard_release>
   d6690:	4a05      	ldr	r2, [pc, #20]	; (d66a8 <_Z19__fetch_global_Wirev+0x44>)
   d6692:	4906      	ldr	r1, [pc, #24]	; (d66ac <_Z19__fetch_global_Wirev+0x48>)
   d6694:	4803      	ldr	r0, [pc, #12]	; (d66a4 <_Z19__fetch_global_Wirev+0x40>)
   d6696:	f000 f80b 	bl	d66b0 <__aeabi_atexit>
	return wire;
}
   d669a:	4802      	ldr	r0, [pc, #8]	; (d66a4 <_Z19__fetch_global_Wirev+0x40>)
   d669c:	b007      	add	sp, #28
   d669e:	bd30      	pop	{r4, r5, pc}
   d66a0:	2003e734 	.word	0x2003e734
   d66a4:	2003e738 	.word	0x2003e738
   d66a8:	2003e2c0 	.word	0x2003e2c0
   d66ac:	000d613d 	.word	0x000d613d

000d66b0 <__aeabi_atexit>:
   d66b0:	460b      	mov	r3, r1
   d66b2:	4601      	mov	r1, r0
   d66b4:	4618      	mov	r0, r3
   d66b6:	f000 bd83 	b.w	d71c0 <__cxa_atexit>
	...

000d66bc <_ZSt15get_new_handlerv>:
   d66bc:	4b02      	ldr	r3, [pc, #8]	; (d66c8 <_ZSt15get_new_handlerv+0xc>)
   d66be:	6818      	ldr	r0, [r3, #0]
   d66c0:	f3bf 8f5f 	dmb	sy
   d66c4:	4770      	bx	lr
   d66c6:	bf00      	nop
   d66c8:	2003e74c 	.word	0x2003e74c

000d66cc <_ZdlPvj>:
   d66cc:	f7fd bce5 	b.w	d409a <_ZdlPv>

000d66d0 <_ZnajRKSt9nothrow_t>:
   d66d0:	f000 b800 	b.w	d66d4 <_ZnwjRKSt9nothrow_t>

000d66d4 <_ZnwjRKSt9nothrow_t>:
   d66d4:	b510      	push	{r4, lr}
   d66d6:	2800      	cmp	r0, #0
   d66d8:	bf14      	ite	ne
   d66da:	4604      	movne	r4, r0
   d66dc:	2401      	moveq	r4, #1
   d66de:	4620      	mov	r0, r4
   d66e0:	f7ff f914 	bl	d590c <malloc>
   d66e4:	b920      	cbnz	r0, d66f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d66e6:	f7ff ffe9 	bl	d66bc <_ZSt15get_new_handlerv>
   d66ea:	b108      	cbz	r0, d66f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d66ec:	4780      	blx	r0
   d66ee:	e7f6      	b.n	d66de <_ZnwjRKSt9nothrow_t+0xa>
   d66f0:	bd10      	pop	{r4, pc}
	...

000d66f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d66f4:	4b18      	ldr	r3, [pc, #96]	; (d6758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d66f6:	681a      	ldr	r2, [r3, #0]
   d66f8:	07d1      	lsls	r1, r2, #31
   d66fa:	bf5c      	itt	pl
   d66fc:	2201      	movpl	r2, #1
   d66fe:	601a      	strpl	r2, [r3, #0]
   d6700:	4b16      	ldr	r3, [pc, #88]	; (d675c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6702:	681a      	ldr	r2, [r3, #0]
   d6704:	07d2      	lsls	r2, r2, #31
   d6706:	bf5c      	itt	pl
   d6708:	2201      	movpl	r2, #1
   d670a:	601a      	strpl	r2, [r3, #0]
   d670c:	4b14      	ldr	r3, [pc, #80]	; (d6760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d670e:	681a      	ldr	r2, [r3, #0]
   d6710:	07d0      	lsls	r0, r2, #31
   d6712:	bf5c      	itt	pl
   d6714:	2201      	movpl	r2, #1
   d6716:	601a      	strpl	r2, [r3, #0]
   d6718:	4b12      	ldr	r3, [pc, #72]	; (d6764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d671a:	681a      	ldr	r2, [r3, #0]
   d671c:	07d1      	lsls	r1, r2, #31
   d671e:	bf5c      	itt	pl
   d6720:	2201      	movpl	r2, #1
   d6722:	601a      	strpl	r2, [r3, #0]
   d6724:	4b10      	ldr	r3, [pc, #64]	; (d6768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6726:	681a      	ldr	r2, [r3, #0]
   d6728:	07d2      	lsls	r2, r2, #31
   d672a:	bf5c      	itt	pl
   d672c:	2201      	movpl	r2, #1
   d672e:	601a      	strpl	r2, [r3, #0]
   d6730:	4b0e      	ldr	r3, [pc, #56]	; (d676c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6732:	681a      	ldr	r2, [r3, #0]
   d6734:	07d0      	lsls	r0, r2, #31
   d6736:	bf5c      	itt	pl
   d6738:	2201      	movpl	r2, #1
   d673a:	601a      	strpl	r2, [r3, #0]
   d673c:	4b0c      	ldr	r3, [pc, #48]	; (d6770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d673e:	681a      	ldr	r2, [r3, #0]
   d6740:	07d1      	lsls	r1, r2, #31
   d6742:	bf5c      	itt	pl
   d6744:	2201      	movpl	r2, #1
   d6746:	601a      	strpl	r2, [r3, #0]
   d6748:	4b0a      	ldr	r3, [pc, #40]	; (d6774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d674a:	681a      	ldr	r2, [r3, #0]
   d674c:	07d2      	lsls	r2, r2, #31
   d674e:	bf5c      	itt	pl
   d6750:	2201      	movpl	r2, #1
   d6752:	601a      	strpl	r2, [r3, #0]
   d6754:	4770      	bx	lr
   d6756:	bf00      	nop
   d6758:	2003e76c 	.word	0x2003e76c
   d675c:	2003e768 	.word	0x2003e768
   d6760:	2003e764 	.word	0x2003e764
   d6764:	2003e760 	.word	0x2003e760
   d6768:	2003e75c 	.word	0x2003e75c
   d676c:	2003e758 	.word	0x2003e758
   d6770:	2003e754 	.word	0x2003e754
   d6774:	2003e750 	.word	0x2003e750

000d6778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6778:	4b24      	ldr	r3, [pc, #144]	; (d680c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d677a:	681a      	ldr	r2, [r3, #0]
   d677c:	07d0      	lsls	r0, r2, #31
   d677e:	bf5c      	itt	pl
   d6780:	2201      	movpl	r2, #1
   d6782:	601a      	strpl	r2, [r3, #0]
   d6784:	4b22      	ldr	r3, [pc, #136]	; (d6810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6786:	681a      	ldr	r2, [r3, #0]
   d6788:	07d1      	lsls	r1, r2, #31
   d678a:	bf5c      	itt	pl
   d678c:	2201      	movpl	r2, #1
   d678e:	601a      	strpl	r2, [r3, #0]
   d6790:	4b20      	ldr	r3, [pc, #128]	; (d6814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6792:	681a      	ldr	r2, [r3, #0]
   d6794:	07d2      	lsls	r2, r2, #31
   d6796:	bf5c      	itt	pl
   d6798:	2201      	movpl	r2, #1
   d679a:	601a      	strpl	r2, [r3, #0]
   d679c:	4b1e      	ldr	r3, [pc, #120]	; (d6818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d679e:	681a      	ldr	r2, [r3, #0]
   d67a0:	07d0      	lsls	r0, r2, #31
   d67a2:	bf5c      	itt	pl
   d67a4:	2201      	movpl	r2, #1
   d67a6:	601a      	strpl	r2, [r3, #0]
   d67a8:	4b1c      	ldr	r3, [pc, #112]	; (d681c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d67aa:	681a      	ldr	r2, [r3, #0]
   d67ac:	07d1      	lsls	r1, r2, #31
   d67ae:	bf5c      	itt	pl
   d67b0:	2201      	movpl	r2, #1
   d67b2:	601a      	strpl	r2, [r3, #0]
   d67b4:	4b1a      	ldr	r3, [pc, #104]	; (d6820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d67b6:	681a      	ldr	r2, [r3, #0]
   d67b8:	07d2      	lsls	r2, r2, #31
   d67ba:	bf5c      	itt	pl
   d67bc:	2201      	movpl	r2, #1
   d67be:	601a      	strpl	r2, [r3, #0]
   d67c0:	4b18      	ldr	r3, [pc, #96]	; (d6824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d67c2:	681a      	ldr	r2, [r3, #0]
   d67c4:	07d0      	lsls	r0, r2, #31
   d67c6:	bf5c      	itt	pl
   d67c8:	2201      	movpl	r2, #1
   d67ca:	601a      	strpl	r2, [r3, #0]
   d67cc:	4b16      	ldr	r3, [pc, #88]	; (d6828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d67ce:	681a      	ldr	r2, [r3, #0]
   d67d0:	07d1      	lsls	r1, r2, #31
   d67d2:	bf5c      	itt	pl
   d67d4:	2201      	movpl	r2, #1
   d67d6:	601a      	strpl	r2, [r3, #0]
   d67d8:	4b14      	ldr	r3, [pc, #80]	; (d682c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d67da:	681a      	ldr	r2, [r3, #0]
   d67dc:	07d2      	lsls	r2, r2, #31
   d67de:	bf5c      	itt	pl
   d67e0:	2201      	movpl	r2, #1
   d67e2:	601a      	strpl	r2, [r3, #0]
   d67e4:	4b12      	ldr	r3, [pc, #72]	; (d6830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d67e6:	681a      	ldr	r2, [r3, #0]
   d67e8:	07d0      	lsls	r0, r2, #31
   d67ea:	bf5c      	itt	pl
   d67ec:	2201      	movpl	r2, #1
   d67ee:	601a      	strpl	r2, [r3, #0]
   d67f0:	4b10      	ldr	r3, [pc, #64]	; (d6834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d67f2:	681a      	ldr	r2, [r3, #0]
   d67f4:	07d1      	lsls	r1, r2, #31
   d67f6:	bf5c      	itt	pl
   d67f8:	2201      	movpl	r2, #1
   d67fa:	601a      	strpl	r2, [r3, #0]
   d67fc:	4b0e      	ldr	r3, [pc, #56]	; (d6838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d67fe:	681a      	ldr	r2, [r3, #0]
   d6800:	07d2      	lsls	r2, r2, #31
   d6802:	bf5c      	itt	pl
   d6804:	2201      	movpl	r2, #1
   d6806:	601a      	strpl	r2, [r3, #0]
   d6808:	4770      	bx	lr
   d680a:	bf00      	nop
   d680c:	2003e79c 	.word	0x2003e79c
   d6810:	2003e798 	.word	0x2003e798
   d6814:	2003e794 	.word	0x2003e794
   d6818:	2003e790 	.word	0x2003e790
   d681c:	2003e78c 	.word	0x2003e78c
   d6820:	2003e788 	.word	0x2003e788
   d6824:	2003e784 	.word	0x2003e784
   d6828:	2003e780 	.word	0x2003e780
   d682c:	2003e77c 	.word	0x2003e77c
   d6830:	2003e778 	.word	0x2003e778
   d6834:	2003e774 	.word	0x2003e774
   d6838:	2003e770 	.word	0x2003e770

000d683c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d683c:	4b24      	ldr	r3, [pc, #144]	; (d68d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d683e:	681a      	ldr	r2, [r3, #0]
   d6840:	07d0      	lsls	r0, r2, #31
   d6842:	bf5c      	itt	pl
   d6844:	2201      	movpl	r2, #1
   d6846:	601a      	strpl	r2, [r3, #0]
   d6848:	4b22      	ldr	r3, [pc, #136]	; (d68d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d684a:	681a      	ldr	r2, [r3, #0]
   d684c:	07d1      	lsls	r1, r2, #31
   d684e:	bf5c      	itt	pl
   d6850:	2201      	movpl	r2, #1
   d6852:	601a      	strpl	r2, [r3, #0]
   d6854:	4b20      	ldr	r3, [pc, #128]	; (d68d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6856:	681a      	ldr	r2, [r3, #0]
   d6858:	07d2      	lsls	r2, r2, #31
   d685a:	bf5c      	itt	pl
   d685c:	2201      	movpl	r2, #1
   d685e:	601a      	strpl	r2, [r3, #0]
   d6860:	4b1e      	ldr	r3, [pc, #120]	; (d68dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6862:	681a      	ldr	r2, [r3, #0]
   d6864:	07d0      	lsls	r0, r2, #31
   d6866:	bf5c      	itt	pl
   d6868:	2201      	movpl	r2, #1
   d686a:	601a      	strpl	r2, [r3, #0]
   d686c:	4b1c      	ldr	r3, [pc, #112]	; (d68e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d686e:	681a      	ldr	r2, [r3, #0]
   d6870:	07d1      	lsls	r1, r2, #31
   d6872:	bf5c      	itt	pl
   d6874:	2201      	movpl	r2, #1
   d6876:	601a      	strpl	r2, [r3, #0]
   d6878:	4b1a      	ldr	r3, [pc, #104]	; (d68e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d687a:	681a      	ldr	r2, [r3, #0]
   d687c:	07d2      	lsls	r2, r2, #31
   d687e:	bf5c      	itt	pl
   d6880:	2201      	movpl	r2, #1
   d6882:	601a      	strpl	r2, [r3, #0]
   d6884:	4b18      	ldr	r3, [pc, #96]	; (d68e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6886:	681a      	ldr	r2, [r3, #0]
   d6888:	07d0      	lsls	r0, r2, #31
   d688a:	bf5c      	itt	pl
   d688c:	2201      	movpl	r2, #1
   d688e:	601a      	strpl	r2, [r3, #0]
   d6890:	4b16      	ldr	r3, [pc, #88]	; (d68ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6892:	681a      	ldr	r2, [r3, #0]
   d6894:	07d1      	lsls	r1, r2, #31
   d6896:	bf5c      	itt	pl
   d6898:	2201      	movpl	r2, #1
   d689a:	601a      	strpl	r2, [r3, #0]
   d689c:	4b14      	ldr	r3, [pc, #80]	; (d68f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d689e:	681a      	ldr	r2, [r3, #0]
   d68a0:	07d2      	lsls	r2, r2, #31
   d68a2:	bf5c      	itt	pl
   d68a4:	2201      	movpl	r2, #1
   d68a6:	601a      	strpl	r2, [r3, #0]
   d68a8:	4b12      	ldr	r3, [pc, #72]	; (d68f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d68aa:	681a      	ldr	r2, [r3, #0]
   d68ac:	07d0      	lsls	r0, r2, #31
   d68ae:	bf5c      	itt	pl
   d68b0:	2201      	movpl	r2, #1
   d68b2:	601a      	strpl	r2, [r3, #0]
   d68b4:	4b10      	ldr	r3, [pc, #64]	; (d68f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d68b6:	681a      	ldr	r2, [r3, #0]
   d68b8:	07d1      	lsls	r1, r2, #31
   d68ba:	bf5c      	itt	pl
   d68bc:	2201      	movpl	r2, #1
   d68be:	601a      	strpl	r2, [r3, #0]
   d68c0:	4b0e      	ldr	r3, [pc, #56]	; (d68fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d68c2:	681a      	ldr	r2, [r3, #0]
   d68c4:	07d2      	lsls	r2, r2, #31
   d68c6:	bf5c      	itt	pl
   d68c8:	2201      	movpl	r2, #1
   d68ca:	601a      	strpl	r2, [r3, #0]
   d68cc:	4770      	bx	lr
   d68ce:	bf00      	nop
   d68d0:	2003e7cc 	.word	0x2003e7cc
   d68d4:	2003e7c8 	.word	0x2003e7c8
   d68d8:	2003e7c4 	.word	0x2003e7c4
   d68dc:	2003e7c0 	.word	0x2003e7c0
   d68e0:	2003e7bc 	.word	0x2003e7bc
   d68e4:	2003e7b8 	.word	0x2003e7b8
   d68e8:	2003e7b4 	.word	0x2003e7b4
   d68ec:	2003e7b0 	.word	0x2003e7b0
   d68f0:	2003e7ac 	.word	0x2003e7ac
   d68f4:	2003e7a8 	.word	0x2003e7a8
   d68f8:	2003e7a4 	.word	0x2003e7a4
   d68fc:	2003e7a0 	.word	0x2003e7a0

000d6900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6900:	4b18      	ldr	r3, [pc, #96]	; (d6964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6902:	681a      	ldr	r2, [r3, #0]
   d6904:	07d1      	lsls	r1, r2, #31
   d6906:	bf5c      	itt	pl
   d6908:	2201      	movpl	r2, #1
   d690a:	601a      	strpl	r2, [r3, #0]
   d690c:	4b16      	ldr	r3, [pc, #88]	; (d6968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d690e:	681a      	ldr	r2, [r3, #0]
   d6910:	07d2      	lsls	r2, r2, #31
   d6912:	bf5c      	itt	pl
   d6914:	2201      	movpl	r2, #1
   d6916:	601a      	strpl	r2, [r3, #0]
   d6918:	4b14      	ldr	r3, [pc, #80]	; (d696c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d691a:	681a      	ldr	r2, [r3, #0]
   d691c:	07d0      	lsls	r0, r2, #31
   d691e:	bf5c      	itt	pl
   d6920:	2201      	movpl	r2, #1
   d6922:	601a      	strpl	r2, [r3, #0]
   d6924:	4b12      	ldr	r3, [pc, #72]	; (d6970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6926:	681a      	ldr	r2, [r3, #0]
   d6928:	07d1      	lsls	r1, r2, #31
   d692a:	bf5c      	itt	pl
   d692c:	2201      	movpl	r2, #1
   d692e:	601a      	strpl	r2, [r3, #0]
   d6930:	4b10      	ldr	r3, [pc, #64]	; (d6974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6932:	681a      	ldr	r2, [r3, #0]
   d6934:	07d2      	lsls	r2, r2, #31
   d6936:	bf5c      	itt	pl
   d6938:	2201      	movpl	r2, #1
   d693a:	601a      	strpl	r2, [r3, #0]
   d693c:	4b0e      	ldr	r3, [pc, #56]	; (d6978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d693e:	681a      	ldr	r2, [r3, #0]
   d6940:	07d0      	lsls	r0, r2, #31
   d6942:	bf5c      	itt	pl
   d6944:	2201      	movpl	r2, #1
   d6946:	601a      	strpl	r2, [r3, #0]
   d6948:	4b0c      	ldr	r3, [pc, #48]	; (d697c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d694a:	681a      	ldr	r2, [r3, #0]
   d694c:	07d1      	lsls	r1, r2, #31
   d694e:	bf5c      	itt	pl
   d6950:	2201      	movpl	r2, #1
   d6952:	601a      	strpl	r2, [r3, #0]
   d6954:	4b0a      	ldr	r3, [pc, #40]	; (d6980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6956:	681a      	ldr	r2, [r3, #0]
   d6958:	07d2      	lsls	r2, r2, #31
   d695a:	bf5c      	itt	pl
   d695c:	2201      	movpl	r2, #1
   d695e:	601a      	strpl	r2, [r3, #0]
   d6960:	4770      	bx	lr
   d6962:	bf00      	nop
   d6964:	2003e7ec 	.word	0x2003e7ec
   d6968:	2003e7e8 	.word	0x2003e7e8
   d696c:	2003e7e4 	.word	0x2003e7e4
   d6970:	2003e7e0 	.word	0x2003e7e0
   d6974:	2003e7dc 	.word	0x2003e7dc
   d6978:	2003e7d8 	.word	0x2003e7d8
   d697c:	2003e7d4 	.word	0x2003e7d4
   d6980:	2003e7d0 	.word	0x2003e7d0

000d6984 <__aeabi_drsub>:
   d6984:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6988:	e002      	b.n	d6990 <__adddf3>
   d698a:	bf00      	nop

000d698c <__aeabi_dsub>:
   d698c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6990 <__adddf3>:
   d6990:	b530      	push	{r4, r5, lr}
   d6992:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6996:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d699a:	ea94 0f05 	teq	r4, r5
   d699e:	bf08      	it	eq
   d69a0:	ea90 0f02 	teqeq	r0, r2
   d69a4:	bf1f      	itttt	ne
   d69a6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d69aa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d69ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d69b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d69b6:	f000 80e2 	beq.w	d6b7e <__adddf3+0x1ee>
   d69ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d69be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d69c2:	bfb8      	it	lt
   d69c4:	426d      	neglt	r5, r5
   d69c6:	dd0c      	ble.n	d69e2 <__adddf3+0x52>
   d69c8:	442c      	add	r4, r5
   d69ca:	ea80 0202 	eor.w	r2, r0, r2
   d69ce:	ea81 0303 	eor.w	r3, r1, r3
   d69d2:	ea82 0000 	eor.w	r0, r2, r0
   d69d6:	ea83 0101 	eor.w	r1, r3, r1
   d69da:	ea80 0202 	eor.w	r2, r0, r2
   d69de:	ea81 0303 	eor.w	r3, r1, r3
   d69e2:	2d36      	cmp	r5, #54	; 0x36
   d69e4:	bf88      	it	hi
   d69e6:	bd30      	pophi	{r4, r5, pc}
   d69e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d69ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d69f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d69f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d69f8:	d002      	beq.n	d6a00 <__adddf3+0x70>
   d69fa:	4240      	negs	r0, r0
   d69fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6a00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6a04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6a08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6a0c:	d002      	beq.n	d6a14 <__adddf3+0x84>
   d6a0e:	4252      	negs	r2, r2
   d6a10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6a14:	ea94 0f05 	teq	r4, r5
   d6a18:	f000 80a7 	beq.w	d6b6a <__adddf3+0x1da>
   d6a1c:	f1a4 0401 	sub.w	r4, r4, #1
   d6a20:	f1d5 0e20 	rsbs	lr, r5, #32
   d6a24:	db0d      	blt.n	d6a42 <__adddf3+0xb2>
   d6a26:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6a2a:	fa22 f205 	lsr.w	r2, r2, r5
   d6a2e:	1880      	adds	r0, r0, r2
   d6a30:	f141 0100 	adc.w	r1, r1, #0
   d6a34:	fa03 f20e 	lsl.w	r2, r3, lr
   d6a38:	1880      	adds	r0, r0, r2
   d6a3a:	fa43 f305 	asr.w	r3, r3, r5
   d6a3e:	4159      	adcs	r1, r3
   d6a40:	e00e      	b.n	d6a60 <__adddf3+0xd0>
   d6a42:	f1a5 0520 	sub.w	r5, r5, #32
   d6a46:	f10e 0e20 	add.w	lr, lr, #32
   d6a4a:	2a01      	cmp	r2, #1
   d6a4c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6a50:	bf28      	it	cs
   d6a52:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6a56:	fa43 f305 	asr.w	r3, r3, r5
   d6a5a:	18c0      	adds	r0, r0, r3
   d6a5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6a60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6a64:	d507      	bpl.n	d6a76 <__adddf3+0xe6>
   d6a66:	f04f 0e00 	mov.w	lr, #0
   d6a6a:	f1dc 0c00 	rsbs	ip, ip, #0
   d6a6e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6a72:	eb6e 0101 	sbc.w	r1, lr, r1
   d6a76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6a7a:	d31b      	bcc.n	d6ab4 <__adddf3+0x124>
   d6a7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6a80:	d30c      	bcc.n	d6a9c <__adddf3+0x10c>
   d6a82:	0849      	lsrs	r1, r1, #1
   d6a84:	ea5f 0030 	movs.w	r0, r0, rrx
   d6a88:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6a8c:	f104 0401 	add.w	r4, r4, #1
   d6a90:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6a94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6a98:	f080 809a 	bcs.w	d6bd0 <__adddf3+0x240>
   d6a9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6aa0:	bf08      	it	eq
   d6aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6aa6:	f150 0000 	adcs.w	r0, r0, #0
   d6aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6aae:	ea41 0105 	orr.w	r1, r1, r5
   d6ab2:	bd30      	pop	{r4, r5, pc}
   d6ab4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6ab8:	4140      	adcs	r0, r0
   d6aba:	eb41 0101 	adc.w	r1, r1, r1
   d6abe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ac2:	f1a4 0401 	sub.w	r4, r4, #1
   d6ac6:	d1e9      	bne.n	d6a9c <__adddf3+0x10c>
   d6ac8:	f091 0f00 	teq	r1, #0
   d6acc:	bf04      	itt	eq
   d6ace:	4601      	moveq	r1, r0
   d6ad0:	2000      	moveq	r0, #0
   d6ad2:	fab1 f381 	clz	r3, r1
   d6ad6:	bf08      	it	eq
   d6ad8:	3320      	addeq	r3, #32
   d6ada:	f1a3 030b 	sub.w	r3, r3, #11
   d6ade:	f1b3 0220 	subs.w	r2, r3, #32
   d6ae2:	da0c      	bge.n	d6afe <__adddf3+0x16e>
   d6ae4:	320c      	adds	r2, #12
   d6ae6:	dd08      	ble.n	d6afa <__adddf3+0x16a>
   d6ae8:	f102 0c14 	add.w	ip, r2, #20
   d6aec:	f1c2 020c 	rsb	r2, r2, #12
   d6af0:	fa01 f00c 	lsl.w	r0, r1, ip
   d6af4:	fa21 f102 	lsr.w	r1, r1, r2
   d6af8:	e00c      	b.n	d6b14 <__adddf3+0x184>
   d6afa:	f102 0214 	add.w	r2, r2, #20
   d6afe:	bfd8      	it	le
   d6b00:	f1c2 0c20 	rsble	ip, r2, #32
   d6b04:	fa01 f102 	lsl.w	r1, r1, r2
   d6b08:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6b0c:	bfdc      	itt	le
   d6b0e:	ea41 010c 	orrle.w	r1, r1, ip
   d6b12:	4090      	lslle	r0, r2
   d6b14:	1ae4      	subs	r4, r4, r3
   d6b16:	bfa2      	ittt	ge
   d6b18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6b1c:	4329      	orrge	r1, r5
   d6b1e:	bd30      	popge	{r4, r5, pc}
   d6b20:	ea6f 0404 	mvn.w	r4, r4
   d6b24:	3c1f      	subs	r4, #31
   d6b26:	da1c      	bge.n	d6b62 <__adddf3+0x1d2>
   d6b28:	340c      	adds	r4, #12
   d6b2a:	dc0e      	bgt.n	d6b4a <__adddf3+0x1ba>
   d6b2c:	f104 0414 	add.w	r4, r4, #20
   d6b30:	f1c4 0220 	rsb	r2, r4, #32
   d6b34:	fa20 f004 	lsr.w	r0, r0, r4
   d6b38:	fa01 f302 	lsl.w	r3, r1, r2
   d6b3c:	ea40 0003 	orr.w	r0, r0, r3
   d6b40:	fa21 f304 	lsr.w	r3, r1, r4
   d6b44:	ea45 0103 	orr.w	r1, r5, r3
   d6b48:	bd30      	pop	{r4, r5, pc}
   d6b4a:	f1c4 040c 	rsb	r4, r4, #12
   d6b4e:	f1c4 0220 	rsb	r2, r4, #32
   d6b52:	fa20 f002 	lsr.w	r0, r0, r2
   d6b56:	fa01 f304 	lsl.w	r3, r1, r4
   d6b5a:	ea40 0003 	orr.w	r0, r0, r3
   d6b5e:	4629      	mov	r1, r5
   d6b60:	bd30      	pop	{r4, r5, pc}
   d6b62:	fa21 f004 	lsr.w	r0, r1, r4
   d6b66:	4629      	mov	r1, r5
   d6b68:	bd30      	pop	{r4, r5, pc}
   d6b6a:	f094 0f00 	teq	r4, #0
   d6b6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6b72:	bf06      	itte	eq
   d6b74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6b78:	3401      	addeq	r4, #1
   d6b7a:	3d01      	subne	r5, #1
   d6b7c:	e74e      	b.n	d6a1c <__adddf3+0x8c>
   d6b7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6b82:	bf18      	it	ne
   d6b84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6b88:	d029      	beq.n	d6bde <__adddf3+0x24e>
   d6b8a:	ea94 0f05 	teq	r4, r5
   d6b8e:	bf08      	it	eq
   d6b90:	ea90 0f02 	teqeq	r0, r2
   d6b94:	d005      	beq.n	d6ba2 <__adddf3+0x212>
   d6b96:	ea54 0c00 	orrs.w	ip, r4, r0
   d6b9a:	bf04      	itt	eq
   d6b9c:	4619      	moveq	r1, r3
   d6b9e:	4610      	moveq	r0, r2
   d6ba0:	bd30      	pop	{r4, r5, pc}
   d6ba2:	ea91 0f03 	teq	r1, r3
   d6ba6:	bf1e      	ittt	ne
   d6ba8:	2100      	movne	r1, #0
   d6baa:	2000      	movne	r0, #0
   d6bac:	bd30      	popne	{r4, r5, pc}
   d6bae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6bb2:	d105      	bne.n	d6bc0 <__adddf3+0x230>
   d6bb4:	0040      	lsls	r0, r0, #1
   d6bb6:	4149      	adcs	r1, r1
   d6bb8:	bf28      	it	cs
   d6bba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6bbe:	bd30      	pop	{r4, r5, pc}
   d6bc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6bc4:	bf3c      	itt	cc
   d6bc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6bca:	bd30      	popcc	{r4, r5, pc}
   d6bcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6bd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6bd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6bd8:	f04f 0000 	mov.w	r0, #0
   d6bdc:	bd30      	pop	{r4, r5, pc}
   d6bde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6be2:	bf1a      	itte	ne
   d6be4:	4619      	movne	r1, r3
   d6be6:	4610      	movne	r0, r2
   d6be8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6bec:	bf1c      	itt	ne
   d6bee:	460b      	movne	r3, r1
   d6bf0:	4602      	movne	r2, r0
   d6bf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6bf6:	bf06      	itte	eq
   d6bf8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6bfc:	ea91 0f03 	teqeq	r1, r3
   d6c00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6c04:	bd30      	pop	{r4, r5, pc}
   d6c06:	bf00      	nop

000d6c08 <__aeabi_ui2d>:
   d6c08:	f090 0f00 	teq	r0, #0
   d6c0c:	bf04      	itt	eq
   d6c0e:	2100      	moveq	r1, #0
   d6c10:	4770      	bxeq	lr
   d6c12:	b530      	push	{r4, r5, lr}
   d6c14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6c18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6c1c:	f04f 0500 	mov.w	r5, #0
   d6c20:	f04f 0100 	mov.w	r1, #0
   d6c24:	e750      	b.n	d6ac8 <__adddf3+0x138>
   d6c26:	bf00      	nop

000d6c28 <__aeabi_i2d>:
   d6c28:	f090 0f00 	teq	r0, #0
   d6c2c:	bf04      	itt	eq
   d6c2e:	2100      	moveq	r1, #0
   d6c30:	4770      	bxeq	lr
   d6c32:	b530      	push	{r4, r5, lr}
   d6c34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6c38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6c3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6c40:	bf48      	it	mi
   d6c42:	4240      	negmi	r0, r0
   d6c44:	f04f 0100 	mov.w	r1, #0
   d6c48:	e73e      	b.n	d6ac8 <__adddf3+0x138>
   d6c4a:	bf00      	nop

000d6c4c <__aeabi_f2d>:
   d6c4c:	0042      	lsls	r2, r0, #1
   d6c4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6c52:	ea4f 0131 	mov.w	r1, r1, rrx
   d6c56:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6c5a:	bf1f      	itttt	ne
   d6c5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6c60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6c64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6c68:	4770      	bxne	lr
   d6c6a:	f092 0f00 	teq	r2, #0
   d6c6e:	bf14      	ite	ne
   d6c70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6c74:	4770      	bxeq	lr
   d6c76:	b530      	push	{r4, r5, lr}
   d6c78:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6c80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6c84:	e720      	b.n	d6ac8 <__adddf3+0x138>
   d6c86:	bf00      	nop

000d6c88 <__aeabi_ul2d>:
   d6c88:	ea50 0201 	orrs.w	r2, r0, r1
   d6c8c:	bf08      	it	eq
   d6c8e:	4770      	bxeq	lr
   d6c90:	b530      	push	{r4, r5, lr}
   d6c92:	f04f 0500 	mov.w	r5, #0
   d6c96:	e00a      	b.n	d6cae <__aeabi_l2d+0x16>

000d6c98 <__aeabi_l2d>:
   d6c98:	ea50 0201 	orrs.w	r2, r0, r1
   d6c9c:	bf08      	it	eq
   d6c9e:	4770      	bxeq	lr
   d6ca0:	b530      	push	{r4, r5, lr}
   d6ca2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6ca6:	d502      	bpl.n	d6cae <__aeabi_l2d+0x16>
   d6ca8:	4240      	negs	r0, r0
   d6caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6cae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6cb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6cb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6cba:	f43f aedc 	beq.w	d6a76 <__adddf3+0xe6>
   d6cbe:	f04f 0203 	mov.w	r2, #3
   d6cc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6cc6:	bf18      	it	ne
   d6cc8:	3203      	addne	r2, #3
   d6cca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6cce:	bf18      	it	ne
   d6cd0:	3203      	addne	r2, #3
   d6cd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6cd6:	f1c2 0320 	rsb	r3, r2, #32
   d6cda:	fa00 fc03 	lsl.w	ip, r0, r3
   d6cde:	fa20 f002 	lsr.w	r0, r0, r2
   d6ce2:	fa01 fe03 	lsl.w	lr, r1, r3
   d6ce6:	ea40 000e 	orr.w	r0, r0, lr
   d6cea:	fa21 f102 	lsr.w	r1, r1, r2
   d6cee:	4414      	add	r4, r2
   d6cf0:	e6c1      	b.n	d6a76 <__adddf3+0xe6>
   d6cf2:	bf00      	nop

000d6cf4 <__aeabi_dmul>:
   d6cf4:	b570      	push	{r4, r5, r6, lr}
   d6cf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6cfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6cfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6d02:	bf1d      	ittte	ne
   d6d04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6d08:	ea94 0f0c 	teqne	r4, ip
   d6d0c:	ea95 0f0c 	teqne	r5, ip
   d6d10:	f000 f8de 	bleq	d6ed0 <__aeabi_dmul+0x1dc>
   d6d14:	442c      	add	r4, r5
   d6d16:	ea81 0603 	eor.w	r6, r1, r3
   d6d1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6d1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6d22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6d26:	bf18      	it	ne
   d6d28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6d2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6d34:	d038      	beq.n	d6da8 <__aeabi_dmul+0xb4>
   d6d36:	fba0 ce02 	umull	ip, lr, r0, r2
   d6d3a:	f04f 0500 	mov.w	r5, #0
   d6d3e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6d42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6d46:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6d4a:	f04f 0600 	mov.w	r6, #0
   d6d4e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6d52:	f09c 0f00 	teq	ip, #0
   d6d56:	bf18      	it	ne
   d6d58:	f04e 0e01 	orrne.w	lr, lr, #1
   d6d5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6d60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6d64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6d68:	d204      	bcs.n	d6d74 <__aeabi_dmul+0x80>
   d6d6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6d6e:	416d      	adcs	r5, r5
   d6d70:	eb46 0606 	adc.w	r6, r6, r6
   d6d74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6d78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6d7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6d80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6d84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6d88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6d8c:	bf88      	it	hi
   d6d8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6d92:	d81e      	bhi.n	d6dd2 <__aeabi_dmul+0xde>
   d6d94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6d98:	bf08      	it	eq
   d6d9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6d9e:	f150 0000 	adcs.w	r0, r0, #0
   d6da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6da6:	bd70      	pop	{r4, r5, r6, pc}
   d6da8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6dac:	ea46 0101 	orr.w	r1, r6, r1
   d6db0:	ea40 0002 	orr.w	r0, r0, r2
   d6db4:	ea81 0103 	eor.w	r1, r1, r3
   d6db8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6dbc:	bfc2      	ittt	gt
   d6dbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6dc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6dc6:	bd70      	popgt	{r4, r5, r6, pc}
   d6dc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6dcc:	f04f 0e00 	mov.w	lr, #0
   d6dd0:	3c01      	subs	r4, #1
   d6dd2:	f300 80ab 	bgt.w	d6f2c <__aeabi_dmul+0x238>
   d6dd6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6dda:	bfde      	ittt	le
   d6ddc:	2000      	movle	r0, #0
   d6dde:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6de2:	bd70      	pople	{r4, r5, r6, pc}
   d6de4:	f1c4 0400 	rsb	r4, r4, #0
   d6de8:	3c20      	subs	r4, #32
   d6dea:	da35      	bge.n	d6e58 <__aeabi_dmul+0x164>
   d6dec:	340c      	adds	r4, #12
   d6dee:	dc1b      	bgt.n	d6e28 <__aeabi_dmul+0x134>
   d6df0:	f104 0414 	add.w	r4, r4, #20
   d6df4:	f1c4 0520 	rsb	r5, r4, #32
   d6df8:	fa00 f305 	lsl.w	r3, r0, r5
   d6dfc:	fa20 f004 	lsr.w	r0, r0, r4
   d6e00:	fa01 f205 	lsl.w	r2, r1, r5
   d6e04:	ea40 0002 	orr.w	r0, r0, r2
   d6e08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6e0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6e10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6e14:	fa21 f604 	lsr.w	r6, r1, r4
   d6e18:	eb42 0106 	adc.w	r1, r2, r6
   d6e1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6e20:	bf08      	it	eq
   d6e22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6e26:	bd70      	pop	{r4, r5, r6, pc}
   d6e28:	f1c4 040c 	rsb	r4, r4, #12
   d6e2c:	f1c4 0520 	rsb	r5, r4, #32
   d6e30:	fa00 f304 	lsl.w	r3, r0, r4
   d6e34:	fa20 f005 	lsr.w	r0, r0, r5
   d6e38:	fa01 f204 	lsl.w	r2, r1, r4
   d6e3c:	ea40 0002 	orr.w	r0, r0, r2
   d6e40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6e48:	f141 0100 	adc.w	r1, r1, #0
   d6e4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6e50:	bf08      	it	eq
   d6e52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6e56:	bd70      	pop	{r4, r5, r6, pc}
   d6e58:	f1c4 0520 	rsb	r5, r4, #32
   d6e5c:	fa00 f205 	lsl.w	r2, r0, r5
   d6e60:	ea4e 0e02 	orr.w	lr, lr, r2
   d6e64:	fa20 f304 	lsr.w	r3, r0, r4
   d6e68:	fa01 f205 	lsl.w	r2, r1, r5
   d6e6c:	ea43 0302 	orr.w	r3, r3, r2
   d6e70:	fa21 f004 	lsr.w	r0, r1, r4
   d6e74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e78:	fa21 f204 	lsr.w	r2, r1, r4
   d6e7c:	ea20 0002 	bic.w	r0, r0, r2
   d6e80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6e84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6e88:	bf08      	it	eq
   d6e8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6e8e:	bd70      	pop	{r4, r5, r6, pc}
   d6e90:	f094 0f00 	teq	r4, #0
   d6e94:	d10f      	bne.n	d6eb6 <__aeabi_dmul+0x1c2>
   d6e96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6e9a:	0040      	lsls	r0, r0, #1
   d6e9c:	eb41 0101 	adc.w	r1, r1, r1
   d6ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ea4:	bf08      	it	eq
   d6ea6:	3c01      	subeq	r4, #1
   d6ea8:	d0f7      	beq.n	d6e9a <__aeabi_dmul+0x1a6>
   d6eaa:	ea41 0106 	orr.w	r1, r1, r6
   d6eae:	f095 0f00 	teq	r5, #0
   d6eb2:	bf18      	it	ne
   d6eb4:	4770      	bxne	lr
   d6eb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6eba:	0052      	lsls	r2, r2, #1
   d6ebc:	eb43 0303 	adc.w	r3, r3, r3
   d6ec0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6ec4:	bf08      	it	eq
   d6ec6:	3d01      	subeq	r5, #1
   d6ec8:	d0f7      	beq.n	d6eba <__aeabi_dmul+0x1c6>
   d6eca:	ea43 0306 	orr.w	r3, r3, r6
   d6ece:	4770      	bx	lr
   d6ed0:	ea94 0f0c 	teq	r4, ip
   d6ed4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ed8:	bf18      	it	ne
   d6eda:	ea95 0f0c 	teqne	r5, ip
   d6ede:	d00c      	beq.n	d6efa <__aeabi_dmul+0x206>
   d6ee0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ee4:	bf18      	it	ne
   d6ee6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6eea:	d1d1      	bne.n	d6e90 <__aeabi_dmul+0x19c>
   d6eec:	ea81 0103 	eor.w	r1, r1, r3
   d6ef0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ef4:	f04f 0000 	mov.w	r0, #0
   d6ef8:	bd70      	pop	{r4, r5, r6, pc}
   d6efa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6efe:	bf06      	itte	eq
   d6f00:	4610      	moveq	r0, r2
   d6f02:	4619      	moveq	r1, r3
   d6f04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6f08:	d019      	beq.n	d6f3e <__aeabi_dmul+0x24a>
   d6f0a:	ea94 0f0c 	teq	r4, ip
   d6f0e:	d102      	bne.n	d6f16 <__aeabi_dmul+0x222>
   d6f10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6f14:	d113      	bne.n	d6f3e <__aeabi_dmul+0x24a>
   d6f16:	ea95 0f0c 	teq	r5, ip
   d6f1a:	d105      	bne.n	d6f28 <__aeabi_dmul+0x234>
   d6f1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6f20:	bf1c      	itt	ne
   d6f22:	4610      	movne	r0, r2
   d6f24:	4619      	movne	r1, r3
   d6f26:	d10a      	bne.n	d6f3e <__aeabi_dmul+0x24a>
   d6f28:	ea81 0103 	eor.w	r1, r1, r3
   d6f2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6f34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6f38:	f04f 0000 	mov.w	r0, #0
   d6f3c:	bd70      	pop	{r4, r5, r6, pc}
   d6f3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6f42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6f46:	bd70      	pop	{r4, r5, r6, pc}

000d6f48 <__aeabi_ddiv>:
   d6f48:	b570      	push	{r4, r5, r6, lr}
   d6f4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6f56:	bf1d      	ittte	ne
   d6f58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6f5c:	ea94 0f0c 	teqne	r4, ip
   d6f60:	ea95 0f0c 	teqne	r5, ip
   d6f64:	f000 f8a7 	bleq	d70b6 <__aeabi_ddiv+0x16e>
   d6f68:	eba4 0405 	sub.w	r4, r4, r5
   d6f6c:	ea81 0e03 	eor.w	lr, r1, r3
   d6f70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6f74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6f78:	f000 8088 	beq.w	d708c <__aeabi_ddiv+0x144>
   d6f7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6f80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6f84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6f88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6f8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6f90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6f94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6f98:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6f9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6fa0:	429d      	cmp	r5, r3
   d6fa2:	bf08      	it	eq
   d6fa4:	4296      	cmpeq	r6, r2
   d6fa6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6faa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6fae:	d202      	bcs.n	d6fb6 <__aeabi_ddiv+0x6e>
   d6fb0:	085b      	lsrs	r3, r3, #1
   d6fb2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6fb6:	1ab6      	subs	r6, r6, r2
   d6fb8:	eb65 0503 	sbc.w	r5, r5, r3
   d6fbc:	085b      	lsrs	r3, r3, #1
   d6fbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d6fc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6fc6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6fca:	ebb6 0e02 	subs.w	lr, r6, r2
   d6fce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6fd2:	bf22      	ittt	cs
   d6fd4:	1ab6      	subcs	r6, r6, r2
   d6fd6:	4675      	movcs	r5, lr
   d6fd8:	ea40 000c 	orrcs.w	r0, r0, ip
   d6fdc:	085b      	lsrs	r3, r3, #1
   d6fde:	ea4f 0232 	mov.w	r2, r2, rrx
   d6fe2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6fe6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6fea:	bf22      	ittt	cs
   d6fec:	1ab6      	subcs	r6, r6, r2
   d6fee:	4675      	movcs	r5, lr
   d6ff0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6ff4:	085b      	lsrs	r3, r3, #1
   d6ff6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6ffa:	ebb6 0e02 	subs.w	lr, r6, r2
   d6ffe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7002:	bf22      	ittt	cs
   d7004:	1ab6      	subcs	r6, r6, r2
   d7006:	4675      	movcs	r5, lr
   d7008:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d700c:	085b      	lsrs	r3, r3, #1
   d700e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7012:	ebb6 0e02 	subs.w	lr, r6, r2
   d7016:	eb75 0e03 	sbcs.w	lr, r5, r3
   d701a:	bf22      	ittt	cs
   d701c:	1ab6      	subcs	r6, r6, r2
   d701e:	4675      	movcs	r5, lr
   d7020:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7024:	ea55 0e06 	orrs.w	lr, r5, r6
   d7028:	d018      	beq.n	d705c <__aeabi_ddiv+0x114>
   d702a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d702e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7032:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7036:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d703a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d703e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7042:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7046:	d1c0      	bne.n	d6fca <__aeabi_ddiv+0x82>
   d7048:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d704c:	d10b      	bne.n	d7066 <__aeabi_ddiv+0x11e>
   d704e:	ea41 0100 	orr.w	r1, r1, r0
   d7052:	f04f 0000 	mov.w	r0, #0
   d7056:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d705a:	e7b6      	b.n	d6fca <__aeabi_ddiv+0x82>
   d705c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7060:	bf04      	itt	eq
   d7062:	4301      	orreq	r1, r0
   d7064:	2000      	moveq	r0, #0
   d7066:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d706a:	bf88      	it	hi
   d706c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7070:	f63f aeaf 	bhi.w	d6dd2 <__aeabi_dmul+0xde>
   d7074:	ebb5 0c03 	subs.w	ip, r5, r3
   d7078:	bf04      	itt	eq
   d707a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d707e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7082:	f150 0000 	adcs.w	r0, r0, #0
   d7086:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d708a:	bd70      	pop	{r4, r5, r6, pc}
   d708c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7090:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7094:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7098:	bfc2      	ittt	gt
   d709a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d709e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d70a2:	bd70      	popgt	{r4, r5, r6, pc}
   d70a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d70a8:	f04f 0e00 	mov.w	lr, #0
   d70ac:	3c01      	subs	r4, #1
   d70ae:	e690      	b.n	d6dd2 <__aeabi_dmul+0xde>
   d70b0:	ea45 0e06 	orr.w	lr, r5, r6
   d70b4:	e68d      	b.n	d6dd2 <__aeabi_dmul+0xde>
   d70b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d70ba:	ea94 0f0c 	teq	r4, ip
   d70be:	bf08      	it	eq
   d70c0:	ea95 0f0c 	teqeq	r5, ip
   d70c4:	f43f af3b 	beq.w	d6f3e <__aeabi_dmul+0x24a>
   d70c8:	ea94 0f0c 	teq	r4, ip
   d70cc:	d10a      	bne.n	d70e4 <__aeabi_ddiv+0x19c>
   d70ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d70d2:	f47f af34 	bne.w	d6f3e <__aeabi_dmul+0x24a>
   d70d6:	ea95 0f0c 	teq	r5, ip
   d70da:	f47f af25 	bne.w	d6f28 <__aeabi_dmul+0x234>
   d70de:	4610      	mov	r0, r2
   d70e0:	4619      	mov	r1, r3
   d70e2:	e72c      	b.n	d6f3e <__aeabi_dmul+0x24a>
   d70e4:	ea95 0f0c 	teq	r5, ip
   d70e8:	d106      	bne.n	d70f8 <__aeabi_ddiv+0x1b0>
   d70ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d70ee:	f43f aefd 	beq.w	d6eec <__aeabi_dmul+0x1f8>
   d70f2:	4610      	mov	r0, r2
   d70f4:	4619      	mov	r1, r3
   d70f6:	e722      	b.n	d6f3e <__aeabi_dmul+0x24a>
   d70f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70fc:	bf18      	it	ne
   d70fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7102:	f47f aec5 	bne.w	d6e90 <__aeabi_dmul+0x19c>
   d7106:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d710a:	f47f af0d 	bne.w	d6f28 <__aeabi_dmul+0x234>
   d710e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7112:	f47f aeeb 	bne.w	d6eec <__aeabi_dmul+0x1f8>
   d7116:	e712      	b.n	d6f3e <__aeabi_dmul+0x24a>

000d7118 <__aeabi_d2f>:
   d7118:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d711c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7120:	bf24      	itt	cs
   d7122:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7126:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d712a:	d90d      	bls.n	d7148 <__aeabi_d2f+0x30>
   d712c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7130:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7134:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7138:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d713c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7140:	bf08      	it	eq
   d7142:	f020 0001 	biceq.w	r0, r0, #1
   d7146:	4770      	bx	lr
   d7148:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d714c:	d121      	bne.n	d7192 <__aeabi_d2f+0x7a>
   d714e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7152:	bfbc      	itt	lt
   d7154:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7158:	4770      	bxlt	lr
   d715a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d715e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7162:	f1c2 0218 	rsb	r2, r2, #24
   d7166:	f1c2 0c20 	rsb	ip, r2, #32
   d716a:	fa10 f30c 	lsls.w	r3, r0, ip
   d716e:	fa20 f002 	lsr.w	r0, r0, r2
   d7172:	bf18      	it	ne
   d7174:	f040 0001 	orrne.w	r0, r0, #1
   d7178:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d717c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7180:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7184:	ea40 000c 	orr.w	r0, r0, ip
   d7188:	fa23 f302 	lsr.w	r3, r3, r2
   d718c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7190:	e7cc      	b.n	d712c <__aeabi_d2f+0x14>
   d7192:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7196:	d107      	bne.n	d71a8 <__aeabi_d2f+0x90>
   d7198:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d719c:	bf1e      	ittt	ne
   d719e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d71a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d71a6:	4770      	bxne	lr
   d71a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d71ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d71b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d71b4:	4770      	bx	lr
   d71b6:	bf00      	nop

000d71b8 <atol>:
   d71b8:	220a      	movs	r2, #10
   d71ba:	2100      	movs	r1, #0
   d71bc:	f000 b8fe 	b.w	d73bc <strtol>

000d71c0 <__cxa_atexit>:
   d71c0:	b510      	push	{r4, lr}
   d71c2:	4c05      	ldr	r4, [pc, #20]	; (d71d8 <__cxa_atexit+0x18>)
   d71c4:	4613      	mov	r3, r2
   d71c6:	b12c      	cbz	r4, d71d4 <__cxa_atexit+0x14>
   d71c8:	460a      	mov	r2, r1
   d71ca:	4601      	mov	r1, r0
   d71cc:	2002      	movs	r0, #2
   d71ce:	f3af 8000 	nop.w
   d71d2:	bd10      	pop	{r4, pc}
   d71d4:	4620      	mov	r0, r4
   d71d6:	bd10      	pop	{r4, pc}
   d71d8:	00000000 	.word	0x00000000

000d71dc <memcpy>:
   d71dc:	b510      	push	{r4, lr}
   d71de:	1e43      	subs	r3, r0, #1
   d71e0:	440a      	add	r2, r1
   d71e2:	4291      	cmp	r1, r2
   d71e4:	d004      	beq.n	d71f0 <memcpy+0x14>
   d71e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d71ea:	f803 4f01 	strb.w	r4, [r3, #1]!
   d71ee:	e7f8      	b.n	d71e2 <memcpy+0x6>
   d71f0:	bd10      	pop	{r4, pc}

000d71f2 <memset>:
   d71f2:	4402      	add	r2, r0
   d71f4:	4603      	mov	r3, r0
   d71f6:	4293      	cmp	r3, r2
   d71f8:	d002      	beq.n	d7200 <memset+0xe>
   d71fa:	f803 1b01 	strb.w	r1, [r3], #1
   d71fe:	e7fa      	b.n	d71f6 <memset+0x4>
   d7200:	4770      	bx	lr
	...

000d7204 <srand>:
   d7204:	b538      	push	{r3, r4, r5, lr}
   d7206:	4b12      	ldr	r3, [pc, #72]	; (d7250 <srand+0x4c>)
   d7208:	681c      	ldr	r4, [r3, #0]
   d720a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d720c:	4605      	mov	r5, r0
   d720e:	b9d3      	cbnz	r3, d7246 <srand+0x42>
   d7210:	2018      	movs	r0, #24
   d7212:	f7fe fb7b 	bl	d590c <malloc>
   d7216:	f243 330e 	movw	r3, #13070	; 0x330e
   d721a:	63a0      	str	r0, [r4, #56]	; 0x38
   d721c:	8003      	strh	r3, [r0, #0]
   d721e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7222:	8043      	strh	r3, [r0, #2]
   d7224:	f241 2334 	movw	r3, #4660	; 0x1234
   d7228:	8083      	strh	r3, [r0, #4]
   d722a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d722e:	80c3      	strh	r3, [r0, #6]
   d7230:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7234:	8103      	strh	r3, [r0, #8]
   d7236:	2305      	movs	r3, #5
   d7238:	8143      	strh	r3, [r0, #10]
   d723a:	230b      	movs	r3, #11
   d723c:	8183      	strh	r3, [r0, #12]
   d723e:	2201      	movs	r2, #1
   d7240:	2300      	movs	r3, #0
   d7242:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7248:	2200      	movs	r2, #0
   d724a:	611d      	str	r5, [r3, #16]
   d724c:	615a      	str	r2, [r3, #20]
   d724e:	bd38      	pop	{r3, r4, r5, pc}
   d7250:	2003e2bc 	.word	0x2003e2bc

000d7254 <strcmp>:
   d7254:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7258:	f811 3b01 	ldrb.w	r3, [r1], #1
   d725c:	2a01      	cmp	r2, #1
   d725e:	bf28      	it	cs
   d7260:	429a      	cmpcs	r2, r3
   d7262:	d0f7      	beq.n	d7254 <strcmp>
   d7264:	1ad0      	subs	r0, r2, r3
   d7266:	4770      	bx	lr

000d7268 <strcpy>:
   d7268:	4603      	mov	r3, r0
   d726a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d726e:	f803 2b01 	strb.w	r2, [r3], #1
   d7272:	2a00      	cmp	r2, #0
   d7274:	d1f9      	bne.n	d726a <strcpy+0x2>
   d7276:	4770      	bx	lr

000d7278 <strlen>:
   d7278:	4603      	mov	r3, r0
   d727a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d727e:	2a00      	cmp	r2, #0
   d7280:	d1fb      	bne.n	d727a <strlen+0x2>
   d7282:	1a18      	subs	r0, r3, r0
   d7284:	3801      	subs	r0, #1
   d7286:	4770      	bx	lr

000d7288 <strncpy>:
   d7288:	b510      	push	{r4, lr}
   d728a:	4603      	mov	r3, r0
   d728c:	b142      	cbz	r2, d72a0 <strncpy+0x18>
   d728e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7292:	f803 4b01 	strb.w	r4, [r3], #1
   d7296:	3a01      	subs	r2, #1
   d7298:	2c00      	cmp	r4, #0
   d729a:	d1f7      	bne.n	d728c <strncpy+0x4>
   d729c:	441a      	add	r2, r3
   d729e:	e000      	b.n	d72a2 <strncpy+0x1a>
   d72a0:	bd10      	pop	{r4, pc}
   d72a2:	4293      	cmp	r3, r2
   d72a4:	d002      	beq.n	d72ac <strncpy+0x24>
   d72a6:	f803 4b01 	strb.w	r4, [r3], #1
   d72aa:	e7fa      	b.n	d72a2 <strncpy+0x1a>
   d72ac:	bd10      	pop	{r4, pc}
	...

000d72b0 <_strtol_r>:
   d72b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d72b4:	4680      	mov	r8, r0
   d72b6:	4840      	ldr	r0, [pc, #256]	; (d73b8 <_strtol_r+0x108>)
   d72b8:	f8d0 9000 	ldr.w	r9, [r0]
   d72bc:	460f      	mov	r7, r1
   d72be:	463d      	mov	r5, r7
   d72c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d72c4:	eb09 0004 	add.w	r0, r9, r4
   d72c8:	7840      	ldrb	r0, [r0, #1]
   d72ca:	f000 0008 	and.w	r0, r0, #8
   d72ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d72d2:	b108      	cbz	r0, d72d8 <_strtol_r+0x28>
   d72d4:	462f      	mov	r7, r5
   d72d6:	e7f2      	b.n	d72be <_strtol_r+0xe>
   d72d8:	2c2d      	cmp	r4, #45	; 0x2d
   d72da:	d103      	bne.n	d72e4 <_strtol_r+0x34>
   d72dc:	1cbd      	adds	r5, r7, #2
   d72de:	787c      	ldrb	r4, [r7, #1]
   d72e0:	2601      	movs	r6, #1
   d72e2:	e003      	b.n	d72ec <_strtol_r+0x3c>
   d72e4:	2c2b      	cmp	r4, #43	; 0x2b
   d72e6:	bf04      	itt	eq
   d72e8:	787c      	ldrbeq	r4, [r7, #1]
   d72ea:	1cbd      	addeq	r5, r7, #2
   d72ec:	b113      	cbz	r3, d72f4 <_strtol_r+0x44>
   d72ee:	2b10      	cmp	r3, #16
   d72f0:	d10a      	bne.n	d7308 <_strtol_r+0x58>
   d72f2:	e05b      	b.n	d73ac <_strtol_r+0xfc>
   d72f4:	2c30      	cmp	r4, #48	; 0x30
   d72f6:	d157      	bne.n	d73a8 <_strtol_r+0xf8>
   d72f8:	7828      	ldrb	r0, [r5, #0]
   d72fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d72fe:	2858      	cmp	r0, #88	; 0x58
   d7300:	d14d      	bne.n	d739e <_strtol_r+0xee>
   d7302:	786c      	ldrb	r4, [r5, #1]
   d7304:	2310      	movs	r3, #16
   d7306:	3502      	adds	r5, #2
   d7308:	2e00      	cmp	r6, #0
   d730a:	bf14      	ite	ne
   d730c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7310:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7314:	2700      	movs	r7, #0
   d7316:	fbbc faf3 	udiv	sl, ip, r3
   d731a:	4638      	mov	r0, r7
   d731c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7320:	eb09 0e04 	add.w	lr, r9, r4
   d7324:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7328:	f01e 0f04 	tst.w	lr, #4
   d732c:	d001      	beq.n	d7332 <_strtol_r+0x82>
   d732e:	3c30      	subs	r4, #48	; 0x30
   d7330:	e00b      	b.n	d734a <_strtol_r+0x9a>
   d7332:	f01e 0e03 	ands.w	lr, lr, #3
   d7336:	d01b      	beq.n	d7370 <_strtol_r+0xc0>
   d7338:	f1be 0f01 	cmp.w	lr, #1
   d733c:	bf0c      	ite	eq
   d733e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7342:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7346:	ebce 0404 	rsb	r4, lr, r4
   d734a:	42a3      	cmp	r3, r4
   d734c:	dd10      	ble.n	d7370 <_strtol_r+0xc0>
   d734e:	f1b7 3fff 	cmp.w	r7, #4294967295
   d7352:	d00a      	beq.n	d736a <_strtol_r+0xba>
   d7354:	4550      	cmp	r0, sl
   d7356:	d806      	bhi.n	d7366 <_strtol_r+0xb6>
   d7358:	d101      	bne.n	d735e <_strtol_r+0xae>
   d735a:	4564      	cmp	r4, ip
   d735c:	dc03      	bgt.n	d7366 <_strtol_r+0xb6>
   d735e:	fb03 4000 	mla	r0, r3, r0, r4
   d7362:	2701      	movs	r7, #1
   d7364:	e001      	b.n	d736a <_strtol_r+0xba>
   d7366:	f04f 37ff 	mov.w	r7, #4294967295
   d736a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d736e:	e7d7      	b.n	d7320 <_strtol_r+0x70>
   d7370:	1c7b      	adds	r3, r7, #1
   d7372:	d10c      	bne.n	d738e <_strtol_r+0xde>
   d7374:	2e00      	cmp	r6, #0
   d7376:	f04f 0322 	mov.w	r3, #34	; 0x22
   d737a:	bf14      	ite	ne
   d737c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7380:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7384:	f8c8 3000 	str.w	r3, [r8]
   d7388:	b92a      	cbnz	r2, d7396 <_strtol_r+0xe6>
   d738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d738e:	b106      	cbz	r6, d7392 <_strtol_r+0xe2>
   d7390:	4240      	negs	r0, r0
   d7392:	b172      	cbz	r2, d73b2 <_strtol_r+0x102>
   d7394:	b107      	cbz	r7, d7398 <_strtol_r+0xe8>
   d7396:	1e69      	subs	r1, r5, #1
   d7398:	6011      	str	r1, [r2, #0]
   d739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d739e:	2430      	movs	r4, #48	; 0x30
   d73a0:	2b00      	cmp	r3, #0
   d73a2:	d1b1      	bne.n	d7308 <_strtol_r+0x58>
   d73a4:	2308      	movs	r3, #8
   d73a6:	e7af      	b.n	d7308 <_strtol_r+0x58>
   d73a8:	230a      	movs	r3, #10
   d73aa:	e7ad      	b.n	d7308 <_strtol_r+0x58>
   d73ac:	2c30      	cmp	r4, #48	; 0x30
   d73ae:	d0a3      	beq.n	d72f8 <_strtol_r+0x48>
   d73b0:	e7aa      	b.n	d7308 <_strtol_r+0x58>
   d73b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d73b6:	bf00      	nop
   d73b8:	2003e258 	.word	0x2003e258

000d73bc <strtol>:
   d73bc:	4613      	mov	r3, r2
   d73be:	460a      	mov	r2, r1
   d73c0:	4601      	mov	r1, r0
   d73c2:	4802      	ldr	r0, [pc, #8]	; (d73cc <strtol+0x10>)
   d73c4:	6800      	ldr	r0, [r0, #0]
   d73c6:	f7ff bf73 	b.w	d72b0 <_strtol_r>
   d73ca:	bf00      	nop
   d73cc:	2003e2bc 	.word	0x2003e2bc

000d73d0 <dynalib_user>:
   d73d0:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d73e0:	00000000 20535047 61636f4c 6e6f6974     ....GPS Location
   d73f0:	616c000a 25203a74 6c202c66 3a676e6f     ..lat: %f, long:
   d7400:	0a662520 6d695400 25203a65 69253a69      %f..Time: %i:%i
   d7410:	6173000a 203d2074 000a6925 656d6954     ..sat = %i..Time
   d7420:	3025203a 253a6932 3a693230 69323025     : %02i:%02i:%02i
   d7430:	2d2d2d20 616c0020 25203a74 6c202c66      --- .lat: %f, l
   d7440:	3a676e6f 20662520 6c25000a 696d2075     ong: %f ..%lu mi
   d7450:	73696c6c 6e6f6365 74207364 6567206f     lliseconds to ge
   d7460:	50472074 69662053 6f6e0078 636f6c20     t GPS fix.no loc
   d7470:	6f697461 0000006e                       ation...

000d7478 <_ZTV16Adafruit_SSD1306>:
	...
   d7480:	000d40c9 000d4345 000d4db1 000d5bb5     .@..EC...M...[..
   d7490:	000d467d 000d4ab1 000d4505 000d4391     }F...J...E...C..
   d74a0:	000d4b71 000d4c07 000d4c3f 000d4c5b     qK...L..?L..[L..

000d74b0 <_ZTV12Adafruit_GFX>:
	...
   d74c0:	000d4db1 000d5bb5 000d40a5 000d4ab1     .M...[...@...J..
   d74d0:	000d4bd1 000d4bed 000d4b71 000d4c07     .K...K..qK...L..
   d74e0:	000d4c3f 000d4c5b                       ?L..[L..

000d74e8 <_ZL4font>:
   d74e8:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   d74f8:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   d7508:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   d7518:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   d7528:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   d7538:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   d7548:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   d7558:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   d7568:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   d7578:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   d7588:	00000000 5f000000 07000000 14000700     ......._........
   d7598:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   d75a8:	00502056 00030708 41221c00 22410000     V P......."A..A"
   d75b8:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   d75c8:	08080800 00000808 20006060 02040810     ........``. ....
   d75d8:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   d75e8:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   d75f8:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   d7608:	00001e29 00000014 00003440 22140800     ).......@4....."
   d7618:	14141441 41001414 02081422 06095901     A......A"....Y..
   d7628:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   d7638:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   d7648:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   d7658:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   d7668:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   d7678:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   d7688:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   d7698:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   d76a8:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   d76b8:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   d76c8:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   d76d8:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   d76e8:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   d76f8:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   d7708:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   d7718:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   d7728:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   d7738:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   d7748:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   d7758:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   d7768:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   d7778:	41795555 78545421 54552141 54204078     UUyA!TTxA!UTx@ T
   d7788:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   d7798:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   d77a8:	45010042 29f0407c f0f02924 f0282528     B..E|@.)$)..(%(.
   d77b8:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   d77c8:	32494949 48484832 484a3232 413a3048     III22HHH22JHH0:A
   d77d8:	3a7a2141 78204042 a0a09d00 4444397d     A!z:B@ x....}9DD
   d77e8:	403d3944 3c3d4040 2424ff24 43497e48     D9=@@@=<$.$$H~IC
   d77f8:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   d7808:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   d7818:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   d7828:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   d7838:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   d7848:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   d7858:	005500aa aa55aaaa 0000aa55 1000ff00     ..U...U.U.......
   d7868:	00ff1010 ff141414 ff101000 1010ff00     ................
   d7878:	14f010f0 00fc1414 00f71414 ff0000ff     ................
   d7888:	1414ff00 14fc04f4 1f101714 101f1010     ................
   d7898:	1414141f 1010001f 0000f010 101f0000     ................
   d78a8:	1f101010 10101010 000010f0 1010ff00     ................
   d78b8:	10101010 ff101010 00000010 000014ff     ................
   d78c8:	00ff00ff 17101f00 04fc0000 171414f4     ................
   d78d8:	14141710 00f404f4 f700ff00 14141414     ................
   d78e8:	f7141414 1414f700 10141714 1f101f10     ................
   d78f8:	f4141414 f0101014 0000f010 001f101f     ................
   d7908:	141f0000 fc000000 f0000014 1010f010     ................
   d7918:	14ff10ff 14ff1414 1f101010 00000000     ................
   d7928:	ffff10f0 f0ffffff f0f0f0f0 00ffffff     ................
   d7938:	00000000 0f0fffff 380f0f0f 44384444     ...........8DD8D
   d7948:	3e2a2a7c 02027e14 7e020606 63027e02     |**>.~.....~.~.c
   d7958:	63414955 3c444438 207e4004 0206201e     UIAc8DD<.@~ . ..
   d7968:	9902027e 99a5e7a5 2a492a1c 01724c1c     ~........*I*.Lr.
   d7978:	4a304c72 30304d4d 30487848 465a62bc     rL0JMM00HxH0.bZF
   d7988:	49493e3d 017e0049 2a7e0101 2a2a2a2a     =>III.~...~*****
   d7998:	445f4444 4a514044 44404044 0040514a     DD_DD@QJD@@DJQ@.
   d79a8:	0301ff00 00ff80e0 6b080800 1236086b     ...........kk.6.
   d79b8:	06362436 060f090f 18180000 10000000     6$6.............
   d79c8:	40300010 000101ff 1e01011f 171d1900     ..0@............
   d79d8:	3c3c0012 00003c3c 47000000 434d5250     ..<<<<.....GPRMC
   d79e8:	47504700 4e004147 454e4e00 454e4500     .GPGGA.N.NNE.ENE
   d79f8:	45534500 45535300 53005300 57005753     .ESE.SSE.S.SSW.W
   d7a08:	57005753 4e00574e 0000574e              SW.WNW.NNW..

000d7a14 <_ZTVN5spark13EthernetClassE>:
	...
   d7a1c:	000d599b 000d5991 000d5987 000d597d     .Y...Y...Y..}Y..
   d7a2c:	000d5971 000d5965 000d5959 000d5951     qY..eY..YY..QY..
   d7a3c:	000d5947 000d593d 000d6449              GY..=Y..Id..

000d7a48 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7a48:	18100800 38302820 64756162 72655300     .... (08baud.Ser
   d7a58:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d7a68:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d7a78:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d7a88:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d7a98:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d7aa8:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d7ab8:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d7ac8:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
   d7ad8:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d7ae8:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d7af8:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d7b08:	006c6961 656e6f6e 61727400 69006563     ail.none.trace.i
   d7b18:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
   d7b28:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
   d7b38:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
   d7b48:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   d7b58:	00000065                                e...

000d7b5c <_ZTV9IPAddress>:
	...
   d7b64:	000d5e49 000d5e39 000d5e3b              I^..9^..;^..

000d7b70 <_ZTV9USBSerial>:
	...
   d7b78:	000d5f21 000d5f71 000d5f7f 000d5bb5     !_..q_..._...[..
   d7b88:	000d5f5d 000d5f23 000d5f39 000d5f6b     ]_..#_..9_..k_..
   d7b98:	000d5f4f 000d5f1d                       O_..._..

000d7ba0 <_ZTV11USARTSerial>:
	...
   d7ba8:	000d602d 000d607d 000d608b 000d5bb5     -`..}`...`...[..
   d7bb8:	000d6041 000d6063 000d604f 000d6077     A`..c`..O`..w`..
   d7bc8:	000d602f 000d6033                       /`..3`..

000d7bd0 <_ZTV7TwoWire>:
	...
   d7bd8:	000d613d 000d6187 000d615f 000d613f     =a...a.._a..?a..
   d7be8:	000d6167 000d616f 000d6177 000d617f     ga..oa..wa...a..

000d7bf8 <_ZTVN5spark9MeshClassE>:
	...
   d7c00:	000d6247 000d623d 000d6233 000d6229     Gb..=b..3b..)b..
   d7c10:	000d621d 000d6211 000d6205 000d61fd     .b...b...b...a..
   d7c20:	000d61f3 000d61e9 000d6449              .a...a..Id..

000d7c2c <_ZTVN5spark9WiFiClassE>:
	...
   d7c34:	000d63c3 000d63b9 000d63af 000d6365     .c...c...c..ec..
   d7c44:	000d63a3 000d6397 000d638b 000d6383     .c...c...c...c..
   d7c54:	000d6379 000d636f 000d6449              yc..oc..Id..

000d7c60 <_ZTVN5spark12NetworkClassE>:
	...
   d7c68:	000d63e1 000d63eb 000d63f5 000d63ff     .c...c...c...c..
   d7c78:	000d6409 000d6415 000d6421 000d642d     .d...d..!d..-d..
   d7c88:	000d6435 000d643f 000d6449              5d..?d..Id..

000d7c94 <_ZSt7nothrow>:
	...

000d7c95 <_ctype_>:
   d7c95:	20202000 20202020 28282020 20282828     .         ((((( 
   d7ca5:	20202020 20202020 20202020 20202020                     
   d7cb5:	10108820 10101010 10101010 10101010      ...............
   d7cc5:	04040410 04040404 10040404 10101010     ................
   d7cd5:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7ce5:	01010101 01010101 01010101 10101010     ................
   d7cf5:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7d05:	02020202 02020202 02020202 10101010     ................
   d7d15:	00000020 00000000 00000000 00000000      ...............
	...

000d7d98 <__sf_fake_stdin>:
	...

000d7db8 <__sf_fake_stdout>:
	...

000d7dd8 <__sf_fake_stderr>:
	...

000d7df8 <link_const_variable_data_end>:
   d7df8:	000d4355 	.word	0x000d4355
   d7dfc:	000d4aad 	.word	0x000d4aad
   d7e00:	000d4e5f 	.word	0x000d4e5f
   d7e04:	000d4e75 	.word	0x000d4e75
   d7e08:	000d54bd 	.word	0x000d54bd
   d7e0c:	000d54c1 	.word	0x000d54c1
   d7e10:	000d59a5 	.word	0x000d59a5
   d7e14:	000d5b49 	.word	0x000d5b49
   d7e18:	000d5b8d 	.word	0x000d5b8d
   d7e1c:	000d5cd5 	.word	0x000d5cd5
   d7e20:	000d5ce5 	.word	0x000d5ce5
   d7e24:	000d5d0d 	.word	0x000d5d0d
   d7e28:	000d6315 	.word	0x000d6315
   d7e2c:	000d63cd 	.word	0x000d63cd
   d7e30:	000d6515 	.word	0x000d6515
   d7e34:	000d66f5 	.word	0x000d66f5
   d7e38:	000d6779 	.word	0x000d6779
   d7e3c:	000d683d 	.word	0x000d683d
   d7e40:	000d6901 	.word	0x000d6901

000d7e44 <link_constructors_end>:
	...
