
c:/Users/User/Documents/IoT/Capstone-Project/Capstone_Project/target/1.5.2/argon/Capstone_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003324  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7340  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  2003de44  000d7344  0001de44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000930  2003dec0  2003dec0  0002dec0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d73c0  000d73c0  000273c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d73e8  000d73e8  000273e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00172dd7  00000000  00000000  000273ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001ca1b  00000000  00000000  0019a1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000264a0  00000000  00000000  001b6bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029d0  00000000  00000000  001dd07e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050d8  00000000  00000000  001dfa4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00049fe0  00000000  00000000  001e4b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004cbd7  00000000  00000000  0022eb06  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010a7f7  00000000  00000000  0027b6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000dc6c  00000000  00000000  00385ed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ff07 	bl	d6e40 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ff0c 	bl	d6e56 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de44 	.word	0x2003de44
   d4048:	000d7344 	.word	0x000d7344
   d404c:	2003dec0 	.word	0x2003dec0
   d4050:	2003dec0 	.word	0x2003dec0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fb75 	bl	d5748 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d733c 	.word	0x000d733c
   d4080:	000d72c0 	.word	0x000d72c0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b856 	b.w	d4134 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9b7 	bl	d43fc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bb1b 	b.w	d56cc <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 b8eb 	b.w	d5270 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 b8e9 	b.w	d5270 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40ae:	4770      	bx	lr

000d40b0 <_ZN6SdFileD0Ev>:
   d40b0:	b510      	push	{r4, lr}
   d40b2:	212c      	movs	r1, #44	; 0x2c
   d40b4:	4604      	mov	r4, r0
   d40b6:	f001 ff97 	bl	d5fe8 <_ZdlPvj>
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}

000d40be <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d40be:	3008      	adds	r0, #8
   d40c0:	f000 bb1c 	b.w	d46fc <_ZN7FatFile5writeEPKvj>

000d40c4 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d40c4:	b507      	push	{r0, r1, r2, lr}
   d40c6:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d40c8:	2201      	movs	r2, #1
   d40ca:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d40ce:	3008      	adds	r0, #8
   d40d0:	4619      	mov	r1, r3
   d40d2:	f000 fb13 	bl	d46fc <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d40d6:	b003      	add	sp, #12
   d40d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d40dc <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40de:	4602      	mov	r2, r0
   d40e0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40e2:	7913      	ldrb	r3, [r2, #4]
   d40e4:	6895      	ldr	r5, [r2, #8]
   d40e6:	b133      	cbz	r3, d40f6 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40e8:	b93d      	cbnz	r5, d40fa <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40ea:	490c      	ldr	r1, [pc, #48]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40ec:	b004      	add	sp, #16
   d40ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40f2:	f001 ba25 	b.w	d5540 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40f6:	4b0a      	ldr	r3, [pc, #40]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40f8:	e000      	b.n	d40fc <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40fa:	4b0a      	ldr	r3, [pc, #40]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40fc:	7b16      	ldrb	r6, [r2, #12]
   d40fe:	4c0a      	ldr	r4, [pc, #40]	; (d4128 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4100:	490a      	ldr	r1, [pc, #40]	; (d412c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4102:	7b52      	ldrb	r2, [r2, #13]
   d4104:	9202      	str	r2, [sp, #8]
   d4106:	2e01      	cmp	r6, #1
   d4108:	bf08      	it	eq
   d410a:	4621      	moveq	r1, r4
   d410c:	9101      	str	r1, [sp, #4]
   d410e:	9500      	str	r5, [sp, #0]
   d4110:	4a07      	ldr	r2, [pc, #28]	; (d4130 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4112:	2100      	movs	r1, #0
   d4114:	f001 fa51 	bl	d55ba <_ZN5Print11printf_implEbPKcz>
  }
   d4118:	b004      	add	sp, #16
   d411a:	bd70      	pop	{r4, r5, r6, pc}
   d411c:	000d6f11 	.word	0x000d6f11
   d4120:	000d70b3 	.word	0x000d70b3
   d4124:	000d6f00 	.word	0x000d6f00
   d4128:	000d6f09 	.word	0x000d6f09
   d412c:	000d6f0d 	.word	0x000d6f0d
   d4130:	000d6f27 	.word	0x000d6f27

000d4134 <setup>:
int T;     //Quadratic Formula pluging a,b,c values
int x;
int y;

// setup() runs once, when the device is first turned on.
void setup() {
   d4134:	b510      	push	{r4, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);

  pixel.begin();
   d4136:	4c0f      	ldr	r4, [pc, #60]	; (d4174 <setup+0x40>)
int y;

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d4138:	f001 fc06 	bl	d5948 <_Z16_fetch_usbserialv>
   d413c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4140:	f001 fbf6 	bl	d5930 <_ZN9USBSerial5beginEl>

  pixel.begin();
   d4144:	4620      	mov	r0, r4
   d4146:	f000 f9e2 	bl	d450e <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.clear();
   d414a:	4620      	mov	r0, r4
   d414c:	f000 fa15 	bl	d457a <_ZN17Adafruit_NeoPixel5clearEv>

  pinMode(micro1, INPUT);
   d4150:	4b09      	ldr	r3, [pc, #36]	; (d4178 <setup+0x44>)
   d4152:	2100      	movs	r1, #0
   d4154:	8818      	ldrh	r0, [r3, #0]
   d4156:	f001 feb7 	bl	d5ec8 <pinMode>
  pinMode(micro2, INPUT);
   d415a:	4b08      	ldr	r3, [pc, #32]	; (d417c <setup+0x48>)
   d415c:	2100      	movs	r1, #0
   d415e:	8818      	ldrh	r0, [r3, #0]
   d4160:	f001 feb2 	bl	d5ec8 <pinMode>
  pinMode(micro3, INPUT);
   d4164:	4b06      	ldr	r3, [pc, #24]	; (d4180 <setup+0x4c>)
   d4166:	2100      	movs	r1, #0
   d4168:	8818      	ldrh	r0, [r3, #0]
}
   d416a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pixel.begin();
  pixel.clear();

  pinMode(micro1, INPUT);
  pinMode(micro2, INPUT);
  pinMode(micro3, INPUT);
   d416e:	f001 beab 	b.w	d5ec8 <pinMode>
   d4172:	bf00      	nop
   d4174:	2003dee0 	.word	0x2003dee0
   d4178:	2003de44 	.word	0x2003de44
   d417c:	2003de48 	.word	0x2003de48
   d4180:	2003de4c 	.word	0x2003de4c

000d4184 <_Z19getMicrophoneValuesv>:
  }
  Serial.printf("T1 = %i | T2 = %i | T3 = %i\n",T1, T2, T3);
}

void getMicrophoneValues()
{
   d4184:	b508      	push	{r3, lr}
  val1 = analogRead(micro1);
   d4186:	4b09      	ldr	r3, [pc, #36]	; (d41ac <_Z19getMicrophoneValuesv+0x28>)
   d4188:	8818      	ldrh	r0, [r3, #0]
   d418a:	f001 fec7 	bl	d5f1c <analogRead>
   d418e:	4b08      	ldr	r3, [pc, #32]	; (d41b0 <_Z19getMicrophoneValuesv+0x2c>)
   d4190:	6018      	str	r0, [r3, #0]
  val2 = analogRead(micro2);
   d4192:	4b08      	ldr	r3, [pc, #32]	; (d41b4 <_Z19getMicrophoneValuesv+0x30>)
   d4194:	8818      	ldrh	r0, [r3, #0]
   d4196:	f001 fec1 	bl	d5f1c <analogRead>
   d419a:	4b07      	ldr	r3, [pc, #28]	; (d41b8 <_Z19getMicrophoneValuesv+0x34>)
   d419c:	6018      	str	r0, [r3, #0]
  val3 = analogRead(micro3);
   d419e:	4b07      	ldr	r3, [pc, #28]	; (d41bc <_Z19getMicrophoneValuesv+0x38>)
   d41a0:	8818      	ldrh	r0, [r3, #0]
   d41a2:	f001 febb 	bl	d5f1c <analogRead>
   d41a6:	4b06      	ldr	r3, [pc, #24]	; (d41c0 <_Z19getMicrophoneValuesv+0x3c>)
   d41a8:	6018      	str	r0, [r3, #0]
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	2003de44 	.word	0x2003de44
   d41b0:	2003ded0 	.word	0x2003ded0
   d41b4:	2003de48 	.word	0x2003de48
   d41b8:	2003e380 	.word	0x2003e380
   d41bc:	2003de4c 	.word	0x2003de4c
   d41c0:	2003e384 	.word	0x2003e384

000d41c4 <_Z16getTimingOfSoundv>:
     Serial.printf("mic1 = %i | mic2 = %i | mic3 = %i | Time = %i\n",val1,val2,val3);
   }
}

void getTimingOfSound()
{
   d41c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  T1 = 0;
   d41c8:	4c26      	ldr	r4, [pc, #152]	; (d4264 <_Z16getTimingOfSoundv+0xa0>)
  T2 = 0;
   d41ca:	4d27      	ldr	r5, [pc, #156]	; (d4268 <_Z16getTimingOfSoundv+0xa4>)
  T3 = 0;
   d41cc:	4e27      	ldr	r6, [pc, #156]	; (d426c <_Z16getTimingOfSoundv+0xa8>)
   }
}

void getTimingOfSound()
{
  T1 = 0;
   d41ce:	2300      	movs	r3, #0
   d41d0:	6023      	str	r3, [r4, #0]
  T2 = 0;
   d41d2:	602b      	str	r3, [r5, #0]
  T3 = 0;
   d41d4:	6033      	str	r3, [r6, #0]
  Serial.println("waiting for sound");
   d41d6:	f001 fbb7 	bl	d5948 <_Z16_fetch_usbserialv>
   d41da:	4925      	ldr	r1, [pc, #148]	; (d4270 <_Z16getTimingOfSoundv+0xac>)
   d41dc:	f001 f9c3 	bl	d5566 <_ZN5Print7printlnEPKc>
  while((T1 == 0) || (T2 == 0) || (T3 == 0))
   d41e0:	46a0      	mov	r8, r4
   d41e2:	46a9      	mov	r9, r5
   d41e4:	4637      	mov	r7, r6
   d41e6:	6823      	ldr	r3, [r4, #0]
   d41e8:	b11b      	cbz	r3, d41f2 <_Z16getTimingOfSoundv+0x2e>
   d41ea:	682b      	ldr	r3, [r5, #0]
   d41ec:	b10b      	cbz	r3, d41f2 <_Z16getTimingOfSoundv+0x2e>
   d41ee:	6833      	ldr	r3, [r6, #0]
   d41f0:	bb33      	cbnz	r3, d4240 <_Z16getTimingOfSoundv+0x7c>
  {
    getMicrophoneValues();
   d41f2:	f7ff ffc7 	bl	d4184 <_Z19getMicrophoneValuesv>
    if((T1 == 0) && (val1 > threshold))
   d41f6:	6823      	ldr	r3, [r4, #0]
   d41f8:	b94b      	cbnz	r3, d420e <_Z16getTimingOfSoundv+0x4a>
   d41fa:	4b1e      	ldr	r3, [pc, #120]	; (d4274 <_Z16getTimingOfSoundv+0xb0>)
   d41fc:	681a      	ldr	r2, [r3, #0]
   d41fe:	4b1e      	ldr	r3, [pc, #120]	; (d4278 <_Z16getTimingOfSoundv+0xb4>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	429a      	cmp	r2, r3
   d4204:	dd03      	ble.n	d420e <_Z16getTimingOfSoundv+0x4a>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4206:	f000 febf 	bl	d4f88 <HAL_Timer_Get_Micro_Seconds>
    {
      T1 = micros();
   d420a:	f8c8 0000 	str.w	r0, [r8]
    }
    if((T2 == 0) && (val2 > threshold))
   d420e:	682b      	ldr	r3, [r5, #0]
   d4210:	b94b      	cbnz	r3, d4226 <_Z16getTimingOfSoundv+0x62>
   d4212:	4b1a      	ldr	r3, [pc, #104]	; (d427c <_Z16getTimingOfSoundv+0xb8>)
   d4214:	681a      	ldr	r2, [r3, #0]
   d4216:	4b18      	ldr	r3, [pc, #96]	; (d4278 <_Z16getTimingOfSoundv+0xb4>)
   d4218:	681b      	ldr	r3, [r3, #0]
   d421a:	429a      	cmp	r2, r3
   d421c:	dd03      	ble.n	d4226 <_Z16getTimingOfSoundv+0x62>
   d421e:	f000 feb3 	bl	d4f88 <HAL_Timer_Get_Micro_Seconds>
    {
      T2 = micros();
   d4222:	f8c9 0000 	str.w	r0, [r9]
    }
    if((T3 == 0) && (val3 > threshold))
   d4226:	6833      	ldr	r3, [r6, #0]
   d4228:	2b00      	cmp	r3, #0
   d422a:	d1dc      	bne.n	d41e6 <_Z16getTimingOfSoundv+0x22>
   d422c:	4b14      	ldr	r3, [pc, #80]	; (d4280 <_Z16getTimingOfSoundv+0xbc>)
   d422e:	681a      	ldr	r2, [r3, #0]
   d4230:	4b11      	ldr	r3, [pc, #68]	; (d4278 <_Z16getTimingOfSoundv+0xb4>)
   d4232:	681b      	ldr	r3, [r3, #0]
   d4234:	429a      	cmp	r2, r3
   d4236:	ddd6      	ble.n	d41e6 <_Z16getTimingOfSoundv+0x22>
   d4238:	f000 fea6 	bl	d4f88 <HAL_Timer_Get_Micro_Seconds>
    {
      T3 = micros();
   d423c:	6038      	str	r0, [r7, #0]
   d423e:	e7d2      	b.n	d41e6 <_Z16getTimingOfSoundv+0x22>
    }
  }
  Serial.printf("T1 = %i | T2 = %i | T3 = %i\n",T1, T2, T3);
   d4240:	f001 fb82 	bl	d5948 <_Z16_fetch_usbserialv>
   d4244:	4b09      	ldr	r3, [pc, #36]	; (d426c <_Z16getTimingOfSoundv+0xa8>)
   d4246:	4a0f      	ldr	r2, [pc, #60]	; (d4284 <_Z16getTimingOfSoundv+0xc0>)
   d4248:	681b      	ldr	r3, [r3, #0]
   d424a:	9301      	str	r3, [sp, #4]
   d424c:	4b06      	ldr	r3, [pc, #24]	; (d4268 <_Z16getTimingOfSoundv+0xa4>)
   d424e:	681b      	ldr	r3, [r3, #0]
   d4250:	9300      	str	r3, [sp, #0]
   d4252:	4b04      	ldr	r3, [pc, #16]	; (d4264 <_Z16getTimingOfSoundv+0xa0>)
   d4254:	2100      	movs	r1, #0
   d4256:	681b      	ldr	r3, [r3, #0]
   d4258:	f001 f9af 	bl	d55ba <_ZN5Print11printf_implEbPKcz>
}
   d425c:	b003      	add	sp, #12
   d425e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4262:	bf00      	nop
   d4264:	2003ded4 	.word	0x2003ded4
   d4268:	2003ded8 	.word	0x2003ded8
   d426c:	2003dedc 	.word	0x2003dedc
   d4270:	000d6f74 	.word	0x000d6f74
   d4274:	2003ded0 	.word	0x2003ded0
   d4278:	2003de50 	.word	0x2003de50
   d427c:	2003e380 	.word	0x2003e380
   d4280:	2003e384 	.word	0x2003e384
   d4284:	000d6f86 	.word	0x000d6f86

000d4288 <_Z23getTriangulationOfSoundv>:
  val3 = analogRead(micro3);
  //Serial.printf("Microphone 1 = %i | Microphone 2 = %i | Microphone 3 = %i\n", val1, val2, val3);
}

void getTriangulationOfSound()
{
   d4288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d428c:	b085      	sub	sp, #20
  getTimingOfSound();
   d428e:	f7ff ff99 	bl	d41c4 <_Z16getTimingOfSoundv>
  A = ((T2 - T1)/1000000)*343;               
   d4292:	4b4b      	ldr	r3, [pc, #300]	; (d43c0 <_Z23getTriangulationOfSoundv+0x138>)
   d4294:	4a4b      	ldr	r2, [pc, #300]	; (d43c4 <_Z23getTriangulationOfSoundv+0x13c>)
  B = ((T3 - T1)/1000000)*343;               
   d4296:	484c      	ldr	r0, [pc, #304]	; (d43c8 <_Z23getTriangulationOfSoundv+0x140>)
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
   d4298:	6812      	ldr	r2, [r2, #0]
   d429a:	681b      	ldr	r3, [r3, #0]
  B = ((T3 - T1)/1000000)*343;               
   d429c:	6800      	ldr	r0, [r0, #0]
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
   d429e:	494b      	ldr	r1, [pc, #300]	; (d43cc <_Z23getTriangulationOfSoundv+0x144>)
  B = ((T3 - T1)/1000000)*343;               
   d42a0:	4e4b      	ldr	r6, [pc, #300]	; (d43d0 <_Z23getTriangulationOfSoundv+0x148>)
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
   d42a2:	4d4c      	ldr	r5, [pc, #304]	; (d43d4 <_Z23getTriangulationOfSoundv+0x14c>)
   d42a4:	f240 1457 	movw	r4, #343	; 0x157
   d42a8:	1ad2      	subs	r2, r2, r3
  B = ((T3 - T1)/1000000)*343;               
   d42aa:	1ac3      	subs	r3, r0, r3
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
   d42ac:	fb92 f2f1 	sdiv	r2, r2, r1
  B = ((T3 - T1)/1000000)*343;               
   d42b0:	fb93 f3f1 	sdiv	r3, r3, r1
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
   d42b4:	4362      	muls	r2, r4
  B = ((T3 - T1)/1000000)*343;               
   d42b6:	fb04 f103 	mul.w	r1, r4, r3
  a = (sq(A) + sq(B)-1)*sq(T);            
   d42ba:	fb01 fe01 	mul.w	lr, r1, r1
   d42be:	fb02 f302 	mul.w	r3, r2, r2
   d42c2:	4c45      	ldr	r4, [pc, #276]	; (d43d8 <_Z23getTriangulationOfSoundv+0x150>)

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
  B = ((T3 - T1)/1000000)*343;               
   d42c4:	6031      	str	r1, [r6, #0]
  a = (sq(A) + sq(B)-1)*sq(T);            
   d42c6:	eb03 000e 	add.w	r0, r3, lr
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B))*T;      
   d42ca:	f103 3cff 	add.w	ip, r3, #4294967295
   d42ce:	f10e 33ff 	add.w	r3, lr, #4294967295
void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
  B = ((T3 - T1)/1000000)*343;               
  a = (sq(A) + sq(B)-1)*sq(T);            
   d42d2:	f8d4 8000 	ldr.w	r8, [r4]
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
   d42d6:	602a      	str	r2, [r5, #0]
  B = ((T3 - T1)/1000000)*343;               
  a = (sq(A) + sq(B)-1)*sq(T);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B))*T;      
   d42d8:	4359      	muls	r1, r3
   d42da:	fb0c 1202 	mla	r2, ip, r2, r1
void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
  B = ((T3 - T1)/1000000)*343;               
  a = (sq(A) + sq(B)-1)*sq(T);            
   d42de:	1e47      	subs	r7, r0, #1
   d42e0:	fb08 f008 	mul.w	r0, r8, r8
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B))*T;      
   d42e4:	fb08 f802 	mul.w	r8, r8, r2
   d42e8:	4a3c      	ldr	r2, [pc, #240]	; (d43dc <_Z23getTriangulationOfSoundv+0x154>)
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d42ea:	435b      	muls	r3, r3
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
  B = ((T3 - T1)/1000000)*343;               
  a = (sq(A) + sq(B)-1)*sq(T);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B))*T;      
   d42ec:	f8c2 8000 	str.w	r8, [r2]
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d42f0:	109b      	asrs	r3, r3, #2
   d42f2:	fb0c f20c 	mul.w	r2, ip, ip
   d42f6:	eb03 03a2 	add.w	r3, r3, r2, asr #2
void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
  B = ((T3 - T1)/1000000)*343;               
  a = (sq(A) + sq(B)-1)*sq(T);            
   d42fa:	4378      	muls	r0, r7
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B))*T;      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d42fc:	4a38      	ldr	r2, [pc, #224]	; (d43e0 <_Z23getTriangulationOfSoundv+0x158>)
void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
  B = ((T3 - T1)/1000000)*343;               
  a = (sq(A) + sq(B)-1)*sq(T);            
   d42fe:	4f39      	ldr	r7, [pc, #228]	; (d43e4 <_Z23getTriangulationOfSoundv+0x15c>)
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B))*T;      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d4300:	6013      	str	r3, [r2, #0]
void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000)*343;               
  B = ((T3 - T1)/1000000)*343;               
  a = (sq(A) + sq(B)-1)*sq(T);            
   d4302:	6038      	str	r0, [r7, #0]
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B))*T;      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
  T = (-b-sqrt(sq(b)-(4*a*c))/(2*a)); 
   d4304:	fb08 f208 	mul.w	r2, r8, r8
   d4308:	0080      	lsls	r0, r0, #2
   d430a:	fb03 2010 	mls	r0, r3, r0, r2
   d430e:	f002 fa4b 	bl	d67a8 <__aeabi_i2d>
   d4312:	ec41 0b10 	vmov	d0, r0, r1
   d4316:	f001 ffc3 	bl	d62a0 <sqrt>
   d431a:	f1c8 0000 	rsb	r0, r8, #0
   d431e:	ed8d 0b02 	vstr	d0, [sp, #8]
   d4322:	f002 fa41 	bl	d67a8 <__aeabi_i2d>
   d4326:	4680      	mov	r8, r0
   d4328:	6838      	ldr	r0, [r7, #0]
  x = -((A*T) + ((sq(A)-1)/2));
   d432a:	4f2f      	ldr	r7, [pc, #188]	; (d43e8 <_Z23getTriangulationOfSoundv+0x160>)
  A = ((T2 - T1)/1000000)*343;               
  B = ((T3 - T1)/1000000)*343;               
  a = (sq(A) + sq(B)-1)*sq(T);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B))*T;      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
  T = (-b-sqrt(sq(b)-(4*a*c))/(2*a)); 
   d432c:	0040      	lsls	r0, r0, #1
   d432e:	4689      	mov	r9, r1
   d4330:	f002 fa3a 	bl	d67a8 <__aeabi_i2d>
   d4334:	ed9d 0b02 	vldr	d0, [sp, #8]
   d4338:	4602      	mov	r2, r0
   d433a:	460b      	mov	r3, r1
   d433c:	ec51 0b10 	vmov	r0, r1, d0
   d4340:	f002 fbc2 	bl	d6ac8 <__aeabi_ddiv>
   d4344:	4602      	mov	r2, r0
   d4346:	460b      	mov	r3, r1
   d4348:	4640      	mov	r0, r8
   d434a:	4649      	mov	r1, r9
   d434c:	f002 f8de 	bl	d650c <__aeabi_dsub>
   d4350:	f002 fd40 	bl	d6dd4 <__aeabi_d2iz>
  x = -((A*T) + ((sq(A)-1)/2));
   d4354:	6829      	ldr	r1, [r5, #0]
  y = -((B*T) + ((sq(B)-1)/2));
   d4356:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d43f8 <_Z23getTriangulationOfSoundv+0x170>
  A = ((T2 - T1)/1000000)*343;               
  B = ((T3 - T1)/1000000)*343;               
  a = (sq(A) + sq(B)-1)*sq(T);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B))*T;      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
  T = (-b-sqrt(sq(b)-(4*a*c))/(2*a)); 
   d435a:	6020      	str	r0, [r4, #0]
  x = -((A*T) + ((sq(A)-1)/2));
   d435c:	fb01 f201 	mul.w	r2, r1, r1
   d4360:	2302      	movs	r3, #2
   d4362:	3a01      	subs	r2, #1
   d4364:	fb92 f2f3 	sdiv	r2, r2, r3
   d4368:	4252      	negs	r2, r2
   d436a:	fb01 2210 	mls	r2, r1, r0, r2
  y = -((B*T) + ((sq(B)-1)/2));
   d436e:	6831      	ldr	r1, [r6, #0]
  B = ((T3 - T1)/1000000)*343;               
  a = (sq(A) + sq(B)-1)*sq(T);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B))*T;      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
  T = (-b-sqrt(sq(b)-(4*a*c))/(2*a)); 
  x = -((A*T) + ((sq(A)-1)/2));
   d4370:	603a      	str	r2, [r7, #0]
  y = -((B*T) + ((sq(B)-1)/2));
   d4372:	fb01 f201 	mul.w	r2, r1, r1
   d4376:	3a01      	subs	r2, #1
   d4378:	fb92 f3f3 	sdiv	r3, r2, r3
   d437c:	425b      	negs	r3, r3
   d437e:	fb01 3310 	mls	r3, r1, r0, r3
   d4382:	f8c8 3000 	str.w	r3, [r8]
  Serial.printf("A = %i | B = %i\n", A, B);
   d4386:	f001 fadf 	bl	d5948 <_Z16_fetch_usbserialv>
   d438a:	6833      	ldr	r3, [r6, #0]
   d438c:	9300      	str	r3, [sp, #0]
   d438e:	4a17      	ldr	r2, [pc, #92]	; (d43ec <_Z23getTriangulationOfSoundv+0x164>)
   d4390:	682b      	ldr	r3, [r5, #0]
   d4392:	2100      	movs	r1, #0
   d4394:	f001 f911 	bl	d55ba <_ZN5Print11printf_implEbPKcz>
  Serial.printf("T = %i\n", T);
   d4398:	f001 fad6 	bl	d5948 <_Z16_fetch_usbserialv>
   d439c:	6823      	ldr	r3, [r4, #0]
   d439e:	4a14      	ldr	r2, [pc, #80]	; (d43f0 <_Z23getTriangulationOfSoundv+0x168>)
   d43a0:	2100      	movs	r1, #0
   d43a2:	f001 f90a 	bl	d55ba <_ZN5Print11printf_implEbPKcz>
  Serial.printf("X = %i | Y = %i\n", x, y);
   d43a6:	f001 facf 	bl	d5948 <_Z16_fetch_usbserialv>
   d43aa:	f8d8 3000 	ldr.w	r3, [r8]
   d43ae:	9300      	str	r3, [sp, #0]
   d43b0:	683b      	ldr	r3, [r7, #0]
   d43b2:	4a10      	ldr	r2, [pc, #64]	; (d43f4 <_Z23getTriangulationOfSoundv+0x16c>)
   d43b4:	2100      	movs	r1, #0
   d43b6:	f001 f900 	bl	d55ba <_ZN5Print11printf_implEbPKcz>
   d43ba:	b005      	add	sp, #20
   d43bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d43c0:	2003ded4 	.word	0x2003ded4
   d43c4:	2003ded8 	.word	0x2003ded8
   d43c8:	2003dedc 	.word	0x2003dedc
   d43cc:	000f4240 	.word	0x000f4240
   d43d0:	2003def4 	.word	0x2003def4
   d43d4:	2003e3c0 	.word	0x2003e3c0
   d43d8:	2003def8 	.word	0x2003def8
   d43dc:	2003e38c 	.word	0x2003e38c
   d43e0:	2003e390 	.word	0x2003e390
   d43e4:	2003e388 	.word	0x2003e388
   d43e8:	2003e3c4 	.word	0x2003e3c4
   d43ec:	000d6fa3 	.word	0x000d6fa3
   d43f0:	000d6fb4 	.word	0x000d6fb4
   d43f4:	000d6fbc 	.word	0x000d6fbc
   d43f8:	2003e3c8 	.word	0x2003e3c8

000d43fc <loop>:
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  //simpleSoundTest();
  //getTimingOfSound();
  getTriangulationOfSound();
   d43fc:	f7ff bf44 	b.w	d4288 <_Z23getTriangulationOfSoundv>

000d4400 <_GLOBAL__sub_I_pixel>:
  x = -((A*T) + ((sq(A)-1)/2));
  y = -((B*T) + ((sq(B)-1)/2));
  Serial.printf("A = %i | B = %i\n", A, B);
  Serial.printf("T = %i\n", T);
  Serial.printf("X = %i | Y = %i\n", x, y);
   d4400:	b570      	push	{r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4402:	f000 fd41 	bl	d4e88 <HAL_Pin_Map>
#include <SdFat.h>

#define PIXEL_PIN A4
#define PIXEL_COUNT 1
#define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4406:	2302      	movs	r3, #2
   d4408:	220f      	movs	r2, #15
   d440a:	2101      	movs	r1, #1
   d440c:	4820      	ldr	r0, [pc, #128]	; (d4490 <_GLOBAL__sub_I_pixel+0x90>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d440e:	4e21      	ldr	r6, [pc, #132]	; (d4494 <_GLOBAL__sub_I_pixel+0x94>)
   d4410:	f000 f8a2 	bl	d4558 <_ZN17Adafruit_NeoPixelC1Ethh>
   d4414:	4a20      	ldr	r2, [pc, #128]	; (d4498 <_GLOBAL__sub_I_pixel+0x98>)
   d4416:	4921      	ldr	r1, [pc, #132]	; (d449c <_GLOBAL__sub_I_pixel+0x9c>)
   d4418:	481d      	ldr	r0, [pc, #116]	; (d4490 <_GLOBAL__sub_I_pixel+0x90>)
   d441a:	f001 fdd7 	bl	d5fcc <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d441e:	4b20      	ldr	r3, [pc, #128]	; (d44a0 <_GLOBAL__sub_I_pixel+0xa0>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4420:	2164      	movs	r1, #100	; 0x64
   d4422:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4426:	491f      	ldr	r1, [pc, #124]	; (d44a4 <_GLOBAL__sub_I_pixel+0xa4>)
   d4428:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d442c:	2101      	movs	r1, #1
   d442e:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d4432:	6831      	ldr	r1, [r6, #0]
   d4434:	2200      	movs	r2, #0
   d4436:	f011 0501 	ands.w	r5, r1, #1
   d443a:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d443c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4440:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4444:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4448:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d444c:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4450:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4454:	461c      	mov	r4, r3
   d4456:	d10a      	bne.n	d446e <_GLOBAL__sub_I_pixel+0x6e>
   d4458:	4630      	mov	r0, r6
   d445a:	f7ff fe20 	bl	d409e <__cxa_guard_acquire>
   d445e:	b130      	cbz	r0, d446e <_GLOBAL__sub_I_pixel+0x6e>
   d4460:	4629      	mov	r1, r5
   d4462:	4811      	ldr	r0, [pc, #68]	; (d44a8 <_GLOBAL__sub_I_pixel+0xa8>)
   d4464:	f000 ff60 	bl	d5328 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4468:	4630      	mov	r0, r6
   d446a:	f7ff fe1d 	bl	d40a8 <__cxa_guard_release>
   d446e:	480f      	ldr	r0, [pc, #60]	; (d44ac <_GLOBAL__sub_I_pixel+0xac>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4470:	4b0d      	ldr	r3, [pc, #52]	; (d44a8 <_GLOBAL__sub_I_pixel+0xa8>)
   d4472:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d4476:	2300      	movs	r3, #0
   d4478:	7203      	strb	r3, [r0, #8]
   d447a:	7243      	strb	r3, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d447c:	6043      	str	r3, [r0, #4]
 public:
  SdFile() {}
   d447e:	4b0c      	ldr	r3, [pc, #48]	; (d44b0 <_GLOBAL__sub_I_pixel+0xb0>)
   d4480:	6003      	str	r3, [r0, #0]
const int chipSelect = SS;

#define FILE_BASE_NAME "Data"

SdFat sd;
SdFile file;
   d4482:	4a05      	ldr	r2, [pc, #20]	; (d4498 <_GLOBAL__sub_I_pixel+0x98>)
   d4484:	490b      	ldr	r1, [pc, #44]	; (d44b4 <_GLOBAL__sub_I_pixel+0xb4>)
  x = -((A*T) + ((sq(A)-1)/2));
  y = -((B*T) + ((sq(B)-1)/2));
  Serial.printf("A = %i | B = %i\n", A, B);
  Serial.printf("T = %i\n", T);
  Serial.printf("X = %i | Y = %i\n", x, y);
   d4486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
const int chipSelect = SS;

#define FILE_BASE_NAME "Data"

SdFat sd;
SdFile file;
   d448a:	f001 bd9f 	b.w	d5fcc <__aeabi_atexit>
   d448e:	bf00      	nop
   d4490:	2003dee0 	.word	0x2003dee0
   d4494:	2003dec4 	.word	0x2003dec4
   d4498:	2003dec0 	.word	0x2003dec0
   d449c:	000d44b9 	.word	0x000d44b9
   d44a0:	2003defc 	.word	0x2003defc
   d44a4:	000d6ee4 	.word	0x000d6ee4
   d44a8:	2003dec8 	.word	0x2003dec8
   d44ac:	2003e394 	.word	0x2003e394
   d44b0:	000d6ef0 	.word	0x000d6ef0
   d44b4:	000d40af 	.word	0x000d40af

000d44b8 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d44b8:	b510      	push	{r4, lr}
   d44ba:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d44bc:	68c0      	ldr	r0, [r0, #12]
   d44be:	b108      	cbz	r0, d44c4 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d44c0:	f000 fed6 	bl	d5270 <free>
  if (begun) pinMode(pin, INPUT);
   d44c4:	7823      	ldrb	r3, [r4, #0]
   d44c6:	b11b      	cbz	r3, d44d0 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d44c8:	2100      	movs	r1, #0
   d44ca:	79e0      	ldrb	r0, [r4, #7]
   d44cc:	f001 fcfc 	bl	d5ec8 <pinMode>
}
   d44d0:	4620      	mov	r0, r4
   d44d2:	bd10      	pop	{r4, pc}

000d44d4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d44d4:	b538      	push	{r3, r4, r5, lr}
   d44d6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d44d8:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d44da:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d44dc:	b108      	cbz	r0, d44e2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d44de:	f000 fec7 	bl	d5270 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d44e2:	79a3      	ldrb	r3, [r4, #6]
   d44e4:	2b06      	cmp	r3, #6
   d44e6:	bf0c      	ite	eq
   d44e8:	2004      	moveq	r0, #4
   d44ea:	2003      	movne	r0, #3
   d44ec:	fb10 f005 	smulbb	r0, r0, r5
   d44f0:	b280      	uxth	r0, r0
   d44f2:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d44f4:	f000 feb4 	bl	d5260 <malloc>
   d44f8:	60e0      	str	r0, [r4, #12]
   d44fa:	b128      	cbz	r0, d4508 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d44fc:	88a2      	ldrh	r2, [r4, #4]
   d44fe:	2100      	movs	r1, #0
   d4500:	f002 fca9 	bl	d6e56 <memset>
    numLEDs = n;
   d4504:	8065      	strh	r5, [r4, #2]
   d4506:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4508:	80a0      	strh	r0, [r4, #4]
   d450a:	8060      	strh	r0, [r4, #2]
   d450c:	bd38      	pop	{r3, r4, r5, pc}

000d450e <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d450e:	b510      	push	{r4, lr}
   d4510:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4512:	2101      	movs	r1, #1
   d4514:	79c0      	ldrb	r0, [r0, #7]
   d4516:	f001 fcd7 	bl	d5ec8 <pinMode>
  digitalWrite(pin, LOW);
   d451a:	2100      	movs	r1, #0
   d451c:	79e0      	ldrb	r0, [r4, #7]
   d451e:	f001 fce4 	bl	d5eea <digitalWrite>
  begun = true;
   d4522:	2301      	movs	r3, #1
   d4524:	7023      	strb	r3, [r4, #0]
   d4526:	bd10      	pop	{r4, pc}

000d4528 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4528:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d452a:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d452c:	4605      	mov	r5, r0
   d452e:	460c      	mov	r4, r1
    if (begun) {
   d4530:	b11b      	cbz	r3, d453a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4532:	2100      	movs	r1, #0
   d4534:	79c0      	ldrb	r0, [r0, #7]
   d4536:	f001 fcc7 	bl	d5ec8 <pinMode>
    }
    pin = p;
    if (begun) {
   d453a:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d453c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d453e:	b153      	cbz	r3, d4556 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d4540:	b2a4      	uxth	r4, r4
   d4542:	4620      	mov	r0, r4
   d4544:	2101      	movs	r1, #1
   d4546:	f001 fcbf 	bl	d5ec8 <pinMode>
        digitalWrite(p, LOW);
   d454a:	4620      	mov	r0, r4
   d454c:	2100      	movs	r1, #0
    }
}
   d454e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4552:	f001 bcca 	b.w	d5eea <digitalWrite>
   d4556:	bd38      	pop	{r3, r4, r5, pc}

000d4558 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4558:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d455a:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d455c:	4604      	mov	r4, r0
   d455e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4560:	7183      	strb	r3, [r0, #6]
   d4562:	7005      	strb	r5, [r0, #0]
   d4564:	7205      	strb	r5, [r0, #8]
   d4566:	60c5      	str	r5, [r0, #12]
   d4568:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d456a:	f7ff ffb3 	bl	d44d4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d456e:	4620      	mov	r0, r4
   d4570:	4631      	mov	r1, r6
   d4572:	f7ff ffd9 	bl	d4528 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4576:	4620      	mov	r0, r4
   d4578:	bd70      	pop	{r4, r5, r6, pc}

000d457a <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d457a:	8882      	ldrh	r2, [r0, #4]
   d457c:	68c0      	ldr	r0, [r0, #12]
   d457e:	2100      	movs	r1, #0
   d4580:	f002 bc69 	b.w	d6e56 <memset>

000d4584 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d4584:	b508      	push	{r3, lr}
   d4586:	f000 fc7f 	bl	d4e88 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d458a:	f000 fc7d 	bl	d4e88 <HAL_Pin_Map>
   d458e:	4b01      	ldr	r3, [pc, #4]	; (d4594 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4590:	6018      	str	r0, [r3, #0]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	2003e3cc 	.word	0x2003e3cc

000d4598 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d4598:	f000 bc76 	b.w	d4e88 <HAL_Pin_Map>

000d459c <_GLOBAL__sub_I__ZN7istream3getEv>:
   d459c:	f000 bc74 	b.w	d4e88 <HAL_Pin_Map>

000d45a0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d45a0:	b510      	push	{r4, lr}
   d45a2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d45a4:	3024      	adds	r0, #36	; 0x24
   d45a6:	f000 f98b 	bl	d48c0 <_ZN8FatCache4syncEv>
   d45aa:	b128      	cbz	r0, d45b8 <_ZN9FatVolume9cacheSyncEv+0x18>
   d45ac:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d45b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d45b4:	f000 b984 	b.w	d48c0 <_ZN8FatCache4syncEv>
  }
   d45b8:	bd10      	pop	{r4, pc}

000d45ba <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d45ba:	f000 bc65 	b.w	d4e88 <HAL_Pin_Map>

000d45be <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d45be:	f000 bc63 	b.w	d4e88 <HAL_Pin_Map>

000d45c2 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d45c2:	f000 bc61 	b.w	d4e88 <HAL_Pin_Map>

000d45c6 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d45c6:	f000 bc5f 	b.w	d4e88 <HAL_Pin_Map>

000d45ca <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d45ca:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d45cc:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d45ce:	f043 0304 	orr.w	r3, r3, #4
   d45d2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d45d4:	f100 0210 	add.w	r2, r0, #16
   d45d8:	6880      	ldr	r0, [r0, #8]
   d45da:	f000 ba27 	b.w	d4a2c <_ZN9FatVolume15allocateClusterEmPm>

000d45de <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d45de:	b510      	push	{r4, lr}
   d45e0:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d45e2:	6880      	ldr	r0, [r0, #8]
   d45e4:	460a      	mov	r2, r1
   d45e6:	3024      	adds	r0, #36	; 0x24
   d45e8:	69a1      	ldr	r1, [r4, #24]
   d45ea:	f000 f990 	bl	d490e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d45ee:	b120      	cbz	r0, d45fa <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d45f0:	88a3      	ldrh	r3, [r4, #4]
   d45f2:	f003 030f 	and.w	r3, r3, #15
   d45f6:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d45fa:	bd10      	pop	{r4, pc}

000d45fc <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d45fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4600:	460e      	mov	r6, r1
   d4602:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d4604:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4606:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d4608:	2900      	cmp	r1, #0
   d460a:	d039      	beq.n	d4680 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d460c:	6945      	ldr	r5, [r0, #20]
   d460e:	42b5      	cmp	r5, r6
   d4610:	d03a      	beq.n	d4688 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d4612:	b90e      	cbnz	r6, d4618 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d4614:	6106      	str	r6, [r0, #16]
    goto done;
   d4616:	e031      	b.n	d467c <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d4618:	070b      	lsls	r3, r1, #28
   d461a:	d503      	bpl.n	d4624 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d461c:	69c3      	ldr	r3, [r0, #28]
   d461e:	429e      	cmp	r6, r3
   d4620:	d82e      	bhi.n	d4680 <_ZN7FatFile7seekSetEm+0x84>
   d4622:	e007      	b.n	d4634 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d4624:	0688      	lsls	r0, r1, #26
   d4626:	d505      	bpl.n	d4634 <_ZN7FatFile7seekSetEm+0x38>
   d4628:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d462a:	891b      	ldrh	r3, [r3, #8]
   d462c:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d4630:	d826      	bhi.n	d4680 <_ZN7FatFile7seekSetEm+0x84>
   d4632:	e023      	b.n	d467c <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4634:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d4638:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d463c:	1e6a      	subs	r2, r5, #1
   d463e:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4642:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4644:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4646:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d4648:	429a      	cmp	r2, r3
   d464a:	d800      	bhi.n	d464e <_ZN7FatFile7seekSetEm+0x52>
   d464c:	b94d      	cbnz	r5, d4662 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d464e:	064a      	lsls	r2, r1, #25
   d4650:	bf4c      	ite	mi
   d4652:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d4656:	6a22      	ldrpl	r2, [r4, #32]
   d4658:	6122      	str	r2, [r4, #16]
   d465a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d465c:	f104 0810 	add.w	r8, r4, #16
   d4660:	e00a      	b.n	d4678 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d4662:	1a9b      	subs	r3, r3, r2
   d4664:	e7f9      	b.n	d465a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4666:	4642      	mov	r2, r8
   d4668:	6921      	ldr	r1, [r4, #16]
   d466a:	68a0      	ldr	r0, [r4, #8]
   d466c:	f000 f979 	bl	d4962 <_ZN9FatVolume6fatGetEmPm>
   d4670:	2800      	cmp	r0, #0
   d4672:	f105 35ff 	add.w	r5, r5, #4294967295
   d4676:	dd03      	ble.n	d4680 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d4678:	2d00      	cmp	r5, #0
   d467a:	d1f4      	bne.n	d4666 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d467c:	6166      	str	r6, [r4, #20]
   d467e:	e003      	b.n	d4688 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d4680:	6127      	str	r7, [r4, #16]
  return false;
   d4682:	2000      	movs	r0, #0
   d4684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d4688:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d468a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4690 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4690:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d4692:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4694:	4604      	mov	r4, r0
  if (!isOpen()) {
   d4696:	b90b      	cbnz	r3, d469c <_ZN7FatFile4syncEv+0xc>
    return true;
   d4698:	2001      	movs	r0, #1
   d469a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d469c:	7883      	ldrb	r3, [r0, #2]
   d469e:	075a      	lsls	r2, r3, #29
   d46a0:	d523      	bpl.n	d46ea <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d46a2:	2101      	movs	r1, #1
   d46a4:	f7ff ff9b 	bl	d45de <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d46a8:	4605      	mov	r5, r0
   d46aa:	b928      	cbnz	r0, d46b8 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d46ac:	7863      	ldrb	r3, [r4, #1]
   d46ae:	f043 0301 	orr.w	r3, r3, #1
   d46b2:	7063      	strb	r3, [r4, #1]
  return false;
   d46b4:	2000      	movs	r0, #0
   d46b6:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d46b8:	7803      	ldrb	r3, [r0, #0]
   d46ba:	2be5      	cmp	r3, #229	; 0xe5
   d46bc:	d0f6      	beq.n	d46ac <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d46be:	7823      	ldrb	r3, [r4, #0]
   d46c0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d46c2:	bf44      	itt	mi
   d46c4:	69e3      	ldrmi	r3, [r4, #28]
   d46c6:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d46c8:	8c23      	ldrh	r3, [r4, #32]
   d46ca:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d46cc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d46ce:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d46d0:	4b09      	ldr	r3, [pc, #36]	; (d46f8 <_ZN7FatFile4syncEv+0x68>)
   d46d2:	681b      	ldr	r3, [r3, #0]
   d46d4:	b12b      	cbz	r3, d46e2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d46d6:	f100 0116 	add.w	r1, r0, #22
   d46da:	3018      	adds	r0, #24
   d46dc:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d46de:	8b2b      	ldrh	r3, [r5, #24]
   d46e0:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d46e2:	78a3      	ldrb	r3, [r4, #2]
   d46e4:	f023 0304 	bic.w	r3, r3, #4
   d46e8:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d46ea:	68a0      	ldr	r0, [r4, #8]
   d46ec:	f7ff ff58 	bl	d45a0 <_ZN9FatVolume9cacheSyncEv>
   d46f0:	2800      	cmp	r0, #0
   d46f2:	d0db      	beq.n	d46ac <_ZN7FatFile4syncEv+0x1c>
   d46f4:	e7d0      	b.n	d4698 <_ZN7FatFile4syncEv+0x8>
   d46f6:	bf00      	nop
   d46f8:	2003e3d0 	.word	0x2003e3d0

000d46fc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d46fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4700:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4702:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4704:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4706:	4604      	mov	r4, r0
   d4708:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d470a:	d508      	bpl.n	d471e <_ZN7FatFile5writeEPKvj+0x22>
   d470c:	7883      	ldrb	r3, [r0, #2]
   d470e:	079a      	lsls	r2, r3, #30
   d4710:	d505      	bpl.n	d471e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d4712:	071b      	lsls	r3, r3, #28
   d4714:	d50b      	bpl.n	d472e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d4716:	69e1      	ldr	r1, [r4, #28]
   d4718:	f7ff ff70 	bl	d45fc <_ZN7FatFile7seekSetEm>
   d471c:	b938      	cbnz	r0, d472e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d471e:	7863      	ldrb	r3, [r4, #1]
   d4720:	f043 0301 	orr.w	r3, r3, #1
   d4724:	7063      	strb	r3, [r4, #1]
  return -1;
   d4726:	f04f 30ff 	mov.w	r0, #4294967295
   d472a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d472e:	6963      	ldr	r3, [r4, #20]
   d4730:	43db      	mvns	r3, r3
   d4732:	4598      	cmp	r8, r3
   d4734:	d8f3      	bhi.n	d471e <_ZN7FatFile5writeEPKvj+0x22>
   d4736:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4738:	f04f 0a00 	mov.w	sl, #0
   d473c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d473e:	2e00      	cmp	r6, #0
   d4740:	f000 8081 	beq.w	d4846 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d4744:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4746:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4748:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d474c:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4750:	d11c      	bne.n	d478c <_ZN7FatFile5writeEPKvj+0x90>
   d4752:	b9df      	cbnz	r7, d478c <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d4754:	6921      	ldr	r1, [r4, #16]
   d4756:	b171      	cbz	r1, d4776 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4758:	f104 0210 	add.w	r2, r4, #16
   d475c:	f000 f901 	bl	d4962 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d4760:	2800      	cmp	r0, #0
   d4762:	dbdc      	blt.n	d471e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d4764:	f040 808e 	bne.w	d4884 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d4768:	4620      	mov	r0, r4
   d476a:	f7ff ff2e 	bl	d45ca <_ZN7FatFile10addClusterEv>
   d476e:	2800      	cmp	r0, #0
   d4770:	f040 8088 	bne.w	d4884 <_ZN7FatFile5writeEPKvj+0x188>
   d4774:	e7d3      	b.n	d471e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d4776:	6a23      	ldr	r3, [r4, #32]
   d4778:	b93b      	cbnz	r3, d478a <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d477a:	4620      	mov	r0, r4
   d477c:	f7ff ff25 	bl	d45ca <_ZN7FatFile10addClusterEv>
   d4780:	2800      	cmp	r0, #0
   d4782:	d0cc      	beq.n	d471e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d4784:	6923      	ldr	r3, [r4, #16]
   d4786:	6223      	str	r3, [r4, #32]
   d4788:	e000      	b.n	d478c <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d478a:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d478c:	6921      	ldr	r1, [r4, #16]
   d478e:	68a0      	ldr	r0, [r4, #8]
   d4790:	f000 f8e1 	bl	d4956 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4794:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d4796:	b917      	cbnz	r7, d479e <_ZN7FatFile5writeEPKvj+0xa2>
   d4798:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d479c:	d221      	bcs.n	d47e2 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d479e:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d47a2:	42b5      	cmp	r5, r6
   d47a4:	bf28      	it	cs
   d47a6:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d47a8:	b937      	cbnz	r7, d47b8 <_ZN7FatFile5writeEPKvj+0xbc>
   d47aa:	6963      	ldr	r3, [r4, #20]
   d47ac:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d47ae:	4293      	cmp	r3, r2
   d47b0:	bf34      	ite	cc
   d47b2:	2201      	movcc	r2, #1
   d47b4:	2205      	movcs	r2, #5
   d47b6:	e000      	b.n	d47ba <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d47b8:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d47ba:	68a0      	ldr	r0, [r4, #8]
   d47bc:	3024      	adds	r0, #36	; 0x24
   d47be:	f000 f8a6 	bl	d490e <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d47c2:	2800      	cmp	r0, #0
   d47c4:	d0ab      	beq.n	d471e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d47c6:	4438      	add	r0, r7
   d47c8:	462a      	mov	r2, r5
   d47ca:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d47cc:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d47ce:	f002 fb37 	bl	d6e40 <memcpy>
      if (512 == (n + blockOffset)) {
   d47d2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d47d6:	d130      	bne.n	d483a <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d47d8:	68a0      	ldr	r0, [r4, #8]
   d47da:	3024      	adds	r0, #36	; 0x24
   d47dc:	f000 f870 	bl	d48c0 <_ZN8FatCache4syncEv>
   d47e0:	e017      	b.n	d4812 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d47e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d47e6:	68a0      	ldr	r0, [r4, #8]
   d47e8:	d315      	bcc.n	d4816 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d47ea:	7902      	ldrb	r2, [r0, #4]
   d47ec:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d47ee:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d47f0:	b2d2      	uxtb	r2, r2
   d47f2:	4293      	cmp	r3, r2
   d47f4:	bf28      	it	cs
   d47f6:	4613      	movcs	r3, r2
   d47f8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d47fa:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d47fc:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4800:	d302      	bcc.n	d4808 <_ZN7FatFile5writeEPKvj+0x10c>
   d4802:	441a      	add	r2, r3
   d4804:	4291      	cmp	r1, r2
   d4806:	d337      	bcc.n	d4878 <_ZN7FatFile5writeEPKvj+0x17c>
   d4808:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d480a:	464a      	mov	r2, r9
   d480c:	6838      	ldr	r0, [r7, #0]
   d480e:	f000 fac8 	bl	d4da2 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d4812:	b990      	cbnz	r0, d483a <_ZN7FatFile5writeEPKvj+0x13e>
   d4814:	e783      	b.n	d471e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d4816:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4818:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d481a:	bf02      	ittt	eq
   d481c:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4820:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4824:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d4826:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4828:	464a      	mov	r2, r9
   d482a:	6818      	ldr	r0, [r3, #0]
   d482c:	f000 fa47 	bl	d4cbe <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d4830:	2800      	cmp	r0, #0
   d4832:	f43f af74 	beq.w	d471e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d4836:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d483a:	6963      	ldr	r3, [r4, #20]
   d483c:	442b      	add	r3, r5
   d483e:	6163      	str	r3, [r4, #20]
    src += n;
   d4840:	44a9      	add	r9, r5
    nToWrite -= n;
   d4842:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4844:	e77a      	b.n	d473c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d4846:	69e2      	ldr	r2, [r4, #28]
   d4848:	4293      	cmp	r3, r2
   d484a:	d901      	bls.n	d4850 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d484c:	61e3      	str	r3, [r4, #28]
   d484e:	e002      	b.n	d4856 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d4850:	4b0f      	ldr	r3, [pc, #60]	; (d4890 <_ZN7FatFile5writeEPKvj+0x194>)
   d4852:	681b      	ldr	r3, [r3, #0]
   d4854:	b11b      	cbz	r3, d485e <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d4856:	78a3      	ldrb	r3, [r4, #2]
   d4858:	f043 0304 	orr.w	r3, r3, #4
   d485c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d485e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d4862:	2b00      	cmp	r3, #0
   d4864:	db02      	blt.n	d486c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d4866:	4640      	mov	r0, r8
   d4868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d486c:	4620      	mov	r0, r4
   d486e:	f7ff ff0f 	bl	d4690 <_ZN7FatFile4syncEv>
   d4872:	2800      	cmp	r0, #0
   d4874:	d1f7      	bne.n	d4866 <_ZN7FatFile5writeEPKvj+0x16a>
   d4876:	e752      	b.n	d471e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4878:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d487c:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4880:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4882:	e7c1      	b.n	d4808 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4884:	6921      	ldr	r1, [r4, #16]
   d4886:	68a0      	ldr	r0, [r4, #8]
   d4888:	f000 f865 	bl	d4956 <_ZNK9FatVolume17clusterFirstBlockEm>
   d488c:	4601      	mov	r1, r0
   d488e:	e783      	b.n	d4798 <_ZN7FatFile5writeEPKvj+0x9c>
   d4890:	2003e3d0 	.word	0x2003e3d0

000d4894 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d4894:	f000 baf8 	b.w	d4e88 <HAL_Pin_Map>

000d4898 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4898:	b570      	push	{r4, r5, r6, lr}
   d489a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d489c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d489e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d48a0:	b149      	cbz	r1, d48b6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d48a2:	f002 fb09 	bl	d6eb8 <strlen>
   d48a6:	682b      	ldr	r3, [r5, #0]
   d48a8:	4602      	mov	r2, r0
   d48aa:	4621      	mov	r1, r4
   d48ac:	4628      	mov	r0, r5
   d48ae:	68db      	ldr	r3, [r3, #12]
    }
   d48b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d48b4:	4718      	bx	r3
    }
   d48b6:	bd70      	pop	{r4, r5, r6, pc}

000d48b8 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d48b8:	f000 bae6 	b.w	d4e88 <HAL_Pin_Map>

000d48bc <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d48bc:	f000 bae4 	b.w	d4e88 <HAL_Pin_Map>

000d48c0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d48c0:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d48c2:	7803      	ldrb	r3, [r0, #0]
   d48c4:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d48c6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d48c8:	d51e      	bpl.n	d4908 <_ZN8FatCache4syncEv+0x48>
   d48ca:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d48cc:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d48ce:	f100 060c 	add.w	r6, r0, #12
   d48d2:	4632      	mov	r2, r6
   d48d4:	6818      	ldr	r0, [r3, #0]
   d48d6:	f000 f9f2 	bl	d4cbe <_ZN9SdSpiCard10writeBlockEmPKh>
   d48da:	4605      	mov	r5, r0
   d48dc:	b908      	cbnz	r0, d48e2 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d48de:	2500      	movs	r5, #0
   d48e0:	e013      	b.n	d490a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d48e2:	7823      	ldrb	r3, [r4, #0]
   d48e4:	079b      	lsls	r3, r3, #30
   d48e6:	d404      	bmi.n	d48f2 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d48e8:	7823      	ldrb	r3, [r4, #0]
   d48ea:	f023 0301 	bic.w	r3, r3, #1
   d48ee:	7023      	strb	r3, [r4, #0]
   d48f0:	e00b      	b.n	d490a <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d48f2:	6863      	ldr	r3, [r4, #4]
   d48f4:	68a0      	ldr	r0, [r4, #8]
   d48f6:	6919      	ldr	r1, [r3, #16]
   d48f8:	4632      	mov	r2, r6
   d48fa:	4401      	add	r1, r0
   d48fc:	6818      	ldr	r0, [r3, #0]
   d48fe:	f000 f9de 	bl	d4cbe <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d4902:	2800      	cmp	r0, #0
   d4904:	d1f0      	bne.n	d48e8 <_ZN8FatCache4syncEv+0x28>
   d4906:	e7ea      	b.n	d48de <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d4908:	2501      	movs	r5, #1

fail:
  return false;
}
   d490a:	4628      	mov	r0, r5
   d490c:	bd70      	pop	{r4, r5, r6, pc}

000d490e <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d490e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d4910:	6883      	ldr	r3, [r0, #8]
   d4912:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d4914:	4604      	mov	r4, r0
   d4916:	460e      	mov	r6, r1
   d4918:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d491a:	d014      	beq.n	d4946 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d491c:	f7ff ffd0 	bl	d48c0 <_ZN8FatCache4syncEv>
   d4920:	b908      	cbnz	r0, d4926 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d4922:	2000      	movs	r0, #0
   d4924:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d4926:	076b      	lsls	r3, r5, #29
   d4928:	d503      	bpl.n	d4932 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d492a:	2300      	movs	r3, #0
   d492c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d492e:	60a6      	str	r6, [r4, #8]
   d4930:	e009      	b.n	d4946 <_ZN8FatCache4readEmh+0x38>
   d4932:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d4934:	f104 020c 	add.w	r2, r4, #12
   d4938:	4631      	mov	r1, r6
   d493a:	6818      	ldr	r0, [r3, #0]
   d493c:	f000 f979 	bl	d4c32 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d4940:	2800      	cmp	r0, #0
   d4942:	d1f2      	bne.n	d492a <_ZN8FatCache4readEmh+0x1c>
   d4944:	e7ed      	b.n	d4922 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d4946:	7823      	ldrb	r3, [r4, #0]
   d4948:	4620      	mov	r0, r4
   d494a:	f005 0503 	and.w	r5, r5, #3
   d494e:	431d      	orrs	r5, r3
   d4950:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d4954:	bd70      	pop	{r4, r5, r6, pc}

000d4956 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d4956:	7983      	ldrb	r3, [r0, #6]
   d4958:	6940      	ldr	r0, [r0, #20]
   d495a:	3902      	subs	r1, #2
   d495c:	4099      	lsls	r1, r3
}
   d495e:	4408      	add	r0, r1
   d4960:	4770      	bx	lr

000d4962 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4962:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d4964:	b570      	push	{r4, r5, r6, lr}
   d4966:	4605      	mov	r5, r0
   d4968:	460c      	mov	r4, r1
   d496a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d496c:	d802      	bhi.n	d4974 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d496e:	f04f 30ff 	mov.w	r0, #4294967295
   d4972:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4974:	69c3      	ldr	r3, [r0, #28]
   d4976:	4299      	cmp	r1, r3
   d4978:	d8f9      	bhi.n	d496e <_ZN9FatVolume6fatGetEmPm+0xc>
   d497a:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d497c:	2b20      	cmp	r3, #32
   d497e:	d110      	bne.n	d49a2 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d4980:	6981      	ldr	r1, [r0, #24]
   d4982:	2202      	movs	r2, #2
   d4984:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d4988:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d498c:	f7ff ffbf 	bl	d490e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d4990:	2800      	cmp	r0, #0
   d4992:	d0ec      	beq.n	d496e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d4994:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d4998:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d499c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d49a0:	e00f      	b.n	d49c2 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d49a2:	2b10      	cmp	r3, #16
   d49a4:	d1e3      	bne.n	d496e <_ZN9FatVolume6fatGetEmPm+0xc>
   d49a6:	6983      	ldr	r3, [r0, #24]
   d49a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d49ac:	2202      	movs	r2, #2
   d49ae:	4419      	add	r1, r3
   d49b0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d49b4:	f7ff ffab 	bl	d490e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d49b8:	2800      	cmp	r0, #0
   d49ba:	d0d8      	beq.n	d496e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d49bc:	b2e4      	uxtb	r4, r4
   d49be:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d49c2:	69ea      	ldr	r2, [r5, #28]
   d49c4:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d49c6:	bf9a      	itte	ls
   d49c8:	6033      	strls	r3, [r6, #0]
  return 1;
   d49ca:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d49cc:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d49ce:	bd70      	pop	{r4, r5, r6, pc}

000d49d0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d49d0:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d49d2:	b538      	push	{r3, r4, r5, lr}
   d49d4:	460c      	mov	r4, r1
   d49d6:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d49d8:	d801      	bhi.n	d49de <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d49da:	2000      	movs	r0, #0
   d49dc:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d49de:	69c3      	ldr	r3, [r0, #28]
   d49e0:	4299      	cmp	r1, r3
   d49e2:	d8fa      	bhi.n	d49da <_ZN9FatVolume6fatPutEmm+0xa>
   d49e4:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d49e6:	2b20      	cmp	r3, #32
   d49e8:	d10e      	bne.n	d4a08 <_ZN9FatVolume6fatPutEmm+0x38>
   d49ea:	6981      	ldr	r1, [r0, #24]
   d49ec:	2203      	movs	r2, #3
   d49ee:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d49f2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d49f6:	f7ff ff8a 	bl	d490e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d49fa:	2800      	cmp	r0, #0
   d49fc:	d0ed      	beq.n	d49da <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d49fe:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d4a02:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d4a06:	e00f      	b.n	d4a28 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d4a08:	2b10      	cmp	r3, #16
   d4a0a:	d1e6      	bne.n	d49da <_ZN9FatVolume6fatPutEmm+0xa>
   d4a0c:	6983      	ldr	r3, [r0, #24]
   d4a0e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d4a12:	2203      	movs	r2, #3
   d4a14:	4419      	add	r1, r3
   d4a16:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d4a1a:	f7ff ff78 	bl	d490e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d4a1e:	2800      	cmp	r0, #0
   d4a20:	d0db      	beq.n	d49da <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d4a22:	b2e4      	uxtb	r4, r4
   d4a24:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d4a28:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d4a2a:	bd38      	pop	{r3, r4, r5, pc}

000d4a2c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d4a2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d4a30:	68c4      	ldr	r4, [r0, #12]
   d4a32:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d4a34:	4605      	mov	r5, r0
   d4a36:	460e      	mov	r6, r1
   d4a38:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d4a3a:	d207      	bcs.n	d4a4c <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d4a3c:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d4a3e:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d4a40:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d4a42:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d4a44:	429c      	cmp	r4, r3
   d4a46:	d903      	bls.n	d4a50 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d4a48:	b9cf      	cbnz	r7, d4a7e <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d4a4a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d4a4c:	2701      	movs	r7, #1
   d4a4e:	e7f7      	b.n	d4a40 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d4a50:	42a6      	cmp	r6, r4
   d4a52:	d014      	beq.n	d4a7e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d4a54:	aa01      	add	r2, sp, #4
   d4a56:	4621      	mov	r1, r4
   d4a58:	4628      	mov	r0, r5
   d4a5a:	f7ff ff82 	bl	d4962 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d4a5e:	2800      	cmp	r0, #0
   d4a60:	db0d      	blt.n	d4a7e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d4a62:	d0ed      	beq.n	d4a40 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d4a64:	9b01      	ldr	r3, [sp, #4]
   d4a66:	2b00      	cmp	r3, #0
   d4a68:	d1ea      	bne.n	d4a40 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d4a6a:	b107      	cbz	r7, d4a6e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d4a6c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d4a6e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d4a72:	4621      	mov	r1, r4
   d4a74:	4628      	mov	r0, r5
   d4a76:	f7ff ffab 	bl	d49d0 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d4a7a:	4607      	mov	r7, r0
   d4a7c:	b908      	cbnz	r0, d4a82 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d4a7e:	2700      	movs	r7, #0
   d4a80:	e00b      	b.n	d4a9a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d4a82:	b916      	cbnz	r6, d4a8a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d4a84:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d4a88:	e007      	b.n	d4a9a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d4a8a:	4622      	mov	r2, r4
   d4a8c:	4631      	mov	r1, r6
   d4a8e:	4628      	mov	r0, r5
   d4a90:	f7ff ff9e 	bl	d49d0 <_ZN9FatVolume6fatPutEmm>
   d4a94:	2800      	cmp	r0, #0
   d4a96:	d1f5      	bne.n	d4a84 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d4a98:	e7f1      	b.n	d4a7e <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d4a9a:	4638      	mov	r0, r7
   d4a9c:	b002      	add	sp, #8
   d4a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4aa2 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d4aa2:	f000 b9f1 	b.w	d4e88 <HAL_Pin_Map>

000d4aa6 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d4aa6:	f000 b9ef 	b.w	d4e88 <HAL_Pin_Map>

000d4aaa <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d4aaa:	f000 b9ed 	b.w	d4e88 <HAL_Pin_Map>
	...

000d4ab0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d4ab0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d4ab2:	4c0e      	ldr	r4, [pc, #56]	; (d4aec <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d4ab4:	460e      	mov	r6, r1
   d4ab6:	4615      	mov	r5, r2
   d4ab8:	f000 fa66 	bl	d4f88 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d4abc:	6823      	ldr	r3, [r4, #0]
   d4abe:	1ac0      	subs	r0, r0, r3
   d4ac0:	4b0b      	ldr	r3, [pc, #44]	; (d4af0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d4ac2:	4298      	cmp	r0, r3
   d4ac4:	d908      	bls.n	d4ad8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4ac6:	f000 fa67 	bl	d4f98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4aca:	4b0a      	ldr	r3, [pc, #40]	; (d4af4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d4acc:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4ace:	f000 fbb7 	bl	d5240 <spark_process>
   d4ad2:	f000 fa59 	bl	d4f88 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d4ad6:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4ad8:	f000 fa5e 	bl	d4f98 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d4adc:	b280      	uxth	r0, r0
   d4ade:	1b80      	subs	r0, r0, r6
}
   d4ae0:	42a8      	cmp	r0, r5
   d4ae2:	bfd4      	ite	le
   d4ae4:	2000      	movle	r0, #0
   d4ae6:	2001      	movgt	r0, #1
   d4ae8:	bd70      	pop	{r4, r5, r6, pc}
   d4aea:	bf00      	nop
   d4aec:	2003e3d4 	.word	0x2003e3d4
   d4af0:	000186a0 	.word	0x000186a0
   d4af4:	2003e730 	.word	0x2003e730

000d4af8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d4af8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d4afa:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d4afc:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d4afe:	b94d      	cbnz	r5, d4b14 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d4b00:	6840      	ldr	r0, [r0, #4]
   d4b02:	f000 f975 	bl	d4df0 <_ZN14SdSpiAltDriver8activateEv>
   d4b06:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d4b08:	4629      	mov	r1, r5
   d4b0a:	7d18      	ldrb	r0, [r3, #20]
   d4b0c:	f001 f9ed 	bl	d5eea <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d4b10:	2301      	movs	r3, #1
   d4b12:	7223      	strb	r3, [r4, #8]
   d4b14:	bd38      	pop	{r3, r4, r5, pc}

000d4b16 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d4b16:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d4b18:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d4b1a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d4b1c:	b16b      	cbz	r3, d4b3a <_ZN9SdSpiCard7spiStopEv+0x24>
   d4b1e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d4b20:	2101      	movs	r1, #1
   d4b22:	7d18      	ldrb	r0, [r3, #20]
   d4b24:	f001 f9e1 	bl	d5eea <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d4b28:	21ff      	movs	r1, #255	; 0xff
   d4b2a:	6860      	ldr	r0, [r4, #4]
   d4b2c:	f000 f982 	bl	d4e34 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d4b30:	6860      	ldr	r0, [r4, #4]
   d4b32:	f000 f961 	bl	d4df8 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d4b36:	2300      	movs	r3, #0
   d4b38:	7223      	strb	r3, [r4, #8]
   d4b3a:	bd10      	pop	{r4, pc}

000d4b3c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d4b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b3e:	4604      	mov	r4, r0
   d4b40:	460d      	mov	r5, r1
   d4b42:	4616      	mov	r6, r2
   d4b44:	f000 fa28 	bl	d4f98 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d4b48:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d4b4a:	6860      	ldr	r0, [r4, #4]
   d4b4c:	f000 f957 	bl	d4dfe <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d4b50:	28ff      	cmp	r0, #255	; 0xff
   d4b52:	7260      	strb	r0, [r4, #9]
   d4b54:	d109      	bne.n	d4b6a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d4b56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4b5a:	4639      	mov	r1, r7
   d4b5c:	4620      	mov	r0, r4
   d4b5e:	f7ff ffa7 	bl	d4ab0 <_ZN9SdSpiCard10isTimedOutEtt>
   d4b62:	2800      	cmp	r0, #0
   d4b64:	d0f1      	beq.n	d4b4a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d4b66:	2355      	movs	r3, #85	; 0x55
   d4b68:	e00b      	b.n	d4b82 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d4b6a:	28fe      	cmp	r0, #254	; 0xfe
   d4b6c:	d001      	beq.n	d4b72 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d4b6e:	2350      	movs	r3, #80	; 0x50
   d4b70:	e007      	b.n	d4b82 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d4b72:	4632      	mov	r2, r6
   d4b74:	4629      	mov	r1, r5
   d4b76:	6860      	ldr	r0, [r4, #4]
   d4b78:	f000 f946 	bl	d4e08 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d4b7c:	7260      	strb	r0, [r4, #9]
   d4b7e:	b130      	cbz	r0, d4b8e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d4b80:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d4b82:	4620      	mov	r0, r4
   d4b84:	7023      	strb	r3, [r4, #0]
   d4b86:	f7ff ffc6 	bl	d4b16 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d4b8a:	2000      	movs	r0, #0
}
   d4b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d4b8e:	6860      	ldr	r0, [r4, #4]
   d4b90:	f000 f935 	bl	d4dfe <_ZN14SdSpiAltDriver7receiveEv>
   d4b94:	6860      	ldr	r0, [r4, #4]
   d4b96:	f000 f932 	bl	d4dfe <_ZN14SdSpiAltDriver7receiveEv>
   d4b9a:	2001      	movs	r0, #1
   d4b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b9e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d4b9e:	b570      	push	{r4, r5, r6, lr}
   d4ba0:	4604      	mov	r4, r0
   d4ba2:	460e      	mov	r6, r1
   d4ba4:	f000 f9f8 	bl	d4f98 <HAL_Timer_Get_Milli_Seconds>
   d4ba8:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d4baa:	4632      	mov	r2, r6
   d4bac:	4629      	mov	r1, r5
   d4bae:	4620      	mov	r0, r4
   d4bb0:	f7ff ff7e 	bl	d4ab0 <_ZN9SdSpiCard10isTimedOutEtt>
   d4bb4:	b930      	cbnz	r0, d4bc4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d4bb6:	6860      	ldr	r0, [r4, #4]
   d4bb8:	f000 f921 	bl	d4dfe <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d4bbc:	28ff      	cmp	r0, #255	; 0xff
   d4bbe:	d1f4      	bne.n	d4baa <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d4bc0:	2001      	movs	r0, #1
   d4bc2:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d4bc4:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d4bc6:	bd70      	pop	{r4, r5, r6, pc}

000d4bc8 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d4bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d4bca:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d4bcc:	9201      	str	r2, [sp, #4]
   d4bce:	4604      	mov	r4, r0
   d4bd0:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d4bd2:	b90b      	cbnz	r3, d4bd8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d4bd4:	f7ff ff90 	bl	d4af8 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d4bd8:	b125      	cbz	r5, d4be4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d4bda:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d4bde:	4620      	mov	r0, r4
   d4be0:	f7ff ffdd 	bl	d4b9e <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d4be4:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d4be8:	6860      	ldr	r0, [r4, #4]
   d4bea:	f000 f923 	bl	d4e34 <_ZN14SdSpiAltDriver4sendEh>
   d4bee:	f10d 0607 	add.w	r6, sp, #7
   d4bf2:	f10d 0703 	add.w	r7, sp, #3
   d4bf6:	f816 1901 	ldrb.w	r1, [r6], #-1
   d4bfa:	6860      	ldr	r0, [r4, #4]
   d4bfc:	f000 f91a 	bl	d4e34 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d4c00:	42be      	cmp	r6, r7
   d4c02:	d1f8      	bne.n	d4bf6 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d4c04:	2d00      	cmp	r5, #0
   d4c06:	bf0c      	ite	eq
   d4c08:	2195      	moveq	r1, #149	; 0x95
   d4c0a:	2187      	movne	r1, #135	; 0x87
   d4c0c:	6860      	ldr	r0, [r4, #4]
   d4c0e:	f000 f911 	bl	d4e34 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d4c12:	6860      	ldr	r0, [r4, #4]
   d4c14:	f000 f8f3 	bl	d4dfe <_ZN14SdSpiAltDriver7receiveEv>
   d4c18:	250b      	movs	r5, #11
   d4c1a:	6860      	ldr	r0, [r4, #4]
   d4c1c:	f000 f8ef 	bl	d4dfe <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d4c20:	0603      	lsls	r3, r0, #24
   d4c22:	7260      	strb	r0, [r4, #9]
   d4c24:	d503      	bpl.n	d4c2e <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d4c26:	3d01      	subs	r5, #1
   d4c28:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d4c2c:	d1f5      	bne.n	d4c1a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d4c2e:	b003      	add	sp, #12
   d4c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c32 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d4c32:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d4c34:	7a83      	ldrb	r3, [r0, #10]
   d4c36:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d4c38:	bf18      	it	ne
   d4c3a:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d4c3c:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d4c3e:	460a      	mov	r2, r1
   d4c40:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d4c42:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d4c44:	f7ff ffc0 	bl	d4bc8 <_ZN9SdSpiCard11cardCommandEhm>
   d4c48:	b110      	cbz	r0, d4c50 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d4c4a:	2330      	movs	r3, #48	; 0x30
   d4c4c:	7023      	strb	r3, [r4, #0]
   d4c4e:	e00b      	b.n	d4c68 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d4c50:	4629      	mov	r1, r5
   d4c52:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4c56:	4620      	mov	r0, r4
   d4c58:	f7ff ff70 	bl	d4b3c <_ZN9SdSpiCard8readDataEPhj>
   d4c5c:	4605      	mov	r5, r0
   d4c5e:	b118      	cbz	r0, d4c68 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d4c60:	4620      	mov	r0, r4
   d4c62:	f7ff ff58 	bl	d4b16 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d4c66:	e003      	b.n	d4c70 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d4c68:	4620      	mov	r0, r4
   d4c6a:	f7ff ff54 	bl	d4b16 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d4c6e:	2500      	movs	r5, #0
}
   d4c70:	4628      	mov	r0, r5
   d4c72:	bd38      	pop	{r3, r4, r5, pc}

000d4c74 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d4c74:	b538      	push	{r3, r4, r5, lr}
   d4c76:	4604      	mov	r4, r0
   d4c78:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d4c7a:	6840      	ldr	r0, [r0, #4]
   d4c7c:	f000 f8da 	bl	d4e34 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d4c80:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4c84:	4629      	mov	r1, r5
   d4c86:	6860      	ldr	r0, [r4, #4]
   d4c88:	f000 f8d8 	bl	d4e3c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d4c8c:	21ff      	movs	r1, #255	; 0xff
   d4c8e:	6860      	ldr	r0, [r4, #4]
   d4c90:	f000 f8d0 	bl	d4e34 <_ZN14SdSpiAltDriver4sendEh>
   d4c94:	21ff      	movs	r1, #255	; 0xff
   d4c96:	6860      	ldr	r0, [r4, #4]
   d4c98:	f000 f8cc 	bl	d4e34 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d4c9c:	6860      	ldr	r0, [r4, #4]
   d4c9e:	f000 f8ae 	bl	d4dfe <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d4ca2:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d4ca4:	f000 001f 	and.w	r0, r0, #31
   d4ca8:	2805      	cmp	r0, #5
   d4caa:	d006      	beq.n	d4cba <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d4cac:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d4cae:	4620      	mov	r0, r4
   d4cb0:	7023      	strb	r3, [r4, #0]
   d4cb2:	f7ff ff30 	bl	d4b16 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d4cb6:	2000      	movs	r0, #0
   d4cb8:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d4cba:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d4cbc:	bd38      	pop	{r3, r4, r5, pc}

000d4cbe <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d4cbe:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d4cc0:	7a83      	ldrb	r3, [r0, #10]
   d4cc2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d4cc4:	bf18      	it	ne
   d4cc6:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d4cc8:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d4cca:	460a      	mov	r2, r1
   d4ccc:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d4cce:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d4cd0:	f7ff ff7a 	bl	d4bc8 <_ZN9SdSpiCard11cardCommandEhm>
   d4cd4:	4606      	mov	r6, r0
   d4cd6:	b108      	cbz	r0, d4cdc <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d4cd8:	2332      	movs	r3, #50	; 0x32
   d4cda:	e01d      	b.n	d4d18 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d4cdc:	462a      	mov	r2, r5
   d4cde:	21fe      	movs	r1, #254	; 0xfe
   d4ce0:	4620      	mov	r0, r4
   d4ce2:	f7ff ffc7 	bl	d4c74 <_ZN9SdSpiCard9writeDataEhPKh>
   d4ce6:	b1c0      	cbz	r0, d4d1a <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d4ce8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d4cec:	4620      	mov	r0, r4
   d4cee:	f7ff ff56 	bl	d4b9e <_ZN9SdSpiCard11waitNotBusyEt>
   d4cf2:	4605      	mov	r5, r0
   d4cf4:	b908      	cbnz	r0, d4cfa <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d4cf6:	235a      	movs	r3, #90	; 0x5a
   d4cf8:	e00e      	b.n	d4d18 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d4cfa:	4632      	mov	r2, r6
   d4cfc:	210d      	movs	r1, #13
   d4cfe:	4620      	mov	r0, r4
   d4d00:	f7ff ff62 	bl	d4bc8 <_ZN9SdSpiCard11cardCommandEhm>
   d4d04:	b938      	cbnz	r0, d4d16 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d4d06:	6860      	ldr	r0, [r4, #4]
   d4d08:	f000 f879 	bl	d4dfe <_ZN14SdSpiAltDriver7receiveEv>
   d4d0c:	b918      	cbnz	r0, d4d16 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d4d0e:	4620      	mov	r0, r4
   d4d10:	f7ff ff01 	bl	d4b16 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d4d14:	e005      	b.n	d4d22 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d4d16:	2329      	movs	r3, #41	; 0x29
   d4d18:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d4d1a:	4620      	mov	r0, r4
   d4d1c:	f7ff fefb 	bl	d4b16 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d4d20:	2500      	movs	r5, #0
}
   d4d22:	4628      	mov	r0, r5
   d4d24:	bd70      	pop	{r4, r5, r6, pc}

000d4d26 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d4d26:	b538      	push	{r3, r4, r5, lr}
   d4d28:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d4d2a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d4d2e:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d4d30:	f7ff ff35 	bl	d4b9e <_ZN9SdSpiCard11waitNotBusyEt>
   d4d34:	b910      	cbnz	r0, d4d3c <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d4d36:	235b      	movs	r3, #91	; 0x5b
   d4d38:	7023      	strb	r3, [r4, #0]
   d4d3a:	e005      	b.n	d4d48 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d4d3c:	462a      	mov	r2, r5
   d4d3e:	21fc      	movs	r1, #252	; 0xfc
   d4d40:	4620      	mov	r0, r4
   d4d42:	f7ff ff97 	bl	d4c74 <_ZN9SdSpiCard9writeDataEhPKh>
   d4d46:	b918      	cbnz	r0, d4d50 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f7ff fee4 	bl	d4b16 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d4d4e:	2000      	movs	r0, #0
}
   d4d50:	bd38      	pop	{r3, r4, r5, pc}

000d4d52 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d4d52:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d4d54:	7a83      	ldrb	r3, [r0, #10]
   d4d56:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d4d58:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d4d5a:	bf18      	it	ne
   d4d5c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d4d5e:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d4d60:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d4d62:	f7ff ff31 	bl	d4bc8 <_ZN9SdSpiCard11cardCommandEhm>
   d4d66:	b130      	cbz	r0, d4d76 <_ZN9SdSpiCard10writeStartEm+0x24>
   d4d68:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d4d6a:	4620      	mov	r0, r4
   d4d6c:	7023      	strb	r3, [r4, #0]
   d4d6e:	f7ff fed2 	bl	d4b16 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d4d72:	2000      	movs	r0, #0
   d4d74:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d4d76:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d4d78:	bd10      	pop	{r4, pc}

000d4d7a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d4d7a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d4d7c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d4d80:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d4d82:	f7ff ff0c 	bl	d4b9e <_ZN9SdSpiCard11waitNotBusyEt>
   d4d86:	4605      	mov	r5, r0
   d4d88:	b120      	cbz	r0, d4d94 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d4d8a:	21fd      	movs	r1, #253	; 0xfd
   d4d8c:	6860      	ldr	r0, [r4, #4]
   d4d8e:	f000 f851 	bl	d4e34 <_ZN14SdSpiAltDriver4sendEh>
   d4d92:	e001      	b.n	d4d98 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d4d94:	2356      	movs	r3, #86	; 0x56
   d4d96:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d4d98:	4620      	mov	r0, r4
   d4d9a:	f7ff febc 	bl	d4b16 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d4d9e:	4628      	mov	r0, r5
   d4da0:	bd38      	pop	{r3, r4, r5, pc}

000d4da2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d4da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4da4:	4605      	mov	r5, r0
   d4da6:	4616      	mov	r6, r2
   d4da8:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d4daa:	f7ff ffd2 	bl	d4d52 <_ZN9SdSpiCard10writeStartEm>
   d4dae:	b170      	cbz	r0, d4dce <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d4db0:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d4db2:	42bc      	cmp	r4, r7
   d4db4:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d4db8:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d4dba:	d004      	beq.n	d4dc6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d4dbc:	f7ff ffb3 	bl	d4d26 <_ZN9SdSpiCard9writeDataEPKh>
   d4dc0:	b128      	cbz	r0, d4dce <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d4dc2:	3401      	adds	r4, #1
   d4dc4:	e7f5      	b.n	d4db2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d4dc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d4dca:	f7ff bfd6 	b.w	d4d7a <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d4dce:	4628      	mov	r0, r5
   d4dd0:	f7ff fea1 	bl	d4b16 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d4dd4:	2000      	movs	r0, #0
   d4dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4dd8 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d4dd8:	f000 b856 	b.w	d4e88 <HAL_Pin_Map>

000d4ddc <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d4ddc:	f000 b854 	b.w	d4e88 <HAL_Pin_Map>

000d4de0 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d4de0:	f000 b852 	b.w	d4e88 <HAL_Pin_Map>

000d4de4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d4de4:	4b01      	ldr	r3, [pc, #4]	; (d4dec <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d4de6:	2201      	movs	r2, #1
   d4de8:	701a      	strb	r2, [r3, #0]
   d4dea:	4770      	bx	lr
   d4dec:	2003e3d8 	.word	0x2003e3d8

000d4df0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d4df0:	1d01      	adds	r1, r0, #4
   d4df2:	6800      	ldr	r0, [r0, #0]
   d4df4:	f000 babc 	b.w	d5370 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d4df8 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d4df8:	6800      	ldr	r0, [r0, #0]
   d4dfa:	f000 ba9f 	b.w	d533c <_ZN8SPIClass14endTransactionEv>

000d4dfe <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d4dfe:	21ff      	movs	r1, #255	; 0xff
   d4e00:	6800      	ldr	r0, [r0, #0]
   d4e02:	f000 bb25 	b.w	d5450 <_ZN8SPIClass8transferEh>
	...

000d4e08 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d4e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d4e0a:	4b08      	ldr	r3, [pc, #32]	; (d4e2c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d4e0c:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d4e0e:	2500      	movs	r5, #0
   d4e10:	4c07      	ldr	r4, [pc, #28]	; (d4e30 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d4e12:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d4e14:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d4e16:	4613      	mov	r3, r2
   d4e18:	460a      	mov	r2, r1
   d4e1a:	4629      	mov	r1, r5
   d4e1c:	f000 fb1e 	bl	d545c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d4e20:	7823      	ldrb	r3, [r4, #0]
   d4e22:	2b00      	cmp	r3, #0
   d4e24:	d0fc      	beq.n	d4e20 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d4e26:	2000      	movs	r0, #0
   d4e28:	b003      	add	sp, #12
   d4e2a:	bd30      	pop	{r4, r5, pc}
   d4e2c:	000d4de5 	.word	0x000d4de5
   d4e30:	2003e3d8 	.word	0x2003e3d8

000d4e34 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d4e34:	6800      	ldr	r0, [r0, #0]
   d4e36:	f000 bb0b 	b.w	d5450 <_ZN8SPIClass8transferEh>
	...

000d4e3c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d4e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d4e3e:	4b07      	ldr	r3, [pc, #28]	; (d4e5c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d4e40:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d4e42:	2500      	movs	r5, #0
   d4e44:	4c06      	ldr	r4, [pc, #24]	; (d4e60 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d4e46:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d4e48:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d4e4a:	4613      	mov	r3, r2
   d4e4c:	462a      	mov	r2, r5
   d4e4e:	f000 fb05 	bl	d545c <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d4e52:	7823      	ldrb	r3, [r4, #0]
   d4e54:	2b00      	cmp	r3, #0
   d4e56:	d0fc      	beq.n	d4e52 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d4e58:	b003      	add	sp, #12
   d4e5a:	bd30      	pop	{r4, r5, pc}
   d4e5c:	000d4de5 	.word	0x000d4de5
   d4e60:	2003e3d8 	.word	0x2003e3d8

000d4e64 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d4e64:	f000 b810 	b.w	d4e88 <HAL_Pin_Map>

000d4e68 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <netdb_freeaddrinfo+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	689b      	ldr	r3, [r3, #8]
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	00030268 	.word	0x00030268

000d4e78 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <netdb_getaddrinfo+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	68db      	ldr	r3, [r3, #12]
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	00030268 	.word	0x00030268

000d4e88 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <HAL_Pin_Map+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	681b      	ldr	r3, [r3, #0]
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	0003022c 	.word	0x0003022c

000d4e98 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <HAL_Validate_Pin_Function+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	685b      	ldr	r3, [r3, #4]
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	0003022c 	.word	0x0003022c

000d4ea8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <HAL_Pin_Mode+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	689b      	ldr	r3, [r3, #8]
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	0003022c 	.word	0x0003022c

000d4eb8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <HAL_Get_Pin_Mode+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	68db      	ldr	r3, [r3, #12]
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	0003022c 	.word	0x0003022c

000d4ec8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <HAL_GPIO_Write+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	691b      	ldr	r3, [r3, #16]
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	0003022c 	.word	0x0003022c

000d4ed8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <HAL_ADC_Read+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	0003022c 	.word	0x0003022c

000d4ee8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <HAL_SPI_Send_Receive_Data+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	695b      	ldr	r3, [r3, #20]
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	00030230 	.word	0x00030230

000d4ef8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <HAL_SPI_Init+0xc>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	69db      	ldr	r3, [r3, #28]
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	00030230 	.word	0x00030230

000d4f08 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b02      	ldr	r3, [pc, #8]	; (d4f14 <HAL_SPI_Is_Enabled+0xc>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	6a1b      	ldr	r3, [r3, #32]
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	bd08      	pop	{r3, pc}
   d4f14:	00030230 	.word	0x00030230

000d4f18 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4f18:	b508      	push	{r3, lr}
   d4f1a:	4b02      	ldr	r3, [pc, #8]	; (d4f24 <HAL_SPI_Info+0xc>)
   d4f1c:	681b      	ldr	r3, [r3, #0]
   d4f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f20:	9301      	str	r3, [sp, #4]
   d4f22:	bd08      	pop	{r3, pc}
   d4f24:	00030230 	.word	0x00030230

000d4f28 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <HAL_SPI_DMA_Transfer+0xc>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f30:	9301      	str	r3, [sp, #4]
   d4f32:	bd08      	pop	{r3, pc}
   d4f34:	00030230 	.word	0x00030230

000d4f38 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b02      	ldr	r3, [pc, #8]	; (d4f44 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4f40:	9301      	str	r3, [sp, #4]
   d4f42:	bd08      	pop	{r3, pc}
   d4f44:	00030230 	.word	0x00030230

000d4f48 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d4f48:	b508      	push	{r3, lr}
   d4f4a:	4b02      	ldr	r3, [pc, #8]	; (d4f54 <HAL_SPI_Set_Settings+0xc>)
   d4f4c:	681b      	ldr	r3, [r3, #0]
   d4f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f50:	9301      	str	r3, [sp, #4]
   d4f52:	bd08      	pop	{r3, pc}
   d4f54:	00030230 	.word	0x00030230

000d4f58 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d4f58:	b508      	push	{r3, lr}
   d4f5a:	4b02      	ldr	r3, [pc, #8]	; (d4f64 <HAL_SPI_Acquire+0xc>)
   d4f5c:	681b      	ldr	r3, [r3, #0]
   d4f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f60:	9301      	str	r3, [sp, #4]
   d4f62:	bd08      	pop	{r3, pc}
   d4f64:	00030230 	.word	0x00030230

000d4f68 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d4f68:	b508      	push	{r3, lr}
   d4f6a:	4b02      	ldr	r3, [pc, #8]	; (d4f74 <HAL_SPI_Release+0xc>)
   d4f6c:	681b      	ldr	r3, [r3, #0]
   d4f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f70:	9301      	str	r3, [sp, #4]
   d4f72:	bd08      	pop	{r3, pc}
   d4f74:	00030230 	.word	0x00030230

000d4f78 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f78:	b508      	push	{r3, lr}
   d4f7a:	4b02      	ldr	r3, [pc, #8]	; (d4f84 <HAL_RNG_GetRandomNumber+0xc>)
   d4f7c:	681b      	ldr	r3, [r3, #0]
   d4f7e:	685b      	ldr	r3, [r3, #4]
   d4f80:	9301      	str	r3, [sp, #4]
   d4f82:	bd08      	pop	{r3, pc}
   d4f84:	00030218 	.word	0x00030218

000d4f88 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d4f88:	b508      	push	{r3, lr}
   d4f8a:	4b02      	ldr	r3, [pc, #8]	; (d4f94 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d4f8c:	681b      	ldr	r3, [r3, #0]
   d4f8e:	691b      	ldr	r3, [r3, #16]
   d4f90:	9301      	str	r3, [sp, #4]
   d4f92:	bd08      	pop	{r3, pc}
   d4f94:	00030218 	.word	0x00030218

000d4f98 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f98:	b508      	push	{r3, lr}
   d4f9a:	4b02      	ldr	r3, [pc, #8]	; (d4fa4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4f9c:	681b      	ldr	r3, [r3, #0]
   d4f9e:	695b      	ldr	r3, [r3, #20]
   d4fa0:	9301      	str	r3, [sp, #4]
   d4fa2:	bd08      	pop	{r3, pc}
   d4fa4:	00030218 	.word	0x00030218

000d4fa8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4fa8:	b508      	push	{r3, lr}
   d4faa:	4b02      	ldr	r3, [pc, #8]	; (d4fb4 <os_thread_is_current+0xc>)
   d4fac:	681b      	ldr	r3, [r3, #0]
   d4fae:	689b      	ldr	r3, [r3, #8]
   d4fb0:	9301      	str	r3, [sp, #4]
   d4fb2:	bd08      	pop	{r3, pc}
   d4fb4:	00030248 	.word	0x00030248

000d4fb8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4fb8:	b508      	push	{r3, lr}
   d4fba:	4b02      	ldr	r3, [pc, #8]	; (d4fc4 <os_thread_join+0xc>)
   d4fbc:	681b      	ldr	r3, [r3, #0]
   d4fbe:	691b      	ldr	r3, [r3, #16]
   d4fc0:	9301      	str	r3, [sp, #4]
   d4fc2:	bd08      	pop	{r3, pc}
   d4fc4:	00030248 	.word	0x00030248

000d4fc8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4fc8:	b508      	push	{r3, lr}
   d4fca:	4b02      	ldr	r3, [pc, #8]	; (d4fd4 <os_thread_cleanup+0xc>)
   d4fcc:	681b      	ldr	r3, [r3, #0]
   d4fce:	695b      	ldr	r3, [r3, #20]
   d4fd0:	9301      	str	r3, [sp, #4]
   d4fd2:	bd08      	pop	{r3, pc}
   d4fd4:	00030248 	.word	0x00030248

000d4fd8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4fd8:	b508      	push	{r3, lr}
   d4fda:	4b02      	ldr	r3, [pc, #8]	; (d4fe4 <os_mutex_recursive_create+0xc>)
   d4fdc:	681b      	ldr	r3, [r3, #0]
   d4fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4fe0:	9301      	str	r3, [sp, #4]
   d4fe2:	bd08      	pop	{r3, pc}
   d4fe4:	00030248 	.word	0x00030248

000d4fe8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4fe8:	b508      	push	{r3, lr}
   d4fea:	4b02      	ldr	r3, [pc, #8]	; (d4ff4 <os_mutex_recursive_destroy+0xc>)
   d4fec:	681b      	ldr	r3, [r3, #0]
   d4fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4ff0:	9301      	str	r3, [sp, #4]
   d4ff2:	bd08      	pop	{r3, pc}
   d4ff4:	00030248 	.word	0x00030248

000d4ff8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4ff8:	b508      	push	{r3, lr}
   d4ffa:	4b02      	ldr	r3, [pc, #8]	; (d5004 <inet_inet_ntop+0xc>)
   d4ffc:	681b      	ldr	r3, [r3, #0]
   d4ffe:	695b      	ldr	r3, [r3, #20]
   d5000:	9301      	str	r3, [sp, #4]
   d5002:	bd08      	pop	{r3, pc}
   d5004:	00030264 	.word	0x00030264

000d5008 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5008:	b508      	push	{r3, lr}
   d500a:	4b02      	ldr	r3, [pc, #8]	; (d5014 <HAL_USART_Init+0xc>)
   d500c:	681b      	ldr	r3, [r3, #0]
   d500e:	681b      	ldr	r3, [r3, #0]
   d5010:	9301      	str	r3, [sp, #4]
   d5012:	bd08      	pop	{r3, pc}
   d5014:	0003023c 	.word	0x0003023c

000d5018 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5018:	b508      	push	{r3, lr}
   d501a:	4b02      	ldr	r3, [pc, #8]	; (d5024 <HAL_USART_Write_Data+0xc>)
   d501c:	681b      	ldr	r3, [r3, #0]
   d501e:	68db      	ldr	r3, [r3, #12]
   d5020:	9301      	str	r3, [sp, #4]
   d5022:	bd08      	pop	{r3, pc}
   d5024:	0003023c 	.word	0x0003023c

000d5028 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5028:	b508      	push	{r3, lr}
   d502a:	4b02      	ldr	r3, [pc, #8]	; (d5034 <HAL_USART_Available_Data+0xc>)
   d502c:	681b      	ldr	r3, [r3, #0]
   d502e:	691b      	ldr	r3, [r3, #16]
   d5030:	9301      	str	r3, [sp, #4]
   d5032:	bd08      	pop	{r3, pc}
   d5034:	0003023c 	.word	0x0003023c

000d5038 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5038:	b508      	push	{r3, lr}
   d503a:	4b02      	ldr	r3, [pc, #8]	; (d5044 <HAL_USART_Read_Data+0xc>)
   d503c:	681b      	ldr	r3, [r3, #0]
   d503e:	695b      	ldr	r3, [r3, #20]
   d5040:	9301      	str	r3, [sp, #4]
   d5042:	bd08      	pop	{r3, pc}
   d5044:	0003023c 	.word	0x0003023c

000d5048 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5048:	b508      	push	{r3, lr}
   d504a:	4b02      	ldr	r3, [pc, #8]	; (d5054 <HAL_USART_Peek_Data+0xc>)
   d504c:	681b      	ldr	r3, [r3, #0]
   d504e:	699b      	ldr	r3, [r3, #24]
   d5050:	9301      	str	r3, [sp, #4]
   d5052:	bd08      	pop	{r3, pc}
   d5054:	0003023c 	.word	0x0003023c

000d5058 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5058:	b508      	push	{r3, lr}
   d505a:	4b02      	ldr	r3, [pc, #8]	; (d5064 <HAL_USART_Flush_Data+0xc>)
   d505c:	681b      	ldr	r3, [r3, #0]
   d505e:	69db      	ldr	r3, [r3, #28]
   d5060:	9301      	str	r3, [sp, #4]
   d5062:	bd08      	pop	{r3, pc}
   d5064:	0003023c 	.word	0x0003023c

000d5068 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5068:	b508      	push	{r3, lr}
   d506a:	4b02      	ldr	r3, [pc, #8]	; (d5074 <HAL_USART_Is_Enabled+0xc>)
   d506c:	681b      	ldr	r3, [r3, #0]
   d506e:	6a1b      	ldr	r3, [r3, #32]
   d5070:	9301      	str	r3, [sp, #4]
   d5072:	bd08      	pop	{r3, pc}
   d5074:	0003023c 	.word	0x0003023c

000d5078 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5078:	b508      	push	{r3, lr}
   d507a:	4b02      	ldr	r3, [pc, #8]	; (d5084 <HAL_USART_Available_Data_For_Write+0xc>)
   d507c:	681b      	ldr	r3, [r3, #0]
   d507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5080:	9301      	str	r3, [sp, #4]
   d5082:	bd08      	pop	{r3, pc}
   d5084:	0003023c 	.word	0x0003023c

000d5088 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5088:	b508      	push	{r3, lr}
   d508a:	4b02      	ldr	r3, [pc, #8]	; (d5094 <HAL_I2C_Write_Data+0xc>)
   d508c:	681b      	ldr	r3, [r3, #0]
   d508e:	6a1b      	ldr	r3, [r3, #32]
   d5090:	9301      	str	r3, [sp, #4]
   d5092:	bd08      	pop	{r3, pc}
   d5094:	00030228 	.word	0x00030228

000d5098 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5098:	b508      	push	{r3, lr}
   d509a:	4b02      	ldr	r3, [pc, #8]	; (d50a4 <HAL_I2C_Available_Data+0xc>)
   d509c:	681b      	ldr	r3, [r3, #0]
   d509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50a0:	9301      	str	r3, [sp, #4]
   d50a2:	bd08      	pop	{r3, pc}
   d50a4:	00030228 	.word	0x00030228

000d50a8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d50a8:	b508      	push	{r3, lr}
   d50aa:	4b02      	ldr	r3, [pc, #8]	; (d50b4 <HAL_I2C_Read_Data+0xc>)
   d50ac:	681b      	ldr	r3, [r3, #0]
   d50ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50b0:	9301      	str	r3, [sp, #4]
   d50b2:	bd08      	pop	{r3, pc}
   d50b4:	00030228 	.word	0x00030228

000d50b8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d50b8:	b508      	push	{r3, lr}
   d50ba:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <HAL_I2C_Peek_Data+0xc>)
   d50bc:	681b      	ldr	r3, [r3, #0]
   d50be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50c0:	9301      	str	r3, [sp, #4]
   d50c2:	bd08      	pop	{r3, pc}
   d50c4:	00030228 	.word	0x00030228

000d50c8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d50c8:	b508      	push	{r3, lr}
   d50ca:	4b02      	ldr	r3, [pc, #8]	; (d50d4 <HAL_I2C_Flush_Data+0xc>)
   d50cc:	681b      	ldr	r3, [r3, #0]
   d50ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50d0:	9301      	str	r3, [sp, #4]
   d50d2:	bd08      	pop	{r3, pc}
   d50d4:	00030228 	.word	0x00030228

000d50d8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <HAL_I2C_Is_Enabled+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	00030228 	.word	0x00030228

000d50e8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d50e8:	b508      	push	{r3, lr}
   d50ea:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <HAL_I2C_Init+0xc>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	bd08      	pop	{r3, pc}
   d50f4:	00030228 	.word	0x00030228

000d50f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d50f8:	b508      	push	{r3, lr}
   d50fa:	4b02      	ldr	r3, [pc, #8]	; (d5104 <HAL_USB_USART_Init+0xc>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	681b      	ldr	r3, [r3, #0]
   d5100:	9301      	str	r3, [sp, #4]
   d5102:	bd08      	pop	{r3, pc}
   d5104:	0003024c 	.word	0x0003024c

000d5108 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5108:	b508      	push	{r3, lr}
   d510a:	4b02      	ldr	r3, [pc, #8]	; (d5114 <HAL_USB_USART_Begin+0xc>)
   d510c:	681b      	ldr	r3, [r3, #0]
   d510e:	685b      	ldr	r3, [r3, #4]
   d5110:	9301      	str	r3, [sp, #4]
   d5112:	bd08      	pop	{r3, pc}
   d5114:	0003024c 	.word	0x0003024c

000d5118 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5118:	b508      	push	{r3, lr}
   d511a:	4b02      	ldr	r3, [pc, #8]	; (d5124 <HAL_USB_USART_Available_Data+0xc>)
   d511c:	681b      	ldr	r3, [r3, #0]
   d511e:	691b      	ldr	r3, [r3, #16]
   d5120:	9301      	str	r3, [sp, #4]
   d5122:	bd08      	pop	{r3, pc}
   d5124:	0003024c 	.word	0x0003024c

000d5128 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5128:	b508      	push	{r3, lr}
   d512a:	4b02      	ldr	r3, [pc, #8]	; (d5134 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d512c:	681b      	ldr	r3, [r3, #0]
   d512e:	695b      	ldr	r3, [r3, #20]
   d5130:	9301      	str	r3, [sp, #4]
   d5132:	bd08      	pop	{r3, pc}
   d5134:	0003024c 	.word	0x0003024c

000d5138 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b02      	ldr	r3, [pc, #8]	; (d5144 <HAL_USB_USART_Receive_Data+0xc>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	699b      	ldr	r3, [r3, #24]
   d5140:	9301      	str	r3, [sp, #4]
   d5142:	bd08      	pop	{r3, pc}
   d5144:	0003024c 	.word	0x0003024c

000d5148 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <HAL_USB_USART_Send_Data+0xc>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	69db      	ldr	r3, [r3, #28]
   d5150:	9301      	str	r3, [sp, #4]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	0003024c 	.word	0x0003024c

000d5158 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b02      	ldr	r3, [pc, #8]	; (d5164 <HAL_USB_USART_Flush_Data+0xc>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	6a1b      	ldr	r3, [r3, #32]
   d5160:	9301      	str	r3, [sp, #4]
   d5162:	bd08      	pop	{r3, pc}
   d5164:	0003024c 	.word	0x0003024c

000d5168 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5168:	b508      	push	{r3, lr}
   d516a:	4b02      	ldr	r3, [pc, #8]	; (d5174 <set_system_mode+0xc>)
   d516c:	681b      	ldr	r3, [r3, #0]
   d516e:	685b      	ldr	r3, [r3, #4]
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	00030220 	.word	0x00030220

000d5178 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5178:	b508      	push	{r3, lr}
   d517a:	4b03      	ldr	r3, [pc, #12]	; (d5188 <system_ctrl_set_app_request_handler+0x10>)
   d517c:	681b      	ldr	r3, [r3, #0]
   d517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5182:	9301      	str	r3, [sp, #4]
   d5184:	bd08      	pop	{r3, pc}
   d5186:	0000      	.short	0x0000
   d5188:	00030220 	.word	0x00030220

000d518c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b03      	ldr	r3, [pc, #12]	; (d519c <system_ctrl_set_result+0x10>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5196:	9301      	str	r3, [sp, #4]
   d5198:	bd08      	pop	{r3, pc}
   d519a:	0000      	.short	0x0000
   d519c:	00030220 	.word	0x00030220

000d51a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d51a0:	b508      	push	{r3, lr}
   d51a2:	4b02      	ldr	r3, [pc, #8]	; (d51ac <network_connect+0xc>)
   d51a4:	681b      	ldr	r3, [r3, #0]
   d51a6:	685b      	ldr	r3, [r3, #4]
   d51a8:	9301      	str	r3, [sp, #4]
   d51aa:	bd08      	pop	{r3, pc}
   d51ac:	00030240 	.word	0x00030240

000d51b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b02      	ldr	r3, [pc, #8]	; (d51bc <network_connecting+0xc>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	689b      	ldr	r3, [r3, #8]
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	bd08      	pop	{r3, pc}
   d51bc:	00030240 	.word	0x00030240

000d51c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b02      	ldr	r3, [pc, #8]	; (d51cc <network_disconnect+0xc>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	68db      	ldr	r3, [r3, #12]
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	bd08      	pop	{r3, pc}
   d51cc:	00030240 	.word	0x00030240

000d51d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <network_ready+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	691b      	ldr	r3, [r3, #16]
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	00030240 	.word	0x00030240

000d51e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <network_on+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	695b      	ldr	r3, [r3, #20]
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	00030240 	.word	0x00030240

000d51f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <network_off+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	699b      	ldr	r3, [r3, #24]
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	00030240 	.word	0x00030240

000d5200 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <network_listen+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	69db      	ldr	r3, [r3, #28]
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	00030240 	.word	0x00030240

000d5210 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <network_listening+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	6a1b      	ldr	r3, [r3, #32]
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	00030240 	.word	0x00030240

000d5220 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <network_set_listen_timeout+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030240 	.word	0x00030240

000d5230 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <network_get_listen_timeout+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030240 	.word	0x00030240

000d5240 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <spark_process+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	689b      	ldr	r3, [r3, #8]
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	00030244 	.word	0x00030244

000d5250 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	00030244 	.word	0x00030244

000d5260 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <malloc+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	681b      	ldr	r3, [r3, #0]
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	0003021c 	.word	0x0003021c

000d5270 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <free+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	685b      	ldr	r3, [r3, #4]
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	0003021c 	.word	0x0003021c

000d5280 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <vsnprintf+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	0003021c 	.word	0x0003021c

000d5290 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <__errno+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	0003021c 	.word	0x0003021c

000d52a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52a0:	2200      	movs	r2, #0
   d52a2:	4611      	mov	r1, r2
   d52a4:	6840      	ldr	r0, [r0, #4]
   d52a6:	f7ff bfb3 	b.w	d5210 <network_listening>

000d52aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d52aa:	2200      	movs	r2, #0
   d52ac:	4611      	mov	r1, r2
   d52ae:	6840      	ldr	r0, [r0, #4]
   d52b0:	f7ff bfbe 	b.w	d5230 <network_get_listen_timeout>

000d52b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d52b4:	2200      	movs	r2, #0
   d52b6:	6840      	ldr	r0, [r0, #4]
   d52b8:	f7ff bfb2 	b.w	d5220 <network_set_listen_timeout>

000d52bc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d52bc:	2200      	movs	r2, #0
   d52be:	f081 0101 	eor.w	r1, r1, #1
   d52c2:	6840      	ldr	r0, [r0, #4]
   d52c4:	f7ff bf9c 	b.w	d5200 <network_listen>

000d52c8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d52c8:	2300      	movs	r3, #0
   d52ca:	461a      	mov	r2, r3
   d52cc:	4619      	mov	r1, r3
   d52ce:	6840      	ldr	r0, [r0, #4]
   d52d0:	f7ff bf8e 	b.w	d51f0 <network_off>

000d52d4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d52d4:	2300      	movs	r3, #0
   d52d6:	461a      	mov	r2, r3
   d52d8:	4619      	mov	r1, r3
   d52da:	6840      	ldr	r0, [r0, #4]
   d52dc:	f7ff bf80 	b.w	d51e0 <network_on>

000d52e0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d52e0:	2200      	movs	r2, #0
   d52e2:	4611      	mov	r1, r2
   d52e4:	6840      	ldr	r0, [r0, #4]
   d52e6:	f7ff bf73 	b.w	d51d0 <network_ready>

000d52ea <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d52ea:	2200      	movs	r2, #0
   d52ec:	4611      	mov	r1, r2
   d52ee:	6840      	ldr	r0, [r0, #4]
   d52f0:	f7ff bf5e 	b.w	d51b0 <network_connecting>

000d52f4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d52f4:	2200      	movs	r2, #0
   d52f6:	2102      	movs	r1, #2
   d52f8:	6840      	ldr	r0, [r0, #4]
   d52fa:	f7ff bf61 	b.w	d51c0 <network_disconnect>

000d52fe <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d52fe:	2300      	movs	r3, #0
   d5300:	461a      	mov	r2, r3
   d5302:	6840      	ldr	r0, [r0, #4]
   d5304:	f7ff bf4c 	b.w	d51a0 <network_connect>

000d5308 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5308:	4b02      	ldr	r3, [pc, #8]	; (d5314 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d530a:	2203      	movs	r2, #3
   d530c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d530e:	4a02      	ldr	r2, [pc, #8]	; (d5318 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5310:	601a      	str	r2, [r3, #0]
   d5312:	4770      	bx	lr
   d5314:	2003e3dc 	.word	0x2003e3dc
   d5318:	000d6fd8 	.word	0x000d6fd8

000d531c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d531c:	2100      	movs	r1, #0
   d531e:	f7ff be1b 	b.w	d4f58 <HAL_SPI_Acquire>

000d5322 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5322:	2100      	movs	r1, #0
   d5324:	f7ff be20 	b.w	d4f68 <HAL_SPI_Release>

000d5328 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5328:	b510      	push	{r4, lr}
   d532a:	4604      	mov	r4, r0
{
    _spi = spi;
   d532c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d532e:	4608      	mov	r0, r1
   d5330:	f7ff fde2 	bl	d4ef8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5334:	2300      	movs	r3, #0
   d5336:	6063      	str	r3, [r4, #4]
}
   d5338:	4620      	mov	r0, r4
   d533a:	bd10      	pop	{r4, pc}

000d533c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d533c:	7800      	ldrb	r0, [r0, #0]
   d533e:	f7ff bff0 	b.w	d5322 <_ZN8SPIClass6unlockEv.isra.1>
	...

000d5344 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5344:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5346:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5348:	6018      	str	r0, [r3, #0]
   d534a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d534c:	6818      	ldr	r0, [r3, #0]
   d534e:	4288      	cmp	r0, r1
   d5350:	b2e5      	uxtb	r5, r4
   d5352:	d906      	bls.n	d5362 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5354:	3401      	adds	r4, #1
   d5356:	2c08      	cmp	r4, #8
   d5358:	d002      	beq.n	d5360 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d535a:	0840      	lsrs	r0, r0, #1
   d535c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d535e:	e7f5      	b.n	d534c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5360:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5364:	5d5b      	ldrb	r3, [r3, r5]
   d5366:	7013      	strb	r3, [r2, #0]
   d5368:	bd30      	pop	{r4, r5, pc}
   d536a:	bf00      	nop
   d536c:	000d7004 	.word	0x000d7004

000d5370 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5374:	4607      	mov	r7, r0
   d5376:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d5378:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d537a:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d537c:	f7ff ffce 	bl	d531c <_ZN8SPIClass4lockEv.isra.0>
   d5380:	2800      	cmp	r0, #0
   d5382:	db62      	blt.n	d544a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d5384:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5386:	2214      	movs	r2, #20
   d5388:	2100      	movs	r1, #0
   d538a:	a809      	add	r0, sp, #36	; 0x24
   d538c:	f001 fd63 	bl	d6e56 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5390:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5392:	4620      	mov	r0, r4
   d5394:	2200      	movs	r2, #0
   d5396:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5398:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d539c:	f7ff fdbc 	bl	d4f18 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d53a0:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d53a4:	b154      	cbz	r4, d53bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d53a6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d53aa:	b935      	cbnz	r5, d53ba <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d53ac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d53b0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d53b4:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d53b8:	e003      	b.n	d53c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d53ba:	2400      	movs	r4, #0
   d53bc:	46a1      	mov	r9, r4
   d53be:	46a0      	mov	r8, r4
   d53c0:	2501      	movs	r5, #1
   d53c2:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d53c4:	b105      	cbz	r5, d53c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d53c6:	b9bb      	cbnz	r3, d53f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d53c8:	429d      	cmp	r5, r3
   d53ca:	d10b      	bne.n	d53e4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d53cc:	68b2      	ldr	r2, [r6, #8]
   d53ce:	4542      	cmp	r2, r8
   d53d0:	d108      	bne.n	d53e4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d53d2:	f88d 9020 	strb.w	r9, [sp, #32]
   d53d6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d53da:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d53de:	89b2      	ldrh	r2, [r6, #12]
   d53e0:	4291      	cmp	r1, r2
   d53e2:	d009      	beq.n	d53f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d53e4:	b153      	cbz	r3, d53fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d53e6:	2400      	movs	r4, #0
   d53e8:	7838      	ldrb	r0, [r7, #0]
   d53ea:	9401      	str	r4, [sp, #4]
   d53ec:	9400      	str	r4, [sp, #0]
   d53ee:	4623      	mov	r3, r4
   d53f0:	4622      	mov	r2, r4
   d53f2:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d53f4:	f7ff fda8 	bl	d4f48 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d53f8:	2000      	movs	r0, #0
   d53fa:	e026      	b.n	d544a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d53fc:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d5400:	68b1      	ldr	r1, [r6, #8]
   d5402:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5404:	ab04      	add	r3, sp, #16
   d5406:	f10d 020f 	add.w	r2, sp, #15
   d540a:	f7ff ff9b 	bl	d5344 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d540e:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5410:	b105      	cbz	r5, d5414 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d5412:	b9b1      	cbnz	r1, d5442 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d5414:	42a9      	cmp	r1, r5
   d5416:	d008      	beq.n	d542a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5418:	2400      	movs	r4, #0
   d541a:	7838      	ldrb	r0, [r7, #0]
   d541c:	9401      	str	r4, [sp, #4]
   d541e:	7b74      	ldrb	r4, [r6, #13]
   d5420:	7b33      	ldrb	r3, [r6, #12]
   d5422:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5426:	9400      	str	r4, [sp, #0]
   d5428:	e7e4      	b.n	d53f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d542a:	68b3      	ldr	r3, [r6, #8]
   d542c:	4543      	cmp	r3, r8
   d542e:	d3f3      	bcc.n	d5418 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5430:	f88d 9020 	strb.w	r9, [sp, #32]
   d5434:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5438:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d543c:	89b3      	ldrh	r3, [r6, #12]
   d543e:	429a      	cmp	r2, r3
   d5440:	d1ea      	bne.n	d5418 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5442:	9b04      	ldr	r3, [sp, #16]
   d5444:	4543      	cmp	r3, r8
   d5446:	d1e7      	bne.n	d5418 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d5448:	e7d6      	b.n	d53f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d544a:	b00f      	add	sp, #60	; 0x3c
   d544c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5450 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5450:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d5452:	7800      	ldrb	r0, [r0, #0]
   d5454:	f7ff fd48 	bl	d4ee8 <HAL_SPI_Send_Receive_Data>
}
   d5458:	b2c0      	uxtb	r0, r0
   d545a:	bd08      	pop	{r3, pc}

000d545c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d545c:	b530      	push	{r4, r5, lr}
   d545e:	b087      	sub	sp, #28
   d5460:	4604      	mov	r4, r0
   d5462:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d5464:	7800      	ldrb	r0, [r0, #0]
   d5466:	9500      	str	r5, [sp, #0]
   d5468:	f7ff fd5e 	bl	d4f28 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d546c:	b93d      	cbnz	r5, d547e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d546e:	a902      	add	r1, sp, #8
   d5470:	7820      	ldrb	r0, [r4, #0]
   d5472:	f7ff fd61 	bl	d4f38 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d5476:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d547a:	07db      	lsls	r3, r3, #31
   d547c:	d4f7      	bmi.n	d546e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d547e:	b007      	add	sp, #28
   d5480:	bd30      	pop	{r4, r5, pc}

000d5482 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5482:	7800      	ldrb	r0, [r0, #0]
   d5484:	f7ff bd40 	b.w	d4f08 <HAL_SPI_Is_Enabled>

000d5488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5488:	b510      	push	{r4, lr}
   d548a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d548c:	6800      	ldr	r0, [r0, #0]
   d548e:	b118      	cbz	r0, d5498 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5490:	f7ff feee 	bl	d5270 <free>
            wakeupSource_ = nullptr;
   d5494:	2300      	movs	r3, #0
   d5496:	6023      	str	r3, [r4, #0]
   d5498:	bd10      	pop	{r4, pc}

000d549a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d549a:	b510      	push	{r4, lr}
   d549c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d549e:	f7ff fff3 	bl	d5488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d54a2:	4620      	mov	r0, r4
   d54a4:	bd10      	pop	{r4, pc}
	...

000d54a8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d54a8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d54aa:	4c09      	ldr	r4, [pc, #36]	; (d54d0 <_GLOBAL__sub_I_System+0x28>)
   d54ac:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d54ae:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d54b2:	6020      	str	r0, [r4, #0]
   d54b4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d54b6:	71a0      	strb	r0, [r4, #6]
   d54b8:	8120      	strh	r0, [r4, #8]
   d54ba:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d54bc:	f7ff fe54 	bl	d5168 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d54c0:	4620      	mov	r0, r4
   d54c2:	4a04      	ldr	r2, [pc, #16]	; (d54d4 <_GLOBAL__sub_I_System+0x2c>)
   d54c4:	4904      	ldr	r1, [pc, #16]	; (d54d8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d54c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d54ca:	f000 bd7f 	b.w	d5fcc <__aeabi_atexit>
   d54ce:	bf00      	nop
   d54d0:	2003e3e4 	.word	0x2003e3e4
   d54d4:	2003dec0 	.word	0x2003dec0
   d54d8:	000d549b 	.word	0x000d549b

000d54dc <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d54dc:	b510      	push	{r4, lr}
   d54de:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d54e0:	6800      	ldr	r0, [r0, #0]
   d54e2:	b108      	cbz	r0, d54e8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d54e4:	f7ff fd80 	bl	d4fe8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d54e8:	4620      	mov	r0, r4
   d54ea:	bd10      	pop	{r4, pc}

000d54ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d54ec:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d54ee:	4c06      	ldr	r4, [pc, #24]	; (d5508 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d54f0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d54f2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d54f4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d54f6:	f7ff fd6f 	bl	d4fd8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d54fa:	4620      	mov	r0, r4
   d54fc:	4a03      	ldr	r2, [pc, #12]	; (d550c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d54fe:	4904      	ldr	r1, [pc, #16]	; (d5510 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5504:	f000 bd62 	b.w	d5fcc <__aeabi_atexit>
   d5508:	2003e3f0 	.word	0x2003e3f0
   d550c:	2003dec0 	.word	0x2003dec0
   d5510:	000d54dd 	.word	0x000d54dd

000d5514 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5516:	4606      	mov	r6, r0
   d5518:	460d      	mov	r5, r1
   d551a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d551c:	2400      	movs	r4, #0
  while (size--) {
   d551e:	42bd      	cmp	r5, r7
   d5520:	d00c      	beq.n	d553c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5522:	6833      	ldr	r3, [r6, #0]
   d5524:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5528:	689b      	ldr	r3, [r3, #8]
   d552a:	4630      	mov	r0, r6
   d552c:	4798      	blx	r3
     if (chunk>=0)
   d552e:	2800      	cmp	r0, #0
   d5530:	db01      	blt.n	d5536 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5532:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5534:	e7f3      	b.n	d551e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5536:	2c00      	cmp	r4, #0
   d5538:	bf08      	it	eq
   d553a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d553c:	4620      	mov	r0, r4
   d553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5540 <_ZN5Print5printEPKc>:
   d5540:	b508      	push	{r3, lr}
   d5542:	f7ff f9a9 	bl	d4898 <_ZN5Print5writeEPKc>
   d5546:	bd08      	pop	{r3, pc}

000d5548 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5548:	6803      	ldr	r3, [r0, #0]
   d554a:	689b      	ldr	r3, [r3, #8]
   d554c:	4718      	bx	r3

000d554e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d554e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5550:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5552:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5554:	f7ff fff8 	bl	d5548 <_ZN5Print5printEc>
  n += print('\n');
   d5558:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d555a:	4604      	mov	r4, r0
  n += print('\n');
   d555c:	4628      	mov	r0, r5
   d555e:	f7ff fff3 	bl	d5548 <_ZN5Print5printEc>
  return n;
}
   d5562:	4420      	add	r0, r4
   d5564:	bd38      	pop	{r3, r4, r5, pc}

000d5566 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5566:	b538      	push	{r3, r4, r5, lr}
   d5568:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d556a:	f7ff f995 	bl	d4898 <_ZN5Print5writeEPKc>
   d556e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5570:	4628      	mov	r0, r5
   d5572:	f7ff ffec 	bl	d554e <_ZN5Print7printlnEv>
  return n;
}
   d5576:	4420      	add	r0, r4
   d5578:	bd38      	pop	{r3, r4, r5, pc}

000d557a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d557a:	b530      	push	{r4, r5, lr}
   d557c:	b08b      	sub	sp, #44	; 0x2c
   d557e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5580:	2100      	movs	r1, #0
   d5582:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5586:	2a01      	cmp	r2, #1
   d5588:	bf98      	it	ls
   d558a:	220a      	movls	r2, #10
   d558c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5590:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5594:	fb05 3312 	mls	r3, r5, r2, r3
   d5598:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d559c:	2b09      	cmp	r3, #9
   d559e:	bf94      	ite	ls
   d55a0:	3330      	addls	r3, #48	; 0x30
   d55a2:	3337      	addhi	r3, #55	; 0x37
   d55a4:	b2db      	uxtb	r3, r3
   d55a6:	4621      	mov	r1, r4
   d55a8:	f804 3901 	strb.w	r3, [r4], #-1
   d55ac:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d55ae:	2d00      	cmp	r5, #0
   d55b0:	d1ee      	bne.n	d5590 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d55b2:	f7ff f971 	bl	d4898 <_ZN5Print5writeEPKc>
}
   d55b6:	b00b      	add	sp, #44	; 0x2c
   d55b8:	bd30      	pop	{r4, r5, pc}

000d55ba <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d55ba:	b40c      	push	{r2, r3}
   d55bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d55c0:	b087      	sub	sp, #28
   d55c2:	af00      	add	r7, sp, #0
   d55c4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d55c8:	4605      	mov	r5, r0
   d55ca:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d55ce:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d55d0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d55d2:	4623      	mov	r3, r4
   d55d4:	464a      	mov	r2, r9
   d55d6:	2114      	movs	r1, #20
   d55d8:	1d38      	adds	r0, r7, #4
   d55da:	f7ff fe51 	bl	d5280 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d55de:	2813      	cmp	r0, #19
   d55e0:	d805      	bhi.n	d55ee <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d55e2:	1d39      	adds	r1, r7, #4
   d55e4:	4628      	mov	r0, r5
   d55e6:	f7ff f957 	bl	d4898 <_ZN5Print5writeEPKc>
   d55ea:	4604      	mov	r4, r0
   d55ec:	e013      	b.n	d5616 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d55ee:	f100 0308 	add.w	r3, r0, #8
   d55f2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d55f6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d55f8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d55fc:	1c41      	adds	r1, r0, #1
   d55fe:	4623      	mov	r3, r4
   d5600:	464a      	mov	r2, r9
   d5602:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5604:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5606:	f7ff fe3b 	bl	d5280 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d560a:	4669      	mov	r1, sp
   d560c:	4628      	mov	r0, r5
   d560e:	f7ff f943 	bl	d4898 <_ZN5Print5writeEPKc>
   d5612:	4604      	mov	r4, r0
   d5614:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5616:	b11e      	cbz	r6, d5620 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5618:	4628      	mov	r0, r5
   d561a:	f7ff ff98 	bl	d554e <_ZN5Print7printlnEv>
   d561e:	4404      	add	r4, r0
    return n;
}
   d5620:	4620      	mov	r0, r4
   d5622:	371c      	adds	r7, #28
   d5624:	46bd      	mov	sp, r7
   d5626:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d562a:	b002      	add	sp, #8
   d562c:	4770      	bx	lr
	...

000d5630 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5630:	4b01      	ldr	r3, [pc, #4]	; (d5638 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5632:	4a02      	ldr	r2, [pc, #8]	; (d563c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5634:	601a      	str	r2, [r3, #0]
   d5636:	4770      	bx	lr
   d5638:	2003e3f4 	.word	0x2003e3f4
   d563c:	000d707f 	.word	0x000d707f

000d5640 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5640:	4b02      	ldr	r3, [pc, #8]	; (d564c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5642:	681a      	ldr	r2, [r3, #0]
   d5644:	4b02      	ldr	r3, [pc, #8]	; (d5650 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5646:	601a      	str	r2, [r3, #0]
   d5648:	4770      	bx	lr
   d564a:	bf00      	nop
   d564c:	2003de54 	.word	0x2003de54
   d5650:	2003e3f8 	.word	0x2003e3f8

000d5654 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5654:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5656:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5658:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d565a:	b113      	cbz	r3, d5662 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d565c:	2203      	movs	r2, #3
   d565e:	4601      	mov	r1, r0
   d5660:	4798      	blx	r3
    }
   d5662:	4620      	mov	r0, r4
   d5664:	bd10      	pop	{r4, pc}

000d5666 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5666:	b510      	push	{r4, lr}
   d5668:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d566a:	f7ff fff3 	bl	d5654 <_ZNSt14_Function_baseD1Ev>
   d566e:	4620      	mov	r0, r4
   d5670:	bd10      	pop	{r4, pc}
	...

000d5674 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5674:	4803      	ldr	r0, [pc, #12]	; (d5684 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5676:	4a04      	ldr	r2, [pc, #16]	; (d5688 <_GLOBAL__sub_I_RGB+0x14>)
   d5678:	4904      	ldr	r1, [pc, #16]	; (d568c <_GLOBAL__sub_I_RGB+0x18>)
   d567a:	2300      	movs	r3, #0
   d567c:	6083      	str	r3, [r0, #8]
   d567e:	f000 bca5 	b.w	d5fcc <__aeabi_atexit>
   d5682:	bf00      	nop
   d5684:	2003e3fc 	.word	0x2003e3fc
   d5688:	2003dec0 	.word	0x2003dec0
   d568c:	000d5667 	.word	0x000d5667

000d5690 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5690:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5692:	4b0c      	ldr	r3, [pc, #48]	; (d56c4 <serialEventRun+0x34>)
   d5694:	b133      	cbz	r3, d56a4 <serialEventRun+0x14>
   d5696:	f000 f957 	bl	d5948 <_Z16_fetch_usbserialv>
   d569a:	6803      	ldr	r3, [r0, #0]
   d569c:	691b      	ldr	r3, [r3, #16]
   d569e:	4798      	blx	r3
   d56a0:	2800      	cmp	r0, #0
   d56a2:	dc09      	bgt.n	d56b8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d56a4:	4b08      	ldr	r3, [pc, #32]	; (d56c8 <serialEventRun+0x38>)
   d56a6:	b163      	cbz	r3, d56c2 <serialEventRun+0x32>
   d56a8:	f000 f9d0 	bl	d5a4c <_Z22__fetch_global_Serial1v>
   d56ac:	6803      	ldr	r3, [r0, #0]
   d56ae:	691b      	ldr	r3, [r3, #16]
   d56b0:	4798      	blx	r3
   d56b2:	2800      	cmp	r0, #0
   d56b4:	dc03      	bgt.n	d56be <serialEventRun+0x2e>
   d56b6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d56b8:	f3af 8000 	nop.w
   d56bc:	e7f2      	b.n	d56a4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d56be:	f3af 8000 	nop.w
   d56c2:	bd08      	pop	{r3, pc}
	...

000d56cc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d56cc:	b508      	push	{r3, lr}
	serialEventRun();
   d56ce:	f7ff ffdf 	bl	d5690 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d56d2:	f7ff fc61 	bl	d4f98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d56d6:	4b01      	ldr	r3, [pc, #4]	; (d56dc <_post_loop+0x10>)
   d56d8:	6018      	str	r0, [r3, #0]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	2003e730 	.word	0x2003e730

000d56e0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d56e0:	4802      	ldr	r0, [pc, #8]	; (d56ec <_Z33system_initialize_user_backup_ramv+0xc>)
   d56e2:	4a03      	ldr	r2, [pc, #12]	; (d56f0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d56e4:	4903      	ldr	r1, [pc, #12]	; (d56f4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d56e6:	1a12      	subs	r2, r2, r0
   d56e8:	f001 bbaa 	b.w	d6e40 <memcpy>
   d56ec:	2003f400 	.word	0x2003f400
   d56f0:	2003f404 	.word	0x2003f404
   d56f4:	000d7340 	.word	0x000d7340

000d56f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d56f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56fa:	2300      	movs	r3, #0
   d56fc:	9300      	str	r3, [sp, #0]
   d56fe:	461a      	mov	r2, r3
   d5700:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5704:	f7ff fd42 	bl	d518c <system_ctrl_set_result>
}
   d5708:	b003      	add	sp, #12
   d570a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5710 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5710:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5712:	8843      	ldrh	r3, [r0, #2]
   d5714:	2b0a      	cmp	r3, #10
   d5716:	d008      	beq.n	d572a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5718:	2b50      	cmp	r3, #80	; 0x50
   d571a:	d109      	bne.n	d5730 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d571c:	4b09      	ldr	r3, [pc, #36]	; (d5744 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d571e:	681b      	ldr	r3, [r3, #0]
   d5720:	b13b      	cbz	r3, d5732 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5722:	b003      	add	sp, #12
   d5724:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5728:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d572a:	f7ff ffe5 	bl	d56f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d572e:	e006      	b.n	d573e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5730:	2300      	movs	r3, #0
   d5732:	9300      	str	r3, [sp, #0]
   d5734:	461a      	mov	r2, r3
   d5736:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d573a:	f7ff fd27 	bl	d518c <system_ctrl_set_result>
        break;
    }
}
   d573e:	b003      	add	sp, #12
   d5740:	f85d fb04 	ldr.w	pc, [sp], #4
   d5744:	2003e40c 	.word	0x2003e40c

000d5748 <module_user_init_hook>:

void module_user_init_hook()
{
   d5748:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d574a:	4c10      	ldr	r4, [pc, #64]	; (d578c <module_user_init_hook+0x44>)
   d574c:	4d10      	ldr	r5, [pc, #64]	; (d5790 <module_user_init_hook+0x48>)
   d574e:	6823      	ldr	r3, [r4, #0]
   d5750:	42ab      	cmp	r3, r5
   d5752:	4b10      	ldr	r3, [pc, #64]	; (d5794 <module_user_init_hook+0x4c>)
   d5754:	bf0c      	ite	eq
   d5756:	2201      	moveq	r2, #1
   d5758:	2200      	movne	r2, #0
   d575a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d575c:	d002      	beq.n	d5764 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d575e:	f7ff ffbf 	bl	d56e0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5762:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5764:	f7ff fc08 	bl	d4f78 <HAL_RNG_GetRandomNumber>
   d5768:	4604      	mov	r4, r0
    srand(seed);
   d576a:	f001 fb7d 	bl	d6e68 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d576e:	4b0a      	ldr	r3, [pc, #40]	; (d5798 <module_user_init_hook+0x50>)
   d5770:	b113      	cbz	r3, d5778 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5772:	4620      	mov	r0, r4
   d5774:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5778:	2100      	movs	r1, #0
   d577a:	4807      	ldr	r0, [pc, #28]	; (d5798 <module_user_init_hook+0x50>)
   d577c:	f7ff fd68 	bl	d5250 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5780:	2100      	movs	r1, #0
   d5782:	4806      	ldr	r0, [pc, #24]	; (d579c <module_user_init_hook+0x54>)
}
   d5784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5788:	f7ff bcf6 	b.w	d5178 <system_ctrl_set_app_request_handler>
   d578c:	2003f400 	.word	0x2003f400
   d5790:	9a271c1e 	.word	0x9a271c1e
   d5794:	2003e410 	.word	0x2003e410
   d5798:	00000000 	.word	0x00000000
   d579c:	000d5711 	.word	0x000d5711

000d57a0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d57a0:	4770      	bx	lr

000d57a2 <_ZN9IPAddressD0Ev>:
   d57a2:	b510      	push	{r4, lr}
   d57a4:	2118      	movs	r1, #24
   d57a6:	4604      	mov	r4, r0
   d57a8:	f000 fc1e 	bl	d5fe8 <_ZdlPvj>
   d57ac:	4620      	mov	r0, r4
   d57ae:	bd10      	pop	{r4, pc}

000d57b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d57b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d57b2:	7d03      	ldrb	r3, [r0, #20]
   d57b4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d57b6:	b08d      	sub	sp, #52	; 0x34
   d57b8:	460e      	mov	r6, r1
   d57ba:	f100 0704 	add.w	r7, r0, #4
   d57be:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d57c2:	d002      	beq.n	d57ca <_ZNK9IPAddress7printToER5Print+0x1a>
   d57c4:	f100 0508 	add.w	r5, r0, #8
   d57c8:	e018      	b.n	d57fc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d57ca:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d57cc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d57ce:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d57d2:	232f      	movs	r3, #47	; 0x2f
   d57d4:	462a      	mov	r2, r5
   d57d6:	200a      	movs	r0, #10
   d57d8:	f7ff fc0e 	bl	d4ff8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d57dc:	4628      	mov	r0, r5
   d57de:	f001 fb6b 	bl	d6eb8 <strlen>
   d57e2:	6833      	ldr	r3, [r6, #0]
   d57e4:	4602      	mov	r2, r0
   d57e6:	68db      	ldr	r3, [r3, #12]
   d57e8:	4629      	mov	r1, r5
   d57ea:	4630      	mov	r0, r6
   d57ec:	4798      	blx	r3
   d57ee:	e00f      	b.n	d5810 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d57f0:	b124      	cbz	r4, d57fc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d57f2:	212e      	movs	r1, #46	; 0x2e
   d57f4:	4630      	mov	r0, r6
   d57f6:	f7ff fea7 	bl	d5548 <_ZN5Print5printEc>
   d57fa:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d57fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5800:	220a      	movs	r2, #10
   d5802:	4630      	mov	r0, r6
   d5804:	f7ff feb9 	bl	d557a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5808:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d580a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d580c:	d1f0      	bne.n	d57f0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d580e:	4620      	mov	r0, r4
    }
    return n;
}
   d5810:	b00d      	add	sp, #52	; 0x34
   d5812:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5814 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5814:	b510      	push	{r4, lr}
   d5816:	4b05      	ldr	r3, [pc, #20]	; (d582c <_ZN9IPAddressC1Ev+0x18>)
   d5818:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d581a:	2211      	movs	r2, #17
   d581c:	f840 3b04 	str.w	r3, [r0], #4
   d5820:	2100      	movs	r1, #0
   d5822:	f001 fb18 	bl	d6e56 <memset>
{
    clear();
}
   d5826:	4620      	mov	r0, r4
   d5828:	bd10      	pop	{r4, pc}
   d582a:	bf00      	nop
   d582c:	000d7120 	.word	0x000d7120

000d5830 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5830:	4603      	mov	r3, r0
   d5832:	4a07      	ldr	r2, [pc, #28]	; (d5850 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5834:	b510      	push	{r4, lr}
   d5836:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d583a:	f101 0210 	add.w	r2, r1, #16
   d583e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5842:	f843 4b04 	str.w	r4, [r3], #4
   d5846:	4291      	cmp	r1, r2
   d5848:	d1f9      	bne.n	d583e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d584a:	780a      	ldrb	r2, [r1, #0]
   d584c:	701a      	strb	r2, [r3, #0]
}
   d584e:	bd10      	pop	{r4, pc}
   d5850:	000d7120 	.word	0x000d7120

000d5854 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5854:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5856:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d585a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d585e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5862:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5866:	2304      	movs	r3, #4
   d5868:	6041      	str	r1, [r0, #4]
   d586a:	7503      	strb	r3, [r0, #20]
   d586c:	bd10      	pop	{r4, pc}

000d586e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d586e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5870:	780d      	ldrb	r5, [r1, #0]
   d5872:	788b      	ldrb	r3, [r1, #2]
   d5874:	784a      	ldrb	r2, [r1, #1]
   d5876:	78c9      	ldrb	r1, [r1, #3]
   d5878:	9100      	str	r1, [sp, #0]
   d587a:	4629      	mov	r1, r5
   d587c:	f7ff ffea 	bl	d5854 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5880:	b003      	add	sp, #12
   d5882:	bd30      	pop	{r4, r5, pc}

000d5884 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5884:	7441      	strb	r1, [r0, #17]
   d5886:	4770      	bx	lr

000d5888 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5888:	4770      	bx	lr

000d588a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d588a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d588c:	2100      	movs	r1, #0
   d588e:	7c00      	ldrb	r0, [r0, #16]
   d5890:	f7ff fc52 	bl	d5138 <HAL_USB_USART_Receive_Data>
}
   d5894:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5898:	bf28      	it	cs
   d589a:	f04f 30ff 	movcs.w	r0, #4294967295
   d589e:	bd08      	pop	{r3, pc}

000d58a0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d58a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d58a2:	2101      	movs	r1, #1
   d58a4:	7c00      	ldrb	r0, [r0, #16]
   d58a6:	f7ff fc47 	bl	d5138 <HAL_USB_USART_Receive_Data>
}
   d58aa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58ae:	bf28      	it	cs
   d58b0:	f04f 30ff 	movcs.w	r0, #4294967295
   d58b4:	bd08      	pop	{r3, pc}

000d58b6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d58b6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d58b8:	7c00      	ldrb	r0, [r0, #16]
   d58ba:	f7ff fc35 	bl	d5128 <HAL_USB_USART_Available_Data_For_Write>
}
   d58be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58c2:	bd08      	pop	{r3, pc}

000d58c4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d58c4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d58c6:	7c00      	ldrb	r0, [r0, #16]
   d58c8:	f7ff fc26 	bl	d5118 <HAL_USB_USART_Available_Data>
}
   d58cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58d0:	bd08      	pop	{r3, pc}

000d58d2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d58d2:	7c00      	ldrb	r0, [r0, #16]
   d58d4:	f7ff bc40 	b.w	d5158 <HAL_USB_USART_Flush_Data>

000d58d8 <_ZN9USBSerialD0Ev>:
   d58d8:	b510      	push	{r4, lr}
   d58da:	2114      	movs	r1, #20
   d58dc:	4604      	mov	r4, r0
   d58de:	f000 fb83 	bl	d5fe8 <_ZdlPvj>
   d58e2:	4620      	mov	r0, r4
   d58e4:	bd10      	pop	{r4, pc}

000d58e6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d58e6:	b538      	push	{r3, r4, r5, lr}
   d58e8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d58ea:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d58ec:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d58ee:	f7ff fc1b 	bl	d5128 <HAL_USB_USART_Available_Data_For_Write>
   d58f2:	2800      	cmp	r0, #0
   d58f4:	dc01      	bgt.n	d58fa <_ZN9USBSerial5writeEh+0x14>
   d58f6:	7c60      	ldrb	r0, [r4, #17]
   d58f8:	b128      	cbz	r0, d5906 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d58fa:	4629      	mov	r1, r5
   d58fc:	7c20      	ldrb	r0, [r4, #16]
   d58fe:	f7ff fc23 	bl	d5148 <HAL_USB_USART_Send_Data>
   d5902:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5906:	bd38      	pop	{r3, r4, r5, pc}

000d5908 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5908:	b510      	push	{r4, lr}
   d590a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d590c:	2300      	movs	r3, #0
   d590e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5914:	60a3      	str	r3, [r4, #8]
   d5916:	4b05      	ldr	r3, [pc, #20]	; (d592c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5918:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d591a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d591c:	4608      	mov	r0, r1
{
  _serial = serial;
   d591e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5920:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5922:	4611      	mov	r1, r2
   d5924:	f7ff fbe8 	bl	d50f8 <HAL_USB_USART_Init>
}
   d5928:	4620      	mov	r0, r4
   d592a:	bd10      	pop	{r4, pc}
   d592c:	000d7134 	.word	0x000d7134

000d5930 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5930:	2200      	movs	r2, #0
   d5932:	7c00      	ldrb	r0, [r0, #16]
   d5934:	f7ff bbe8 	b.w	d5108 <HAL_USB_USART_Begin>

000d5938 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5938:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d593a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d593c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d593e:	2100      	movs	r1, #0
   d5940:	f001 fa89 	bl	d6e56 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5944:	4620      	mov	r0, r4
   d5946:	bd10      	pop	{r4, pc}

000d5948 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5948:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d594a:	4d0e      	ldr	r5, [pc, #56]	; (d5984 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d594c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d594e:	a801      	add	r0, sp, #4
   d5950:	f7ff fff2 	bl	d5938 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5954:	6829      	ldr	r1, [r5, #0]
   d5956:	f011 0401 	ands.w	r4, r1, #1
   d595a:	d110      	bne.n	d597e <_Z16_fetch_usbserialv+0x36>
   d595c:	4628      	mov	r0, r5
   d595e:	f7fe fb9e 	bl	d409e <__cxa_guard_acquire>
   d5962:	b160      	cbz	r0, d597e <_Z16_fetch_usbserialv+0x36>
   d5964:	aa01      	add	r2, sp, #4
   d5966:	4621      	mov	r1, r4
   d5968:	4807      	ldr	r0, [pc, #28]	; (d5988 <_Z16_fetch_usbserialv+0x40>)
   d596a:	f7ff ffcd 	bl	d5908 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d596e:	4628      	mov	r0, r5
   d5970:	f7fe fb9a 	bl	d40a8 <__cxa_guard_release>
   d5974:	4a05      	ldr	r2, [pc, #20]	; (d598c <_Z16_fetch_usbserialv+0x44>)
   d5976:	4906      	ldr	r1, [pc, #24]	; (d5990 <_Z16_fetch_usbserialv+0x48>)
   d5978:	4803      	ldr	r0, [pc, #12]	; (d5988 <_Z16_fetch_usbserialv+0x40>)
   d597a:	f000 fb27 	bl	d5fcc <__aeabi_atexit>
	return _usbserial;
}
   d597e:	4802      	ldr	r0, [pc, #8]	; (d5988 <_Z16_fetch_usbserialv+0x40>)
   d5980:	b007      	add	sp, #28
   d5982:	bd30      	pop	{r4, r5, pc}
   d5984:	2003e414 	.word	0x2003e414
   d5988:	2003e418 	.word	0x2003e418
   d598c:	2003dec0 	.word	0x2003dec0
   d5990:	000d5889 	.word	0x000d5889

000d5994 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5994:	4770      	bx	lr

000d5996 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5996:	7441      	strb	r1, [r0, #17]
   d5998:	4770      	bx	lr

000d599a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d599a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d599c:	7c00      	ldrb	r0, [r0, #16]
   d599e:	f7ff fb6b 	bl	d5078 <HAL_USART_Available_Data_For_Write>
}
   d59a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d59a6:	bd08      	pop	{r3, pc}

000d59a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d59a8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d59aa:	7c00      	ldrb	r0, [r0, #16]
   d59ac:	f7ff fb3c 	bl	d5028 <HAL_USART_Available_Data>
}
   d59b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d59b4:	bd08      	pop	{r3, pc}

000d59b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d59b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d59b8:	7c00      	ldrb	r0, [r0, #16]
   d59ba:	f7ff fb45 	bl	d5048 <HAL_USART_Peek_Data>
}
   d59be:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d59c2:	bf28      	it	cs
   d59c4:	f04f 30ff 	movcs.w	r0, #4294967295
   d59c8:	bd08      	pop	{r3, pc}

000d59ca <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d59ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d59cc:	7c00      	ldrb	r0, [r0, #16]
   d59ce:	f7ff fb33 	bl	d5038 <HAL_USART_Read_Data>
}
   d59d2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d59d6:	bf28      	it	cs
   d59d8:	f04f 30ff 	movcs.w	r0, #4294967295
   d59dc:	bd08      	pop	{r3, pc}

000d59de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d59de:	7c00      	ldrb	r0, [r0, #16]
   d59e0:	f7ff bb3a 	b.w	d5058 <HAL_USART_Flush_Data>

000d59e4 <_ZN11USARTSerialD0Ev>:
   d59e4:	b510      	push	{r4, lr}
   d59e6:	2114      	movs	r1, #20
   d59e8:	4604      	mov	r4, r0
   d59ea:	f000 fafd 	bl	d5fe8 <_ZdlPvj>
   d59ee:	4620      	mov	r0, r4
   d59f0:	bd10      	pop	{r4, pc}

000d59f2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d59f2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d59f4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d59f6:	4604      	mov	r4, r0
   d59f8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d59fa:	b925      	cbnz	r5, d5a06 <_ZN11USARTSerial5writeEh+0x14>
   d59fc:	7c00      	ldrb	r0, [r0, #16]
   d59fe:	f7ff fb3b 	bl	d5078 <HAL_USART_Available_Data_For_Write>
   d5a02:	2800      	cmp	r0, #0
   d5a04:	dd05      	ble.n	d5a12 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a06:	4631      	mov	r1, r6
   d5a08:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a0e:	f7ff bb03 	b.w	d5018 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5a12:	4628      	mov	r0, r5
   d5a14:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5a18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5a18:	b510      	push	{r4, lr}
   d5a1a:	4604      	mov	r4, r0
   d5a1c:	4608      	mov	r0, r1
   d5a1e:	4611      	mov	r1, r2
   d5a20:	2200      	movs	r2, #0
   d5a22:	6062      	str	r2, [r4, #4]
   d5a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5a28:	60a2      	str	r2, [r4, #8]
   d5a2a:	4a05      	ldr	r2, [pc, #20]	; (d5a40 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5a2c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5a2e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5a30:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5a32:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5a34:	461a      	mov	r2, r3
   d5a36:	f7ff fae7 	bl	d5008 <HAL_USART_Init>
}
   d5a3a:	4620      	mov	r0, r4
   d5a3c:	bd10      	pop	{r4, pc}
   d5a3e:	bf00      	nop
   d5a40:	000d7164 	.word	0x000d7164

000d5a44 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5a44:	7c00      	ldrb	r0, [r0, #16]
   d5a46:	f7ff bb0f 	b.w	d5068 <HAL_USART_Is_Enabled>
	...

000d5a4c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5a4c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5a4e:	4d0c      	ldr	r5, [pc, #48]	; (d5a80 <_Z22__fetch_global_Serial1v+0x34>)
   d5a50:	6829      	ldr	r1, [r5, #0]
   d5a52:	f011 0401 	ands.w	r4, r1, #1
   d5a56:	d111      	bne.n	d5a7c <_Z22__fetch_global_Serial1v+0x30>
   d5a58:	4628      	mov	r0, r5
   d5a5a:	f7fe fb20 	bl	d409e <__cxa_guard_acquire>
   d5a5e:	b168      	cbz	r0, d5a7c <_Z22__fetch_global_Serial1v+0x30>
   d5a60:	4a08      	ldr	r2, [pc, #32]	; (d5a84 <_Z22__fetch_global_Serial1v+0x38>)
   d5a62:	4b09      	ldr	r3, [pc, #36]	; (d5a88 <_Z22__fetch_global_Serial1v+0x3c>)
   d5a64:	4809      	ldr	r0, [pc, #36]	; (d5a8c <_Z22__fetch_global_Serial1v+0x40>)
   d5a66:	4621      	mov	r1, r4
   d5a68:	f7ff ffd6 	bl	d5a18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5a6c:	4628      	mov	r0, r5
   d5a6e:	f7fe fb1b 	bl	d40a8 <__cxa_guard_release>
   d5a72:	4a07      	ldr	r2, [pc, #28]	; (d5a90 <_Z22__fetch_global_Serial1v+0x44>)
   d5a74:	4907      	ldr	r1, [pc, #28]	; (d5a94 <_Z22__fetch_global_Serial1v+0x48>)
   d5a76:	4805      	ldr	r0, [pc, #20]	; (d5a8c <_Z22__fetch_global_Serial1v+0x40>)
   d5a78:	f000 faa8 	bl	d5fcc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5a7c:	4803      	ldr	r0, [pc, #12]	; (d5a8c <_Z22__fetch_global_Serial1v+0x40>)
   d5a7e:	bd38      	pop	{r3, r4, r5, pc}
   d5a80:	2003e4c4 	.word	0x2003e4c4
   d5a84:	2003e4c8 	.word	0x2003e4c8
   d5a88:	2003e440 	.word	0x2003e440
   d5a8c:	2003e42c 	.word	0x2003e42c
   d5a90:	2003dec0 	.word	0x2003dec0
   d5a94:	000d5995 	.word	0x000d5995

000d5a98 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5a98:	4770      	bx	lr

000d5a9a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a9c:	4606      	mov	r6, r0
   d5a9e:	4615      	mov	r5, r2
   d5aa0:	460c      	mov	r4, r1
   d5aa2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5aa4:	42bc      	cmp	r4, r7
   d5aa6:	d006      	beq.n	d5ab6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5aa8:	6833      	ldr	r3, [r6, #0]
   d5aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5aae:	689b      	ldr	r3, [r3, #8]
   d5ab0:	4630      	mov	r0, r6
   d5ab2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ab4:	e7f6      	b.n	d5aa4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5ab6:	4628      	mov	r0, r5
   d5ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5aba <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5aba:	2200      	movs	r2, #0
   d5abc:	7c00      	ldrb	r0, [r0, #16]
   d5abe:	f7ff bae3 	b.w	d5088 <HAL_I2C_Write_Data>

000d5ac2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5ac2:	2100      	movs	r1, #0
   d5ac4:	7c00      	ldrb	r0, [r0, #16]
   d5ac6:	f7ff bae7 	b.w	d5098 <HAL_I2C_Available_Data>

000d5aca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5aca:	2100      	movs	r1, #0
   d5acc:	7c00      	ldrb	r0, [r0, #16]
   d5ace:	f7ff baeb 	b.w	d50a8 <HAL_I2C_Read_Data>

000d5ad2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5ad2:	2100      	movs	r1, #0
   d5ad4:	7c00      	ldrb	r0, [r0, #16]
   d5ad6:	f7ff baef 	b.w	d50b8 <HAL_I2C_Peek_Data>

000d5ada <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5ada:	2100      	movs	r1, #0
   d5adc:	7c00      	ldrb	r0, [r0, #16]
   d5ade:	f7ff baf3 	b.w	d50c8 <HAL_I2C_Flush_Data>

000d5ae2 <_ZN7TwoWireD0Ev>:
   d5ae2:	b510      	push	{r4, lr}
   d5ae4:	2114      	movs	r1, #20
   d5ae6:	4604      	mov	r4, r0
   d5ae8:	f000 fa7e 	bl	d5fe8 <_ZdlPvj>
   d5aec:	4620      	mov	r0, r4
   d5aee:	bd10      	pop	{r4, pc}

000d5af0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5af0:	b510      	push	{r4, lr}
   d5af2:	4604      	mov	r4, r0
   d5af4:	2300      	movs	r3, #0
   d5af6:	6063      	str	r3, [r4, #4]
   d5af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5afc:	60a3      	str	r3, [r4, #8]
   d5afe:	4b04      	ldr	r3, [pc, #16]	; (d5b10 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5b00:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5b02:	4608      	mov	r0, r1
   d5b04:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5b06:	4611      	mov	r1, r2
   d5b08:	f7ff faee 	bl	d50e8 <HAL_I2C_Init>
}
   d5b0c:	4620      	mov	r0, r4
   d5b0e:	bd10      	pop	{r4, pc}
   d5b10:	000d7194 	.word	0x000d7194

000d5b14 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5b14:	2100      	movs	r1, #0
   d5b16:	7c00      	ldrb	r0, [r0, #16]
   d5b18:	f7ff bade 	b.w	d50d8 <HAL_I2C_Is_Enabled>

000d5b1c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b1c:	2200      	movs	r2, #0
   d5b1e:	4611      	mov	r1, r2
   d5b20:	6840      	ldr	r0, [r0, #4]
   d5b22:	f7ff bb75 	b.w	d5210 <network_listening>

000d5b26 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b26:	2200      	movs	r2, #0
   d5b28:	4611      	mov	r1, r2
   d5b2a:	6840      	ldr	r0, [r0, #4]
   d5b2c:	f7ff bb80 	b.w	d5230 <network_get_listen_timeout>

000d5b30 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b30:	2200      	movs	r2, #0
   d5b32:	6840      	ldr	r0, [r0, #4]
   d5b34:	f7ff bb74 	b.w	d5220 <network_set_listen_timeout>

000d5b38 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b38:	2200      	movs	r2, #0
   d5b3a:	f081 0101 	eor.w	r1, r1, #1
   d5b3e:	6840      	ldr	r0, [r0, #4]
   d5b40:	f7ff bb5e 	b.w	d5200 <network_listen>

000d5b44 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5b44:	2300      	movs	r3, #0
   d5b46:	461a      	mov	r2, r3
   d5b48:	2101      	movs	r1, #1
   d5b4a:	6840      	ldr	r0, [r0, #4]
   d5b4c:	f7ff bb50 	b.w	d51f0 <network_off>

000d5b50 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b50:	2300      	movs	r3, #0
   d5b52:	461a      	mov	r2, r3
   d5b54:	4619      	mov	r1, r3
   d5b56:	6840      	ldr	r0, [r0, #4]
   d5b58:	f7ff bb42 	b.w	d51e0 <network_on>

000d5b5c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b5c:	2200      	movs	r2, #0
   d5b5e:	4611      	mov	r1, r2
   d5b60:	6840      	ldr	r0, [r0, #4]
   d5b62:	f7ff bb35 	b.w	d51d0 <network_ready>

000d5b66 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b66:	2200      	movs	r2, #0
   d5b68:	4611      	mov	r1, r2
   d5b6a:	6840      	ldr	r0, [r0, #4]
   d5b6c:	f7ff bb20 	b.w	d51b0 <network_connecting>

000d5b70 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b70:	2200      	movs	r2, #0
   d5b72:	2102      	movs	r1, #2
   d5b74:	6840      	ldr	r0, [r0, #4]
   d5b76:	f7ff bb23 	b.w	d51c0 <network_disconnect>

000d5b7a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b7a:	2300      	movs	r3, #0
   d5b7c:	461a      	mov	r2, r3
   d5b7e:	6840      	ldr	r0, [r0, #4]
   d5b80:	f7ff bb0e 	b.w	d51a0 <network_connect>

000d5b84 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5b84:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b86:	4605      	mov	r5, r0
   d5b88:	b188      	cbz	r0, d5bae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b8a:	6804      	ldr	r4, [r0, #0]
   d5b8c:	b14c      	cbz	r4, d5ba2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5b8e:	68a3      	ldr	r3, [r4, #8]
   d5b90:	b11b      	cbz	r3, d5b9a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5b92:	2203      	movs	r2, #3
   d5b94:	4621      	mov	r1, r4
   d5b96:	4620      	mov	r0, r4
   d5b98:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b9a:	2110      	movs	r1, #16
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	f000 fa23 	bl	d5fe8 <_ZdlPvj>
   d5ba2:	4628      	mov	r0, r5
   d5ba4:	2114      	movs	r1, #20
      }
   d5ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5baa:	f000 ba1d 	b.w	d5fe8 <_ZdlPvj>
   d5bae:	bd38      	pop	{r3, r4, r5, pc}

000d5bb0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5bb0:	b110      	cbz	r0, d5bb8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5bb2:	6803      	ldr	r3, [r0, #0]
   d5bb4:	685b      	ldr	r3, [r3, #4]
   d5bb6:	4718      	bx	r3
   d5bb8:	4770      	bx	lr

000d5bba <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5bba:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5bbc:	6803      	ldr	r3, [r0, #0]
   d5bbe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5bc0:	b1bb      	cbz	r3, d5bf2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5bc2:	6858      	ldr	r0, [r3, #4]
   d5bc4:	f7ff f9f0 	bl	d4fa8 <os_thread_is_current>
   d5bc8:	b978      	cbnz	r0, d5bea <_ZN6ThreadD1Ev+0x30>
   d5bca:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5bcc:	7c5a      	ldrb	r2, [r3, #17]
   d5bce:	b912      	cbnz	r2, d5bd6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5bd0:	6858      	ldr	r0, [r3, #4]
   d5bd2:	f7ff f9f1 	bl	d4fb8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5bd6:	6823      	ldr	r3, [r4, #0]
   d5bd8:	6858      	ldr	r0, [r3, #4]
   d5bda:	f7ff f9f5 	bl	d4fc8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bde:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5be0:	2300      	movs	r3, #0
   d5be2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5be4:	b128      	cbz	r0, d5bf2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5be6:	f7ff ffcd 	bl	d5b84 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bea:	6820      	ldr	r0, [r4, #0]
   d5bec:	b108      	cbz	r0, d5bf2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5bee:	f7ff ffc9 	bl	d5b84 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5bf2:	4620      	mov	r0, r4
   d5bf4:	bd10      	pop	{r4, pc}

000d5bf6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5bf6:	b538      	push	{r3, r4, r5, lr}
   d5bf8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bfa:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5bfe:	b108      	cbz	r0, d5c04 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5c00:	f7fe fa4b 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5c04:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5c08:	b108      	cbz	r0, d5c0e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5c0a:	f7ff f9ed 	bl	d4fe8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c0e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5c12:	b135      	cbz	r5, d5c22 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c14:	4628      	mov	r0, r5
   d5c16:	f7ff ffd0 	bl	d5bba <_ZN6ThreadD1Ev>
   d5c1a:	2104      	movs	r1, #4
   d5c1c:	4628      	mov	r0, r5
   d5c1e:	f000 f9e3 	bl	d5fe8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c22:	6820      	ldr	r0, [r4, #0]
   d5c24:	b108      	cbz	r0, d5c2a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5c26:	f7ff ffc3 	bl	d5bb0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5c2a:	4620      	mov	r0, r4
   d5c2c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5c30 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5c30:	b510      	push	{r4, lr}
   d5c32:	4b04      	ldr	r3, [pc, #16]	; (d5c44 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5c34:	4604      	mov	r4, r0
   d5c36:	f840 3b08 	str.w	r3, [r0], #8
   d5c3a:	f7ff ffdc 	bl	d5bf6 <_ZN5spark11MeshPublishD1Ev>
   d5c3e:	4620      	mov	r0, r4
   d5c40:	bd10      	pop	{r4, pc}
   d5c42:	bf00      	nop
   d5c44:	000d71bc 	.word	0x000d71bc

000d5c48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5c48:	b538      	push	{r3, r4, r5, lr}
   d5c4a:	4c0e      	ldr	r4, [pc, #56]	; (d5c84 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5c4c:	4b0e      	ldr	r3, [pc, #56]	; (d5c88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5c4e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5c50:	2500      	movs	r5, #0
   d5c52:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5c54:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5c58:	6063      	str	r3, [r4, #4]
   d5c5a:	60a5      	str	r5, [r4, #8]
   d5c5c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c60:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5c64:	f7ff f9b8 	bl	d4fd8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5c68:	4b08      	ldr	r3, [pc, #32]	; (d5c8c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5c6a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5c6e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5c72:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5c74:	4620      	mov	r0, r4
   d5c76:	4a06      	ldr	r2, [pc, #24]	; (d5c90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5c78:	4906      	ldr	r1, [pc, #24]	; (d5c94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5c7e:	f000 b9a5 	b.w	d5fcc <__aeabi_atexit>
   d5c82:	bf00      	nop
   d5c84:	2003e54c 	.word	0x2003e54c
   d5c88:	000d7224 	.word	0x000d7224
   d5c8c:	000d71bc 	.word	0x000d71bc
   d5c90:	2003dec0 	.word	0x2003dec0
   d5c94:	000d5c31 	.word	0x000d5c31

000d5c98 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5c98:	2200      	movs	r2, #0
   d5c9a:	4611      	mov	r1, r2
   d5c9c:	6840      	ldr	r0, [r0, #4]
   d5c9e:	f7ff ba97 	b.w	d51d0 <network_ready>

000d5ca2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ca2:	2200      	movs	r2, #0
   d5ca4:	4611      	mov	r1, r2
   d5ca6:	6840      	ldr	r0, [r0, #4]
   d5ca8:	f7ff bab2 	b.w	d5210 <network_listening>

000d5cac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5cac:	2200      	movs	r2, #0
   d5cae:	4611      	mov	r1, r2
   d5cb0:	6840      	ldr	r0, [r0, #4]
   d5cb2:	f7ff babd 	b.w	d5230 <network_get_listen_timeout>

000d5cb6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5cb6:	2200      	movs	r2, #0
   d5cb8:	6840      	ldr	r0, [r0, #4]
   d5cba:	f7ff bab1 	b.w	d5220 <network_set_listen_timeout>

000d5cbe <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cbe:	2200      	movs	r2, #0
   d5cc0:	f081 0101 	eor.w	r1, r1, #1
   d5cc4:	6840      	ldr	r0, [r0, #4]
   d5cc6:	f7ff ba9b 	b.w	d5200 <network_listen>

000d5cca <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5cca:	2300      	movs	r3, #0
   d5ccc:	461a      	mov	r2, r3
   d5cce:	4619      	mov	r1, r3
   d5cd0:	6840      	ldr	r0, [r0, #4]
   d5cd2:	f7ff ba8d 	b.w	d51f0 <network_off>

000d5cd6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5cd6:	2300      	movs	r3, #0
   d5cd8:	461a      	mov	r2, r3
   d5cda:	4619      	mov	r1, r3
   d5cdc:	6840      	ldr	r0, [r0, #4]
   d5cde:	f7ff ba7f 	b.w	d51e0 <network_on>

000d5ce2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ce2:	2200      	movs	r2, #0
   d5ce4:	4611      	mov	r1, r2
   d5ce6:	6840      	ldr	r0, [r0, #4]
   d5ce8:	f7ff ba62 	b.w	d51b0 <network_connecting>

000d5cec <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5cec:	2200      	movs	r2, #0
   d5cee:	2102      	movs	r1, #2
   d5cf0:	6840      	ldr	r0, [r0, #4]
   d5cf2:	f7ff ba65 	b.w	d51c0 <network_disconnect>

000d5cf6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5cf6:	2300      	movs	r3, #0
   d5cf8:	461a      	mov	r2, r3
   d5cfa:	6840      	ldr	r0, [r0, #4]
   d5cfc:	f7ff ba50 	b.w	d51a0 <network_connect>

000d5d00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5d00:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5d02:	2204      	movs	r2, #4
   d5d04:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5d06:	4a02      	ldr	r2, [pc, #8]	; (d5d10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5d08:	601a      	str	r2, [r3, #0]
   d5d0a:	4770      	bx	lr
   d5d0c:	2003e720 	.word	0x2003e720
   d5d10:	000d71f0 	.word	0x000d71f0

000d5d14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d14:	2300      	movs	r3, #0
   d5d16:	461a      	mov	r2, r3
   d5d18:	6840      	ldr	r0, [r0, #4]
   d5d1a:	f7ff ba41 	b.w	d51a0 <network_connect>

000d5d1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5d1e:	2200      	movs	r2, #0
   d5d20:	2102      	movs	r1, #2
   d5d22:	6840      	ldr	r0, [r0, #4]
   d5d24:	f7ff ba4c 	b.w	d51c0 <network_disconnect>

000d5d28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5d28:	2200      	movs	r2, #0
   d5d2a:	4611      	mov	r1, r2
   d5d2c:	6840      	ldr	r0, [r0, #4]
   d5d2e:	f7ff ba3f 	b.w	d51b0 <network_connecting>

000d5d32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5d32:	2200      	movs	r2, #0
   d5d34:	4611      	mov	r1, r2
   d5d36:	6840      	ldr	r0, [r0, #4]
   d5d38:	f7ff ba4a 	b.w	d51d0 <network_ready>

000d5d3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5d3c:	2300      	movs	r3, #0
   d5d3e:	461a      	mov	r2, r3
   d5d40:	4619      	mov	r1, r3
   d5d42:	6840      	ldr	r0, [r0, #4]
   d5d44:	f7ff ba4c 	b.w	d51e0 <network_on>

000d5d48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5d48:	2300      	movs	r3, #0
   d5d4a:	461a      	mov	r2, r3
   d5d4c:	4619      	mov	r1, r3
   d5d4e:	6840      	ldr	r0, [r0, #4]
   d5d50:	f7ff ba4e 	b.w	d51f0 <network_off>

000d5d54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5d54:	2200      	movs	r2, #0
   d5d56:	f081 0101 	eor.w	r1, r1, #1
   d5d5a:	6840      	ldr	r0, [r0, #4]
   d5d5c:	f7ff ba50 	b.w	d5200 <network_listen>

000d5d60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5d60:	2200      	movs	r2, #0
   d5d62:	6840      	ldr	r0, [r0, #4]
   d5d64:	f7ff ba5c 	b.w	d5220 <network_set_listen_timeout>

000d5d68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5d68:	2200      	movs	r2, #0
   d5d6a:	4611      	mov	r1, r2
   d5d6c:	6840      	ldr	r0, [r0, #4]
   d5d6e:	f7ff ba5f 	b.w	d5230 <network_get_listen_timeout>

000d5d72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5d72:	2200      	movs	r2, #0
   d5d74:	4611      	mov	r1, r2
   d5d76:	6840      	ldr	r0, [r0, #4]
   d5d78:	f7ff ba4a 	b.w	d5210 <network_listening>

000d5d7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5d80:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5d82:	b095      	sub	sp, #84	; 0x54
   d5d84:	4616      	mov	r6, r2
   d5d86:	460d      	mov	r5, r1
   d5d88:	4607      	mov	r7, r0
    IPAddress addr;
   d5d8a:	f7ff fd43 	bl	d5814 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5d8e:	4621      	mov	r1, r4
   d5d90:	2220      	movs	r2, #32
   d5d92:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5d94:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5d96:	f001 f85e 	bl	d6e56 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5d9a:	2340      	movs	r3, #64	; 0x40
   d5d9c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5d9e:	4621      	mov	r1, r4
   d5da0:	466b      	mov	r3, sp
   d5da2:	aa0c      	add	r2, sp, #48	; 0x30
   d5da4:	4630      	mov	r0, r6
   d5da6:	f7ff f867 	bl	d4e78 <netdb_getaddrinfo>
    if (!r) {
   d5daa:	4604      	mov	r4, r0
   d5dac:	2800      	cmp	r0, #0
   d5dae:	d144      	bne.n	d5e3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5db0:	4602      	mov	r2, r0
   d5db2:	2101      	movs	r1, #1
   d5db4:	6868      	ldr	r0, [r5, #4]
   d5db6:	f7ff fa0b 	bl	d51d0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5dba:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5dbc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5dbe:	4622      	mov	r2, r4
   d5dc0:	6868      	ldr	r0, [r5, #4]
   d5dc2:	f7ff fa05 	bl	d51d0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5dc6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5dc8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5dca:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5dcc:	2e00      	cmp	r6, #0
   d5dce:	d034      	beq.n	d5e3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5dd0:	2900      	cmp	r1, #0
   d5dd2:	d132      	bne.n	d5e3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5dd4:	6873      	ldr	r3, [r6, #4]
   d5dd6:	2b02      	cmp	r3, #2
   d5dd8:	d002      	beq.n	d5de0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5dda:	2b0a      	cmp	r3, #10
   d5ddc:	d009      	beq.n	d5df2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5dde:	e02a      	b.n	d5e36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5de0:	f1b8 0f00 	cmp.w	r8, #0
   d5de4:	d027      	beq.n	d5e36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5de6:	6971      	ldr	r1, [r6, #20]
   d5de8:	4638      	mov	r0, r7
   d5dea:	3104      	adds	r1, #4
   d5dec:	f7ff fd3f 	bl	d586e <_ZN9IPAddressaSEPKh>
   d5df0:	e020      	b.n	d5e34 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5df2:	f1b9 0f00 	cmp.w	r9, #0
   d5df6:	d01e      	beq.n	d5e36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5df8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5dfa:	2211      	movs	r2, #17
   d5dfc:	a801      	add	r0, sp, #4
   d5dfe:	f001 f82a 	bl	d6e56 <memset>
                    a.v = 6;
   d5e02:	2306      	movs	r3, #6
   d5e04:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e08:	ad01      	add	r5, sp, #4
   d5e0a:	f104 0308 	add.w	r3, r4, #8
   d5e0e:	3418      	adds	r4, #24
   d5e10:	6818      	ldr	r0, [r3, #0]
   d5e12:	6859      	ldr	r1, [r3, #4]
   d5e14:	462a      	mov	r2, r5
   d5e16:	c203      	stmia	r2!, {r0, r1}
   d5e18:	3308      	adds	r3, #8
   d5e1a:	42a3      	cmp	r3, r4
   d5e1c:	4615      	mov	r5, r2
   d5e1e:	d1f7      	bne.n	d5e10 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5e20:	a901      	add	r1, sp, #4
   d5e22:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5e24:	ad07      	add	r5, sp, #28
   d5e26:	f7ff fd03 	bl	d5830 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e2c:	1d3c      	adds	r4, r7, #4
   d5e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e30:	682b      	ldr	r3, [r5, #0]
   d5e32:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5e34:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e36:	69f6      	ldr	r6, [r6, #28]
   d5e38:	e7c8      	b.n	d5dcc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5e3a:	9800      	ldr	r0, [sp, #0]
   d5e3c:	f7ff f814 	bl	d4e68 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5e40:	4638      	mov	r0, r7
   d5e42:	b015      	add	sp, #84	; 0x54
   d5e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5e48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5e48:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5e4a:	4a03      	ldr	r2, [pc, #12]	; (d5e58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5e4c:	601a      	str	r2, [r3, #0]
   d5e4e:	2200      	movs	r2, #0
   d5e50:	605a      	str	r2, [r3, #4]
   d5e52:	4770      	bx	lr
   d5e54:	2003e728 	.word	0x2003e728
   d5e58:	000d7224 	.word	0x000d7224

000d5e5c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5e5c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5e5e:	4e18      	ldr	r6, [pc, #96]	; (d5ec0 <pinAvailable+0x64>)
   d5e60:	6831      	ldr	r1, [r6, #0]
   d5e62:	f011 0501 	ands.w	r5, r1, #1
   d5e66:	4604      	mov	r4, r0
   d5e68:	d10a      	bne.n	d5e80 <pinAvailable+0x24>
   d5e6a:	4630      	mov	r0, r6
   d5e6c:	f7fe f917 	bl	d409e <__cxa_guard_acquire>
   d5e70:	b130      	cbz	r0, d5e80 <pinAvailable+0x24>
   d5e72:	4629      	mov	r1, r5
   d5e74:	4813      	ldr	r0, [pc, #76]	; (d5ec4 <pinAvailable+0x68>)
   d5e76:	f7ff fa57 	bl	d5328 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5e7a:	4630      	mov	r0, r6
   d5e7c:	f7fe f914 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5e80:	4810      	ldr	r0, [pc, #64]	; (d5ec4 <pinAvailable+0x68>)
   d5e82:	f7ff fafe 	bl	d5482 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5e86:	b128      	cbz	r0, d5e94 <pinAvailable+0x38>
   d5e88:	f1a4 030b 	sub.w	r3, r4, #11
   d5e8c:	2b02      	cmp	r3, #2
   d5e8e:	d801      	bhi.n	d5e94 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5e90:	2000      	movs	r0, #0
   d5e92:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5e94:	f000 f874 	bl	d5f80 <_Z19__fetch_global_Wirev>
   d5e98:	f7ff fe3c 	bl	d5b14 <_ZN7TwoWire9isEnabledEv>
   d5e9c:	b108      	cbz	r0, d5ea2 <pinAvailable+0x46>
   d5e9e:	2c01      	cmp	r4, #1
   d5ea0:	d9f6      	bls.n	d5e90 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5ea2:	f7ff fdd3 	bl	d5a4c <_Z22__fetch_global_Serial1v>
   d5ea6:	f7ff fdcd 	bl	d5a44 <_ZN11USARTSerial9isEnabledEv>
   d5eaa:	b118      	cbz	r0, d5eb4 <pinAvailable+0x58>
   d5eac:	f1a4 0309 	sub.w	r3, r4, #9
   d5eb0:	2b01      	cmp	r3, #1
   d5eb2:	d9ed      	bls.n	d5e90 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5eb4:	2c23      	cmp	r4, #35	; 0x23
   d5eb6:	bf8c      	ite	hi
   d5eb8:	2000      	movhi	r0, #0
   d5eba:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5ebc:	bd70      	pop	{r4, r5, r6, pc}
   d5ebe:	bf00      	nop
   d5ec0:	2003dec4 	.word	0x2003dec4
   d5ec4:	2003dec8 	.word	0x2003dec8

000d5ec8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ec8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5eca:	b538      	push	{r3, r4, r5, lr}
   d5ecc:	4604      	mov	r4, r0
   d5ece:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ed0:	d80a      	bhi.n	d5ee8 <pinMode+0x20>
   d5ed2:	29ff      	cmp	r1, #255	; 0xff
   d5ed4:	d008      	beq.n	d5ee8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5ed6:	f7ff ffc1 	bl	d5e5c <pinAvailable>
   d5eda:	b128      	cbz	r0, d5ee8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5edc:	4629      	mov	r1, r5
   d5ede:	4620      	mov	r0, r4
}
   d5ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5ee4:	f7fe bfe0 	b.w	d4ea8 <HAL_Pin_Mode>
   d5ee8:	bd38      	pop	{r3, r4, r5, pc}

000d5eea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5eea:	b538      	push	{r3, r4, r5, lr}
   d5eec:	4604      	mov	r4, r0
   d5eee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5ef0:	f7fe ffe2 	bl	d4eb8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5ef4:	28ff      	cmp	r0, #255	; 0xff
   d5ef6:	d010      	beq.n	d5f1a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5ef8:	2806      	cmp	r0, #6
   d5efa:	d804      	bhi.n	d5f06 <digitalWrite+0x1c>
   d5efc:	234d      	movs	r3, #77	; 0x4d
   d5efe:	fa23 f000 	lsr.w	r0, r3, r0
   d5f02:	07c3      	lsls	r3, r0, #31
   d5f04:	d409      	bmi.n	d5f1a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5f06:	4620      	mov	r0, r4
   d5f08:	f7ff ffa8 	bl	d5e5c <pinAvailable>
   d5f0c:	b128      	cbz	r0, d5f1a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f0e:	4629      	mov	r1, r5
   d5f10:	4620      	mov	r0, r4
}
   d5f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f16:	f7fe bfd7 	b.w	d4ec8 <HAL_GPIO_Write>
   d5f1a:	bd38      	pop	{r3, r4, r5, pc}

000d5f1c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5f1c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5f1e:	b510      	push	{r4, lr}
   d5f20:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5f22:	bf9c      	itt	ls
   d5f24:	340e      	addls	r4, #14
   d5f26:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5f28:	4620      	mov	r0, r4
   d5f2a:	f7ff ff97 	bl	d5e5c <pinAvailable>
   d5f2e:	b150      	cbz	r0, d5f46 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5f30:	2103      	movs	r1, #3
   d5f32:	4620      	mov	r0, r4
   d5f34:	f7fe ffb0 	bl	d4e98 <HAL_Validate_Pin_Function>
   d5f38:	2803      	cmp	r0, #3
   d5f3a:	d104      	bne.n	d5f46 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5f3c:	4620      	mov	r0, r4
}
   d5f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5f42:	f7fe bfc9 	b.w	d4ed8 <HAL_ADC_Read>
}
   d5f46:	2000      	movs	r0, #0
   d5f48:	bd10      	pop	{r4, pc}
	...

000d5f4c <_Z17acquireWireBufferv>:
   d5f4c:	b570      	push	{r4, r5, r6, lr}
   d5f4e:	4604      	mov	r4, r0
   d5f50:	2514      	movs	r5, #20
   d5f52:	462a      	mov	r2, r5
   d5f54:	4e09      	ldr	r6, [pc, #36]	; (d5f7c <_Z17acquireWireBufferv+0x30>)
   d5f56:	2100      	movs	r1, #0
   d5f58:	f000 ff7d 	bl	d6e56 <memset>
   d5f5c:	8025      	strh	r5, [r4, #0]
   d5f5e:	2520      	movs	r5, #32
   d5f60:	4631      	mov	r1, r6
   d5f62:	60a5      	str	r5, [r4, #8]
   d5f64:	6125      	str	r5, [r4, #16]
   d5f66:	4628      	mov	r0, r5
   d5f68:	f000 f840 	bl	d5fec <_ZnajRKSt9nothrow_t>
   d5f6c:	4631      	mov	r1, r6
   d5f6e:	6060      	str	r0, [r4, #4]
   d5f70:	4628      	mov	r0, r5
   d5f72:	f000 f83b 	bl	d5fec <_ZnajRKSt9nothrow_t>
   d5f76:	60e0      	str	r0, [r4, #12]
   d5f78:	4620      	mov	r0, r4
   d5f7a:	bd70      	pop	{r4, r5, r6, pc}
   d5f7c:	000d7250 	.word	0x000d7250

000d5f80 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5f80:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5f82:	4d0e      	ldr	r5, [pc, #56]	; (d5fbc <_Z19__fetch_global_Wirev+0x3c>)
   d5f84:	6829      	ldr	r1, [r5, #0]
   d5f86:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5f8a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5f8c:	d113      	bne.n	d5fb6 <_Z19__fetch_global_Wirev+0x36>
   d5f8e:	4628      	mov	r0, r5
   d5f90:	f7fe f885 	bl	d409e <__cxa_guard_acquire>
   d5f94:	b178      	cbz	r0, d5fb6 <_Z19__fetch_global_Wirev+0x36>
   d5f96:	a801      	add	r0, sp, #4
   d5f98:	f7ff ffd8 	bl	d5f4c <_Z17acquireWireBufferv>
   d5f9c:	aa01      	add	r2, sp, #4
   d5f9e:	4621      	mov	r1, r4
   d5fa0:	4807      	ldr	r0, [pc, #28]	; (d5fc0 <_Z19__fetch_global_Wirev+0x40>)
   d5fa2:	f7ff fda5 	bl	d5af0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5fa6:	4628      	mov	r0, r5
   d5fa8:	f7fe f87e 	bl	d40a8 <__cxa_guard_release>
   d5fac:	4a05      	ldr	r2, [pc, #20]	; (d5fc4 <_Z19__fetch_global_Wirev+0x44>)
   d5fae:	4906      	ldr	r1, [pc, #24]	; (d5fc8 <_Z19__fetch_global_Wirev+0x48>)
   d5fb0:	4803      	ldr	r0, [pc, #12]	; (d5fc0 <_Z19__fetch_global_Wirev+0x40>)
   d5fb2:	f000 f80b 	bl	d5fcc <__aeabi_atexit>
	return wire;
}
   d5fb6:	4802      	ldr	r0, [pc, #8]	; (d5fc0 <_Z19__fetch_global_Wirev+0x40>)
   d5fb8:	b007      	add	sp, #28
   d5fba:	bd30      	pop	{r4, r5, pc}
   d5fbc:	2003e734 	.word	0x2003e734
   d5fc0:	2003e738 	.word	0x2003e738
   d5fc4:	2003dec0 	.word	0x2003dec0
   d5fc8:	000d5a99 	.word	0x000d5a99

000d5fcc <__aeabi_atexit>:
   d5fcc:	460b      	mov	r3, r1
   d5fce:	4601      	mov	r1, r0
   d5fd0:	4618      	mov	r0, r3
   d5fd2:	f000 bf27 	b.w	d6e24 <__cxa_atexit>
	...

000d5fd8 <_ZSt15get_new_handlerv>:
   d5fd8:	4b02      	ldr	r3, [pc, #8]	; (d5fe4 <_ZSt15get_new_handlerv+0xc>)
   d5fda:	6818      	ldr	r0, [r3, #0]
   d5fdc:	f3bf 8f5f 	dmb	sy
   d5fe0:	4770      	bx	lr
   d5fe2:	bf00      	nop
   d5fe4:	2003e74c 	.word	0x2003e74c

000d5fe8 <_ZdlPvj>:
   d5fe8:	f7fe b855 	b.w	d4096 <_ZdlPv>

000d5fec <_ZnajRKSt9nothrow_t>:
   d5fec:	f000 b800 	b.w	d5ff0 <_ZnwjRKSt9nothrow_t>

000d5ff0 <_ZnwjRKSt9nothrow_t>:
   d5ff0:	b510      	push	{r4, lr}
   d5ff2:	2800      	cmp	r0, #0
   d5ff4:	bf14      	ite	ne
   d5ff6:	4604      	movne	r4, r0
   d5ff8:	2401      	moveq	r4, #1
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	f7ff f930 	bl	d5260 <malloc>
   d6000:	b920      	cbnz	r0, d600c <_ZnwjRKSt9nothrow_t+0x1c>
   d6002:	f7ff ffe9 	bl	d5fd8 <_ZSt15get_new_handlerv>
   d6006:	b108      	cbz	r0, d600c <_ZnwjRKSt9nothrow_t+0x1c>
   d6008:	4780      	blx	r0
   d600a:	e7f6      	b.n	d5ffa <_ZnwjRKSt9nothrow_t+0xa>
   d600c:	bd10      	pop	{r4, pc}
	...

000d6010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6010:	4b18      	ldr	r3, [pc, #96]	; (d6074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d1      	lsls	r1, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4b16      	ldr	r3, [pc, #88]	; (d6078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d601e:	681a      	ldr	r2, [r3, #0]
   d6020:	07d2      	lsls	r2, r2, #31
   d6022:	bf5c      	itt	pl
   d6024:	2201      	movpl	r2, #1
   d6026:	601a      	strpl	r2, [r3, #0]
   d6028:	4b14      	ldr	r3, [pc, #80]	; (d607c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d602a:	681a      	ldr	r2, [r3, #0]
   d602c:	07d0      	lsls	r0, r2, #31
   d602e:	bf5c      	itt	pl
   d6030:	2201      	movpl	r2, #1
   d6032:	601a      	strpl	r2, [r3, #0]
   d6034:	4b12      	ldr	r3, [pc, #72]	; (d6080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6036:	681a      	ldr	r2, [r3, #0]
   d6038:	07d1      	lsls	r1, r2, #31
   d603a:	bf5c      	itt	pl
   d603c:	2201      	movpl	r2, #1
   d603e:	601a      	strpl	r2, [r3, #0]
   d6040:	4b10      	ldr	r3, [pc, #64]	; (d6084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6042:	681a      	ldr	r2, [r3, #0]
   d6044:	07d2      	lsls	r2, r2, #31
   d6046:	bf5c      	itt	pl
   d6048:	2201      	movpl	r2, #1
   d604a:	601a      	strpl	r2, [r3, #0]
   d604c:	4b0e      	ldr	r3, [pc, #56]	; (d6088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d604e:	681a      	ldr	r2, [r3, #0]
   d6050:	07d0      	lsls	r0, r2, #31
   d6052:	bf5c      	itt	pl
   d6054:	2201      	movpl	r2, #1
   d6056:	601a      	strpl	r2, [r3, #0]
   d6058:	4b0c      	ldr	r3, [pc, #48]	; (d608c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d605a:	681a      	ldr	r2, [r3, #0]
   d605c:	07d1      	lsls	r1, r2, #31
   d605e:	bf5c      	itt	pl
   d6060:	2201      	movpl	r2, #1
   d6062:	601a      	strpl	r2, [r3, #0]
   d6064:	4b0a      	ldr	r3, [pc, #40]	; (d6090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6066:	681a      	ldr	r2, [r3, #0]
   d6068:	07d2      	lsls	r2, r2, #31
   d606a:	bf5c      	itt	pl
   d606c:	2201      	movpl	r2, #1
   d606e:	601a      	strpl	r2, [r3, #0]
   d6070:	4770      	bx	lr
   d6072:	bf00      	nop
   d6074:	2003e76c 	.word	0x2003e76c
   d6078:	2003e768 	.word	0x2003e768
   d607c:	2003e764 	.word	0x2003e764
   d6080:	2003e760 	.word	0x2003e760
   d6084:	2003e75c 	.word	0x2003e75c
   d6088:	2003e758 	.word	0x2003e758
   d608c:	2003e754 	.word	0x2003e754
   d6090:	2003e750 	.word	0x2003e750

000d6094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6094:	4b24      	ldr	r3, [pc, #144]	; (d6128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6096:	681a      	ldr	r2, [r3, #0]
   d6098:	07d0      	lsls	r0, r2, #31
   d609a:	bf5c      	itt	pl
   d609c:	2201      	movpl	r2, #1
   d609e:	601a      	strpl	r2, [r3, #0]
   d60a0:	4b22      	ldr	r3, [pc, #136]	; (d612c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d60a2:	681a      	ldr	r2, [r3, #0]
   d60a4:	07d1      	lsls	r1, r2, #31
   d60a6:	bf5c      	itt	pl
   d60a8:	2201      	movpl	r2, #1
   d60aa:	601a      	strpl	r2, [r3, #0]
   d60ac:	4b20      	ldr	r3, [pc, #128]	; (d6130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d60ae:	681a      	ldr	r2, [r3, #0]
   d60b0:	07d2      	lsls	r2, r2, #31
   d60b2:	bf5c      	itt	pl
   d60b4:	2201      	movpl	r2, #1
   d60b6:	601a      	strpl	r2, [r3, #0]
   d60b8:	4b1e      	ldr	r3, [pc, #120]	; (d6134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d60ba:	681a      	ldr	r2, [r3, #0]
   d60bc:	07d0      	lsls	r0, r2, #31
   d60be:	bf5c      	itt	pl
   d60c0:	2201      	movpl	r2, #1
   d60c2:	601a      	strpl	r2, [r3, #0]
   d60c4:	4b1c      	ldr	r3, [pc, #112]	; (d6138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d60c6:	681a      	ldr	r2, [r3, #0]
   d60c8:	07d1      	lsls	r1, r2, #31
   d60ca:	bf5c      	itt	pl
   d60cc:	2201      	movpl	r2, #1
   d60ce:	601a      	strpl	r2, [r3, #0]
   d60d0:	4b1a      	ldr	r3, [pc, #104]	; (d613c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d60d2:	681a      	ldr	r2, [r3, #0]
   d60d4:	07d2      	lsls	r2, r2, #31
   d60d6:	bf5c      	itt	pl
   d60d8:	2201      	movpl	r2, #1
   d60da:	601a      	strpl	r2, [r3, #0]
   d60dc:	4b18      	ldr	r3, [pc, #96]	; (d6140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d60de:	681a      	ldr	r2, [r3, #0]
   d60e0:	07d0      	lsls	r0, r2, #31
   d60e2:	bf5c      	itt	pl
   d60e4:	2201      	movpl	r2, #1
   d60e6:	601a      	strpl	r2, [r3, #0]
   d60e8:	4b16      	ldr	r3, [pc, #88]	; (d6144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d60ea:	681a      	ldr	r2, [r3, #0]
   d60ec:	07d1      	lsls	r1, r2, #31
   d60ee:	bf5c      	itt	pl
   d60f0:	2201      	movpl	r2, #1
   d60f2:	601a      	strpl	r2, [r3, #0]
   d60f4:	4b14      	ldr	r3, [pc, #80]	; (d6148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d60f6:	681a      	ldr	r2, [r3, #0]
   d60f8:	07d2      	lsls	r2, r2, #31
   d60fa:	bf5c      	itt	pl
   d60fc:	2201      	movpl	r2, #1
   d60fe:	601a      	strpl	r2, [r3, #0]
   d6100:	4b12      	ldr	r3, [pc, #72]	; (d614c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6102:	681a      	ldr	r2, [r3, #0]
   d6104:	07d0      	lsls	r0, r2, #31
   d6106:	bf5c      	itt	pl
   d6108:	2201      	movpl	r2, #1
   d610a:	601a      	strpl	r2, [r3, #0]
   d610c:	4b10      	ldr	r3, [pc, #64]	; (d6150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d610e:	681a      	ldr	r2, [r3, #0]
   d6110:	07d1      	lsls	r1, r2, #31
   d6112:	bf5c      	itt	pl
   d6114:	2201      	movpl	r2, #1
   d6116:	601a      	strpl	r2, [r3, #0]
   d6118:	4b0e      	ldr	r3, [pc, #56]	; (d6154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d611a:	681a      	ldr	r2, [r3, #0]
   d611c:	07d2      	lsls	r2, r2, #31
   d611e:	bf5c      	itt	pl
   d6120:	2201      	movpl	r2, #1
   d6122:	601a      	strpl	r2, [r3, #0]
   d6124:	4770      	bx	lr
   d6126:	bf00      	nop
   d6128:	2003e79c 	.word	0x2003e79c
   d612c:	2003e798 	.word	0x2003e798
   d6130:	2003e794 	.word	0x2003e794
   d6134:	2003e790 	.word	0x2003e790
   d6138:	2003e78c 	.word	0x2003e78c
   d613c:	2003e788 	.word	0x2003e788
   d6140:	2003e784 	.word	0x2003e784
   d6144:	2003e780 	.word	0x2003e780
   d6148:	2003e77c 	.word	0x2003e77c
   d614c:	2003e778 	.word	0x2003e778
   d6150:	2003e774 	.word	0x2003e774
   d6154:	2003e770 	.word	0x2003e770

000d6158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6158:	4b24      	ldr	r3, [pc, #144]	; (d61ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d615a:	681a      	ldr	r2, [r3, #0]
   d615c:	07d0      	lsls	r0, r2, #31
   d615e:	bf5c      	itt	pl
   d6160:	2201      	movpl	r2, #1
   d6162:	601a      	strpl	r2, [r3, #0]
   d6164:	4b22      	ldr	r3, [pc, #136]	; (d61f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6166:	681a      	ldr	r2, [r3, #0]
   d6168:	07d1      	lsls	r1, r2, #31
   d616a:	bf5c      	itt	pl
   d616c:	2201      	movpl	r2, #1
   d616e:	601a      	strpl	r2, [r3, #0]
   d6170:	4b20      	ldr	r3, [pc, #128]	; (d61f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6172:	681a      	ldr	r2, [r3, #0]
   d6174:	07d2      	lsls	r2, r2, #31
   d6176:	bf5c      	itt	pl
   d6178:	2201      	movpl	r2, #1
   d617a:	601a      	strpl	r2, [r3, #0]
   d617c:	4b1e      	ldr	r3, [pc, #120]	; (d61f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d617e:	681a      	ldr	r2, [r3, #0]
   d6180:	07d0      	lsls	r0, r2, #31
   d6182:	bf5c      	itt	pl
   d6184:	2201      	movpl	r2, #1
   d6186:	601a      	strpl	r2, [r3, #0]
   d6188:	4b1c      	ldr	r3, [pc, #112]	; (d61fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d618a:	681a      	ldr	r2, [r3, #0]
   d618c:	07d1      	lsls	r1, r2, #31
   d618e:	bf5c      	itt	pl
   d6190:	2201      	movpl	r2, #1
   d6192:	601a      	strpl	r2, [r3, #0]
   d6194:	4b1a      	ldr	r3, [pc, #104]	; (d6200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6196:	681a      	ldr	r2, [r3, #0]
   d6198:	07d2      	lsls	r2, r2, #31
   d619a:	bf5c      	itt	pl
   d619c:	2201      	movpl	r2, #1
   d619e:	601a      	strpl	r2, [r3, #0]
   d61a0:	4b18      	ldr	r3, [pc, #96]	; (d6204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d61a2:	681a      	ldr	r2, [r3, #0]
   d61a4:	07d0      	lsls	r0, r2, #31
   d61a6:	bf5c      	itt	pl
   d61a8:	2201      	movpl	r2, #1
   d61aa:	601a      	strpl	r2, [r3, #0]
   d61ac:	4b16      	ldr	r3, [pc, #88]	; (d6208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d61ae:	681a      	ldr	r2, [r3, #0]
   d61b0:	07d1      	lsls	r1, r2, #31
   d61b2:	bf5c      	itt	pl
   d61b4:	2201      	movpl	r2, #1
   d61b6:	601a      	strpl	r2, [r3, #0]
   d61b8:	4b14      	ldr	r3, [pc, #80]	; (d620c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d61ba:	681a      	ldr	r2, [r3, #0]
   d61bc:	07d2      	lsls	r2, r2, #31
   d61be:	bf5c      	itt	pl
   d61c0:	2201      	movpl	r2, #1
   d61c2:	601a      	strpl	r2, [r3, #0]
   d61c4:	4b12      	ldr	r3, [pc, #72]	; (d6210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d61c6:	681a      	ldr	r2, [r3, #0]
   d61c8:	07d0      	lsls	r0, r2, #31
   d61ca:	bf5c      	itt	pl
   d61cc:	2201      	movpl	r2, #1
   d61ce:	601a      	strpl	r2, [r3, #0]
   d61d0:	4b10      	ldr	r3, [pc, #64]	; (d6214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d61d2:	681a      	ldr	r2, [r3, #0]
   d61d4:	07d1      	lsls	r1, r2, #31
   d61d6:	bf5c      	itt	pl
   d61d8:	2201      	movpl	r2, #1
   d61da:	601a      	strpl	r2, [r3, #0]
   d61dc:	4b0e      	ldr	r3, [pc, #56]	; (d6218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d61de:	681a      	ldr	r2, [r3, #0]
   d61e0:	07d2      	lsls	r2, r2, #31
   d61e2:	bf5c      	itt	pl
   d61e4:	2201      	movpl	r2, #1
   d61e6:	601a      	strpl	r2, [r3, #0]
   d61e8:	4770      	bx	lr
   d61ea:	bf00      	nop
   d61ec:	2003e7cc 	.word	0x2003e7cc
   d61f0:	2003e7c8 	.word	0x2003e7c8
   d61f4:	2003e7c4 	.word	0x2003e7c4
   d61f8:	2003e7c0 	.word	0x2003e7c0
   d61fc:	2003e7bc 	.word	0x2003e7bc
   d6200:	2003e7b8 	.word	0x2003e7b8
   d6204:	2003e7b4 	.word	0x2003e7b4
   d6208:	2003e7b0 	.word	0x2003e7b0
   d620c:	2003e7ac 	.word	0x2003e7ac
   d6210:	2003e7a8 	.word	0x2003e7a8
   d6214:	2003e7a4 	.word	0x2003e7a4
   d6218:	2003e7a0 	.word	0x2003e7a0

000d621c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d621c:	4b18      	ldr	r3, [pc, #96]	; (d6280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d621e:	681a      	ldr	r2, [r3, #0]
   d6220:	07d1      	lsls	r1, r2, #31
   d6222:	bf5c      	itt	pl
   d6224:	2201      	movpl	r2, #1
   d6226:	601a      	strpl	r2, [r3, #0]
   d6228:	4b16      	ldr	r3, [pc, #88]	; (d6284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d622a:	681a      	ldr	r2, [r3, #0]
   d622c:	07d2      	lsls	r2, r2, #31
   d622e:	bf5c      	itt	pl
   d6230:	2201      	movpl	r2, #1
   d6232:	601a      	strpl	r2, [r3, #0]
   d6234:	4b14      	ldr	r3, [pc, #80]	; (d6288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6236:	681a      	ldr	r2, [r3, #0]
   d6238:	07d0      	lsls	r0, r2, #31
   d623a:	bf5c      	itt	pl
   d623c:	2201      	movpl	r2, #1
   d623e:	601a      	strpl	r2, [r3, #0]
   d6240:	4b12      	ldr	r3, [pc, #72]	; (d628c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6242:	681a      	ldr	r2, [r3, #0]
   d6244:	07d1      	lsls	r1, r2, #31
   d6246:	bf5c      	itt	pl
   d6248:	2201      	movpl	r2, #1
   d624a:	601a      	strpl	r2, [r3, #0]
   d624c:	4b10      	ldr	r3, [pc, #64]	; (d6290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d624e:	681a      	ldr	r2, [r3, #0]
   d6250:	07d2      	lsls	r2, r2, #31
   d6252:	bf5c      	itt	pl
   d6254:	2201      	movpl	r2, #1
   d6256:	601a      	strpl	r2, [r3, #0]
   d6258:	4b0e      	ldr	r3, [pc, #56]	; (d6294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d625a:	681a      	ldr	r2, [r3, #0]
   d625c:	07d0      	lsls	r0, r2, #31
   d625e:	bf5c      	itt	pl
   d6260:	2201      	movpl	r2, #1
   d6262:	601a      	strpl	r2, [r3, #0]
   d6264:	4b0c      	ldr	r3, [pc, #48]	; (d6298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6266:	681a      	ldr	r2, [r3, #0]
   d6268:	07d1      	lsls	r1, r2, #31
   d626a:	bf5c      	itt	pl
   d626c:	2201      	movpl	r2, #1
   d626e:	601a      	strpl	r2, [r3, #0]
   d6270:	4b0a      	ldr	r3, [pc, #40]	; (d629c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6272:	681a      	ldr	r2, [r3, #0]
   d6274:	07d2      	lsls	r2, r2, #31
   d6276:	bf5c      	itt	pl
   d6278:	2201      	movpl	r2, #1
   d627a:	601a      	strpl	r2, [r3, #0]
   d627c:	4770      	bx	lr
   d627e:	bf00      	nop
   d6280:	2003e7ec 	.word	0x2003e7ec
   d6284:	2003e7e8 	.word	0x2003e7e8
   d6288:	2003e7e4 	.word	0x2003e7e4
   d628c:	2003e7e0 	.word	0x2003e7e0
   d6290:	2003e7dc 	.word	0x2003e7dc
   d6294:	2003e7d8 	.word	0x2003e7d8
   d6298:	2003e7d4 	.word	0x2003e7d4
   d629c:	2003e7d0 	.word	0x2003e7d0

000d62a0 <sqrt>:
   d62a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d62a4:	ed2d 8b02 	vpush	{d8}
   d62a8:	b08b      	sub	sp, #44	; 0x2c
   d62aa:	ec55 4b10 	vmov	r4, r5, d0
   d62ae:	f000 f857 	bl	d6360 <__ieee754_sqrt>
   d62b2:	4b29      	ldr	r3, [pc, #164]	; (d6358 <sqrt+0xb8>)
   d62b4:	eeb0 8a40 	vmov.f32	s16, s0
   d62b8:	eef0 8a60 	vmov.f32	s17, s1
   d62bc:	f993 6000 	ldrsb.w	r6, [r3]
   d62c0:	1c73      	adds	r3, r6, #1
   d62c2:	d012      	beq.n	d62ea <sqrt+0x4a>
   d62c4:	4622      	mov	r2, r4
   d62c6:	462b      	mov	r3, r5
   d62c8:	4620      	mov	r0, r4
   d62ca:	4629      	mov	r1, r5
   d62cc:	f000 fd6c 	bl	d6da8 <__aeabi_dcmpun>
   d62d0:	4607      	mov	r7, r0
   d62d2:	b950      	cbnz	r0, d62ea <sqrt+0x4a>
   d62d4:	f04f 0800 	mov.w	r8, #0
   d62d8:	f04f 0900 	mov.w	r9, #0
   d62dc:	4620      	mov	r0, r4
   d62de:	4629      	mov	r1, r5
   d62e0:	4642      	mov	r2, r8
   d62e2:	464b      	mov	r3, r9
   d62e4:	f000 fd38 	bl	d6d58 <__aeabi_dcmplt>
   d62e8:	b940      	cbnz	r0, d62fc <sqrt+0x5c>
   d62ea:	eeb0 0a48 	vmov.f32	s0, s16
   d62ee:	eef0 0a68 	vmov.f32	s1, s17
   d62f2:	b00b      	add	sp, #44	; 0x2c
   d62f4:	ecbd 8b02 	vpop	{d8}
   d62f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d62fc:	4b17      	ldr	r3, [pc, #92]	; (d635c <sqrt+0xbc>)
   d62fe:	9708      	str	r7, [sp, #32]
   d6300:	2201      	movs	r2, #1
   d6302:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6306:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d630a:	e88d 000c 	stmia.w	sp, {r2, r3}
   d630e:	b1b6      	cbz	r6, d633e <sqrt+0x9e>
   d6310:	4642      	mov	r2, r8
   d6312:	464b      	mov	r3, r9
   d6314:	4640      	mov	r0, r8
   d6316:	4649      	mov	r1, r9
   d6318:	f000 fbd6 	bl	d6ac8 <__aeabi_ddiv>
   d631c:	2e02      	cmp	r6, #2
   d631e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d6322:	d10e      	bne.n	d6342 <sqrt+0xa2>
   d6324:	f7fe ffb4 	bl	d5290 <__errno>
   d6328:	2321      	movs	r3, #33	; 0x21
   d632a:	6003      	str	r3, [r0, #0]
   d632c:	9b08      	ldr	r3, [sp, #32]
   d632e:	b973      	cbnz	r3, d634e <sqrt+0xae>
   d6330:	ed9d 0b06 	vldr	d0, [sp, #24]
   d6334:	b00b      	add	sp, #44	; 0x2c
   d6336:	ecbd 8b02 	vpop	{d8}
   d633a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d633e:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d6342:	4668      	mov	r0, sp
   d6344:	f000 f8dc 	bl	d6500 <matherr>
   d6348:	2800      	cmp	r0, #0
   d634a:	d1ef      	bne.n	d632c <sqrt+0x8c>
   d634c:	e7ea      	b.n	d6324 <sqrt+0x84>
   d634e:	f7fe ff9f 	bl	d5290 <__errno>
   d6352:	9b08      	ldr	r3, [sp, #32]
   d6354:	6003      	str	r3, [r0, #0]
   d6356:	e7eb      	b.n	d6330 <sqrt+0x90>
   d6358:	2003de58 	.word	0x2003de58
   d635c:	000d7254 	.word	0x000d7254

000d6360 <__ieee754_sqrt>:
   d6360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6364:	4965      	ldr	r1, [pc, #404]	; (d64fc <__ieee754_sqrt+0x19c>)
   d6366:	ec55 4b10 	vmov	r4, r5, d0
   d636a:	460e      	mov	r6, r1
   d636c:	4029      	ands	r1, r5
   d636e:	42b1      	cmp	r1, r6
   d6370:	f000 8097 	beq.w	d64a2 <__ieee754_sqrt+0x142>
   d6374:	2d00      	cmp	r5, #0
   d6376:	462b      	mov	r3, r5
   d6378:	ee10 2a10 	vmov	r2, s0
   d637c:	dd74      	ble.n	d6468 <__ieee754_sqrt+0x108>
   d637e:	152f      	asrs	r7, r5, #20
   d6380:	d07f      	beq.n	d6482 <__ieee754_sqrt+0x122>
   d6382:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d6386:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d638a:	07f9      	lsls	r1, r7, #31
   d638c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6390:	d465      	bmi.n	d645e <__ieee754_sqrt+0xfe>
   d6392:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d6396:	2600      	movs	r6, #0
   d6398:	440b      	add	r3, r1
   d639a:	107f      	asrs	r7, r7, #1
   d639c:	0052      	lsls	r2, r2, #1
   d639e:	46b6      	mov	lr, r6
   d63a0:	2016      	movs	r0, #22
   d63a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d63a6:	eb0e 0401 	add.w	r4, lr, r1
   d63aa:	429c      	cmp	r4, r3
   d63ac:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d63b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d63b4:	dc03      	bgt.n	d63be <__ieee754_sqrt+0x5e>
   d63b6:	1b1b      	subs	r3, r3, r4
   d63b8:	eb04 0e01 	add.w	lr, r4, r1
   d63bc:	440e      	add	r6, r1
   d63be:	3801      	subs	r0, #1
   d63c0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d63c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d63c8:	d1ed      	bne.n	d63a6 <__ieee754_sqrt+0x46>
   d63ca:	4684      	mov	ip, r0
   d63cc:	2420      	movs	r4, #32
   d63ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d63d2:	e009      	b.n	d63e8 <__ieee754_sqrt+0x88>
   d63d4:	d020      	beq.n	d6418 <__ieee754_sqrt+0xb8>
   d63d6:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d63da:	3c01      	subs	r4, #1
   d63dc:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d63e0:	442b      	add	r3, r5
   d63e2:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d63e6:	d020      	beq.n	d642a <__ieee754_sqrt+0xca>
   d63e8:	459e      	cmp	lr, r3
   d63ea:	eb01 050c 	add.w	r5, r1, ip
   d63ee:	daf1      	bge.n	d63d4 <__ieee754_sqrt+0x74>
   d63f0:	2d00      	cmp	r5, #0
   d63f2:	eb05 0c01 	add.w	ip, r5, r1
   d63f6:	db09      	blt.n	d640c <__ieee754_sqrt+0xac>
   d63f8:	46f0      	mov	r8, lr
   d63fa:	4295      	cmp	r5, r2
   d63fc:	ebce 0303 	rsb	r3, lr, r3
   d6400:	d900      	bls.n	d6404 <__ieee754_sqrt+0xa4>
   d6402:	3b01      	subs	r3, #1
   d6404:	1b52      	subs	r2, r2, r5
   d6406:	4408      	add	r0, r1
   d6408:	46c6      	mov	lr, r8
   d640a:	e7e4      	b.n	d63d6 <__ieee754_sqrt+0x76>
   d640c:	f1bc 0f00 	cmp.w	ip, #0
   d6410:	dbf2      	blt.n	d63f8 <__ieee754_sqrt+0x98>
   d6412:	f10e 0801 	add.w	r8, lr, #1
   d6416:	e7f0      	b.n	d63fa <__ieee754_sqrt+0x9a>
   d6418:	4295      	cmp	r5, r2
   d641a:	d81e      	bhi.n	d645a <__ieee754_sqrt+0xfa>
   d641c:	2d00      	cmp	r5, #0
   d641e:	eb05 0c01 	add.w	ip, r5, r1
   d6422:	db50      	blt.n	d64c6 <__ieee754_sqrt+0x166>
   d6424:	4698      	mov	r8, r3
   d6426:	2300      	movs	r3, #0
   d6428:	e7ec      	b.n	d6404 <__ieee754_sqrt+0xa4>
   d642a:	4313      	orrs	r3, r2
   d642c:	d004      	beq.n	d6438 <__ieee754_sqrt+0xd8>
   d642e:	1c42      	adds	r2, r0, #1
   d6430:	d04d      	beq.n	d64ce <__ieee754_sqrt+0x16e>
   d6432:	f000 0301 	and.w	r3, r0, #1
   d6436:	4418      	add	r0, r3
   d6438:	0840      	lsrs	r0, r0, #1
   d643a:	1071      	asrs	r1, r6, #1
   d643c:	07f3      	lsls	r3, r6, #31
   d643e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d6442:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d6446:	bf48      	it	mi
   d6448:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d644c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d6450:	4602      	mov	r2, r0
   d6452:	ec43 2b10 	vmov	d0, r2, r3
   d6456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d645a:	4673      	mov	r3, lr
   d645c:	e7bb      	b.n	d63d6 <__ieee754_sqrt+0x76>
   d645e:	005b      	lsls	r3, r3, #1
   d6460:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d6464:	0052      	lsls	r2, r2, #1
   d6466:	e794      	b.n	d6392 <__ieee754_sqrt+0x32>
   d6468:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d646c:	4321      	orrs	r1, r4
   d646e:	d028      	beq.n	d64c2 <__ieee754_sqrt+0x162>
   d6470:	bbad      	cbnz	r5, d64de <__ieee754_sqrt+0x17e>
   d6472:	462f      	mov	r7, r5
   d6474:	0ad3      	lsrs	r3, r2, #11
   d6476:	3f15      	subs	r7, #21
   d6478:	0552      	lsls	r2, r2, #21
   d647a:	2b00      	cmp	r3, #0
   d647c:	d0fa      	beq.n	d6474 <__ieee754_sqrt+0x114>
   d647e:	02dd      	lsls	r5, r3, #11
   d6480:	d428      	bmi.n	d64d4 <__ieee754_sqrt+0x174>
   d6482:	2100      	movs	r1, #0
   d6484:	e000      	b.n	d6488 <__ieee754_sqrt+0x128>
   d6486:	4601      	mov	r1, r0
   d6488:	005b      	lsls	r3, r3, #1
   d648a:	02dc      	lsls	r4, r3, #11
   d648c:	f101 0001 	add.w	r0, r1, #1
   d6490:	d5f9      	bpl.n	d6486 <__ieee754_sqrt+0x126>
   d6492:	f1c0 0420 	rsb	r4, r0, #32
   d6496:	fa22 f404 	lsr.w	r4, r2, r4
   d649a:	4323      	orrs	r3, r4
   d649c:	1a7f      	subs	r7, r7, r1
   d649e:	4082      	lsls	r2, r0
   d64a0:	e76f      	b.n	d6382 <__ieee754_sqrt+0x22>
   d64a2:	ee10 2a10 	vmov	r2, s0
   d64a6:	462b      	mov	r3, r5
   d64a8:	ee10 0a10 	vmov	r0, s0
   d64ac:	4629      	mov	r1, r5
   d64ae:	f000 f9e1 	bl	d6874 <__aeabi_dmul>
   d64b2:	4622      	mov	r2, r4
   d64b4:	462b      	mov	r3, r5
   d64b6:	f000 f82b 	bl	d6510 <__adddf3>
   d64ba:	ec41 0b10 	vmov	d0, r0, r1
   d64be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d64c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d64c6:	f1bc 0f00 	cmp.w	ip, #0
   d64ca:	daa2      	bge.n	d6412 <__ieee754_sqrt+0xb2>
   d64cc:	e7aa      	b.n	d6424 <__ieee754_sqrt+0xc4>
   d64ce:	3601      	adds	r6, #1
   d64d0:	4620      	mov	r0, r4
   d64d2:	e7b2      	b.n	d643a <__ieee754_sqrt+0xda>
   d64d4:	2420      	movs	r4, #32
   d64d6:	f04f 31ff 	mov.w	r1, #4294967295
   d64da:	2000      	movs	r0, #0
   d64dc:	e7db      	b.n	d6496 <__ieee754_sqrt+0x136>
   d64de:	ee10 2a10 	vmov	r2, s0
   d64e2:	462b      	mov	r3, r5
   d64e4:	4620      	mov	r0, r4
   d64e6:	4629      	mov	r1, r5
   d64e8:	f000 f810 	bl	d650c <__aeabi_dsub>
   d64ec:	4602      	mov	r2, r0
   d64ee:	460b      	mov	r3, r1
   d64f0:	f000 faea 	bl	d6ac8 <__aeabi_ddiv>
   d64f4:	ec41 0b10 	vmov	d0, r0, r1
   d64f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d64fc:	7ff00000 	.word	0x7ff00000

000d6500 <matherr>:
   d6500:	2000      	movs	r0, #0
   d6502:	4770      	bx	lr

000d6504 <__aeabi_drsub>:
   d6504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6508:	e002      	b.n	d6510 <__adddf3>
   d650a:	bf00      	nop

000d650c <__aeabi_dsub>:
   d650c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6510 <__adddf3>:
   d6510:	b530      	push	{r4, r5, lr}
   d6512:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6516:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d651a:	ea94 0f05 	teq	r4, r5
   d651e:	bf08      	it	eq
   d6520:	ea90 0f02 	teqeq	r0, r2
   d6524:	bf1f      	itttt	ne
   d6526:	ea54 0c00 	orrsne.w	ip, r4, r0
   d652a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d652e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6536:	f000 80e2 	beq.w	d66fe <__adddf3+0x1ee>
   d653a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d653e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6542:	bfb8      	it	lt
   d6544:	426d      	neglt	r5, r5
   d6546:	dd0c      	ble.n	d6562 <__adddf3+0x52>
   d6548:	442c      	add	r4, r5
   d654a:	ea80 0202 	eor.w	r2, r0, r2
   d654e:	ea81 0303 	eor.w	r3, r1, r3
   d6552:	ea82 0000 	eor.w	r0, r2, r0
   d6556:	ea83 0101 	eor.w	r1, r3, r1
   d655a:	ea80 0202 	eor.w	r2, r0, r2
   d655e:	ea81 0303 	eor.w	r3, r1, r3
   d6562:	2d36      	cmp	r5, #54	; 0x36
   d6564:	bf88      	it	hi
   d6566:	bd30      	pophi	{r4, r5, pc}
   d6568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d656c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6578:	d002      	beq.n	d6580 <__adddf3+0x70>
   d657a:	4240      	negs	r0, r0
   d657c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6584:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d658c:	d002      	beq.n	d6594 <__adddf3+0x84>
   d658e:	4252      	negs	r2, r2
   d6590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6594:	ea94 0f05 	teq	r4, r5
   d6598:	f000 80a7 	beq.w	d66ea <__adddf3+0x1da>
   d659c:	f1a4 0401 	sub.w	r4, r4, #1
   d65a0:	f1d5 0e20 	rsbs	lr, r5, #32
   d65a4:	db0d      	blt.n	d65c2 <__adddf3+0xb2>
   d65a6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d65aa:	fa22 f205 	lsr.w	r2, r2, r5
   d65ae:	1880      	adds	r0, r0, r2
   d65b0:	f141 0100 	adc.w	r1, r1, #0
   d65b4:	fa03 f20e 	lsl.w	r2, r3, lr
   d65b8:	1880      	adds	r0, r0, r2
   d65ba:	fa43 f305 	asr.w	r3, r3, r5
   d65be:	4159      	adcs	r1, r3
   d65c0:	e00e      	b.n	d65e0 <__adddf3+0xd0>
   d65c2:	f1a5 0520 	sub.w	r5, r5, #32
   d65c6:	f10e 0e20 	add.w	lr, lr, #32
   d65ca:	2a01      	cmp	r2, #1
   d65cc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d65d0:	bf28      	it	cs
   d65d2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d65d6:	fa43 f305 	asr.w	r3, r3, r5
   d65da:	18c0      	adds	r0, r0, r3
   d65dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d65e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d65e4:	d507      	bpl.n	d65f6 <__adddf3+0xe6>
   d65e6:	f04f 0e00 	mov.w	lr, #0
   d65ea:	f1dc 0c00 	rsbs	ip, ip, #0
   d65ee:	eb7e 0000 	sbcs.w	r0, lr, r0
   d65f2:	eb6e 0101 	sbc.w	r1, lr, r1
   d65f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d65fa:	d31b      	bcc.n	d6634 <__adddf3+0x124>
   d65fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6600:	d30c      	bcc.n	d661c <__adddf3+0x10c>
   d6602:	0849      	lsrs	r1, r1, #1
   d6604:	ea5f 0030 	movs.w	r0, r0, rrx
   d6608:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d660c:	f104 0401 	add.w	r4, r4, #1
   d6610:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6618:	f080 809a 	bcs.w	d6750 <__adddf3+0x240>
   d661c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6620:	bf08      	it	eq
   d6622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6626:	f150 0000 	adcs.w	r0, r0, #0
   d662a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d662e:	ea41 0105 	orr.w	r1, r1, r5
   d6632:	bd30      	pop	{r4, r5, pc}
   d6634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6638:	4140      	adcs	r0, r0
   d663a:	eb41 0101 	adc.w	r1, r1, r1
   d663e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6642:	f1a4 0401 	sub.w	r4, r4, #1
   d6646:	d1e9      	bne.n	d661c <__adddf3+0x10c>
   d6648:	f091 0f00 	teq	r1, #0
   d664c:	bf04      	itt	eq
   d664e:	4601      	moveq	r1, r0
   d6650:	2000      	moveq	r0, #0
   d6652:	fab1 f381 	clz	r3, r1
   d6656:	bf08      	it	eq
   d6658:	3320      	addeq	r3, #32
   d665a:	f1a3 030b 	sub.w	r3, r3, #11
   d665e:	f1b3 0220 	subs.w	r2, r3, #32
   d6662:	da0c      	bge.n	d667e <__adddf3+0x16e>
   d6664:	320c      	adds	r2, #12
   d6666:	dd08      	ble.n	d667a <__adddf3+0x16a>
   d6668:	f102 0c14 	add.w	ip, r2, #20
   d666c:	f1c2 020c 	rsb	r2, r2, #12
   d6670:	fa01 f00c 	lsl.w	r0, r1, ip
   d6674:	fa21 f102 	lsr.w	r1, r1, r2
   d6678:	e00c      	b.n	d6694 <__adddf3+0x184>
   d667a:	f102 0214 	add.w	r2, r2, #20
   d667e:	bfd8      	it	le
   d6680:	f1c2 0c20 	rsble	ip, r2, #32
   d6684:	fa01 f102 	lsl.w	r1, r1, r2
   d6688:	fa20 fc0c 	lsr.w	ip, r0, ip
   d668c:	bfdc      	itt	le
   d668e:	ea41 010c 	orrle.w	r1, r1, ip
   d6692:	4090      	lslle	r0, r2
   d6694:	1ae4      	subs	r4, r4, r3
   d6696:	bfa2      	ittt	ge
   d6698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d669c:	4329      	orrge	r1, r5
   d669e:	bd30      	popge	{r4, r5, pc}
   d66a0:	ea6f 0404 	mvn.w	r4, r4
   d66a4:	3c1f      	subs	r4, #31
   d66a6:	da1c      	bge.n	d66e2 <__adddf3+0x1d2>
   d66a8:	340c      	adds	r4, #12
   d66aa:	dc0e      	bgt.n	d66ca <__adddf3+0x1ba>
   d66ac:	f104 0414 	add.w	r4, r4, #20
   d66b0:	f1c4 0220 	rsb	r2, r4, #32
   d66b4:	fa20 f004 	lsr.w	r0, r0, r4
   d66b8:	fa01 f302 	lsl.w	r3, r1, r2
   d66bc:	ea40 0003 	orr.w	r0, r0, r3
   d66c0:	fa21 f304 	lsr.w	r3, r1, r4
   d66c4:	ea45 0103 	orr.w	r1, r5, r3
   d66c8:	bd30      	pop	{r4, r5, pc}
   d66ca:	f1c4 040c 	rsb	r4, r4, #12
   d66ce:	f1c4 0220 	rsb	r2, r4, #32
   d66d2:	fa20 f002 	lsr.w	r0, r0, r2
   d66d6:	fa01 f304 	lsl.w	r3, r1, r4
   d66da:	ea40 0003 	orr.w	r0, r0, r3
   d66de:	4629      	mov	r1, r5
   d66e0:	bd30      	pop	{r4, r5, pc}
   d66e2:	fa21 f004 	lsr.w	r0, r1, r4
   d66e6:	4629      	mov	r1, r5
   d66e8:	bd30      	pop	{r4, r5, pc}
   d66ea:	f094 0f00 	teq	r4, #0
   d66ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d66f2:	bf06      	itte	eq
   d66f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d66f8:	3401      	addeq	r4, #1
   d66fa:	3d01      	subne	r5, #1
   d66fc:	e74e      	b.n	d659c <__adddf3+0x8c>
   d66fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6702:	bf18      	it	ne
   d6704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6708:	d029      	beq.n	d675e <__adddf3+0x24e>
   d670a:	ea94 0f05 	teq	r4, r5
   d670e:	bf08      	it	eq
   d6710:	ea90 0f02 	teqeq	r0, r2
   d6714:	d005      	beq.n	d6722 <__adddf3+0x212>
   d6716:	ea54 0c00 	orrs.w	ip, r4, r0
   d671a:	bf04      	itt	eq
   d671c:	4619      	moveq	r1, r3
   d671e:	4610      	moveq	r0, r2
   d6720:	bd30      	pop	{r4, r5, pc}
   d6722:	ea91 0f03 	teq	r1, r3
   d6726:	bf1e      	ittt	ne
   d6728:	2100      	movne	r1, #0
   d672a:	2000      	movne	r0, #0
   d672c:	bd30      	popne	{r4, r5, pc}
   d672e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6732:	d105      	bne.n	d6740 <__adddf3+0x230>
   d6734:	0040      	lsls	r0, r0, #1
   d6736:	4149      	adcs	r1, r1
   d6738:	bf28      	it	cs
   d673a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d673e:	bd30      	pop	{r4, r5, pc}
   d6740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6744:	bf3c      	itt	cc
   d6746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d674a:	bd30      	popcc	{r4, r5, pc}
   d674c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6758:	f04f 0000 	mov.w	r0, #0
   d675c:	bd30      	pop	{r4, r5, pc}
   d675e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6762:	bf1a      	itte	ne
   d6764:	4619      	movne	r1, r3
   d6766:	4610      	movne	r0, r2
   d6768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d676c:	bf1c      	itt	ne
   d676e:	460b      	movne	r3, r1
   d6770:	4602      	movne	r2, r0
   d6772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6776:	bf06      	itte	eq
   d6778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d677c:	ea91 0f03 	teqeq	r1, r3
   d6780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6784:	bd30      	pop	{r4, r5, pc}
   d6786:	bf00      	nop

000d6788 <__aeabi_ui2d>:
   d6788:	f090 0f00 	teq	r0, #0
   d678c:	bf04      	itt	eq
   d678e:	2100      	moveq	r1, #0
   d6790:	4770      	bxeq	lr
   d6792:	b530      	push	{r4, r5, lr}
   d6794:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6798:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d679c:	f04f 0500 	mov.w	r5, #0
   d67a0:	f04f 0100 	mov.w	r1, #0
   d67a4:	e750      	b.n	d6648 <__adddf3+0x138>
   d67a6:	bf00      	nop

000d67a8 <__aeabi_i2d>:
   d67a8:	f090 0f00 	teq	r0, #0
   d67ac:	bf04      	itt	eq
   d67ae:	2100      	moveq	r1, #0
   d67b0:	4770      	bxeq	lr
   d67b2:	b530      	push	{r4, r5, lr}
   d67b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d67c0:	bf48      	it	mi
   d67c2:	4240      	negmi	r0, r0
   d67c4:	f04f 0100 	mov.w	r1, #0
   d67c8:	e73e      	b.n	d6648 <__adddf3+0x138>
   d67ca:	bf00      	nop

000d67cc <__aeabi_f2d>:
   d67cc:	0042      	lsls	r2, r0, #1
   d67ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d67d2:	ea4f 0131 	mov.w	r1, r1, rrx
   d67d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d67da:	bf1f      	itttt	ne
   d67dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d67e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d67e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d67e8:	4770      	bxne	lr
   d67ea:	f092 0f00 	teq	r2, #0
   d67ee:	bf14      	ite	ne
   d67f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d67f4:	4770      	bxeq	lr
   d67f6:	b530      	push	{r4, r5, lr}
   d67f8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d67fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6804:	e720      	b.n	d6648 <__adddf3+0x138>
   d6806:	bf00      	nop

000d6808 <__aeabi_ul2d>:
   d6808:	ea50 0201 	orrs.w	r2, r0, r1
   d680c:	bf08      	it	eq
   d680e:	4770      	bxeq	lr
   d6810:	b530      	push	{r4, r5, lr}
   d6812:	f04f 0500 	mov.w	r5, #0
   d6816:	e00a      	b.n	d682e <__aeabi_l2d+0x16>

000d6818 <__aeabi_l2d>:
   d6818:	ea50 0201 	orrs.w	r2, r0, r1
   d681c:	bf08      	it	eq
   d681e:	4770      	bxeq	lr
   d6820:	b530      	push	{r4, r5, lr}
   d6822:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6826:	d502      	bpl.n	d682e <__aeabi_l2d+0x16>
   d6828:	4240      	negs	r0, r0
   d682a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d682e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6832:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6836:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d683a:	f43f aedc 	beq.w	d65f6 <__adddf3+0xe6>
   d683e:	f04f 0203 	mov.w	r2, #3
   d6842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6846:	bf18      	it	ne
   d6848:	3203      	addne	r2, #3
   d684a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d684e:	bf18      	it	ne
   d6850:	3203      	addne	r2, #3
   d6852:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6856:	f1c2 0320 	rsb	r3, r2, #32
   d685a:	fa00 fc03 	lsl.w	ip, r0, r3
   d685e:	fa20 f002 	lsr.w	r0, r0, r2
   d6862:	fa01 fe03 	lsl.w	lr, r1, r3
   d6866:	ea40 000e 	orr.w	r0, r0, lr
   d686a:	fa21 f102 	lsr.w	r1, r1, r2
   d686e:	4414      	add	r4, r2
   d6870:	e6c1      	b.n	d65f6 <__adddf3+0xe6>
   d6872:	bf00      	nop

000d6874 <__aeabi_dmul>:
   d6874:	b570      	push	{r4, r5, r6, lr}
   d6876:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d687a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d687e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6882:	bf1d      	ittte	ne
   d6884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6888:	ea94 0f0c 	teqne	r4, ip
   d688c:	ea95 0f0c 	teqne	r5, ip
   d6890:	f000 f8de 	bleq	d6a50 <__aeabi_dmul+0x1dc>
   d6894:	442c      	add	r4, r5
   d6896:	ea81 0603 	eor.w	r6, r1, r3
   d689a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d689e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d68a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d68a6:	bf18      	it	ne
   d68a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d68ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d68b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d68b4:	d038      	beq.n	d6928 <__aeabi_dmul+0xb4>
   d68b6:	fba0 ce02 	umull	ip, lr, r0, r2
   d68ba:	f04f 0500 	mov.w	r5, #0
   d68be:	fbe1 e502 	umlal	lr, r5, r1, r2
   d68c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d68c6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d68ca:	f04f 0600 	mov.w	r6, #0
   d68ce:	fbe1 5603 	umlal	r5, r6, r1, r3
   d68d2:	f09c 0f00 	teq	ip, #0
   d68d6:	bf18      	it	ne
   d68d8:	f04e 0e01 	orrne.w	lr, lr, #1
   d68dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d68e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d68e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d68e8:	d204      	bcs.n	d68f4 <__aeabi_dmul+0x80>
   d68ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d68ee:	416d      	adcs	r5, r5
   d68f0:	eb46 0606 	adc.w	r6, r6, r6
   d68f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d68f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d68fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6900:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6904:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6908:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d690c:	bf88      	it	hi
   d690e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6912:	d81e      	bhi.n	d6952 <__aeabi_dmul+0xde>
   d6914:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6918:	bf08      	it	eq
   d691a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d691e:	f150 0000 	adcs.w	r0, r0, #0
   d6922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6926:	bd70      	pop	{r4, r5, r6, pc}
   d6928:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d692c:	ea46 0101 	orr.w	r1, r6, r1
   d6930:	ea40 0002 	orr.w	r0, r0, r2
   d6934:	ea81 0103 	eor.w	r1, r1, r3
   d6938:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d693c:	bfc2      	ittt	gt
   d693e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6946:	bd70      	popgt	{r4, r5, r6, pc}
   d6948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d694c:	f04f 0e00 	mov.w	lr, #0
   d6950:	3c01      	subs	r4, #1
   d6952:	f300 80ab 	bgt.w	d6aac <__aeabi_dmul+0x238>
   d6956:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d695a:	bfde      	ittt	le
   d695c:	2000      	movle	r0, #0
   d695e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6962:	bd70      	pople	{r4, r5, r6, pc}
   d6964:	f1c4 0400 	rsb	r4, r4, #0
   d6968:	3c20      	subs	r4, #32
   d696a:	da35      	bge.n	d69d8 <__aeabi_dmul+0x164>
   d696c:	340c      	adds	r4, #12
   d696e:	dc1b      	bgt.n	d69a8 <__aeabi_dmul+0x134>
   d6970:	f104 0414 	add.w	r4, r4, #20
   d6974:	f1c4 0520 	rsb	r5, r4, #32
   d6978:	fa00 f305 	lsl.w	r3, r0, r5
   d697c:	fa20 f004 	lsr.w	r0, r0, r4
   d6980:	fa01 f205 	lsl.w	r2, r1, r5
   d6984:	ea40 0002 	orr.w	r0, r0, r2
   d6988:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d698c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6990:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6994:	fa21 f604 	lsr.w	r6, r1, r4
   d6998:	eb42 0106 	adc.w	r1, r2, r6
   d699c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69a0:	bf08      	it	eq
   d69a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69a6:	bd70      	pop	{r4, r5, r6, pc}
   d69a8:	f1c4 040c 	rsb	r4, r4, #12
   d69ac:	f1c4 0520 	rsb	r5, r4, #32
   d69b0:	fa00 f304 	lsl.w	r3, r0, r4
   d69b4:	fa20 f005 	lsr.w	r0, r0, r5
   d69b8:	fa01 f204 	lsl.w	r2, r1, r4
   d69bc:	ea40 0002 	orr.w	r0, r0, r2
   d69c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d69c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d69c8:	f141 0100 	adc.w	r1, r1, #0
   d69cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69d0:	bf08      	it	eq
   d69d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69d6:	bd70      	pop	{r4, r5, r6, pc}
   d69d8:	f1c4 0520 	rsb	r5, r4, #32
   d69dc:	fa00 f205 	lsl.w	r2, r0, r5
   d69e0:	ea4e 0e02 	orr.w	lr, lr, r2
   d69e4:	fa20 f304 	lsr.w	r3, r0, r4
   d69e8:	fa01 f205 	lsl.w	r2, r1, r5
   d69ec:	ea43 0302 	orr.w	r3, r3, r2
   d69f0:	fa21 f004 	lsr.w	r0, r1, r4
   d69f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d69f8:	fa21 f204 	lsr.w	r2, r1, r4
   d69fc:	ea20 0002 	bic.w	r0, r0, r2
   d6a00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6a04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a08:	bf08      	it	eq
   d6a0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a0e:	bd70      	pop	{r4, r5, r6, pc}
   d6a10:	f094 0f00 	teq	r4, #0
   d6a14:	d10f      	bne.n	d6a36 <__aeabi_dmul+0x1c2>
   d6a16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6a1a:	0040      	lsls	r0, r0, #1
   d6a1c:	eb41 0101 	adc.w	r1, r1, r1
   d6a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a24:	bf08      	it	eq
   d6a26:	3c01      	subeq	r4, #1
   d6a28:	d0f7      	beq.n	d6a1a <__aeabi_dmul+0x1a6>
   d6a2a:	ea41 0106 	orr.w	r1, r1, r6
   d6a2e:	f095 0f00 	teq	r5, #0
   d6a32:	bf18      	it	ne
   d6a34:	4770      	bxne	lr
   d6a36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6a3a:	0052      	lsls	r2, r2, #1
   d6a3c:	eb43 0303 	adc.w	r3, r3, r3
   d6a40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6a44:	bf08      	it	eq
   d6a46:	3d01      	subeq	r5, #1
   d6a48:	d0f7      	beq.n	d6a3a <__aeabi_dmul+0x1c6>
   d6a4a:	ea43 0306 	orr.w	r3, r3, r6
   d6a4e:	4770      	bx	lr
   d6a50:	ea94 0f0c 	teq	r4, ip
   d6a54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a58:	bf18      	it	ne
   d6a5a:	ea95 0f0c 	teqne	r5, ip
   d6a5e:	d00c      	beq.n	d6a7a <__aeabi_dmul+0x206>
   d6a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a64:	bf18      	it	ne
   d6a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a6a:	d1d1      	bne.n	d6a10 <__aeabi_dmul+0x19c>
   d6a6c:	ea81 0103 	eor.w	r1, r1, r3
   d6a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a74:	f04f 0000 	mov.w	r0, #0
   d6a78:	bd70      	pop	{r4, r5, r6, pc}
   d6a7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a7e:	bf06      	itte	eq
   d6a80:	4610      	moveq	r0, r2
   d6a82:	4619      	moveq	r1, r3
   d6a84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a88:	d019      	beq.n	d6abe <__aeabi_dmul+0x24a>
   d6a8a:	ea94 0f0c 	teq	r4, ip
   d6a8e:	d102      	bne.n	d6a96 <__aeabi_dmul+0x222>
   d6a90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6a94:	d113      	bne.n	d6abe <__aeabi_dmul+0x24a>
   d6a96:	ea95 0f0c 	teq	r5, ip
   d6a9a:	d105      	bne.n	d6aa8 <__aeabi_dmul+0x234>
   d6a9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6aa0:	bf1c      	itt	ne
   d6aa2:	4610      	movne	r0, r2
   d6aa4:	4619      	movne	r1, r3
   d6aa6:	d10a      	bne.n	d6abe <__aeabi_dmul+0x24a>
   d6aa8:	ea81 0103 	eor.w	r1, r1, r3
   d6aac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ab0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ab4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6ab8:	f04f 0000 	mov.w	r0, #0
   d6abc:	bd70      	pop	{r4, r5, r6, pc}
   d6abe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ac2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6ac6:	bd70      	pop	{r4, r5, r6, pc}

000d6ac8 <__aeabi_ddiv>:
   d6ac8:	b570      	push	{r4, r5, r6, lr}
   d6aca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ace:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ad2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6ad6:	bf1d      	ittte	ne
   d6ad8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6adc:	ea94 0f0c 	teqne	r4, ip
   d6ae0:	ea95 0f0c 	teqne	r5, ip
   d6ae4:	f000 f8a7 	bleq	d6c36 <__aeabi_ddiv+0x16e>
   d6ae8:	eba4 0405 	sub.w	r4, r4, r5
   d6aec:	ea81 0e03 	eor.w	lr, r1, r3
   d6af0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6af4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6af8:	f000 8088 	beq.w	d6c0c <__aeabi_ddiv+0x144>
   d6afc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6b04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6b08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6b0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6b10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6b14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6b18:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6b1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6b20:	429d      	cmp	r5, r3
   d6b22:	bf08      	it	eq
   d6b24:	4296      	cmpeq	r6, r2
   d6b26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6b2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6b2e:	d202      	bcs.n	d6b36 <__aeabi_ddiv+0x6e>
   d6b30:	085b      	lsrs	r3, r3, #1
   d6b32:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b36:	1ab6      	subs	r6, r6, r2
   d6b38:	eb65 0503 	sbc.w	r5, r5, r3
   d6b3c:	085b      	lsrs	r3, r3, #1
   d6b3e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6b46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6b4a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b52:	bf22      	ittt	cs
   d6b54:	1ab6      	subcs	r6, r6, r2
   d6b56:	4675      	movcs	r5, lr
   d6b58:	ea40 000c 	orrcs.w	r0, r0, ip
   d6b5c:	085b      	lsrs	r3, r3, #1
   d6b5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b62:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b66:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b6a:	bf22      	ittt	cs
   d6b6c:	1ab6      	subcs	r6, r6, r2
   d6b6e:	4675      	movcs	r5, lr
   d6b70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6b74:	085b      	lsrs	r3, r3, #1
   d6b76:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b7a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b82:	bf22      	ittt	cs
   d6b84:	1ab6      	subcs	r6, r6, r2
   d6b86:	4675      	movcs	r5, lr
   d6b88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6b8c:	085b      	lsrs	r3, r3, #1
   d6b8e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b92:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b96:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b9a:	bf22      	ittt	cs
   d6b9c:	1ab6      	subcs	r6, r6, r2
   d6b9e:	4675      	movcs	r5, lr
   d6ba0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6ba4:	ea55 0e06 	orrs.w	lr, r5, r6
   d6ba8:	d018      	beq.n	d6bdc <__aeabi_ddiv+0x114>
   d6baa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6bae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6bb2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6bb6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6bba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6bbe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6bc2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6bc6:	d1c0      	bne.n	d6b4a <__aeabi_ddiv+0x82>
   d6bc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6bcc:	d10b      	bne.n	d6be6 <__aeabi_ddiv+0x11e>
   d6bce:	ea41 0100 	orr.w	r1, r1, r0
   d6bd2:	f04f 0000 	mov.w	r0, #0
   d6bd6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6bda:	e7b6      	b.n	d6b4a <__aeabi_ddiv+0x82>
   d6bdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6be0:	bf04      	itt	eq
   d6be2:	4301      	orreq	r1, r0
   d6be4:	2000      	moveq	r0, #0
   d6be6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6bea:	bf88      	it	hi
   d6bec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6bf0:	f63f aeaf 	bhi.w	d6952 <__aeabi_dmul+0xde>
   d6bf4:	ebb5 0c03 	subs.w	ip, r5, r3
   d6bf8:	bf04      	itt	eq
   d6bfa:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c02:	f150 0000 	adcs.w	r0, r0, #0
   d6c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c0a:	bd70      	pop	{r4, r5, r6, pc}
   d6c0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6c10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6c14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6c18:	bfc2      	ittt	gt
   d6c1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6c1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6c22:	bd70      	popgt	{r4, r5, r6, pc}
   d6c24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c28:	f04f 0e00 	mov.w	lr, #0
   d6c2c:	3c01      	subs	r4, #1
   d6c2e:	e690      	b.n	d6952 <__aeabi_dmul+0xde>
   d6c30:	ea45 0e06 	orr.w	lr, r5, r6
   d6c34:	e68d      	b.n	d6952 <__aeabi_dmul+0xde>
   d6c36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c3a:	ea94 0f0c 	teq	r4, ip
   d6c3e:	bf08      	it	eq
   d6c40:	ea95 0f0c 	teqeq	r5, ip
   d6c44:	f43f af3b 	beq.w	d6abe <__aeabi_dmul+0x24a>
   d6c48:	ea94 0f0c 	teq	r4, ip
   d6c4c:	d10a      	bne.n	d6c64 <__aeabi_ddiv+0x19c>
   d6c4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c52:	f47f af34 	bne.w	d6abe <__aeabi_dmul+0x24a>
   d6c56:	ea95 0f0c 	teq	r5, ip
   d6c5a:	f47f af25 	bne.w	d6aa8 <__aeabi_dmul+0x234>
   d6c5e:	4610      	mov	r0, r2
   d6c60:	4619      	mov	r1, r3
   d6c62:	e72c      	b.n	d6abe <__aeabi_dmul+0x24a>
   d6c64:	ea95 0f0c 	teq	r5, ip
   d6c68:	d106      	bne.n	d6c78 <__aeabi_ddiv+0x1b0>
   d6c6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6c6e:	f43f aefd 	beq.w	d6a6c <__aeabi_dmul+0x1f8>
   d6c72:	4610      	mov	r0, r2
   d6c74:	4619      	mov	r1, r3
   d6c76:	e722      	b.n	d6abe <__aeabi_dmul+0x24a>
   d6c78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c7c:	bf18      	it	ne
   d6c7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c82:	f47f aec5 	bne.w	d6a10 <__aeabi_dmul+0x19c>
   d6c86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6c8a:	f47f af0d 	bne.w	d6aa8 <__aeabi_dmul+0x234>
   d6c8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6c92:	f47f aeeb 	bne.w	d6a6c <__aeabi_dmul+0x1f8>
   d6c96:	e712      	b.n	d6abe <__aeabi_dmul+0x24a>

000d6c98 <__gedf2>:
   d6c98:	f04f 3cff 	mov.w	ip, #4294967295
   d6c9c:	e006      	b.n	d6cac <__cmpdf2+0x4>
   d6c9e:	bf00      	nop

000d6ca0 <__ledf2>:
   d6ca0:	f04f 0c01 	mov.w	ip, #1
   d6ca4:	e002      	b.n	d6cac <__cmpdf2+0x4>
   d6ca6:	bf00      	nop

000d6ca8 <__cmpdf2>:
   d6ca8:	f04f 0c01 	mov.w	ip, #1
   d6cac:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6cb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6cb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6cb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6cbc:	bf18      	it	ne
   d6cbe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6cc2:	d01b      	beq.n	d6cfc <__cmpdf2+0x54>
   d6cc4:	b001      	add	sp, #4
   d6cc6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6cca:	bf0c      	ite	eq
   d6ccc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6cd0:	ea91 0f03 	teqne	r1, r3
   d6cd4:	bf02      	ittt	eq
   d6cd6:	ea90 0f02 	teqeq	r0, r2
   d6cda:	2000      	moveq	r0, #0
   d6cdc:	4770      	bxeq	lr
   d6cde:	f110 0f00 	cmn.w	r0, #0
   d6ce2:	ea91 0f03 	teq	r1, r3
   d6ce6:	bf58      	it	pl
   d6ce8:	4299      	cmppl	r1, r3
   d6cea:	bf08      	it	eq
   d6cec:	4290      	cmpeq	r0, r2
   d6cee:	bf2c      	ite	cs
   d6cf0:	17d8      	asrcs	r0, r3, #31
   d6cf2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6cf6:	f040 0001 	orr.w	r0, r0, #1
   d6cfa:	4770      	bx	lr
   d6cfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d04:	d102      	bne.n	d6d0c <__cmpdf2+0x64>
   d6d06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6d0a:	d107      	bne.n	d6d1c <__cmpdf2+0x74>
   d6d0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d14:	d1d6      	bne.n	d6cc4 <__cmpdf2+0x1c>
   d6d16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6d1a:	d0d3      	beq.n	d6cc4 <__cmpdf2+0x1c>
   d6d1c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6d20:	4770      	bx	lr
   d6d22:	bf00      	nop

000d6d24 <__aeabi_cdrcmple>:
   d6d24:	4684      	mov	ip, r0
   d6d26:	4610      	mov	r0, r2
   d6d28:	4662      	mov	r2, ip
   d6d2a:	468c      	mov	ip, r1
   d6d2c:	4619      	mov	r1, r3
   d6d2e:	4663      	mov	r3, ip
   d6d30:	e000      	b.n	d6d34 <__aeabi_cdcmpeq>
   d6d32:	bf00      	nop

000d6d34 <__aeabi_cdcmpeq>:
   d6d34:	b501      	push	{r0, lr}
   d6d36:	f7ff ffb7 	bl	d6ca8 <__cmpdf2>
   d6d3a:	2800      	cmp	r0, #0
   d6d3c:	bf48      	it	mi
   d6d3e:	f110 0f00 	cmnmi.w	r0, #0
   d6d42:	bd01      	pop	{r0, pc}

000d6d44 <__aeabi_dcmpeq>:
   d6d44:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d48:	f7ff fff4 	bl	d6d34 <__aeabi_cdcmpeq>
   d6d4c:	bf0c      	ite	eq
   d6d4e:	2001      	moveq	r0, #1
   d6d50:	2000      	movne	r0, #0
   d6d52:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d56:	bf00      	nop

000d6d58 <__aeabi_dcmplt>:
   d6d58:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d5c:	f7ff ffea 	bl	d6d34 <__aeabi_cdcmpeq>
   d6d60:	bf34      	ite	cc
   d6d62:	2001      	movcc	r0, #1
   d6d64:	2000      	movcs	r0, #0
   d6d66:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d6a:	bf00      	nop

000d6d6c <__aeabi_dcmple>:
   d6d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d70:	f7ff ffe0 	bl	d6d34 <__aeabi_cdcmpeq>
   d6d74:	bf94      	ite	ls
   d6d76:	2001      	movls	r0, #1
   d6d78:	2000      	movhi	r0, #0
   d6d7a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d7e:	bf00      	nop

000d6d80 <__aeabi_dcmpge>:
   d6d80:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d84:	f7ff ffce 	bl	d6d24 <__aeabi_cdrcmple>
   d6d88:	bf94      	ite	ls
   d6d8a:	2001      	movls	r0, #1
   d6d8c:	2000      	movhi	r0, #0
   d6d8e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d92:	bf00      	nop

000d6d94 <__aeabi_dcmpgt>:
   d6d94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d98:	f7ff ffc4 	bl	d6d24 <__aeabi_cdrcmple>
   d6d9c:	bf34      	ite	cc
   d6d9e:	2001      	movcc	r0, #1
   d6da0:	2000      	movcs	r0, #0
   d6da2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6da6:	bf00      	nop

000d6da8 <__aeabi_dcmpun>:
   d6da8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6dac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6db0:	d102      	bne.n	d6db8 <__aeabi_dcmpun+0x10>
   d6db2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6db6:	d10a      	bne.n	d6dce <__aeabi_dcmpun+0x26>
   d6db8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6dbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6dc0:	d102      	bne.n	d6dc8 <__aeabi_dcmpun+0x20>
   d6dc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6dc6:	d102      	bne.n	d6dce <__aeabi_dcmpun+0x26>
   d6dc8:	f04f 0000 	mov.w	r0, #0
   d6dcc:	4770      	bx	lr
   d6dce:	f04f 0001 	mov.w	r0, #1
   d6dd2:	4770      	bx	lr

000d6dd4 <__aeabi_d2iz>:
   d6dd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6dd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6ddc:	d215      	bcs.n	d6e0a <__aeabi_d2iz+0x36>
   d6dde:	d511      	bpl.n	d6e04 <__aeabi_d2iz+0x30>
   d6de0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6de4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6de8:	d912      	bls.n	d6e10 <__aeabi_d2iz+0x3c>
   d6dea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6dee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6df2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6dfa:	fa23 f002 	lsr.w	r0, r3, r2
   d6dfe:	bf18      	it	ne
   d6e00:	4240      	negne	r0, r0
   d6e02:	4770      	bx	lr
   d6e04:	f04f 0000 	mov.w	r0, #0
   d6e08:	4770      	bx	lr
   d6e0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6e0e:	d105      	bne.n	d6e1c <__aeabi_d2iz+0x48>
   d6e10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6e14:	bf08      	it	eq
   d6e16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6e1a:	4770      	bx	lr
   d6e1c:	f04f 0000 	mov.w	r0, #0
   d6e20:	4770      	bx	lr
   d6e22:	bf00      	nop

000d6e24 <__cxa_atexit>:
   d6e24:	b510      	push	{r4, lr}
   d6e26:	4c05      	ldr	r4, [pc, #20]	; (d6e3c <__cxa_atexit+0x18>)
   d6e28:	4613      	mov	r3, r2
   d6e2a:	b12c      	cbz	r4, d6e38 <__cxa_atexit+0x14>
   d6e2c:	460a      	mov	r2, r1
   d6e2e:	4601      	mov	r1, r0
   d6e30:	2002      	movs	r0, #2
   d6e32:	f3af 8000 	nop.w
   d6e36:	bd10      	pop	{r4, pc}
   d6e38:	4620      	mov	r0, r4
   d6e3a:	bd10      	pop	{r4, pc}
   d6e3c:	00000000 	.word	0x00000000

000d6e40 <memcpy>:
   d6e40:	b510      	push	{r4, lr}
   d6e42:	1e43      	subs	r3, r0, #1
   d6e44:	440a      	add	r2, r1
   d6e46:	4291      	cmp	r1, r2
   d6e48:	d004      	beq.n	d6e54 <memcpy+0x14>
   d6e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6e52:	e7f8      	b.n	d6e46 <memcpy+0x6>
   d6e54:	bd10      	pop	{r4, pc}

000d6e56 <memset>:
   d6e56:	4402      	add	r2, r0
   d6e58:	4603      	mov	r3, r0
   d6e5a:	4293      	cmp	r3, r2
   d6e5c:	d002      	beq.n	d6e64 <memset+0xe>
   d6e5e:	f803 1b01 	strb.w	r1, [r3], #1
   d6e62:	e7fa      	b.n	d6e5a <memset+0x4>
   d6e64:	4770      	bx	lr
	...

000d6e68 <srand>:
   d6e68:	b538      	push	{r3, r4, r5, lr}
   d6e6a:	4b12      	ldr	r3, [pc, #72]	; (d6eb4 <srand+0x4c>)
   d6e6c:	681c      	ldr	r4, [r3, #0]
   d6e6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6e70:	4605      	mov	r5, r0
   d6e72:	b9d3      	cbnz	r3, d6eaa <srand+0x42>
   d6e74:	2018      	movs	r0, #24
   d6e76:	f7fe f9f3 	bl	d5260 <malloc>
   d6e7a:	f243 330e 	movw	r3, #13070	; 0x330e
   d6e7e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6e80:	8003      	strh	r3, [r0, #0]
   d6e82:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6e86:	8043      	strh	r3, [r0, #2]
   d6e88:	f241 2334 	movw	r3, #4660	; 0x1234
   d6e8c:	8083      	strh	r3, [r0, #4]
   d6e8e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6e92:	80c3      	strh	r3, [r0, #6]
   d6e94:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6e98:	8103      	strh	r3, [r0, #8]
   d6e9a:	2305      	movs	r3, #5
   d6e9c:	8143      	strh	r3, [r0, #10]
   d6e9e:	230b      	movs	r3, #11
   d6ea0:	8183      	strh	r3, [r0, #12]
   d6ea2:	2201      	movs	r2, #1
   d6ea4:	2300      	movs	r3, #0
   d6ea6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6eac:	2200      	movs	r2, #0
   d6eae:	611d      	str	r5, [r3, #16]
   d6eb0:	615a      	str	r2, [r3, #20]
   d6eb2:	bd38      	pop	{r3, r4, r5, pc}
   d6eb4:	2003debc 	.word	0x2003debc

000d6eb8 <strlen>:
   d6eb8:	4603      	mov	r3, r0
   d6eba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6ebe:	2a00      	cmp	r2, #0
   d6ec0:	d1fb      	bne.n	d6eba <strlen+0x2>
   d6ec2:	1a18      	subs	r0, r3, r0
   d6ec4:	3801      	subs	r0, #1
   d6ec6:	4770      	bx	lr

000d6ec8 <dynalib_user>:
   d6ec8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6ed8:	0000 0000                                   ....

000d6edc <_ZTVN8particle13__SPISettingsE>:
	...
   d6ee4:	40dd 000d                                   .@..

000d6ee8 <_ZTV6SdFile>:
	...
   d6ef0:	40af 000d 40b1 000d 40c5 000d 40bf 000d     .@...@...@...@..
   d6f00:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d6f10:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d6f20:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d6f30:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d6f40:	2545 3e64 6d00 6369 2031 203d 6925 7c20     E%d>.mic1 = %i |
   d6f50:	6d20 6369 2032 203d 6925 7c20 6d20 6369      mic2 = %i | mic
   d6f60:	2033 203d 6925 7c20 5420 6d69 2065 203d     3 = %i | Time = 
   d6f70:	6925 000a 6177 7469 6e69 2067 6f66 2072     %i..waiting for 
   d6f80:	6f73 6e75 0064 3154 3d20 2520 2069 207c     sound.T1 = %i | 
   d6f90:	3254 3d20 2520 2069 207c 3354 3d20 2520     T2 = %i | T3 = %
   d6fa0:	0a69 4100 3d20 2520 2069 207c 2042 203d     i..A = %i | B = 
   d6fb0:	6925 000a 2054 203d 6925 000a 2058 203d     %i..T = %i..X = 
   d6fc0:	6925 7c20 5920 3d20 2520 0a69 0000 0000     %i | Y = %i.....

000d6fd0 <_ZTVN5spark13EthernetClassE>:
	...
   d6fd8:	52ff 000d 52f5 000d 52eb 000d 52e1 000d     .R...R...R...R..
   d6fe8:	52d5 000d 52c9 000d 52bd 000d 52b5 000d     .R...R...R...R..
   d6ff8:	52ab 000d 52a1 000d 5d7d 000d               .R...R..}]..

000d7004 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7004:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d7014:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d7024:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d7034:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d7044:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d7054:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d7064:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d7074:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d7084:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d7094:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d70a4:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d70b4:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d70c4:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d70d4:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d70e4:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d70f4:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d7104:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d7114:	0065 0000                                   e...

000d7118 <_ZTV9IPAddress>:
	...
   d7120:	57b1 000d 57a1 000d 57a3 000d               .W...W...W..

000d712c <_ZTV9USBSerial>:
	...
   d7134:	5889 000d 58d9 000d 58e7 000d 5515 000d     .X...X...X...U..
   d7144:	58c5 000d 588b 000d 58a1 000d 58d3 000d     .X...X...X...X..
   d7154:	58b7 000d 5885 000d                         .X...X..

000d715c <_ZTV11USARTSerial>:
	...
   d7164:	5995 000d 59e5 000d 59f3 000d 5515 000d     .Y...Y...Y...U..
   d7174:	59a9 000d 59cb 000d 59b7 000d 59df 000d     .Y...Y...Y...Y..
   d7184:	5997 000d 599b 000d                         .Y...Y..

000d718c <_ZTV7TwoWire>:
	...
   d7194:	5a99 000d 5ae3 000d 5abb 000d 5a9b 000d     .Z...Z...Z...Z..
   d71a4:	5ac3 000d 5acb 000d 5ad3 000d 5adb 000d     .Z...Z...Z...Z..

000d71b4 <_ZTVN5spark9MeshClassE>:
	...
   d71bc:	5b7b 000d 5b71 000d 5b67 000d 5b5d 000d     {[..q[..g[..][..
   d71cc:	5b51 000d 5b45 000d 5b39 000d 5b31 000d     Q[..E[..9[..1[..
   d71dc:	5b27 000d 5b1d 000d 5d7d 000d               '[...[..}]..

000d71e8 <_ZTVN5spark9WiFiClassE>:
	...
   d71f0:	5cf7 000d 5ced 000d 5ce3 000d 5c99 000d     .\...\...\...\..
   d7200:	5cd7 000d 5ccb 000d 5cbf 000d 5cb7 000d     .\...\...\...\..
   d7210:	5cad 000d 5ca3 000d 5d7d 000d               .\...\..}]..

000d721c <_ZTVN5spark12NetworkClassE>:
	...
   d7224:	5d15 000d 5d1f 000d 5d29 000d 5d33 000d     .]...]..)]..3]..
   d7234:	5d3d 000d 5d49 000d 5d55 000d 5d61 000d     =]..I]..U]..a]..
   d7244:	5d69 000d 5d73 000d 5d7d 000d               i]..s]..}]..

000d7250 <_ZSt7nothrow>:
   d7250:	0000 0000 7173 7472 0000 0000               ....sqrt....

000d725c <__sf_fake_stdin>:
	...

000d727c <__sf_fake_stdout>:
	...

000d729c <__sf_fake_stderr>:
	...
   d72bc:	0043                                        C.

000d72be <link_const_variable_data_end>:
	...

000d72c0 <link_constructors_location>:
   d72c0:	000d4401 	.word	0x000d4401
   d72c4:	000d4585 	.word	0x000d4585
   d72c8:	000d4599 	.word	0x000d4599
   d72cc:	000d459d 	.word	0x000d459d
   d72d0:	000d45bb 	.word	0x000d45bb
   d72d4:	000d45bf 	.word	0x000d45bf
   d72d8:	000d45c3 	.word	0x000d45c3
   d72dc:	000d45c7 	.word	0x000d45c7
   d72e0:	000d4895 	.word	0x000d4895
   d72e4:	000d48b9 	.word	0x000d48b9
   d72e8:	000d48bd 	.word	0x000d48bd
   d72ec:	000d4aa3 	.word	0x000d4aa3
   d72f0:	000d4aa7 	.word	0x000d4aa7
   d72f4:	000d4aab 	.word	0x000d4aab
   d72f8:	000d4dd9 	.word	0x000d4dd9
   d72fc:	000d4ddd 	.word	0x000d4ddd
   d7300:	000d4de1 	.word	0x000d4de1
   d7304:	000d4e65 	.word	0x000d4e65
   d7308:	000d5309 	.word	0x000d5309
   d730c:	000d54a9 	.word	0x000d54a9
   d7310:	000d54ed 	.word	0x000d54ed
   d7314:	000d5631 	.word	0x000d5631
   d7318:	000d5641 	.word	0x000d5641
   d731c:	000d5675 	.word	0x000d5675
   d7320:	000d5c49 	.word	0x000d5c49
   d7324:	000d5d01 	.word	0x000d5d01
   d7328:	000d5e49 	.word	0x000d5e49
   d732c:	000d6011 	.word	0x000d6011
   d7330:	000d6095 	.word	0x000d6095
   d7334:	000d6159 	.word	0x000d6159
   d7338:	000d621d 	.word	0x000d621d

000d733c <link_constructors_end>:
   d733c:	00000000 	.word	0x00000000
