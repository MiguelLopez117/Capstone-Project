
c:/Users/User/Documents/IoT/Capstone-Project/Capstone_Project/target/1.5.2/argon/Capstone_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000057a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d97c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003be00  000d97c4  0001be00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00002964  2003be8c  2003be8c  0002be8c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9850  000d9850  00029850  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9878  000d9878  00029878  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0019f47e  00000000  00000000  0002987c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001f9ee  00000000  00000000  001c8cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002c80d  00000000  00000000  001e86e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e70  00000000  00000000  00214ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005c08  00000000  00000000  00217d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004dbdd  00000000  00000000  0021d96d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00054846  00000000  00000000  0026b54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001117ba  00000000  00000000  002bfd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000edd4  00000000  00000000  003d154c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f81e 	bl	d9072 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f823 	bl	d9088 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003be00 	.word	0x2003be00
   d404c:	000d97c4 	.word	0x000d97c4
   d4050:	2003be8c 	.word	0x2003be8c
   d4054:	2003be8c 	.word	0x2003be8c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 f953 	bl	d7308 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d97b8 	.word	0x000d97b8
   d4084:	000d9738 	.word	0x000d9738

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b944 	b.w	d4314 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fcbb 	bl	d4a08 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 b8f9 	b.w	d728c <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 be1b 	b.w	d6cd4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 be21 	b.w	d6ce4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 be1f 	b.w	d6ce4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40b6:	4770      	bx	lr

000d40b8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40ba:	4602      	mov	r2, r0
   d40bc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40be:	7913      	ldrb	r3, [r2, #4]
   d40c0:	6895      	ldr	r5, [r2, #8]
   d40c2:	b133      	cbz	r3, d40d2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40c4:	b93d      	cbnz	r5, d40d6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40c6:	490c      	ldr	r1, [pc, #48]	; (d40f8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40c8:	b004      	add	sp, #16
   d40ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40ce:	f002 bfb5 	b.w	d703c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40d2:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40d4:	e000      	b.n	d40d8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40d6:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40d8:	7b16      	ldrb	r6, [r2, #12]
   d40da:	4c0a      	ldr	r4, [pc, #40]	; (d4104 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40dc:	490a      	ldr	r1, [pc, #40]	; (d4108 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40de:	7b52      	ldrb	r2, [r2, #13]
   d40e0:	9202      	str	r2, [sp, #8]
   d40e2:	2e01      	cmp	r6, #1
   d40e4:	bf08      	it	eq
   d40e6:	4621      	moveq	r1, r4
   d40e8:	9101      	str	r1, [sp, #4]
   d40ea:	9500      	str	r5, [sp, #0]
   d40ec:	4a07      	ldr	r2, [pc, #28]	; (d410c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d40ee:	2100      	movs	r1, #0
   d40f0:	f002 ffe7 	bl	d70c2 <_ZN5Print11printf_implEbPKcz>
  }
   d40f4:	b004      	add	sp, #16
   d40f6:	bd70      	pop	{r4, r5, r6, pc}
   d40f8:	000d9189 	.word	0x000d9189
   d40fc:	000d9510 	.word	0x000d9510
   d4100:	000d9178 	.word	0x000d9178
   d4104:	000d9181 	.word	0x000d9181
   d4108:	000d9185 	.word	0x000d9185
   d410c:	000d919f 	.word	0x000d919f

000d4110 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4110:	3008      	adds	r0, #8
   d4112:	f001 bccf 	b.w	d5ab4 <_ZN7FatFile5writeEPKvj>

000d4116 <_ZN6SdFileD0Ev>:
   d4116:	b510      	push	{r4, lr}
   d4118:	212c      	movs	r1, #44	; 0x2c
   d411a:	4604      	mov	r4, r0
   d411c:	f004 f81c 	bl	d8158 <_ZdlPvj>
   d4120:	4620      	mov	r0, r4
   d4122:	bd10      	pop	{r4, pc}

000d4124 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d4124:	b510      	push	{r4, lr}
   d4126:	4b03      	ldr	r3, [pc, #12]	; (d4134 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d4128:	6003      	str	r3, [r0, #0]
   d412a:	4604      	mov	r4, r0
   d412c:	f002 fa46 	bl	d65bc <_ZN10JsonWriterD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}
   d4134:	000d9170 	.word	0x000d9170

000d4138 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d4138:	b510      	push	{r4, lr}
   d413a:	4604      	mov	r4, r0
   d413c:	f7ff fff2 	bl	d4124 <_ZN16JsonWriterStaticILj256EED1Ev>
   d4140:	4620      	mov	r0, r4
   d4142:	f44f 7198 	mov.w	r1, #304	; 0x130
   d4146:	f004 f807 	bl	d8158 <_ZdlPvj>
   d414a:	4620      	mov	r0, r4
   d414c:	bd10      	pop	{r4, pc}

000d414e <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d414e:	b507      	push	{r0, r1, r2, lr}
   d4150:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4152:	2201      	movs	r2, #1
   d4154:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4158:	3008      	adds	r0, #8
   d415a:	4619      	mov	r1, r3
   d415c:	f001 fcaa 	bl	d5ab4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4160:	b003      	add	sp, #12
   d4162:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4168 <_Z19getMicrophoneValuesv>:
  }
  Serial.printf("T1 = %i | T2 = %i | T3 = %i\n",T1, T2, T3);
}

void getMicrophoneValues()
{
   d4168:	b508      	push	{r3, lr}
  val1 = analogRead(micro1);
   d416a:	4b09      	ldr	r3, [pc, #36]	; (d4190 <_Z19getMicrophoneValuesv+0x28>)
   d416c:	8818      	ldrh	r0, [r3, #0]
   d416e:	f003 ff8d 	bl	d808c <analogRead>
   d4172:	4b08      	ldr	r3, [pc, #32]	; (d4194 <_Z19getMicrophoneValuesv+0x2c>)
   d4174:	6018      	str	r0, [r3, #0]
  val2 = analogRead(micro2);
   d4176:	4b08      	ldr	r3, [pc, #32]	; (d4198 <_Z19getMicrophoneValuesv+0x30>)
   d4178:	8818      	ldrh	r0, [r3, #0]
   d417a:	f003 ff87 	bl	d808c <analogRead>
   d417e:	4b07      	ldr	r3, [pc, #28]	; (d419c <_Z19getMicrophoneValuesv+0x34>)
   d4180:	6018      	str	r0, [r3, #0]
  val3 = analogRead(micro3);
   d4182:	4b07      	ldr	r3, [pc, #28]	; (d41a0 <_Z19getMicrophoneValuesv+0x38>)
   d4184:	8818      	ldrh	r0, [r3, #0]
   d4186:	f003 ff81 	bl	d808c <analogRead>
   d418a:	4b06      	ldr	r3, [pc, #24]	; (d41a4 <_Z19getMicrophoneValuesv+0x3c>)
   d418c:	6018      	str	r0, [r3, #0]
   d418e:	bd08      	pop	{r3, pc}
   d4190:	2003be10 	.word	0x2003be10
   d4194:	2003be9c 	.word	0x2003be9c
   d4198:	2003be14 	.word	0x2003be14
   d419c:	2003bec8 	.word	0x2003bec8
   d41a0:	2003be18 	.word	0x2003be18
   d41a4:	2003bed0 	.word	0x2003bed0

000d41a8 <_Z16getTimingOfSoundv>:
     Serial.printf("mic1 = %i | mic2 = %i | mic3 = %i | Time = %i\n",val1,val2,val3);
   }
}

void getTimingOfSound()
{
   d41a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  delay(2000);
   d41ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  T1 = 0;
   d41b0:	4c27      	ldr	r4, [pc, #156]	; (d4250 <_Z16getTimingOfSoundv+0xa8>)
  T2 = 0;
   d41b2:	4d28      	ldr	r5, [pc, #160]	; (d4254 <_Z16getTimingOfSoundv+0xac>)
  T3 = 0;
   d41b4:	4e28      	ldr	r6, [pc, #160]	; (d4258 <_Z16getTimingOfSoundv+0xb0>)
   }
}

void getTimingOfSound()
{
  delay(2000);
   d41b6:	f003 f81a 	bl	d71ee <delay>
  T1 = 0;
   d41ba:	2300      	movs	r3, #0
   d41bc:	6023      	str	r3, [r4, #0]
  T2 = 0;
   d41be:	602b      	str	r3, [r5, #0]
  T3 = 0;
   d41c0:	6033      	str	r3, [r6, #0]
  Serial.println("waiting for sound");
   d41c2:	f003 fc65 	bl	d7a90 <_Z16_fetch_usbserialv>
   d41c6:	4925      	ldr	r1, [pc, #148]	; (d425c <_Z16getTimingOfSoundv+0xb4>)
   d41c8:	f002 ff4f 	bl	d706a <_ZN5Print7printlnEPKc>
  while((T1 == 0) || (T2 == 0) || (T3 == 0))
   d41cc:	46a0      	mov	r8, r4
   d41ce:	46a9      	mov	r9, r5
   d41d0:	4637      	mov	r7, r6
   d41d2:	6823      	ldr	r3, [r4, #0]
   d41d4:	b11b      	cbz	r3, d41de <_Z16getTimingOfSoundv+0x36>
   d41d6:	682b      	ldr	r3, [r5, #0]
   d41d8:	b10b      	cbz	r3, d41de <_Z16getTimingOfSoundv+0x36>
   d41da:	6833      	ldr	r3, [r6, #0]
   d41dc:	bb33      	cbnz	r3, d422c <_Z16getTimingOfSoundv+0x84>
  {
    getMicrophoneValues();
   d41de:	f7ff ffc3 	bl	d4168 <_Z19getMicrophoneValuesv>
    if((T1 == 0) && (val1 > threshold))
   d41e2:	6823      	ldr	r3, [r4, #0]
   d41e4:	b94b      	cbnz	r3, d41fa <_Z16getTimingOfSoundv+0x52>
   d41e6:	4b1e      	ldr	r3, [pc, #120]	; (d4260 <_Z16getTimingOfSoundv+0xb8>)
   d41e8:	681a      	ldr	r2, [r3, #0]
   d41ea:	4b1e      	ldr	r3, [pc, #120]	; (d4264 <_Z16getTimingOfSoundv+0xbc>)
   d41ec:	681b      	ldr	r3, [r3, #0]
   d41ee:	429a      	cmp	r2, r3
   d41f0:	dd03      	ble.n	d41fa <_Z16getTimingOfSoundv+0x52>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d41f2:	f002 fbd3 	bl	d699c <HAL_Timer_Get_Micro_Seconds>
    {
      T1 = micros();
   d41f6:	f8c8 0000 	str.w	r0, [r8]
    }
    if((T2 == 0) && (val2 > threshold))
   d41fa:	682b      	ldr	r3, [r5, #0]
   d41fc:	b94b      	cbnz	r3, d4212 <_Z16getTimingOfSoundv+0x6a>
   d41fe:	4b1a      	ldr	r3, [pc, #104]	; (d4268 <_Z16getTimingOfSoundv+0xc0>)
   d4200:	681a      	ldr	r2, [r3, #0]
   d4202:	4b18      	ldr	r3, [pc, #96]	; (d4264 <_Z16getTimingOfSoundv+0xbc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	429a      	cmp	r2, r3
   d4208:	dd03      	ble.n	d4212 <_Z16getTimingOfSoundv+0x6a>
   d420a:	f002 fbc7 	bl	d699c <HAL_Timer_Get_Micro_Seconds>
    {
      T2 = micros();
   d420e:	f8c9 0000 	str.w	r0, [r9]
    }
    if((T3 == 0) && (val3 > threshold))
   d4212:	6833      	ldr	r3, [r6, #0]
   d4214:	2b00      	cmp	r3, #0
   d4216:	d1dc      	bne.n	d41d2 <_Z16getTimingOfSoundv+0x2a>
   d4218:	4b14      	ldr	r3, [pc, #80]	; (d426c <_Z16getTimingOfSoundv+0xc4>)
   d421a:	681a      	ldr	r2, [r3, #0]
   d421c:	4b11      	ldr	r3, [pc, #68]	; (d4264 <_Z16getTimingOfSoundv+0xbc>)
   d421e:	681b      	ldr	r3, [r3, #0]
   d4220:	429a      	cmp	r2, r3
   d4222:	ddd6      	ble.n	d41d2 <_Z16getTimingOfSoundv+0x2a>
   d4224:	f002 fbba 	bl	d699c <HAL_Timer_Get_Micro_Seconds>
    {
      T3 = micros();
   d4228:	6038      	str	r0, [r7, #0]
   d422a:	e7d2      	b.n	d41d2 <_Z16getTimingOfSoundv+0x2a>
    }
  }
  Serial.printf("T1 = %i | T2 = %i | T3 = %i\n",T1, T2, T3);
   d422c:	f003 fc30 	bl	d7a90 <_Z16_fetch_usbserialv>
   d4230:	4b09      	ldr	r3, [pc, #36]	; (d4258 <_Z16getTimingOfSoundv+0xb0>)
   d4232:	4a0f      	ldr	r2, [pc, #60]	; (d4270 <_Z16getTimingOfSoundv+0xc8>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	9301      	str	r3, [sp, #4]
   d4238:	4b06      	ldr	r3, [pc, #24]	; (d4254 <_Z16getTimingOfSoundv+0xac>)
   d423a:	681b      	ldr	r3, [r3, #0]
   d423c:	9300      	str	r3, [sp, #0]
   d423e:	4b04      	ldr	r3, [pc, #16]	; (d4250 <_Z16getTimingOfSoundv+0xa8>)
   d4240:	2100      	movs	r1, #0
   d4242:	681b      	ldr	r3, [r3, #0]
   d4244:	f002 ff3d 	bl	d70c2 <_ZN5Print11printf_implEbPKcz>
}
   d4248:	b003      	add	sp, #12
   d424a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d424e:	bf00      	nop
   d4250:	2003bea0 	.word	0x2003bea0
   d4254:	2003bea4 	.word	0x2003bea4
   d4258:	2003bea8 	.word	0x2003bea8
   d425c:	000d91ec 	.word	0x000d91ec
   d4260:	2003be9c 	.word	0x2003be9c
   d4264:	2003be1c 	.word	0x2003be1c
   d4268:	2003bec8 	.word	0x2003bec8
   d426c:	2003bed0 	.word	0x2003bed0
   d4270:	000d91fe 	.word	0x000d91fe

000d4274 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>:
    pr->print(F("error: "));
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
   d4274:	b508      	push	{r3, lr}
   d4276:	4604      	mov	r4, r0
    initErrorHalt(&Serial);
   d4278:	f003 fc0a 	bl	d7a90 <_Z16_fetch_usbserialv>
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d427c:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
    initErrorHalt(&Serial);
   d4280:	4605      	mov	r5, r0
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d4282:	b32b      	cbz	r3, d42d0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5c>
      pr->println(F("Can't access SD card. Do not reformat."));
   d4284:	491c      	ldr	r1, [pc, #112]	; (d42f8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x84>)
   d4286:	f002 fefa 	bl	d707e <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
   d428a:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d428e:	2b20      	cmp	r3, #32
   d4290:	d103      	bne.n	d429a <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x26>
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
   d4292:	491a      	ldr	r1, [pc, #104]	; (d42fc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x88>)
   d4294:	4628      	mov	r0, r5
   d4296:	f002 fef2 	bl	d707e <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  /** %Print any SD error code.
   * \param[in] pr Print device.
   */
  void errorPrint(Print* pr) {
    if (!cardErrorCode()) {
   d429a:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d429e:	b33b      	cbz	r3, d42f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>
      return;
    }
    pr->print(F("SD errorCode: 0X"));
   d42a0:	4917      	ldr	r1, [pc, #92]	; (d4300 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x8c>)
   d42a2:	4628      	mov	r0, r5
   d42a4:	f002 fed1 	bl	d704a <_ZN5Print5printEPK19__FlashStringHelper>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d42a8:	2210      	movs	r2, #16
   d42aa:	f894 1460 	ldrb.w	r1, [r4, #1120]	; 0x460
   d42ae:	4628      	mov	r0, r5
   d42b0:	f002 fee7 	bl	d7082 <_ZN5Print11printNumberEmh>
    pr->print(cardErrorCode(), HEX);
    pr->print(F(",0X"));
   d42b4:	4913      	ldr	r1, [pc, #76]	; (d4304 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x90>)
   d42b6:	4628      	mov	r0, r5
   d42b8:	f002 fec7 	bl	d704a <_ZN5Print5printEPK19__FlashStringHelper>
   d42bc:	2210      	movs	r2, #16
   d42be:	f894 1469 	ldrb.w	r1, [r4, #1129]	; 0x469
   d42c2:	4628      	mov	r0, r5
   d42c4:	f002 fedd 	bl	d7082 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d42c8:	4628      	mov	r0, r5
   d42ca:	f002 fec2 	bl	d7052 <_ZN5Print7printlnEv>
   d42ce:	e00f      	b.n	d42f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>
      pr->println(F("Can't access SD card. Do not reformat."));
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
      }
      errorPrint(pr);
    } else if (vol()->fatType() == 0) {
   d42d0:	79e3      	ldrb	r3, [r4, #7]
   d42d2:	b91b      	cbnz	r3, d42dc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x68>
      pr->println(F("Invalid format, reformat SD."));
   d42d4:	490c      	ldr	r1, [pc, #48]	; (d4308 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x94>)
   d42d6:	f002 fed2 	bl	d707e <_ZN5Print7printlnEPK19__FlashStringHelper>
   d42da:	e009      	b.n	d42f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>
    } else if (!vwd()->isOpen()) {
   d42dc:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d42e0:	b91b      	cbnz	r3, d42ea <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x76>
      pr->println(F("Can't open root directory."));
   d42e2:	490a      	ldr	r1, [pc, #40]	; (d430c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x98>)
   d42e4:	f002 fecb 	bl	d707e <_ZN5Print7printlnEPK19__FlashStringHelper>
   d42e8:	e002      	b.n	d42f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>
    } else {
      pr->println(F("No error found."));
   d42ea:	4909      	ldr	r1, [pc, #36]	; (d4310 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x9c>)
   d42ec:	f002 fec7 	bl	d707e <_ZN5Print7printlnEPK19__FlashStringHelper>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d42f0:	f002 fb6c 	bl	d69cc <os_thread_yield>
   d42f4:	e7fc      	b.n	d42f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>
   d42f6:	bf00      	nop
   d42f8:	000d921b 	.word	0x000d921b
   d42fc:	000d9242 	.word	0x000d9242
   d4300:	000d9272 	.word	0x000d9272
   d4304:	000d9283 	.word	0x000d9283
   d4308:	000d9287 	.word	0x000d9287
   d430c:	000d92a4 	.word	0x000d92a4
   d4310:	000d92bf 	.word	0x000d92bf

000d4314 <setup>:

int locationX, locationY;                   //Utilizing map-function to displah location using neopixels like on a quadrant
float pointX, pointY;

// setup() runs once, when the device is first turned on.
void setup() {
   d4314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d4316:	f003 fbbb 	bl	d7a90 <_Z16_fetch_usbserialv>
   d431a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d431e:	f003 fbab 	bl	d7a78 <_ZN9USBSerial5beginEl>

  pixelX.begin();
   d4322:	482c      	ldr	r0, [pc, #176]	; (d43d4 <setup+0xc0>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4324:	4c2c      	ldr	r4, [pc, #176]	; (d43d8 <setup+0xc4>)
   d4326:	f000 fc0c 	bl	d4b42 <_ZN17Adafruit_NeoPixel5beginEv>
  pixelY.begin();
   d432a:	482c      	ldr	r0, [pc, #176]	; (d43dc <setup+0xc8>)
   d432c:	f000 fc09 	bl	d4b42 <_ZN17Adafruit_NeoPixel5beginEv>
  pixelX.clear();
   d4330:	4828      	ldr	r0, [pc, #160]	; (d43d4 <setup+0xc0>)
   d4332:	f000 fe0e 	bl	d4f52 <_ZN17Adafruit_NeoPixel5clearEv>
  pixelY.clear();
   d4336:	4829      	ldr	r0, [pc, #164]	; (d43dc <setup+0xc8>)
   d4338:	f000 fe0b 	bl	d4f52 <_ZN17Adafruit_NeoPixel5clearEv>

  pinMode(micro1, INPUT);
   d433c:	4b28      	ldr	r3, [pc, #160]	; (d43e0 <setup+0xcc>)
   d433e:	2100      	movs	r1, #0
   d4340:	8818      	ldrh	r0, [r3, #0]
   d4342:	f003 fe79 	bl	d8038 <pinMode>
  pinMode(micro2, INPUT);
   d4346:	4b27      	ldr	r3, [pc, #156]	; (d43e4 <setup+0xd0>)
   d4348:	2100      	movs	r1, #0
   d434a:	8818      	ldrh	r0, [r3, #0]
   d434c:	f003 fe74 	bl	d8038 <pinMode>
  pinMode(micro3, INPUT);
   d4350:	4b25      	ldr	r3, [pc, #148]	; (d43e8 <setup+0xd4>)
   d4352:	2100      	movs	r1, #0
   d4354:	8818      	ldrh	r0, [r3, #0]
   d4356:	f003 fe6f 	bl	d8038 <pinMode>
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d435a:	4b24      	ldr	r3, [pc, #144]	; (d43ec <setup+0xd8>)
   d435c:	4a24      	ldr	r2, [pc, #144]	; (d43f0 <setup+0xdc>)
   d435e:	9300      	str	r3, [sp, #0]
   d4360:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d4364:	2300      	movs	r3, #0
   d4366:	f88d 3004 	strb.w	r3, [sp, #4]
   d436a:	9202      	str	r2, [sp, #8]
   d436c:	2501      	movs	r5, #1
   d436e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4372:	220e      	movs	r2, #14
   d4374:	466b      	mov	r3, sp
   d4376:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d437a:	4630      	mov	r0, r6
   d437c:	f88d 500c 	strb.w	r5, [sp, #12]
   d4380:	f001 fee0 	bl	d6144 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4384:	b310      	cbz	r0, d43cc <setup+0xb8>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d4386:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d438a:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d438c:	f001 fb3c 	bl	d5a08 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4390:	4629      	mov	r1, r5
   d4392:	4620      	mov	r0, r4
   d4394:	f001 fd7f 	bl	d5e96 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4398:	4601      	mov	r1, r0
   d439a:	b140      	cbz	r0, d43ae <setup+0x9a>
   d439c:	4c0e      	ldr	r4, [pc, #56]	; (d43d8 <setup+0xc4>)
   d439e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d43a2:	4621      	mov	r1, r4
   d43a4:	4628      	mov	r0, r5
   d43a6:	f001 f95a 	bl	d565e <_ZN7FatFile8openRootEP9FatVolume>
   d43aa:	b178      	cbz	r0, d43cc <setup+0xb8>
   d43ac:	e005      	b.n	d43ba <setup+0xa6>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d43ae:	4620      	mov	r0, r4
   d43b0:	f001 fd71 	bl	d5e96 <_ZN9FatVolume4initEh>
   d43b4:	2800      	cmp	r0, #0
   d43b6:	d1f1      	bne.n	d439c <setup+0x88>
   d43b8:	e008      	b.n	d43cc <setup+0xb8>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d43ba:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d43be:	f013 0f70 	tst.w	r3, #112	; 0x70
   d43c2:	d003      	beq.n	d43cc <setup+0xb8>
      return false;
    }
    m_cwd = dir;
   d43c4:	4b0b      	ldr	r3, [pc, #44]	; (d43f4 <setup+0xe0>)
   d43c6:	601d      	str	r5, [r3, #0]
  if (BASE_NAME_SIZE > 6) 
  {
    Serial.println("FILE_BASE_NAME too long");
    while(1);
  }
}
   d43c8:	b004      	add	sp, #16
   d43ca:	bd70      	pop	{r4, r5, r6, pc}
  pinMode(micro2, INPUT);
  pinMode(micro3, INPUT);

  if (!sd.begin(chipSelect, SD_SCK_MHZ(50))) 
  {
    sd.initErrorHalt();  
   d43cc:	4802      	ldr	r0, [pc, #8]	; (d43d8 <setup+0xc4>)
   d43ce:	f7ff ff51 	bl	d4274 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>
   d43d2:	bf00      	nop
   d43d4:	2003bed4 	.word	0x2003bed4
   d43d8:	2003bf28 	.word	0x2003bf28
   d43dc:	2003beac 	.word	0x2003beac
   d43e0:	2003be10 	.word	0x2003be10
   d43e4:	2003be14 	.word	0x2003be14
   d43e8:	2003be18 	.word	0x2003be18
   d43ec:	000d914c 	.word	0x000d914c
   d43f0:	02faf080 	.word	0x02faf080
   d43f4:	2003e3cc 	.word	0x2003e3cc

000d43f8 <_ZN5Print6printfIIffEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d43f8:	b530      	push	{r4, r5, lr}
   d43fa:	4604      	mov	r4, r0
   d43fc:	b087      	sub	sp, #28
    {
        return this->printf_impl(false, format, args...);
   d43fe:	ee10 0a90 	vmov	r0, s1
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4402:	460d      	mov	r5, r1
   d4404:	ed8d 0a05 	vstr	s0, [sp, #20]
    {
        return this->printf_impl(false, format, args...);
   d4408:	f004 fa9a 	bl	d8940 <__aeabi_f2d>
   d440c:	ed9d 0a05 	vldr	s0, [sp, #20]
   d4410:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4414:	ee10 0a10 	vmov	r0, s0
   d4418:	f004 fa92 	bl	d8940 <__aeabi_f2d>
   d441c:	462a      	mov	r2, r5
   d441e:	e9cd 0100 	strd	r0, r1, [sp]
   d4422:	2100      	movs	r1, #0
   d4424:	4620      	mov	r0, r4
   d4426:	f002 fe4c 	bl	d70c2 <_ZN5Print11printf_implEbPKcz>
    }
   d442a:	b007      	add	sp, #28
   d442c:	bd30      	pop	{r4, r5, pc}
	...

000d4430 <_Z23getTriangulationOfSoundv>:
  val3 = analogRead(micro3);
  //Serial.printf("Microphone 1 = %i | Microphone 2 = %i | Microphone 3 = %i\n", val1, val2, val3);
}

void getTriangulationOfSound()
{
   d4430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4434:	ed2d 8b04 	vpush	{d8-d9}
   d4438:	b089      	sub	sp, #36	; 0x24
  getTimingOfSound();
   d443a:	f7ff feb5 	bl	d41a8 <_Z16getTimingOfSoundv>
  A = ((T2 - T1)/1000000.0)*343;               
   d443e:	4b78      	ldr	r3, [pc, #480]	; (d4620 <_Z23getTriangulationOfSoundv+0x1f0>)
   d4440:	4d78      	ldr	r5, [pc, #480]	; (d4624 <_Z23getTriangulationOfSoundv+0x1f4>)
   d4442:	681c      	ldr	r4, [r3, #0]
   d4444:	4b78      	ldr	r3, [pc, #480]	; (d4628 <_Z23getTriangulationOfSoundv+0x1f8>)
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d4446:	f8df a204 	ldr.w	sl, [pc, #516]	; d464c <_Z23getTriangulationOfSoundv+0x21c>
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
   d444a:	6818      	ldr	r0, [r3, #0]
  B = ((T3 - T1)/1000000.0)*343; 
   d444c:	4e77      	ldr	r6, [pc, #476]	; (d462c <_Z23getTriangulationOfSoundv+0x1fc>)
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d444e:	4f78      	ldr	r7, [pc, #480]	; (d4630 <_Z23getTriangulationOfSoundv+0x200>)
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d4450:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d4650 <_Z23getTriangulationOfSoundv+0x220>
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
   d4454:	1b00      	subs	r0, r0, r4
   d4456:	f004 fa61 	bl	d891c <__aeabi_i2d>
   d445a:	a36d      	add	r3, pc, #436	; (adr r3, d4610 <_Z23getTriangulationOfSoundv+0x1e0>)
   d445c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4460:	f004 fbec 	bl	d8c3c <__aeabi_ddiv>
   d4464:	a36c      	add	r3, pc, #432	; (adr r3, d4618 <_Z23getTriangulationOfSoundv+0x1e8>)
   d4466:	e9d3 2300 	ldrd	r2, r3, [r3]
   d446a:	f004 fabd 	bl	d89e8 <__aeabi_dmul>
   d446e:	f004 fd93 	bl	d8f98 <__aeabi_d2f>
  B = ((T3 - T1)/1000000.0)*343; 
   d4472:	4b70      	ldr	r3, [pc, #448]	; (d4634 <_Z23getTriangulationOfSoundv+0x204>)
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
   d4474:	6028      	str	r0, [r5, #0]
   d4476:	ee09 0a10 	vmov	s18, r0
  B = ((T3 - T1)/1000000.0)*343; 
   d447a:	6818      	ldr	r0, [r3, #0]
   d447c:	1b00      	subs	r0, r0, r4
   d447e:	f004 fa4d 	bl	d891c <__aeabi_i2d>
   d4482:	a363      	add	r3, pc, #396	; (adr r3, d4610 <_Z23getTriangulationOfSoundv+0x1e0>)
   d4484:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4488:	f004 fbd8 	bl	d8c3c <__aeabi_ddiv>
   d448c:	a362      	add	r3, pc, #392	; (adr r3, d4618 <_Z23getTriangulationOfSoundv+0x1e8>)
   d448e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4492:	f004 faa9 	bl	d89e8 <__aeabi_dmul>
   d4496:	f004 fd7f 	bl	d8f98 <__aeabi_d2f>
   d449a:	ee08 0a90 	vmov	s17, r0
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d449e:	ee28 7aa8 	vmul.f32	s14, s17, s17
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44a2:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d44a6:	eef0 6a47 	vmov.f32	s13, s14
   d44aa:	eee9 6a09 	vfma.f32	s13, s18, s18
   d44ae:	4c62      	ldr	r4, [pc, #392]	; (d4638 <_Z23getTriangulationOfSoundv+0x208>)

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
   d44b0:	6030      	str	r0, [r6, #0]
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d44b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44b6:	eeb0 6a48 	vmov.f32	s12, s16
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d44ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44be:	eea9 6a09 	vfma.f32	s12, s18, s18
   d44c2:	ee77 7a67 	vsub.f32	s15, s14, s15
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d44c6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44ca:	ee68 8aa7 	vmul.f32	s17, s17, s15
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d44ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44d2:	eee9 8a06 	vfma.f32	s17, s18, s12
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d44d6:	ee67 7a87 	vmul.f32	s15, s15, s14
   d44da:	ee26 6a06 	vmul.f32	s12, s12, s12
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d44de:	edc4 6a00 	vstr	s13, [r4]
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d44e2:	eee6 7a07 	vfma.f32	s15, s12, s14
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d44e6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   d44ea:	ee66 6a87 	vmul.f32	s13, s13, s14
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d44ee:	edca 7a00 	vstr	s15, [sl]
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d44f2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44f6:	edc7 8a00 	vstr	s17, [r7]
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d44fa:	eee8 7aa8 	vfma.f32	s15, s17, s17
   d44fe:	ee17 0a90 	vmov	r0, s15
   d4502:	f004 fa1d 	bl	d8940 <__aeabi_f2d>
   d4506:	ec41 0b10 	vmov	d0, r0, r1
   d450a:	f003 ff83 	bl	d8414 <sqrt>
   d450e:	eef1 7a68 	vneg.f32	s15, s17
   d4512:	ec53 2b10 	vmov	r2, r3, d0
   d4516:	ee17 0a90 	vmov	r0, s15
   d451a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d451e:	f004 fa0f 	bl	d8940 <__aeabi_f2d>
   d4522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d4526:	f004 f8ab 	bl	d8680 <__aeabi_dsub>
   d452a:	edd4 7a00 	vldr	s15, [r4]
   d452e:	ee77 7aa7 	vadd.f32	s15, s15, s15
   d4532:	4680      	mov	r8, r0
   d4534:	ee17 0a90 	vmov	r0, s15
   d4538:	4689      	mov	r9, r1
   d453a:	f004 fa01 	bl	d8940 <__aeabi_f2d>
   d453e:	460b      	mov	r3, r1
   d4540:	4602      	mov	r2, r0
   d4542:	4649      	mov	r1, r9
   d4544:	4640      	mov	r0, r8
   d4546:	f004 fb79 	bl	d8c3c <__aeabi_ddiv>
   d454a:	f004 fd25 	bl	d8f98 <__aeabi_d2f>
  X = -((A*T) + ((sq(A)-1)/2));
   d454e:	edd5 6a00 	vldr	s13, [r5]
   d4552:	f8df 8100 	ldr.w	r8, [pc, #256]	; d4654 <_Z23getTriangulationOfSoundv+0x224>
  Y = -((B*T) + ((sq(B)-1)/2));
   d4556:	f8df 9100 	ldr.w	r9, [pc, #256]	; d4658 <_Z23getTriangulationOfSoundv+0x228>
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d455a:	f8cb 0000 	str.w	r0, [fp]
  X = -((A*T) + ((sq(A)-1)/2));
   d455e:	eef0 7a48 	vmov.f32	s15, s16
   d4562:	eee6 7aa6 	vfma.f32	s15, s13, s13
   d4566:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d456a:	ee07 0a10 	vmov	s14, r0
  X = -((A*T) + ((sq(A)-1)/2));
   d456e:	ee67 7a86 	vmul.f32	s15, s15, s12
   d4572:	eee7 7a26 	vfma.f32	s15, s14, s13
   d4576:	eef1 7a67 	vneg.f32	s15, s15
   d457a:	edc8 7a00 	vstr	s15, [r8]
  Y = -((B*T) + ((sq(B)-1)/2));
   d457e:	edd6 7a00 	vldr	s15, [r6]
   d4582:	eea7 8aa7 	vfma.f32	s16, s15, s15
   d4586:	ee28 8a06 	vmul.f32	s16, s16, s12
   d458a:	eea7 8a27 	vfma.f32	s16, s14, s15
   d458e:	eeb1 8a48 	vneg.f32	s16, s16
   d4592:	ed89 8a00 	vstr	s16, [r9]
  Serial.printf("A = %0.6f | B = %0.6f\n", A, B);
   d4596:	f003 fa7b 	bl	d7a90 <_Z16_fetch_usbserialv>
   d459a:	edd6 0a00 	vldr	s1, [r6]
   d459e:	ed95 0a00 	vldr	s0, [r5]
   d45a2:	4926      	ldr	r1, [pc, #152]	; (d463c <_Z23getTriangulationOfSoundv+0x20c>)
   d45a4:	f7ff ff28 	bl	d43f8 <_ZN5Print6printfIIffEEEjPKcDpT_>
  Serial.printf("T = %0.2f\n", T);
   d45a8:	f003 fa72 	bl	d7a90 <_Z16_fetch_usbserialv>
   d45ac:	4605      	mov	r5, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45ae:	f8db 0000 	ldr.w	r0, [fp]
   d45b2:	f004 f9c5 	bl	d8940 <__aeabi_f2d>
   d45b6:	4a22      	ldr	r2, [pc, #136]	; (d4640 <_Z23getTriangulationOfSoundv+0x210>)
   d45b8:	e9cd 0100 	strd	r0, r1, [sp]
   d45bc:	2100      	movs	r1, #0
   d45be:	4628      	mov	r0, r5
   d45c0:	f002 fd7f 	bl	d70c2 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("X = %0.2f | Y = %0.2f\n", X, Y);
   d45c4:	f003 fa64 	bl	d7a90 <_Z16_fetch_usbserialv>
   d45c8:	edd9 0a00 	vldr	s1, [r9]
   d45cc:	ed98 0a00 	vldr	s0, [r8]
   d45d0:	491c      	ldr	r1, [pc, #112]	; (d4644 <_Z23getTriangulationOfSoundv+0x214>)
   d45d2:	f7ff ff11 	bl	d43f8 <_ZN5Print6printfIIffEEEjPKcDpT_>
  Serial.printf("a = %0.2f | b = %0.2f | c = %0.2f\n",a,b,c);
   d45d6:	f003 fa5b 	bl	d7a90 <_Z16_fetch_usbserialv>
   d45da:	4605      	mov	r5, r0
   d45dc:	f8da 0000 	ldr.w	r0, [sl]
   d45e0:	f004 f9ae 	bl	d8940 <__aeabi_f2d>
   d45e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d45e8:	6838      	ldr	r0, [r7, #0]
   d45ea:	f004 f9a9 	bl	d8940 <__aeabi_f2d>
   d45ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d45f2:	6820      	ldr	r0, [r4, #0]
   d45f4:	f004 f9a4 	bl	d8940 <__aeabi_f2d>
   d45f8:	4a13      	ldr	r2, [pc, #76]	; (d4648 <_Z23getTriangulationOfSoundv+0x218>)
   d45fa:	e9cd 0100 	strd	r0, r1, [sp]
   d45fe:	2100      	movs	r1, #0
   d4600:	4628      	mov	r0, r5
   d4602:	f002 fd5e 	bl	d70c2 <_ZN5Print11printf_implEbPKcz>
}
   d4606:	b009      	add	sp, #36	; 0x24
   d4608:	ecbd 8b04 	vpop	{d8-d9}
   d460c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4610:	00000000 	.word	0x00000000
   d4614:	412e8480 	.word	0x412e8480
   d4618:	00000000 	.word	0x00000000
   d461c:	40757000 	.word	0x40757000
   d4620:	2003bea0 	.word	0x2003bea0
   d4624:	2003e3c0 	.word	0x2003e3c0
   d4628:	2003bea4 	.word	0x2003bea4
   d462c:	2003e3c4 	.word	0x2003e3c4
   d4630:	2003beec 	.word	0x2003beec
   d4634:	2003bea8 	.word	0x2003bea8
   d4638:	2003bee8 	.word	0x2003bee8
   d463c:	000d92cf 	.word	0x000d92cf
   d4640:	000d92e6 	.word	0x000d92e6
   d4644:	000d92f1 	.word	0x000d92f1
   d4648:	000d9308 	.word	0x000d9308
   d464c:	2003bec0 	.word	0x2003bec0
   d4650:	2003bec4 	.word	0x2003bec4
   d4654:	2003c3b4 	.word	0x2003c3b4
   d4658:	2003becc 	.word	0x2003becc
   d465c:	00000000 	.word	0x00000000

000d4660 <_Z6SDCardv>:
    }
  }
}

void SDCard()
{
   d4660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4664:	b08b      	sub	sp, #44	; 0x2c
  Serial.printf("Starting Data Logging \n");
   d4666:	f003 fa13 	bl	d7a90 <_Z16_fetch_usbserialv>
   d466a:	4a53      	ldr	r2, [pc, #332]	; (d47b8 <_Z6SDCardv+0x158>)
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d466c:	4c53      	ldr	r4, [pc, #332]	; (d47bc <_Z6SDCardv+0x15c>)
   d466e:	2100      	movs	r1, #0
   d4670:	f002 fd27 	bl	d70c2 <_ZN5Print11printf_implEbPKcz>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4674:	2500      	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4676:	2300      	movs	r3, #0
   d4678:	4a50      	ldr	r2, [pc, #320]	; (d47bc <_Z6SDCardv+0x15c>)
   d467a:	4951      	ldr	r1, [pc, #324]	; (d47c0 <_Z6SDCardv+0x160>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d467c:	f88d 5004 	strb.w	r5, [sp, #4]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4680:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4682:	f88d 5005 	strb.w	r5, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4686:	f001 f9c6 	bl	d5a16 <_ZN7FatFile4openEPS_PKci>

  while (sd.exists(fileName)) 
   d468a:	b198      	cbz	r0, d46b4 <_Z6SDCardv+0x54>
  {
    if (fileName[BASE_NAME_SIZE + 1] != '9') 
   d468c:	7963      	ldrb	r3, [r4, #5]
   d468e:	2b39      	cmp	r3, #57	; 0x39
   d4690:	d002      	beq.n	d4698 <_Z6SDCardv+0x38>
    {
      fileName[BASE_NAME_SIZE + 1]++;
   d4692:	3301      	adds	r3, #1
   d4694:	7163      	strb	r3, [r4, #5]
   d4696:	e7ee      	b.n	d4676 <_Z6SDCardv+0x16>
    } 
    else if (fileName[BASE_NAME_SIZE] != '9') 
   d4698:	7923      	ldrb	r3, [r4, #4]
   d469a:	2b39      	cmp	r3, #57	; 0x39
   d469c:	d004      	beq.n	d46a8 <_Z6SDCardv+0x48>
    {
      fileName[BASE_NAME_SIZE + 1] = '0';
   d469e:	2230      	movs	r2, #48	; 0x30
      fileName[BASE_NAME_SIZE]++;
   d46a0:	3301      	adds	r3, #1
    {
      fileName[BASE_NAME_SIZE + 1]++;
    } 
    else if (fileName[BASE_NAME_SIZE] != '9') 
    {
      fileName[BASE_NAME_SIZE + 1] = '0';
   d46a2:	7162      	strb	r2, [r4, #5]
      fileName[BASE_NAME_SIZE]++;
   d46a4:	7123      	strb	r3, [r4, #4]
   d46a6:	e7e6      	b.n	d4676 <_Z6SDCardv+0x16>
    } 
    else 
    {
      Serial.println("Can't create file name");
   d46a8:	f003 f9f2 	bl	d7a90 <_Z16_fetch_usbserialv>
   d46ac:	4945      	ldr	r1, [pc, #276]	; (d47c4 <_Z6SDCardv+0x164>)
   d46ae:	f002 fcdc 	bl	d706a <_ZN5Print7printlnEPKc>
   d46b2:	e7fe      	b.n	d46b2 <_Z6SDCardv+0x52>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d46b4:	4944      	ldr	r1, [pc, #272]	; (d47c8 <_Z6SDCardv+0x168>)
   d46b6:	4a41      	ldr	r2, [pc, #260]	; (d47bc <_Z6SDCardv+0x15c>)
   d46b8:	6809      	ldr	r1, [r1, #0]
   d46ba:	4844      	ldr	r0, [pc, #272]	; (d47cc <_Z6SDCardv+0x16c>)
   d46bc:	f640 2301 	movw	r3, #2561	; 0xa01
   d46c0:	f001 f9a9 	bl	d5a16 <_ZN7FatFile4openEPS_PKci>
      while(1);
    }
  }

  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) 
   d46c4:	b920      	cbnz	r0, d46d0 <_Z6SDCardv+0x70>
  {
    Serial.println("file.open");
   d46c6:	f003 f9e3 	bl	d7a90 <_Z16_fetch_usbserialv>
   d46ca:	4941      	ldr	r1, [pc, #260]	; (d47d0 <_Z6SDCardv+0x170>)
   d46cc:	f002 fccd 	bl	d706a <_ZN5Print7printlnEPKc>
  }
  Serial.printf("Logging to: %s \n",fileName);
   d46d0:	f003 f9de 	bl	d7a90 <_Z16_fetch_usbserialv>
   d46d4:	4b39      	ldr	r3, [pc, #228]	; (d47bc <_Z6SDCardv+0x15c>)
   d46d6:	4a3f      	ldr	r2, [pc, #252]	; (d47d4 <_Z6SDCardv+0x174>)

  //For Loop here for array capturing sound
  if(val1 > threshold)
   d46d8:	4e3f      	ldr	r6, [pc, #252]	; (d47d8 <_Z6SDCardv+0x178>)
   d46da:	4c40      	ldr	r4, [pc, #256]	; (d47dc <_Z6SDCardv+0x17c>)
   d46dc:	2100      	movs	r1, #0
   d46de:	f002 fcf0 	bl	d70c2 <_ZN5Print11printf_implEbPKcz>
   d46e2:	4b3f      	ldr	r3, [pc, #252]	; (d47e0 <_Z6SDCardv+0x180>)
   d46e4:	6832      	ldr	r2, [r6, #0]
   d46e6:	681b      	ldr	r3, [r3, #0]
   d46e8:	429a      	cmp	r2, r3
   d46ea:	dd32      	ble.n	d4752 <_Z6SDCardv+0xf2>
  {
    for(i = 0 ; i < arraySize ; i++)
    {
      while(micros()-lastTime < 500)
   d46ec:	4f3d      	ldr	r7, [pc, #244]	; (d47e4 <_Z6SDCardv+0x184>)
  Serial.printf("Logging to: %s \n",fileName);

  //For Loop here for array capturing sound
  if(val1 > threshold)
  {
    for(i = 0 ; i < arraySize ; i++)
   d46ee:	2300      	movs	r3, #0
   d46f0:	6023      	str	r3, [r4, #0]
    {
      while(micros()-lastTime < 500)
   d46f2:	46b8      	mov	r8, r7
  Serial.printf("Logging to: %s \n",fileName);

  //For Loop here for array capturing sound
  if(val1 > threshold)
  {
    for(i = 0 ; i < arraySize ; i++)
   d46f4:	6823      	ldr	r3, [r4, #0]
   d46f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   d46fa:	da2a      	bge.n	d4752 <_Z6SDCardv+0xf2>
   d46fc:	f002 f94e 	bl	d699c <HAL_Timer_Get_Micro_Seconds>
    {
      while(micros()-lastTime < 500)
   d4700:	683b      	ldr	r3, [r7, #0]
   d4702:	1ac0      	subs	r0, r0, r3
   d4704:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4708:	d3f8      	bcc.n	d46fc <_Z6SDCardv+0x9c>
   d470a:	f002 f947 	bl	d699c <HAL_Timer_Get_Micro_Seconds>
      {
        //do nothing
      }
      lastTime = micros();
   d470e:	f8c8 0000 	str.w	r0, [r8]
      getMicrophoneValues();
   d4712:	f7ff fd29 	bl	d4168 <_Z19getMicrophoneValuesv>
      soundWaveArray[i][0] = micros()/1000000.0;
   d4716:	f8d4 9000 	ldr.w	r9, [r4]
   d471a:	4d33      	ldr	r5, [pc, #204]	; (d47e8 <_Z6SDCardv+0x188>)
   d471c:	f002 f93e 	bl	d699c <HAL_Timer_Get_Micro_Seconds>
   d4720:	f004 f8ec 	bl	d88fc <__aeabi_ui2d>
   d4724:	a322      	add	r3, pc, #136	; (adr r3, d47b0 <_Z6SDCardv+0x150>)
   d4726:	e9d3 2300 	ldrd	r2, r3, [r3]
   d472a:	f004 fa87 	bl	d8c3c <__aeabi_ddiv>
   d472e:	f004 fc33 	bl	d8f98 <__aeabi_d2f>
      soundWaveArray[i][1] = val1;
   d4732:	edd6 7a00 	vldr	s15, [r6]
   d4736:	6823      	ldr	r3, [r4, #0]
      {
        //do nothing
      }
      lastTime = micros();
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
   d4738:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
      soundWaveArray[i][1] = val1;
   d473c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4740:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
  Serial.printf("Logging to: %s \n",fileName);

  //For Loop here for array capturing sound
  if(val1 > threshold)
  {
    for(i = 0 ; i < arraySize ; i++)
   d4744:	3301      	adds	r3, #1
      {
        //do nothing
      }
      lastTime = micros();
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
   d4746:	f8c9 0000 	str.w	r0, [r9]
  Serial.printf("Logging to: %s \n",fileName);

  //For Loop here for array capturing sound
  if(val1 > threshold)
  {
    for(i = 0 ; i < arraySize ; i++)
   d474a:	6023      	str	r3, [r4, #0]
        //do nothing
      }
      lastTime = micros();
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
      soundWaveArray[i][1] = val1;
   d474c:	edc5 7a01 	vstr	s15, [r5, #4]
  Serial.printf("Logging to: %s \n",fileName);

  //For Loop here for array capturing sound
  if(val1 > threshold)
  {
    for(i = 0 ; i < arraySize ; i++)
   d4750:	e7d0      	b.n	d46f4 <_Z6SDCardv+0x94>
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
      soundWaveArray[i][1] = val1;
    }
  }
  for(i = 0; i < arraySize; i++)
   d4752:	2300      	movs	r3, #0
   d4754:	4d21      	ldr	r5, [pc, #132]	; (d47dc <_Z6SDCardv+0x17c>)
  {
    file.printf("%0.8f , %0.2f\n",soundWaveArray[i][0], soundWaveArray[i][1]);
   d4756:	4e24      	ldr	r6, [pc, #144]	; (d47e8 <_Z6SDCardv+0x188>)
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
      soundWaveArray[i][1] = val1;
    }
  }
  for(i = 0; i < arraySize; i++)
   d4758:	6023      	str	r3, [r4, #0]
   d475a:	6823      	ldr	r3, [r4, #0]
   d475c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   d4760:	da0d      	bge.n	d477e <_Z6SDCardv+0x11e>
  {
    file.printf("%0.8f , %0.2f\n",soundWaveArray[i][0], soundWaveArray[i][1]);
   d4762:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   d4766:	edd3 0a01 	vldr	s1, [r3, #4]
   d476a:	ed93 0a00 	vldr	s0, [r3]
   d476e:	491f      	ldr	r1, [pc, #124]	; (d47ec <_Z6SDCardv+0x18c>)
   d4770:	481f      	ldr	r0, [pc, #124]	; (d47f0 <_Z6SDCardv+0x190>)
   d4772:	f7ff fe41 	bl	d43f8 <_ZN5Print6printfIIffEEEjPKcDpT_>
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
      soundWaveArray[i][1] = val1;
    }
  }
  for(i = 0; i < arraySize; i++)
   d4776:	682b      	ldr	r3, [r5, #0]
   d4778:	3301      	adds	r3, #1
   d477a:	602b      	str	r3, [r5, #0]
   d477c:	e7ed      	b.n	d475a <_Z6SDCardv+0xfa>
  {
    file.printf("%0.8f , %0.2f\n",soundWaveArray[i][0], soundWaveArray[i][1]);
  }
  file.close();
   d477e:	4813      	ldr	r0, [pc, #76]	; (d47cc <_Z6SDCardv+0x16c>)
   d4780:	f001 f942 	bl	d5a08 <_ZN7FatFile5closeEv>
  Serial.printf("Done \n");
   d4784:	f003 f984 	bl	d7a90 <_Z16_fetch_usbserialv>
   d4788:	4a1a      	ldr	r2, [pc, #104]	; (d47f4 <_Z6SDCardv+0x194>)
   d478a:	2100      	movs	r1, #0
   d478c:	f002 fc99 	bl	d70c2 <_ZN5Print11printf_implEbPKcz>
  delay(2000);
   d4790:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4794:	f002 fd2b 	bl	d71ee <delay>
  Serial.printf("Ready for next data log \n");
   d4798:	f003 f97a 	bl	d7a90 <_Z16_fetch_usbserialv>
   d479c:	4a16      	ldr	r2, [pc, #88]	; (d47f8 <_Z6SDCardv+0x198>)
   d479e:	2100      	movs	r1, #0
   d47a0:	f002 fc8f 	bl	d70c2 <_ZN5Print11printf_implEbPKcz>
}
   d47a4:	b00b      	add	sp, #44	; 0x2c
   d47a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d47aa:	bf00      	nop
   d47ac:	f3af 8000 	nop.w
   d47b0:	00000000 	.word	0x00000000
   d47b4:	412e8480 	.word	0x412e8480
   d47b8:	000d932b 	.word	0x000d932b
   d47bc:	2003be00 	.word	0x2003be00
   d47c0:	2003c364 	.word	0x2003c364
   d47c4:	000d9343 	.word	0x000d9343
   d47c8:	2003e3cc 	.word	0x2003e3cc
   d47cc:	2003befc 	.word	0x2003befc
   d47d0:	000d935a 	.word	0x000d935a
   d47d4:	000d9364 	.word	0x000d9364
   d47d8:	2003be9c 	.word	0x2003be9c
   d47dc:	2003bef0 	.word	0x2003bef0
   d47e0:	2003be1c 	.word	0x2003be1c
   d47e4:	2003c3ac 	.word	0x2003c3ac
   d47e8:	2003c3b8 	.word	0x2003c3b8
   d47ec:	000d9375 	.word	0x000d9375
   d47f0:	2003bef4 	.word	0x2003bef4
   d47f4:	000d9384 	.word	0x000d9384
   d47f8:	000d938b 	.word	0x000d938b

000d47fc <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d47fc:	b538      	push	{r3, r4, r5, lr}
   d47fe:	4604      	mov	r4, r0
   d4800:	ed2d 8b02 	vpush	{d8}
   d4804:	460d      	mov	r5, r1
   d4806:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d480a:	f001 ffdf 	bl	d67cc <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d480e:	4629      	mov	r1, r5
   d4810:	4620      	mov	r0, r4
   d4812:	2201      	movs	r2, #1
   d4814:	f001 ff4e 	bl	d66b4 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4818:	4620      	mov	r0, r4
   d481a:	213a      	movs	r1, #58	; 0x3a
   d481c:	f001 fefe 	bl	d661c <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4820:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d4824:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4828:	4620      	mov	r0, r4
	}
   d482a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d482e:	f001 bff1 	b.w	d6814 <_ZN10JsonWriter11insertValueEf>
	...

000d4834 <_Z27recordLongitudeLatitudeDataff>:
  pixelY.setPixelColor(locationY,0,0,255);
  pixelY.show();
}

void recordLongitudeLatitudeData(float X, float Y)
{
   d4834:	b510      	push	{r4, lr}
   d4836:	ed2d 8b02 	vpush	{d8}
   d483a:	b0d2      	sub	sp, #328	; 0x148
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d483c:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4840:	a912      	add	r1, sp, #72	; 0x48
   d4842:	a806      	add	r0, sp, #24
   d4844:	eeb0 8a60 	vmov.f32	s16, s1
   d4848:	eef0 8a40 	vmov.f32	s17, s0
   d484c:	f001 fed4 	bl	d65f8 <_ZN10JsonWriterC1EPcj>
   d4850:	4b1d      	ldr	r3, [pc, #116]	; (d48c8 <_Z27recordLongitudeLatitudeDataff+0x94>)
   d4852:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4854:	227d      	movs	r2, #125	; 0x7d
   d4856:	217b      	movs	r1, #123	; 0x7b
   d4858:	a806      	add	r0, sp, #24
   d485a:	f001 ffc2 	bl	d67e2 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Longitud", X);
   d485e:	eeb0 0a68 	vmov.f32	s0, s17
   d4862:	491a      	ldr	r1, [pc, #104]	; (d48cc <_Z27recordLongitudeLatitudeDataff+0x98>)
   d4864:	a806      	add	r0, sp, #24
   d4866:	f7ff ffc9 	bl	d47fc <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Latitude", Y);
   d486a:	eeb0 0a48 	vmov.f32	s0, s16
   d486e:	4918      	ldr	r1, [pc, #96]	; (d48d0 <_Z27recordLongitudeLatitudeDataff+0x9c>)
   d4870:	a806      	add	r0, sp, #24
   d4872:	f7ff ffc3 	bl	d47fc <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4876:	a806      	add	r0, sp, #24
   d4878:	f001 fede 	bl	d6638 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d487c:	9b07      	ldr	r3, [sp, #28]
   d487e:	9303      	str	r3, [sp, #12]
   d4880:	4b14      	ldr	r3, [pc, #80]	; (d48d4 <_Z27recordLongitudeLatitudeDataff+0xa0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4882:	9a03      	ldr	r2, [sp, #12]
   d4884:	781b      	ldrb	r3, [r3, #0]
   d4886:	f88d 3000 	strb.w	r3, [sp]
   d488a:	4913      	ldr	r1, [pc, #76]	; (d48d8 <_Z27recordLongitudeLatitudeDataff+0xa4>)
   d488c:	233c      	movs	r3, #60	; 0x3c
   d488e:	a804      	add	r0, sp, #16
   d4890:	f002 fea8 	bl	d75e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4894:	9c05      	ldr	r4, [sp, #20]
   d4896:	b17c      	cbz	r4, d48b8 <_Z27recordLongitudeLatitudeDataff+0x84>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4898:	6863      	ldr	r3, [r4, #4]
   d489a:	3b01      	subs	r3, #1
   d489c:	6063      	str	r3, [r4, #4]
   d489e:	b95b      	cbnz	r3, d48b8 <_Z27recordLongitudeLatitudeDataff+0x84>
        {
          _M_dispose();
   d48a0:	6823      	ldr	r3, [r4, #0]
   d48a2:	4620      	mov	r0, r4
   d48a4:	689b      	ldr	r3, [r3, #8]
   d48a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d48a8:	68a3      	ldr	r3, [r4, #8]
   d48aa:	3b01      	subs	r3, #1
   d48ac:	60a3      	str	r3, [r4, #8]
   d48ae:	b91b      	cbnz	r3, d48b8 <_Z27recordLongitudeLatitudeDataff+0x84>
            _M_destroy();
   d48b0:	6823      	ldr	r3, [r4, #0]
   d48b2:	4620      	mov	r0, r4
   d48b4:	68db      	ldr	r3, [r3, #12]
   d48b6:	4798      	blx	r3
  pixelY.show();
}

void recordLongitudeLatitudeData(float X, float Y)
{
  JsonWriterStatic<256> jw;
   d48b8:	a806      	add	r0, sp, #24
   d48ba:	f7ff fc33 	bl	d4124 <_ZN16JsonWriterStaticILj256EED1Ev>

    jw.insertKeyValue("Longitud", X);
    jw.insertKeyValue("Latitude", Y);
  }
  Particle.publish("Noise",jw.getBuffer(), PRIVATE);
}
   d48be:	b052      	add	sp, #328	; 0x148
   d48c0:	ecbd 8b02 	vpop	{d8}
   d48c4:	bd10      	pop	{r4, pc}
   d48c6:	bf00      	nop
   d48c8:	000d9170 	.word	0x000d9170
   d48cc:	000d93a5 	.word	0x000d93a5
   d48d0:	000d93ae 	.word	0x000d93ae
   d48d4:	2003e3bc 	.word	0x2003e3bc
   d48d8:	000d93b7 	.word	0x000d93b7
   d48dc:	00000000 	.word	0x00000000

000d48e0 <_Z25showLocationWithNeopixelsv>:
  Serial.printf("X = %0.2f | Y = %0.2f\n", X, Y);
  Serial.printf("a = %0.2f | b = %0.2f | c = %0.2f\n",a,b,c);
}

void showLocationWithNeopixels()
{
   d48e0:	b570      	push	{r4, r5, r6, lr}
   d48e2:	ed2d 8b06 	vpush	{d8-d10}
  recordLongitudeLatitudeData(X, Y);
   d48e6:	4e40      	ldr	r6, [pc, #256]	; (d49e8 <_Z25showLocationWithNeopixelsv+0x108>)
   d48e8:	4c40      	ldr	r4, [pc, #256]	; (d49ec <_Z25showLocationWithNeopixelsv+0x10c>)
   d48ea:	edd6 0a00 	vldr	s1, [r6]
   d48ee:	ed94 0a00 	vldr	s0, [r4]
  getTriangulationOfSound();
  SDCard();
  pointX = X;
  locationX = map(pointX,0.0,1.0,0.0,31.0);
   d48f2:	4d3f      	ldr	r5, [pc, #252]	; (d49f0 <_Z25showLocationWithNeopixelsv+0x110>)
  Serial.printf("X = %0.2f | Y = %0.2f\n", X, Y);
  Serial.printf("a = %0.2f | b = %0.2f | c = %0.2f\n",a,b,c);
}

void showLocationWithNeopixels()
{
   d48f4:	b082      	sub	sp, #8
  recordLongitudeLatitudeData(X, Y);
   d48f6:	f7ff ff9d 	bl	d4834 <_Z27recordLongitudeLatitudeDataff>
  getTriangulationOfSound();
   d48fa:	f7ff fd99 	bl	d4430 <_Z23getTriangulationOfSoundv>
  SDCard();
   d48fe:	f7ff feaf 	bl	d4660 <_Z6SDCardv>
  pointX = X;
   d4902:	4b3c      	ldr	r3, [pc, #240]	; (d49f4 <_Z25showLocationWithNeopixelsv+0x114>)
   d4904:	6820      	ldr	r0, [r4, #0]
   d4906:	6018      	str	r0, [r3, #0]
  locationX = map(pointX,0.0,1.0,0.0,31.0);
   d4908:	f004 f81a 	bl	d8940 <__aeabi_f2d>
   d490c:	ed9f 8b30 	vldr	d8, [pc, #192]	; d49d0 <_Z25showLocationWithNeopixelsv+0xf0>
   d4910:	ed9f ab31 	vldr	d10, [pc, #196]	; d49d8 <_Z25showLocationWithNeopixelsv+0xf8>
   d4914:	eeb0 3a48 	vmov.f32	s6, s16
   d4918:	eef0 3a68 	vmov.f32	s7, s17
   d491c:	eeb0 1a48 	vmov.f32	s2, s16
   d4920:	eef0 1a68 	vmov.f32	s3, s17
   d4924:	ed9f 9b2e 	vldr	d9, [pc, #184]	; d49e0 <_Z25showLocationWithNeopixelsv+0x100>
   d4928:	eeb0 4a4a 	vmov.f32	s8, s20
   d492c:	eef0 4a6a 	vmov.f32	s9, s21
   d4930:	eeb0 2a49 	vmov.f32	s4, s18
   d4934:	eef0 2a69 	vmov.f32	s5, s19
   d4938:	ec41 0b10 	vmov	d0, r0, r1
   d493c:	f002 fc0e 	bl	d715c <_Z3mapddddd>
   d4940:	ec51 0b10 	vmov	r0, r1, d0
   d4944:	f004 fb00 	bl	d8f48 <__aeabi_d2iz>
  pixelX.clear();
   d4948:	4c2b      	ldr	r4, [pc, #172]	; (d49f8 <_Z25showLocationWithNeopixelsv+0x118>)
{
  recordLongitudeLatitudeData(X, Y);
  getTriangulationOfSound();
  SDCard();
  pointX = X;
  locationX = map(pointX,0.0,1.0,0.0,31.0);
   d494a:	6028      	str	r0, [r5, #0]
  pixelX.clear();
   d494c:	4620      	mov	r0, r4
   d494e:	f000 fb00 	bl	d4f52 <_ZN17Adafruit_NeoPixel5clearEv>
  pixelX.setPixelColor(locationX,255,0,0);
   d4952:	8829      	ldrh	r1, [r5, #0]
   d4954:	2500      	movs	r5, #0
   d4956:	22ff      	movs	r2, #255	; 0xff
   d4958:	462b      	mov	r3, r5
   d495a:	4620      	mov	r0, r4
   d495c:	9500      	str	r5, [sp, #0]
   d495e:	f000 fac9 	bl	d4ef4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  pixelX.show();
   d4962:	4620      	mov	r0, r4
   d4964:	f000 f924 	bl	d4bb0 <_ZN17Adafruit_NeoPixel4showEv>

  pointY = Y;
   d4968:	4b24      	ldr	r3, [pc, #144]	; (d49fc <_Z25showLocationWithNeopixelsv+0x11c>)
   d496a:	6830      	ldr	r0, [r6, #0]
   d496c:	6018      	str	r0, [r3, #0]
  locationY = map(pointY,0.0,1.0,0.0,31.0);
   d496e:	f003 ffe7 	bl	d8940 <__aeabi_f2d>
   d4972:	eeb0 4a4a 	vmov.f32	s8, s20
   d4976:	eef0 4a6a 	vmov.f32	s9, s21
   d497a:	eeb0 3a48 	vmov.f32	s6, s16
   d497e:	eef0 3a68 	vmov.f32	s7, s17
   d4982:	eeb0 2a49 	vmov.f32	s4, s18
   d4986:	eef0 2a69 	vmov.f32	s5, s19
   d498a:	eeb0 1a48 	vmov.f32	s2, s16
   d498e:	eef0 1a68 	vmov.f32	s3, s17
   d4992:	ec41 0b10 	vmov	d0, r0, r1
   d4996:	f002 fbe1 	bl	d715c <_Z3mapddddd>
   d499a:	ec51 0b10 	vmov	r0, r1, d0
   d499e:	f004 fad3 	bl	d8f48 <__aeabi_d2iz>
  pixelY.clear();
   d49a2:	4c17      	ldr	r4, [pc, #92]	; (d4a00 <_Z25showLocationWithNeopixelsv+0x120>)
  pixelX.clear();
  pixelX.setPixelColor(locationX,255,0,0);
  pixelX.show();

  pointY = Y;
  locationY = map(pointY,0.0,1.0,0.0,31.0);
   d49a4:	4e17      	ldr	r6, [pc, #92]	; (d4a04 <_Z25showLocationWithNeopixelsv+0x124>)
   d49a6:	6030      	str	r0, [r6, #0]
  pixelY.clear();
   d49a8:	4620      	mov	r0, r4
   d49aa:	f000 fad2 	bl	d4f52 <_ZN17Adafruit_NeoPixel5clearEv>
  pixelY.setPixelColor(locationY,0,0,255);
   d49ae:	23ff      	movs	r3, #255	; 0xff
   d49b0:	8831      	ldrh	r1, [r6, #0]
   d49b2:	9300      	str	r3, [sp, #0]
   d49b4:	4620      	mov	r0, r4
   d49b6:	462b      	mov	r3, r5
   d49b8:	462a      	mov	r2, r5
   d49ba:	f000 fa9b 	bl	d4ef4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  pixelY.show();
   d49be:	4620      	mov	r0, r4
}
   d49c0:	b002      	add	sp, #8
   d49c2:	ecbd 8b06 	vpop	{d8-d10}
   d49c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  pointY = Y;
  locationY = map(pointY,0.0,1.0,0.0,31.0);
  pixelY.clear();
  pixelY.setPixelColor(locationY,0,0,255);
  pixelY.show();
   d49ca:	f000 b8f1 	b.w	d4bb0 <_ZN17Adafruit_NeoPixel4showEv>
   d49ce:	bf00      	nop
	...
   d49dc:	403f0000 	.word	0x403f0000
   d49e0:	00000000 	.word	0x00000000
   d49e4:	3ff00000 	.word	0x3ff00000
   d49e8:	2003becc 	.word	0x2003becc
   d49ec:	2003c3b4 	.word	0x2003c3b4
   d49f0:	2003bf20 	.word	0x2003bf20
   d49f4:	2003e3b8 	.word	0x2003e3b8
   d49f8:	2003bed4 	.word	0x2003bed4
   d49fc:	2003c3b0 	.word	0x2003c3b0
   d4a00:	2003beac 	.word	0x2003beac
   d4a04:	2003bf24 	.word	0x2003bf24

000d4a08 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  showLocationWithNeopixels();
   d4a08:	f7ff bf6a 	b.w	d48e0 <_Z25showLocationWithNeopixelsv>

000d4a0c <_GLOBAL__sub_I_pixelX>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4a0c:	4b29      	ldr	r3, [pc, #164]	; (d4ab4 <_GLOBAL__sub_I_pixelX+0xa8>)
  }
  file.close();
  Serial.printf("Done \n");
  delay(2000);
  Serial.printf("Ready for next data log \n");
}
   d4a0e:	b570      	push	{r4, r5, r6, lr}
   d4a10:	2401      	movs	r4, #1
   d4a12:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4a14:	f001 ff32 	bl	d687c <HAL_Pin_Map>

#define PIXEL_PIN A4
#define PIXEL_PIN2 A3
#define PIXEL_COUNT 31
#define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixelX(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4a18:	2302      	movs	r3, #2
   d4a1a:	220f      	movs	r2, #15
   d4a1c:	211f      	movs	r1, #31
   d4a1e:	4826      	ldr	r0, [pc, #152]	; (d4ab8 <_GLOBAL__sub_I_pixelX+0xac>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4a20:	4e26      	ldr	r6, [pc, #152]	; (d4abc <_GLOBAL__sub_I_pixelX+0xb0>)
   d4a22:	f000 f8b3 	bl	d4b8c <_ZN17Adafruit_NeoPixelC1Ethh>
   d4a26:	4a26      	ldr	r2, [pc, #152]	; (d4ac0 <_GLOBAL__sub_I_pixelX+0xb4>)
   d4a28:	4926      	ldr	r1, [pc, #152]	; (d4ac4 <_GLOBAL__sub_I_pixelX+0xb8>)
   d4a2a:	4823      	ldr	r0, [pc, #140]	; (d4ab8 <_GLOBAL__sub_I_pixelX+0xac>)
   d4a2c:	f003 fb86 	bl	d813c <__aeabi_atexit>
Adafruit_NeoPixel pixelY(PIXEL_COUNT, PIXEL_PIN2, PIXEL_TYPE);
   d4a30:	2302      	movs	r3, #2
   d4a32:	2210      	movs	r2, #16
   d4a34:	211f      	movs	r1, #31
   d4a36:	4824      	ldr	r0, [pc, #144]	; (d4ac8 <_GLOBAL__sub_I_pixelX+0xbc>)
   d4a38:	f000 f8a8 	bl	d4b8c <_ZN17Adafruit_NeoPixelC1Ethh>
   d4a3c:	4a20      	ldr	r2, [pc, #128]	; (d4ac0 <_GLOBAL__sub_I_pixelX+0xb4>)
   d4a3e:	4921      	ldr	r1, [pc, #132]	; (d4ac4 <_GLOBAL__sub_I_pixelX+0xb8>)
   d4a40:	4821      	ldr	r0, [pc, #132]	; (d4ac8 <_GLOBAL__sub_I_pixelX+0xbc>)
   d4a42:	f003 fb7b 	bl	d813c <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4a46:	4b21      	ldr	r3, [pc, #132]	; (d4acc <_GLOBAL__sub_I_pixelX+0xc0>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4a48:	2164      	movs	r1, #100	; 0x64
   d4a4a:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4a4e:	4920      	ldr	r1, [pc, #128]	; (d4ad0 <_GLOBAL__sub_I_pixelX+0xc4>)
   d4a50:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4a54:	6831      	ldr	r1, [r6, #0]
   d4a56:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
   d4a5a:	2200      	movs	r2, #0
   d4a5c:	ea11 0504 	ands.w	r5, r1, r4
   d4a60:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4a62:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4a66:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4a6a:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4a6e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4a72:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4a76:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4a7a:	461c      	mov	r4, r3
   d4a7c:	d10a      	bne.n	d4a94 <_GLOBAL__sub_I_pixelX+0x88>
   d4a7e:	4630      	mov	r0, r6
   d4a80:	f7ff fb11 	bl	d40a6 <__cxa_guard_acquire>
   d4a84:	b130      	cbz	r0, d4a94 <_GLOBAL__sub_I_pixelX+0x88>
   d4a86:	4629      	mov	r1, r5
   d4a88:	4812      	ldr	r0, [pc, #72]	; (d4ad4 <_GLOBAL__sub_I_pixelX+0xc8>)
   d4a8a:	f002 f997 	bl	d6dbc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4a8e:	4630      	mov	r0, r6
   d4a90:	f7ff fb0e 	bl	d40b0 <__cxa_guard_release>
   d4a94:	4810      	ldr	r0, [pc, #64]	; (d4ad8 <_GLOBAL__sub_I_pixelX+0xcc>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4a96:	4b0f      	ldr	r3, [pc, #60]	; (d4ad4 <_GLOBAL__sub_I_pixelX+0xc8>)
   d4a98:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d4a9c:	2300      	movs	r3, #0
   d4a9e:	7203      	strb	r3, [r0, #8]
   d4aa0:	7243      	strb	r3, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4aa2:	6043      	str	r3, [r0, #4]
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d4aa4:	4b0d      	ldr	r3, [pc, #52]	; (d4adc <_GLOBAL__sub_I_pixelX+0xd0>)
   d4aa6:	6003      	str	r3, [r0, #0]
const int chipSelect = SS;

#define FILE_BASE_NAME "Data"

SdFat sd;
SdFile file;
   d4aa8:	4a05      	ldr	r2, [pc, #20]	; (d4ac0 <_GLOBAL__sub_I_pixelX+0xb4>)
   d4aaa:	490d      	ldr	r1, [pc, #52]	; (d4ae0 <_GLOBAL__sub_I_pixelX+0xd4>)
  }
  file.close();
  Serial.printf("Done \n");
  delay(2000);
  Serial.printf("Ready for next data log \n");
}
   d4aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
const int chipSelect = SS;

#define FILE_BASE_NAME "Data"

SdFat sd;
SdFile file;
   d4ab0:	f003 bb44 	b.w	d813c <__aeabi_atexit>
   d4ab4:	2003e3bc 	.word	0x2003e3bc
   d4ab8:	2003bed4 	.word	0x2003bed4
   d4abc:	2003be90 	.word	0x2003be90
   d4ac0:	2003be8c 	.word	0x2003be8c
   d4ac4:	000d4aed 	.word	0x000d4aed
   d4ac8:	2003beac 	.word	0x2003beac
   d4acc:	2003bf28 	.word	0x2003bf28
   d4ad0:	000d914c 	.word	0x000d914c
   d4ad4:	2003be94 	.word	0x2003be94
   d4ad8:	2003bef4 	.word	0x2003bef4
   d4adc:	000d9158 	.word	0x000d9158
   d4ae0:	000d40b7 	.word	0x000d40b7

000d4ae4 <micros>:
   d4ae4:	f001 bf5a 	b.w	d699c <HAL_Timer_Get_Micro_Seconds>

000d4ae8 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4ae8:	f001 bf50 	b.w	d698c <HAL_Delay_Microseconds>

000d4aec <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4aec:	b510      	push	{r4, lr}
   d4aee:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4af0:	68c0      	ldr	r0, [r0, #12]
   d4af2:	b108      	cbz	r0, d4af8 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4af4:	f002 f8f6 	bl	d6ce4 <free>
  if (begun) pinMode(pin, INPUT);
   d4af8:	7823      	ldrb	r3, [r4, #0]
   d4afa:	b11b      	cbz	r3, d4b04 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4afc:	2100      	movs	r1, #0
   d4afe:	79e0      	ldrb	r0, [r4, #7]
   d4b00:	f003 fa9a 	bl	d8038 <pinMode>
}
   d4b04:	4620      	mov	r0, r4
   d4b06:	bd10      	pop	{r4, pc}

000d4b08 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4b08:	b538      	push	{r3, r4, r5, lr}
   d4b0a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4b0c:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4b0e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4b10:	b108      	cbz	r0, d4b16 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4b12:	f002 f8e7 	bl	d6ce4 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4b16:	79a3      	ldrb	r3, [r4, #6]
   d4b18:	2b06      	cmp	r3, #6
   d4b1a:	bf0c      	ite	eq
   d4b1c:	2004      	moveq	r0, #4
   d4b1e:	2003      	movne	r0, #3
   d4b20:	fb10 f005 	smulbb	r0, r0, r5
   d4b24:	b280      	uxth	r0, r0
   d4b26:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4b28:	f002 f8d4 	bl	d6cd4 <malloc>
   d4b2c:	60e0      	str	r0, [r4, #12]
   d4b2e:	b128      	cbz	r0, d4b3c <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4b30:	88a2      	ldrh	r2, [r4, #4]
   d4b32:	2100      	movs	r1, #0
   d4b34:	f004 faa8 	bl	d9088 <memset>
    numLEDs = n;
   d4b38:	8065      	strh	r5, [r4, #2]
   d4b3a:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4b3c:	80a0      	strh	r0, [r4, #4]
   d4b3e:	8060      	strh	r0, [r4, #2]
   d4b40:	bd38      	pop	{r3, r4, r5, pc}

000d4b42 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d4b42:	b510      	push	{r4, lr}
   d4b44:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4b46:	2101      	movs	r1, #1
   d4b48:	79c0      	ldrb	r0, [r0, #7]
   d4b4a:	f003 fa75 	bl	d8038 <pinMode>
  digitalWrite(pin, LOW);
   d4b4e:	2100      	movs	r1, #0
   d4b50:	79e0      	ldrb	r0, [r4, #7]
   d4b52:	f003 fa82 	bl	d805a <digitalWrite>
  begun = true;
   d4b56:	2301      	movs	r3, #1
   d4b58:	7023      	strb	r3, [r4, #0]
   d4b5a:	bd10      	pop	{r4, pc}

000d4b5c <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4b5c:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d4b5e:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4b60:	4605      	mov	r5, r0
   d4b62:	460c      	mov	r4, r1
    if (begun) {
   d4b64:	b11b      	cbz	r3, d4b6e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4b66:	2100      	movs	r1, #0
   d4b68:	79c0      	ldrb	r0, [r0, #7]
   d4b6a:	f003 fa65 	bl	d8038 <pinMode>
    }
    pin = p;
    if (begun) {
   d4b6e:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d4b70:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4b72:	b153      	cbz	r3, d4b8a <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d4b74:	b2a4      	uxth	r4, r4
   d4b76:	4620      	mov	r0, r4
   d4b78:	2101      	movs	r1, #1
   d4b7a:	f003 fa5d 	bl	d8038 <pinMode>
        digitalWrite(p, LOW);
   d4b7e:	4620      	mov	r0, r4
   d4b80:	2100      	movs	r1, #0
    }
}
   d4b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4b86:	f003 ba68 	b.w	d805a <digitalWrite>
   d4b8a:	bd38      	pop	{r3, r4, r5, pc}

000d4b8c <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4b8c:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4b8e:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4b90:	4604      	mov	r4, r0
   d4b92:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4b94:	7183      	strb	r3, [r0, #6]
   d4b96:	7005      	strb	r5, [r0, #0]
   d4b98:	7205      	strb	r5, [r0, #8]
   d4b9a:	60c5      	str	r5, [r0, #12]
   d4b9c:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d4b9e:	f7ff ffb3 	bl	d4b08 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4ba2:	4620      	mov	r0, r4
   d4ba4:	4631      	mov	r1, r6
   d4ba6:	f7ff ffd9 	bl	d4b5c <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4baa:	4620      	mov	r0, r4
   d4bac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4bb0 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4bb0:	68c3      	ldr	r3, [r0, #12]
   d4bb2:	2b00      	cmp	r3, #0
   d4bb4:	f000 818b 	beq.w	d4ece <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d4bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bbc:	7983      	ldrb	r3, [r0, #6]
   d4bbe:	3b02      	subs	r3, #2
   d4bc0:	b2db      	uxtb	r3, r3
   d4bc2:	2b04      	cmp	r3, #4
   d4bc4:	bf9c      	itt	ls
   d4bc6:	4ac4      	ldrls	r2, [pc, #784]	; (d4ed8 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4bc8:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4bcc:	b087      	sub	sp, #28
   d4bce:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4bd0:	bf88      	it	hi
   d4bd2:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4bd4:	f7ff ff86 	bl	d4ae4 <micros>
   d4bd8:	692b      	ldr	r3, [r5, #16]
   d4bda:	1ac0      	subs	r0, r0, r3
   d4bdc:	42a0      	cmp	r0, r4
   d4bde:	d3f9      	bcc.n	d4bd4 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4be0:	4abe      	ldr	r2, [pc, #760]	; (d4edc <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4be2:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4be4:	ca07      	ldmia	r2, {r0, r1, r2}
   d4be6:	ac06      	add	r4, sp, #24
   d4be8:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4bec:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4bee:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4bf0:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4bf4:	3304      	adds	r3, #4
   d4bf6:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bf8:	b922      	cbnz	r2, d4c04 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bfa:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4bfe:	2b00      	cmp	r3, #0
   d4c00:	f2c0 8155 	blt.w	d4eae <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4c04:	9c04      	ldr	r4, [sp, #16]
   d4c06:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c0a:	b923      	cbnz	r3, d4c16 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c0c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4c10:	2b00      	cmp	r3, #0
   d4c12:	f2c0 813c 	blt.w	d4e8e <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d4c16:	9c05      	ldr	r4, [sp, #20]
   d4c18:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c1c:	b91b      	cbnz	r3, d4c26 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c1e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4c22:	2b00      	cmp	r3, #0
   d4c24:	db6e      	blt.n	d4d04 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4c26:	4bae      	ldr	r3, [pc, #696]	; (d4ee0 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d4c28:	79ea      	ldrb	r2, [r5, #7]
   d4c2a:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4c2c:	4cad      	ldr	r4, [pc, #692]	; (d4ee4 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4c2e:	49ae      	ldr	r1, [pc, #696]	; (d4ee8 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4c30:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4c32:	0112      	lsls	r2, r2, #4
   d4c34:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4c36:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4c3a:	785b      	ldrb	r3, [r3, #1]
   d4c3c:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4c3e:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4c40:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4c42:	f003 031f 	and.w	r3, r3, #31
   d4c46:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4c4a:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4c4c:	433a      	orrs	r2, r7
   d4c4e:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d4c50:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4c52:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4c54:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4c58:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4c5c:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4c5e:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4c60:	2800      	cmp	r0, #0
   d4c62:	d044      	beq.n	d4cee <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d4c64:	46cc      	mov	ip, r9
   d4c66:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4c68:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d4c6c:	f81c eb01 	ldrb.w	lr, [ip], #1
   d4c70:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4c72:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4c74:	6863      	ldr	r3, [r4, #4]
   d4c76:	1a9b      	subs	r3, r3, r2
   d4c78:	2b46      	cmp	r3, #70	; 0x46
   d4c7a:	d9fb      	bls.n	d4c74 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d4c7c:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d4c80:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4c84:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4c88:	ea43 0307 	orr.w	r3, r3, r7
   d4c8c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4c90:	d02f      	beq.n	d4cf2 <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4c92:	6863      	ldr	r3, [r4, #4]
   d4c94:	1a9b      	subs	r3, r3, r2
   d4c96:	2b28      	cmp	r3, #40	; 0x28
   d4c98:	d9fb      	bls.n	d4c92 <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4c9a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4c9e:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4ca0:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4ca4:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4ca8:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4cac:	d1e2      	bne.n	d4c74 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4cae:	ebc9 030c 	rsb	r3, r9, ip
   d4cb2:	88a8      	ldrh	r0, [r5, #4]
   d4cb4:	b29b      	uxth	r3, r3
   d4cb6:	4298      	cmp	r0, r3
   d4cb8:	d8d8      	bhi.n	d4c6c <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d4cba:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d4cbe:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4cc2:	6863      	ldr	r3, [r4, #4]
   d4cc4:	1a9b      	subs	r3, r3, r2
   d4cc6:	2b46      	cmp	r3, #70	; 0x46
   d4cc8:	d9fb      	bls.n	d4cc2 <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4cca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4cce:	ebca 0a03 	rsb	sl, sl, r3
   d4cd2:	4582      	cmp	sl, r0
   d4cd4:	f0c0 80d5 	bcc.w	d4e82 <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4cd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4cdc:	f7ff ff04 	bl	d4ae8 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4ce0:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4ce2:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4ce6:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4cea:	2800      	cmp	r0, #0
   d4cec:	d1ba      	bne.n	d4c64 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4cee:	4602      	mov	r2, r0
   d4cf0:	e7e7      	b.n	d4cc2 <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4cf2:	6863      	ldr	r3, [r4, #4]
   d4cf4:	1a9b      	subs	r3, r3, r2
   d4cf6:	2b11      	cmp	r3, #17
   d4cf8:	d8cf      	bhi.n	d4c9a <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4cfa:	6863      	ldr	r3, [r4, #4]
   d4cfc:	1a9b      	subs	r3, r3, r2
   d4cfe:	2b11      	cmp	r3, #17
   d4d00:	d9f7      	bls.n	d4cf2 <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4d02:	e7ca      	b.n	d4c9a <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d04:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d08:	2b00      	cmp	r3, #0
   d4d0a:	da8c      	bge.n	d4c26 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d0c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d10:	2b00      	cmp	r3, #0
   d4d12:	da88      	bge.n	d4c26 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4d14:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d18:	2b00      	cmp	r3, #0
   d4d1a:	da84      	bge.n	d4c26 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4d1c:	9801      	ldr	r0, [sp, #4]
   d4d1e:	f001 ffd9 	bl	d6cd4 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4d22:	2800      	cmp	r0, #0
   d4d24:	f43f af7f 	beq.w	d4c26 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4d28:	88ab      	ldrh	r3, [r5, #4]
   d4d2a:	2b00      	cmp	r3, #0
   d4d2c:	f000 80d0 	beq.w	d4ed0 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4d30:	2700      	movs	r7, #0
   d4d32:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d34:	4e6d      	ldr	r6, [pc, #436]	; (d4eec <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d4d36:	496e      	ldr	r1, [pc, #440]	; (d4ef0 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4d38:	e000      	b.n	d4d3c <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4d3a:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4d3c:	68ea      	ldr	r2, [r5, #12]
   d4d3e:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d40:	f103 0e01 	add.w	lr, r3, #1
   d4d44:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4d48:	bf14      	ite	ne
   d4d4a:	46b0      	movne	r8, r6
   d4d4c:	4688      	moveq	r8, r1
   d4d4e:	fa1f fe8e 	uxth.w	lr, lr
   d4d52:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4d56:	bf14      	ite	ne
   d4d58:	46b1      	movne	r9, r6
   d4d5a:	4689      	moveq	r9, r1
   d4d5c:	f012 0f20 	tst.w	r2, #32
   d4d60:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4d64:	bf18      	it	ne
   d4d66:	46b2      	movne	sl, r6
   d4d68:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4d6c:	bf08      	it	eq
   d4d6e:	468a      	moveq	sl, r1
   d4d70:	f103 0802 	add.w	r8, r3, #2
   d4d74:	f012 0f10 	tst.w	r2, #16
   d4d78:	f103 0e03 	add.w	lr, r3, #3
   d4d7c:	bf14      	ite	ne
   d4d7e:	46b4      	movne	ip, r6
   d4d80:	468c      	moveq	ip, r1
   d4d82:	fa1f f888 	uxth.w	r8, r8
   d4d86:	f012 0f08 	tst.w	r2, #8
   d4d8a:	fa1f fe8e 	uxth.w	lr, lr
   d4d8e:	f103 0904 	add.w	r9, r3, #4
   d4d92:	fa1f f989 	uxth.w	r9, r9
   d4d96:	bf14      	ite	ne
   d4d98:	46b3      	movne	fp, r6
   d4d9a:	468b      	moveq	fp, r1
   d4d9c:	f012 0f04 	tst.w	r2, #4
   d4da0:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4da4:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4da8:	bf14      	ite	ne
   d4daa:	46b2      	movne	sl, r6
   d4dac:	468a      	moveq	sl, r1
   d4dae:	f103 0805 	add.w	r8, r3, #5
   d4db2:	f012 0f02 	tst.w	r2, #2
   d4db6:	f103 0c06 	add.w	ip, r3, #6
   d4dba:	f103 0e07 	add.w	lr, r3, #7
   d4dbe:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d4dc2:	fa1f fe8e 	uxth.w	lr, lr
   d4dc6:	bf14      	ite	ne
   d4dc8:	46b1      	movne	r9, r6
   d4dca:	4689      	moveq	r9, r1
   d4dcc:	fa1f f888 	uxth.w	r8, r8
   d4dd0:	f012 0f01 	tst.w	r2, #1
   d4dd4:	fa1f fc8c 	uxth.w	ip, ip
   d4dd8:	bf14      	ite	ne
   d4dda:	4632      	movne	r2, r6
   d4ddc:	460a      	moveq	r2, r1
   d4dde:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4de2:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d4de6:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4dea:	3701      	adds	r7, #1
   d4dec:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4df0:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4df2:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4df6:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4df8:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4dfa:	d89e      	bhi.n	d4d3a <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4dfc:	f103 0209 	add.w	r2, r3, #9
   d4e00:	330a      	adds	r3, #10
   d4e02:	b292      	uxth	r2, r2
   d4e04:	b29b      	uxth	r3, r3
   d4e06:	0052      	lsls	r2, r2, #1
   d4e08:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4e0a:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4e0c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4e10:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4e12:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4e14:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4e16:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4e18:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4e1a:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4e1e:	4e30      	ldr	r6, [pc, #192]	; (d4ee0 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4e20:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4e24:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4e28:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4e2c:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4e30:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4e34:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4e38:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4e3c:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4e40:	79eb      	ldrb	r3, [r5, #7]
   d4e42:	6831      	ldr	r1, [r6, #0]
   d4e44:	011b      	lsls	r3, r3, #4
   d4e46:	18ce      	adds	r6, r1, r3
   d4e48:	5cc9      	ldrb	r1, [r1, r3]
   d4e4a:	7873      	ldrb	r3, [r6, #1]
   d4e4c:	f003 031f 	and.w	r3, r3, #31
   d4e50:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4e54:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4e56:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4e5a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4e5e:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4e62:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4e64:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4e68:	2b00      	cmp	r3, #0
   d4e6a:	d0fb      	beq.n	d4e64 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4e6c:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4e6e:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4e72:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4e76:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4e7a:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d4e7e:	f001 ff31 	bl	d6ce4 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4e82:	f7ff fe2f 	bl	d4ae4 <micros>
   d4e86:	6128      	str	r0, [r5, #16]
}
   d4e88:	b007      	add	sp, #28
   d4e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e8e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e92:	2b00      	cmp	r3, #0
   d4e94:	f6bf aebf 	bge.w	d4c16 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e98:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e9c:	2b00      	cmp	r3, #0
   d4e9e:	f6bf aeba 	bge.w	d4c16 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4ea2:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4ea6:	2b00      	cmp	r3, #0
   d4ea8:	f6bf aeb5 	bge.w	d4c16 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d4eac:	e736      	b.n	d4d1c <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4eae:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4eb2:	2b00      	cmp	r3, #0
   d4eb4:	f6bf aea6 	bge.w	d4c04 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4eb8:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4ebc:	2b00      	cmp	r3, #0
   d4ebe:	f6bf aea1 	bge.w	d4c04 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4ec2:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4ec6:	2b00      	cmp	r3, #0
   d4ec8:	f6bf ae9c 	bge.w	d4c04 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4ecc:	e726      	b.n	d4d1c <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4ece:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4ed0:	2304      	movs	r3, #4
   d4ed2:	2202      	movs	r2, #2
   d4ed4:	e799      	b.n	d4e0a <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4ed6:	bf00      	nop
   d4ed8:	000d93cc 	.word	0x000d93cc
   d4edc:	000d93c0 	.word	0x000d93c0
   d4ee0:	2003e3c8 	.word	0x2003e3c8
   d4ee4:	e000edf0 	.word	0xe000edf0
   d4ee8:	e0001000 	.word	0xe0001000
   d4eec:	ffff800d 	.word	0xffff800d
   d4ef0:	ffff8006 	.word	0xffff8006

000d4ef4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4ef6:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4ef8:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
   d4efc:	428c      	cmp	r4, r1
   d4efe:	d927      	bls.n	d4f50 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
   d4f00:	7a04      	ldrb	r4, [r0, #8]
   d4f02:	b144      	cbz	r4, d4f16 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   d4f04:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   d4f08:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   d4f0c:	fb14 f405 	smulbb	r4, r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d4f10:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   d4f12:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   d4f14:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
   d4f16:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
   d4f18:	68c6      	ldr	r6, [r0, #12]
   d4f1a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d4f1e:	2f08      	cmp	r7, #8
   d4f20:	eb06 0401 	add.w	r4, r6, r1
   d4f24:	d811      	bhi.n	d4f4a <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
   d4f26:	2001      	movs	r0, #1
   d4f28:	40b8      	lsls	r0, r7
   d4f2a:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
   d4f2e:	d108      	bne.n	d4f42 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
   d4f30:	06c0      	lsls	r0, r0, #27
   d4f32:	d50a      	bpl.n	d4f4a <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d4f34:	2aff      	cmp	r2, #255	; 0xff
   d4f36:	bf08      	it	eq
   d4f38:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
   d4f3a:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   d4f3c:	7065      	strb	r5, [r4, #1]
          *p = g;
   d4f3e:	70a3      	strb	r3, [r4, #2]
   d4f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4f42:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   d4f44:	7062      	strb	r2, [r4, #1]
          *p = b;
   d4f46:	70a5      	strb	r5, [r4, #2]
   d4f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d4f4a:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   d4f4c:	7063      	strb	r3, [r4, #1]
          *p = b;
   d4f4e:	70a5      	strb	r5, [r4, #2]
   d4f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f52 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d4f52:	8882      	ldrh	r2, [r0, #4]
   d4f54:	68c0      	ldr	r0, [r0, #12]
   d4f56:	2100      	movs	r1, #0
   d4f58:	f004 b896 	b.w	d9088 <memset>

000d4f5c <_GLOBAL__sub_I_PIN_MAP2>:
}
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	f001 fc8d 	bl	d687c <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4f62:	f001 fc8b 	bl	d687c <HAL_Pin_Map>
   d4f66:	4b01      	ldr	r3, [pc, #4]	; (d4f6c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4f68:	6018      	str	r0, [r3, #0]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	2003e3c8 	.word	0x2003e3c8

000d4f70 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d4f70:	f001 bc84 	b.w	d687c <HAL_Pin_Map>

000d4f74 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d4f74:	f001 bc82 	b.w	d687c <HAL_Pin_Map>

000d4f78 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4f78:	b510      	push	{r4, lr}
   d4f7a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4f7c:	3024      	adds	r0, #36	; 0x24
   d4f7e:	f000 fe7b 	bl	d5c78 <_ZN8FatCache4syncEv>
   d4f82:	b128      	cbz	r0, d4f90 <_ZN9FatVolume9cacheSyncEv+0x18>
   d4f84:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d4f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4f8c:	f000 be74 	b.w	d5c78 <_ZN8FatCache4syncEv>
  }
   d4f90:	bd10      	pop	{r4, pc}

000d4f92 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d4f92:	1e41      	subs	r1, r0, #1
   d4f94:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d4f98:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4f9a:	0843      	lsrs	r3, r0, #1
   d4f9c:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d4fa0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d4fa4:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4fa8:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4faa:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4fac:	d1f5      	bne.n	d4f9a <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d4fae:	4770      	bx	lr

000d4fb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d4fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d4fb4:	7803      	ldrb	r3, [r0, #0]
   d4fb6:	2b20      	cmp	r3, #32
   d4fb8:	f100 0401 	add.w	r4, r0, #1
   d4fbc:	d101      	bne.n	d4fc2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	e7f8      	b.n	d4fb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4fc2:	4f70      	ldr	r7, [pc, #448]	; (d5184 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d4fc4:	6088      	str	r0, [r1, #8]
   d4fc6:	4605      	mov	r5, r0
   d4fc8:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d4fca:	462e      	mov	r6, r5
   d4fcc:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d4fd0:	b30b      	cbz	r3, d5016 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4fd2:	2b2f      	cmp	r3, #47	; 0x2f
   d4fd4:	d101      	bne.n	d4fda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d4fd6:	1903      	adds	r3, r0, r4
   d4fd8:	e017      	b.n	d500a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4fda:	2b5c      	cmp	r3, #92	; 0x5c
   d4fdc:	d102      	bne.n	d4fe4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d4fde:	2000      	movs	r0, #0
   d4fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4fe4:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d4fe8:	b2e4      	uxtb	r4, r4
   d4fea:	2c1d      	cmp	r4, #29
   d4fec:	d803      	bhi.n	d4ff6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d4fee:	fa27 f404 	lsr.w	r4, r7, r4
   d4ff2:	07e4      	lsls	r4, r4, #31
   d4ff4:	d4f3      	bmi.n	d4fde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d4ff6:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d4ffa:	2c3c      	cmp	r4, #60	; 0x3c
   d4ffc:	d0ef      	beq.n	d4fde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d4ffe:	3b20      	subs	r3, #32
   d5000:	2b5e      	cmp	r3, #94	; 0x5e
   d5002:	d9e1      	bls.n	d4fc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d5004:	e7eb      	b.n	d4fde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d5006:	2d2f      	cmp	r5, #47	; 0x2f
   d5008:	d105      	bne.n	d5016 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d500a:	461e      	mov	r6, r3
   d500c:	f813 5b01 	ldrb.w	r5, [r3], #1
   d5010:	2d20      	cmp	r5, #32
   d5012:	d1f8      	bne.n	d5006 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d5014:	e7f9      	b.n	d500a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d5016:	6016      	str	r6, [r2, #0]
   d5018:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d501a:	4298      	cmp	r0, r3
   d501c:	ebc0 0803 	rsb	r8, r0, r3
   d5020:	d009      	beq.n	d5036 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d5022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d5026:	2a2e      	cmp	r2, #46	; 0x2e
   d5028:	d0f7      	beq.n	d501a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d502a:	2a20      	cmp	r2, #32
   d502c:	d0f5      	beq.n	d501a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d502e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d5032:	dcd4      	bgt.n	d4fde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d5034:	e001      	b.n	d503a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d5036:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d503a:	f8c1 8004 	str.w	r8, [r1, #4]
   d503e:	f101 030c 	add.w	r3, r1, #12
   d5042:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d5046:	2420      	movs	r4, #32
   d5048:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d504c:	4293      	cmp	r3, r2
   d504e:	d1fb      	bne.n	d5048 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d5050:	4603      	mov	r3, r0
   d5052:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d5054:	f813 4b01 	ldrb.w	r4, [r3], #1
   d5058:	2c2e      	cmp	r4, #46	; 0x2e
   d505a:	d0fa      	beq.n	d5052 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d505c:	2c20      	cmp	r4, #32
   d505e:	d0f8      	beq.n	d5052 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d5060:	fab2 f482 	clz	r4, r2
   d5064:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d5066:	f108 36ff 	add.w	r6, r8, #4294967295
   d506a:	1c73      	adds	r3, r6, #1
   d506c:	d107      	bne.n	d507e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d506e:	2700      	movs	r7, #0
   d5070:	f04f 0e07 	mov.w	lr, #7
   d5074:	463d      	mov	r5, r7
   d5076:	46ba      	mov	sl, r7
   d5078:	f04f 0908 	mov.w	r9, #8
   d507c:	e009      	b.n	d5092 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d507e:	5d83      	ldrb	r3, [r0, r6]
   d5080:	2b2e      	cmp	r3, #46	; 0x2e
   d5082:	d0f4      	beq.n	d506e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d5084:	3e01      	subs	r6, #1
   d5086:	e7f0      	b.n	d506a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d5088:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d508a:	2b20      	cmp	r3, #32
   d508c:	d104      	bne.n	d5098 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d508e:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d5090:	3201      	adds	r2, #1
   d5092:	4542      	cmp	r2, r8
   d5094:	dbf8      	blt.n	d5088 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d5096:	e04b      	b.n	d5130 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d5098:	2b2e      	cmp	r3, #46	; 0x2e
   d509a:	d102      	bne.n	d50a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d509c:	42b2      	cmp	r2, r6
   d509e:	d1f6      	bne.n	d508e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d50a0:	e003      	b.n	d50aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d50a2:	2b22      	cmp	r3, #34	; 0x22
   d50a4:	d017      	beq.n	d50d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d50a6:	2b7c      	cmp	r3, #124	; 0x7c
   d50a8:	d015      	beq.n	d50d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d50aa:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d50ae:	f1bc 0f05 	cmp.w	ip, #5
   d50b2:	d801      	bhi.n	d50b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d50b4:	2b2d      	cmp	r3, #45	; 0x2d
   d50b6:	d10e      	bne.n	d50d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d50b8:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d50bc:	f1bc 0f05 	cmp.w	ip, #5
   d50c0:	d909      	bls.n	d50d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d50c2:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d50c6:	f1bc 0f02 	cmp.w	ip, #2
   d50ca:	d904      	bls.n	d50d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d50cc:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d50d0:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d50d4:	d902      	bls.n	d50dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d50d6:	42b2      	cmp	r2, r6
   d50d8:	d10e      	bne.n	d50f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d50da:	e049      	b.n	d5170 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d50dc:	42b2      	cmp	r2, r6
   d50de:	d047      	beq.n	d5170 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d50e0:	4575      	cmp	r5, lr
   d50e2:	d821      	bhi.n	d5128 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d50e4:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d50e8:	f1bc 0f19 	cmp.w	ip, #25
   d50ec:	d808      	bhi.n	d5100 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d50ee:	3b20      	subs	r3, #32
   d50f0:	b2db      	uxtb	r3, r3
        lc |= bit;
   d50f2:	ea49 0707 	orr.w	r7, r9, r7
   d50f6:	e00a      	b.n	d510e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d50f8:	4575      	cmp	r5, lr
   d50fa:	d815      	bhi.n	d5128 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d50fc:	2400      	movs	r4, #0
      c = '_';
   d50fe:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d5100:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d5104:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d5108:	bf98      	it	ls
   d510a:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d510e:	f105 0c01 	add.w	ip, r5, #1
   d5112:	fa5f fc8c 	uxtb.w	ip, ip
   d5116:	440d      	add	r5, r1
      if (i < 7) {
   d5118:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d511c:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d511e:	d801      	bhi.n	d5124 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d5120:	f881 c00c 	strb.w	ip, [r1, #12]
   d5124:	4665      	mov	r5, ip
   d5126:	e7b3      	b.n	d5090 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5128:	f1be 0f0a 	cmp.w	lr, #10
   d512c:	d117      	bne.n	d515e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d512e:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d5130:	7b4b      	ldrb	r3, [r1, #13]
   d5132:	2b20      	cmp	r3, #32
   d5134:	f43f af53 	beq.w	d4fde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d5138:	b13c      	cbz	r4, d514a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d513a:	ea1a 0f07 	tst.w	sl, r7
   d513e:	bf18      	it	ne
   d5140:	2702      	movne	r7, #2
   d5142:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d5144:	2001      	movs	r0, #1
   d5146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d514a:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d514c:	2001      	movs	r0, #1
   d514e:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d5150:	4419      	add	r1, r3
   d5152:	237e      	movs	r3, #126	; 0x7e
   d5154:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d5156:	2331      	movs	r3, #49	; 0x31
   d5158:	738b      	strb	r3, [r1, #14]
   d515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d515e:	42b2      	cmp	r2, r6
   d5160:	dce5      	bgt.n	d512e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5162:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5164:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5168:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d516a:	f04f 0910 	mov.w	r9, #16
   d516e:	e78e      	b.n	d508e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5170:	f1be 0f0a 	cmp.w	lr, #10
   d5174:	d0db      	beq.n	d512e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5176:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5178:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d517c:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d517e:	f04f 0910 	mov.w	r9, #16
   d5182:	e785      	b.n	d5090 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d5184:	31000101 	.word	0x31000101

000d5188 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d518c:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5190:	4606      	mov	r6, r0
   d5192:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5194:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5196:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5198:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d519c:	6869      	ldr	r1, [r5, #4]
   d519e:	68aa      	ldr	r2, [r5, #8]
   d51a0:	1863      	adds	r3, r4, r1
   d51a2:	b29b      	uxth	r3, r3
   d51a4:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d51a6:	4291      	cmp	r1, r2
   d51a8:	d006      	beq.n	d51b8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d51aa:	f812 0b01 	ldrb.w	r0, [r2], #1
   d51ae:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d51b2:	4043      	eors	r3, r0
   d51b4:	b29b      	uxth	r3, r3
   d51b6:	e7f6      	b.n	d51a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d51b8:	f1b9 0f03 	cmp.w	r9, #3
   d51bc:	bf28      	it	cs
   d51be:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d51c2:	f109 0204 	add.w	r2, r9, #4
   d51c6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d51c8:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d51cc:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d51ce:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d51d0:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d51d2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d51d4:	bf94      	ite	ls
   d51d6:	3130      	addls	r1, #48	; 0x30
   d51d8:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d51da:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d51dc:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d51de:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d51e2:	d3f1      	bcc.n	d51c8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d51e4:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d51e8:	2100      	movs	r1, #0
   d51ea:	735f      	strb	r7, [r3, #13]
   d51ec:	4630      	mov	r0, r6
   d51ee:	f000 fb1e 	bl	d582e <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d51f2:	2101      	movs	r1, #1
   d51f4:	4630      	mov	r0, r6
   d51f6:	f000 fafd 	bl	d57f4 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d51fa:	4601      	mov	r1, r0
   d51fc:	b928      	cbnz	r0, d520a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d51fe:	7870      	ldrb	r0, [r6, #1]
   d5200:	fab0 f080 	clz	r0, r0
   d5204:	0940      	lsrs	r0, r0, #5
   d5206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d520a:	7803      	ldrb	r3, [r0, #0]
   d520c:	b14b      	cbz	r3, d5222 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d520e:	7ac3      	ldrb	r3, [r0, #11]
   d5210:	071b      	lsls	r3, r3, #28
   d5212:	d4ee      	bmi.n	d51f2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5214:	220b      	movs	r2, #11
   d5216:	4640      	mov	r0, r8
   d5218:	f003 ff1c 	bl	d9054 <memcmp>
   d521c:	2800      	cmp	r0, #0
   d521e:	d1e8      	bne.n	d51f2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5220:	e002      	b.n	d5228 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d5222:	2001      	movs	r0, #1
   d5224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5228:	3401      	adds	r4, #1
   d522a:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d522c:	2c64      	cmp	r4, #100	; 0x64
   d522e:	d1b5      	bne.n	d519c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d5230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5234 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5238:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d523a:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d523c:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d523e:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5242:	9005      	str	r0, [sp, #20]
   d5244:	460e      	mov	r6, r1
   d5246:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5248:	d101      	bne.n	d524e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d524a:	2000      	movs	r0, #0
   d524c:	e1a0      	b.n	d5590 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d524e:	9b05      	ldr	r3, [sp, #20]
   d5250:	781b      	ldrb	r3, [r3, #0]
   d5252:	2b00      	cmp	r3, #0
   d5254:	d1f9      	bne.n	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d5256:	6853      	ldr	r3, [r2, #4]
   d5258:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d525a:	7813      	ldrb	r3, [r2, #0]
   d525c:	079b      	lsls	r3, r3, #30
   d525e:	f000 818d 	beq.w	d557c <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d5262:	9b02      	ldr	r3, [sp, #8]
   d5264:	270d      	movs	r7, #13
   d5266:	330c      	adds	r3, #12
   d5268:	fbb3 f7f7 	udiv	r7, r3, r7
   d526c:	3701      	adds	r7, #1
   d526e:	b2ff      	uxtb	r7, r7
   d5270:	2100      	movs	r1, #0
   d5272:	4630      	mov	r0, r6
   d5274:	f000 fadb 	bl	d582e <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d5278:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d527c:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5280:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d5284:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d5286:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d5288:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d528a:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d528e:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5290:	6972      	ldr	r2, [r6, #20]
   d5292:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5294:	2101      	movs	r1, #1
   d5296:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5298:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d529c:	f000 faaa 	bl	d57f4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d52a0:	9b07      	ldr	r3, [sp, #28]
   d52a2:	b920      	cbnz	r0, d52ae <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d52a4:	7873      	ldrb	r3, [r6, #1]
   d52a6:	2b00      	cmp	r3, #0
   d52a8:	f000 8090 	beq.w	d53cc <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d52ac:	e7cd      	b.n	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d52ae:	7802      	ldrb	r2, [r0, #0]
   d52b0:	2ae5      	cmp	r2, #229	; 0xe5
   d52b2:	d000      	beq.n	d52b6 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d52b4:	b942      	cbnz	r2, d52c8 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d52b6:	2c00      	cmp	r4, #0
   d52b8:	bf08      	it	eq
   d52ba:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d52bc:	42bc      	cmp	r4, r7
        freeFound++;
   d52be:	bf3c      	itt	cc
   d52c0:	3401      	addcc	r4, #1
   d52c2:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d52c4:	b922      	cbnz	r2, d52d0 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d52c6:	e081      	b.n	d53cc <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d52c8:	42bc      	cmp	r4, r7
   d52ca:	bf38      	it	cc
   d52cc:	2400      	movcc	r4, #0
   d52ce:	e003      	b.n	d52d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d52d0:	2ae5      	cmp	r2, #229	; 0xe5
   d52d2:	d101      	bne.n	d52d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d52d4:	2500      	movs	r5, #0
   d52d6:	e7db      	b.n	d5290 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d52d8:	2a2e      	cmp	r2, #46	; 0x2e
   d52da:	d0fb      	beq.n	d52d4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d52dc:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d52de:	290f      	cmp	r1, #15
   d52e0:	d152      	bne.n	d5388 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d52e2:	b93d      	cbnz	r5, d52f4 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d52e4:	0651      	lsls	r1, r2, #25
   d52e6:	d5d3      	bpl.n	d5290 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d52e8:	7b43      	ldrb	r3, [r0, #13]
   d52ea:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d52ec:	f002 051f 	and.w	r5, r2, #31
   d52f0:	462b      	mov	r3, r5
   d52f2:	e007      	b.n	d5304 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d52f4:	3b01      	subs	r3, #1
   d52f6:	b2db      	uxtb	r3, r3
   d52f8:	429a      	cmp	r2, r3
   d52fa:	d1eb      	bne.n	d52d4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d52fc:	7b42      	ldrb	r2, [r0, #13]
   d52fe:	9903      	ldr	r1, [sp, #12]
   d5300:	4291      	cmp	r1, r2
   d5302:	d1e7      	bne.n	d52d4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d5304:	1e5a      	subs	r2, r3, #1
   d5306:	f04f 0c0d 	mov.w	ip, #13
   d530a:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d530e:	9a02      	ldr	r2, [sp, #8]
   d5310:	4562      	cmp	r2, ip
   d5312:	d9df      	bls.n	d52d4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5314:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d5318:	f1be 0f04 	cmp.w	lr, #4
   d531c:	fa5f f28e 	uxtb.w	r2, lr
   d5320:	d804      	bhi.n	d532c <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d5322:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d5326:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d532a:	e00c      	b.n	d5346 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d532c:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d532e:	bf95      	itete	ls
   d5330:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5334:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5338:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d533c:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5340:	bf94      	ite	ls
   d5342:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5344:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d5346:	9902      	ldr	r1, [sp, #8]
   d5348:	4561      	cmp	r1, ip
   d534a:	d103      	bne.n	d5354 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d534c:	2a00      	cmp	r2, #0
   d534e:	bf18      	it	ne
   d5350:	2500      	movne	r5, #0
   d5352:	e79d      	b.n	d5290 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5354:	2aff      	cmp	r2, #255	; 0xff
   d5356:	d8bd      	bhi.n	d52d4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5358:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d535a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d535e:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5360:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d5364:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5368:	bf98      	it	ls
   d536a:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d536c:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5370:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5374:	bf98      	it	ls
   d5376:	b2d2      	uxtbls	r2, r2
   d5378:	f1bc 0f19 	cmp.w	ip, #25
   d537c:	bf9c      	itt	ls
   d537e:	3120      	addls	r1, #32
   d5380:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5382:	4291      	cmp	r1, r2
   d5384:	d1a6      	bne.n	d52d4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5386:	e0fb      	b.n	d5580 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5388:	0709      	lsls	r1, r1, #28
   d538a:	d4a3      	bmi.n	d52d4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d538c:	b14d      	cbz	r5, d53a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d538e:	2b01      	cmp	r3, #1
   d5390:	f47f af5b 	bne.w	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5394:	f7ff fdfd 	bl	d4f92 <_ZN7FatFile11lfnChecksumEPh>
   d5398:	9b03      	ldr	r3, [sp, #12]
   d539a:	4283      	cmp	r3, r0
   d539c:	f47f af55 	bne.w	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d53a0:	e00f      	b.n	d53c2 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d53a2:	220b      	movs	r2, #11
   d53a4:	9906      	ldr	r1, [sp, #24]
   d53a6:	9307      	str	r3, [sp, #28]
   d53a8:	f003 fe54 	bl	d9054 <memcmp>
   d53ac:	9b07      	ldr	r3, [sp, #28]
   d53ae:	2800      	cmp	r0, #0
   d53b0:	f47f af6e 	bne.w	d5290 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d53b4:	f899 2000 	ldrb.w	r2, [r9]
   d53b8:	07d2      	lsls	r2, r2, #31
   d53ba:	d502      	bpl.n	d53c2 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d53bc:	2201      	movs	r2, #1
   d53be:	9204      	str	r2, [sp, #16]
   d53c0:	e766      	b.n	d5290 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d53c2:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d53c6:	f000 80d1 	beq.w	d556c <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d53ca:	e73e      	b.n	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d53cc:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d53d0:	f43f af3b 	beq.w	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d53d4:	f00b 0303 	and.w	r3, fp, #3
   d53d8:	3b01      	subs	r3, #1
   d53da:	2b01      	cmp	r3, #1
   d53dc:	f63f af35 	bhi.w	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d53e0:	2c00      	cmp	r4, #0
   d53e2:	bf08      	it	eq
   d53e4:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d53e6:	42bc      	cmp	r4, r7
   d53e8:	d302      	bcc.n	d53f0 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d53ea:	9b04      	ldr	r3, [sp, #16]
   d53ec:	b9cb      	cbnz	r3, d5422 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d53ee:	e01f      	b.n	d5430 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d53f0:	2100      	movs	r1, #0
   d53f2:	4630      	mov	r0, r6
   d53f4:	f000 f9fe 	bl	d57f4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d53f8:	b910      	cbnz	r0, d5400 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d53fa:	7873      	ldrb	r3, [r6, #1]
   d53fc:	b15b      	cbz	r3, d5416 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d53fe:	e724      	b.n	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d5400:	3401      	adds	r4, #1
   d5402:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5404:	e7ef      	b.n	d53e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d5406:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d5408:	791b      	ldrb	r3, [r3, #4]
   d540a:	2b01      	cmp	r3, #1
   d540c:	d8ed      	bhi.n	d53ea <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d540e:	3410      	adds	r4, #16
   d5410:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d5412:	42a7      	cmp	r7, r4
   d5414:	d9e9      	bls.n	d53ea <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d5416:	4630      	mov	r0, r6
   d5418:	f000 f8d2 	bl	d55c0 <_ZN7FatFile13addDirClusterEv>
   d541c:	2800      	cmp	r0, #0
   d541e:	d1f2      	bne.n	d5406 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d5420:	e713      	b.n	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d5422:	4649      	mov	r1, r9
   d5424:	4630      	mov	r0, r6
   d5426:	f7ff feaf 	bl	d5188 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d542a:	2800      	cmp	r0, #0
   d542c:	f43f af0d 	beq.w	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5430:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d5434:	4630      	mov	r0, r6
   d5436:	f000 f9fa 	bl	d582e <_ZN7FatFile7seekSetEm>
   d543a:	2800      	cmp	r0, #0
   d543c:	f43f af05 	beq.w	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5440:	1e7d      	subs	r5, r7, #1
   d5442:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5444:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5446:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d544a:	f04f 080f 	mov.w	r8, #15
   d544e:	e041      	b.n	d54d4 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5450:	2100      	movs	r1, #0
   d5452:	4630      	mov	r0, r6
   d5454:	f000 f9ce 	bl	d57f4 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5458:	4607      	mov	r7, r0
   d545a:	2800      	cmp	r0, #0
   d545c:	f43f aef5 	beq.w	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5460:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d5462:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5466:	42ac      	cmp	r4, r5
   d5468:	f043 0301 	orr.w	r3, r3, #1
   d546c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5470:	bf0c      	ite	eq
   d5472:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d5476:	4622      	movne	r2, r4
   d5478:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d547a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d547e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d5482:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5486:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5488:	f7ff fd83 	bl	d4f92 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d548c:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d548e:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5490:	f887 a01a 	strb.w	sl, [r7, #26]
   d5494:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5498:	f002 021f 	and.w	r2, r2, #31
   d549c:	230d      	movs	r3, #13
   d549e:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d54a0:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d54a4:	435a      	muls	r2, r3
   d54a6:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d54a8:	9902      	ldr	r1, [sp, #8]
   d54aa:	4291      	cmp	r1, r2
   d54ac:	d915      	bls.n	d54da <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d54ae:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d54b2:	2b04      	cmp	r3, #4
   d54b4:	fa5f fc83 	uxtb.w	ip, r3
   d54b8:	f103 0001 	add.w	r0, r3, #1
   d54bc:	d813      	bhi.n	d54e6 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d54be:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d54c2:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d54c6:	280d      	cmp	r0, #13
   d54c8:	f102 0201 	add.w	r2, r2, #1
   d54cc:	4603      	mov	r3, r0
   d54ce:	d1eb      	bne.n	d54a8 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d54d0:	3c01      	subs	r4, #1
   d54d2:	b2e4      	uxtb	r4, r4
   d54d4:	2c00      	cmp	r4, #0
   d54d6:	d1bb      	bne.n	d5450 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d54d8:	e00e      	b.n	d54f8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d54da:	bf14      	ite	ne
   d54dc:	f04f 31ff 	movne.w	r1, #4294967295
   d54e0:	2100      	moveq	r1, #0
   d54e2:	b289      	uxth	r1, r1
   d54e4:	e7e5      	b.n	d54b2 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d54e6:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d54ea:	bf94      	ite	ls
   d54ec:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d54f0:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d54f4:	8099      	strh	r1, [r3, #4]
   d54f6:	e7e6      	b.n	d54c6 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d54f8:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d54fa:	4621      	mov	r1, r4
   d54fc:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d54fe:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5502:	f000 f977 	bl	d57f4 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d5506:	4607      	mov	r7, r0
   d5508:	2800      	cmp	r0, #0
   d550a:	f43f ae9e 	beq.w	d524a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d550e:	2220      	movs	r2, #32
   d5510:	4621      	mov	r1, r4
   d5512:	f003 fdb9 	bl	d9088 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d5516:	464b      	mov	r3, r9
   d5518:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d551c:	603a      	str	r2, [r7, #0]
   d551e:	685a      	ldr	r2, [r3, #4]
   d5520:	607a      	str	r2, [r7, #4]
   d5522:	891a      	ldrh	r2, [r3, #8]
   d5524:	813a      	strh	r2, [r7, #8]
   d5526:	7a9b      	ldrb	r3, [r3, #10]
   d5528:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d552a:	f899 3000 	ldrb.w	r3, [r9]
   d552e:	f003 0318 	and.w	r3, r3, #24
   d5532:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5534:	4b18      	ldr	r3, [pc, #96]	; (d5598 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d5536:	681b      	ldr	r3, [r3, #0]
   d5538:	b12b      	cbz	r3, d5546 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d553a:	f107 010e 	add.w	r1, r7, #14
   d553e:	f107 0010 	add.w	r0, r7, #16
   d5542:	4798      	blx	r3
   d5544:	e006      	b.n	d5554 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5546:	2321      	movs	r3, #33	; 0x21
   d5548:	743b      	strb	r3, [r7, #16]
   d554a:	2328      	movs	r3, #40	; 0x28
   d554c:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d554e:	2308      	movs	r3, #8
   d5550:	73bc      	strb	r4, [r7, #14]
   d5552:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5554:	8a3b      	ldrh	r3, [r7, #16]
   d5556:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5558:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d555a:	89fb      	ldrh	r3, [r7, #14]
   d555c:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d555e:	68b2      	ldr	r2, [r6, #8]
   d5560:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5564:	f043 0301 	orr.w	r3, r3, #1
   d5568:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d556c:	9500      	str	r5, [sp, #0]
   d556e:	465b      	mov	r3, fp
   d5570:	4652      	mov	r2, sl
   d5572:	4631      	mov	r1, r6
   d5574:	9805      	ldr	r0, [sp, #20]
   d5576:	f000 f9a3 	bl	d58c0 <_ZN7FatFile15openCachedEntryEPS_tih>
   d557a:	e009      	b.n	d5590 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d557c:	2701      	movs	r7, #1
   d557e:	e677      	b.n	d5270 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5580:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5584:	f1be 0f0d 	cmp.w	lr, #13
   d5588:	f43f ae82 	beq.w	d5290 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d558c:	46d4      	mov	ip, sl
   d558e:	e6c3      	b.n	d5318 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5590:	b009      	add	sp, #36	; 0x24
   d5592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5596:	bf00      	nop
   d5598:	2003e3d0 	.word	0x2003e3d0

000d559c <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d559c:	f001 b96e 	b.w	d687c <HAL_Pin_Map>

000d55a0 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d55a0:	f001 b96c 	b.w	d687c <HAL_Pin_Map>

000d55a4 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d55a4:	f001 b96a 	b.w	d687c <HAL_Pin_Map>

000d55a8 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d55a8:	f001 b968 	b.w	d687c <HAL_Pin_Map>

000d55ac <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d55ac:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d55ae:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d55b0:	f043 0304 	orr.w	r3, r3, #4
   d55b4:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d55b6:	f100 0210 	add.w	r2, r0, #16
   d55ba:	6880      	ldr	r0, [r0, #8]
   d55bc:	f000 bc12 	b.w	d5de4 <_ZN9FatVolume15allocateClusterEmPm>

000d55c0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d55c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d55c4:	7803      	ldrb	r3, [r0, #0]
   d55c6:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d55ca:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d55cc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d55d0:	b10b      	cbz	r3, d55d6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d55d2:	2600      	movs	r6, #0
   d55d4:	e02e      	b.n	d5634 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d55d6:	6942      	ldr	r2, [r0, #20]
   d55d8:	4b18      	ldr	r3, [pc, #96]	; (d563c <_ZN7FatFile13addDirClusterEv+0x7c>)
   d55da:	429a      	cmp	r2, r3
   d55dc:	d8f9      	bhi.n	d55d2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d55de:	f7ff ffe5 	bl	d55ac <_ZN7FatFile10addClusterEv>
   d55e2:	4606      	mov	r6, r0
   d55e4:	2800      	cmp	r0, #0
   d55e6:	d0f4      	beq.n	d55d2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d55e8:	6921      	ldr	r1, [r4, #16]
   d55ea:	68a0      	ldr	r0, [r4, #8]
   d55ec:	f000 fb8f 	bl	d5d0e <_ZNK9FatVolume17clusterFirstBlockEm>
   d55f0:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d55f2:	68a0      	ldr	r0, [r4, #8]
   d55f4:	2205      	movs	r2, #5
   d55f6:	4639      	mov	r1, r7
   d55f8:	3024      	adds	r0, #36	; 0x24
   d55fa:	f000 fb64 	bl	d5cc6 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d55fe:	4680      	mov	r8, r0
   d5600:	2800      	cmp	r0, #0
   d5602:	d0e6      	beq.n	d55d2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5604:	4629      	mov	r1, r5
   d5606:	f44f 7200 	mov.w	r2, #512	; 0x200
   d560a:	f003 fd3d 	bl	d9088 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d560e:	2501      	movs	r5, #1
   d5610:	68a3      	ldr	r3, [r4, #8]
   d5612:	791a      	ldrb	r2, [r3, #4]
   d5614:	42aa      	cmp	r2, r5
   d5616:	d909      	bls.n	d562c <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5618:	4642      	mov	r2, r8
   d561a:	19e9      	adds	r1, r5, r7
   d561c:	6818      	ldr	r0, [r3, #0]
   d561e:	f000 fecf 	bl	d63c0 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5622:	2800      	cmp	r0, #0
   d5624:	d0d5      	beq.n	d55d2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5626:	3501      	adds	r5, #1
   d5628:	b2ed      	uxtb	r5, r5
   d562a:	e7f1      	b.n	d5610 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d562c:	6963      	ldr	r3, [r4, #20]
   d562e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5632:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5634:	4630      	mov	r0, r6
   d5636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d563a:	bf00      	nop
   d563c:	001ffdff 	.word	0x001ffdff

000d5640 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5640:	b510      	push	{r4, lr}
   d5642:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5644:	6880      	ldr	r0, [r0, #8]
   d5646:	460a      	mov	r2, r1
   d5648:	3024      	adds	r0, #36	; 0x24
   d564a:	69a1      	ldr	r1, [r4, #24]
   d564c:	f000 fb3b 	bl	d5cc6 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5650:	b120      	cbz	r0, d565c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5652:	88a3      	ldrh	r3, [r4, #4]
   d5654:	f003 030f 	and.w	r3, r3, #15
   d5658:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d565c:	bd10      	pop	{r4, pc}

000d565e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d565e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5660:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5662:	4605      	mov	r5, r0
   d5664:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5666:	b984      	cbnz	r4, d568a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5668:	2224      	movs	r2, #36	; 0x24
   d566a:	4621      	mov	r1, r4
   d566c:	f003 fd0c 	bl	d9088 <memset>

  m_vol = vol;
   d5670:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5672:	79f3      	ldrb	r3, [r6, #7]
   d5674:	2b10      	cmp	r3, #16
   d5676:	d003      	beq.n	d5680 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5678:	2b20      	cmp	r3, #32
   d567a:	d106      	bne.n	d568a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d567c:	2340      	movs	r3, #64	; 0x40
   d567e:	e000      	b.n	d5682 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5680:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5682:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5684:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5686:	70a8      	strb	r0, [r5, #2]
   d5688:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d568a:	2000      	movs	r0, #0
   d568c:	bd70      	pop	{r4, r5, r6, pc}

000d568e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d568e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5692:	7803      	ldrb	r3, [r0, #0]
   d5694:	4604      	mov	r4, r0
   d5696:	4689      	mov	r9, r1
   d5698:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d569a:	b14b      	cbz	r3, d56b0 <_ZN7FatFile4readEPvj+0x22>
   d569c:	7882      	ldrb	r2, [r0, #2]
   d569e:	07d1      	lsls	r1, r2, #31
   d56a0:	d506      	bpl.n	d56b0 <_ZN7FatFile4readEPvj+0x22>
   d56a2:	e00c      	b.n	d56be <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d56a4:	465a      	mov	r2, fp
   d56a6:	6921      	ldr	r1, [r4, #16]
   d56a8:	f000 fb37 	bl	d5d1a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d56ac:	2800      	cmp	r0, #0
   d56ae:	da3d      	bge.n	d572c <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d56b0:	7863      	ldrb	r3, [r4, #1]
   d56b2:	f043 0302 	orr.w	r3, r3, #2
   d56b6:	7063      	strb	r3, [r4, #1]
  return -1;
   d56b8:	f04f 30ff 	mov.w	r0, #4294967295
   d56bc:	e097      	b.n	d57ee <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d56be:	071a      	lsls	r2, r3, #28
   d56c0:	d503      	bpl.n	d56ca <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d56c2:	69e3      	ldr	r3, [r4, #28]
   d56c4:	6962      	ldr	r2, [r4, #20]
   d56c6:	1a9b      	subs	r3, r3, r2
   d56c8:	e007      	b.n	d56da <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d56ca:	069a      	lsls	r2, r3, #26
   d56cc:	d508      	bpl.n	d56e0 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d56ce:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d56d0:	891a      	ldrh	r2, [r3, #8]
   d56d2:	6963      	ldr	r3, [r4, #20]
   d56d4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d56d8:	b29b      	uxth	r3, r3
   d56da:	429d      	cmp	r5, r3
   d56dc:	bf28      	it	cs
   d56de:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d56e0:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d56e2:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d56e6:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d56ea:	2e00      	cmp	r6, #0
   d56ec:	d035      	beq.n	d575a <_ZN7FatFile4readEPvj+0xcc>
   d56ee:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d56f0:	6963      	ldr	r3, [r4, #20]
   d56f2:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d56f4:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d56f8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d56fc:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5700:	d002      	beq.n	d5708 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5702:	6a03      	ldr	r3, [r0, #32]
   d5704:	4419      	add	r1, r3
   d5706:	e01d      	b.n	d5744 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5708:	f890 8005 	ldrb.w	r8, [r0, #5]
   d570c:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5710:	f1ba 0f00 	cmp.w	sl, #0
   d5714:	d110      	bne.n	d5738 <_ZN7FatFile4readEPvj+0xaa>
   d5716:	f1b8 0f00 	cmp.w	r8, #0
   d571a:	d10d      	bne.n	d5738 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d571c:	2b00      	cmp	r3, #0
   d571e:	d1c1      	bne.n	d56a4 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5720:	0653      	lsls	r3, r2, #25
   d5722:	bf4c      	ite	mi
   d5724:	6a03      	ldrmi	r3, [r0, #32]
   d5726:	6a23      	ldrpl	r3, [r4, #32]
   d5728:	6123      	str	r3, [r4, #16]
   d572a:	e005      	b.n	d5738 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d572c:	d104      	bne.n	d5738 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d572e:	7823      	ldrb	r3, [r4, #0]
   d5730:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5734:	d111      	bne.n	d575a <_ZN7FatFile4readEPvj+0xcc>
   d5736:	e7bb      	b.n	d56b0 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5738:	6921      	ldr	r1, [r4, #16]
   d573a:	68a0      	ldr	r0, [r4, #8]
   d573c:	f000 fae7 	bl	d5d0e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5740:	eb08 0100 	add.w	r1, r8, r0
   d5744:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5746:	f1ba 0f00 	cmp.w	sl, #0
   d574a:	d135      	bne.n	d57b8 <_ZN7FatFile4readEPvj+0x12a>
   d574c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5750:	d332      	bcc.n	d57b8 <_ZN7FatFile4readEPvj+0x12a>
   d5752:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5754:	4299      	cmp	r1, r3
   d5756:	d102      	bne.n	d575e <_ZN7FatFile4readEPvj+0xd0>
   d5758:	e02e      	b.n	d57b8 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d575a:	1ba8      	subs	r0, r5, r6
   d575c:	e047      	b.n	d57ee <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d575e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5762:	d31b      	bcc.n	d579c <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5764:	7822      	ldrb	r2, [r4, #0]
   d5766:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5768:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d576c:	d406      	bmi.n	d577c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d576e:	7902      	ldrb	r2, [r0, #4]
   d5770:	ebc8 0202 	rsb	r2, r8, r2
   d5774:	b2d2      	uxtb	r2, r2
   d5776:	4592      	cmp	sl, r2
   d5778:	bf28      	it	cs
   d577a:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d577c:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d577e:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5782:	d207      	bcs.n	d5794 <_ZN7FatFile4readEPvj+0x106>
   d5784:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5786:	4653      	mov	r3, sl
   d5788:	464a      	mov	r2, r9
   d578a:	6800      	ldr	r0, [r0, #0]
   d578c:	f000 fdd6 	bl	d633c <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5790:	b960      	cbnz	r0, d57ac <_ZN7FatFile4readEPvj+0x11e>
   d5792:	e78d      	b.n	d56b0 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5794:	4453      	add	r3, sl
   d5796:	4299      	cmp	r1, r3
   d5798:	d321      	bcc.n	d57de <_ZN7FatFile4readEPvj+0x150>
   d579a:	e7f3      	b.n	d5784 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d579c:	464a      	mov	r2, r9
   d579e:	6800      	ldr	r0, [r0, #0]
   d57a0:	f000 fd84 	bl	d62ac <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d57a4:	2800      	cmp	r0, #0
   d57a6:	d083      	beq.n	d56b0 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d57a8:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d57ac:	6963      	ldr	r3, [r4, #20]
   d57ae:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d57b0:	44b9      	add	r9, r7
    m_curPosition += n;
   d57b2:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d57b4:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d57b6:	e798      	b.n	d56ea <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d57b8:	2200      	movs	r2, #0
   d57ba:	3024      	adds	r0, #36	; 0x24
   d57bc:	f000 fa83 	bl	d5cc6 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d57c0:	2800      	cmp	r0, #0
   d57c2:	f43f af75 	beq.w	d56b0 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d57c6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d57ca:	42b7      	cmp	r7, r6
   d57cc:	bf28      	it	cs
   d57ce:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d57d0:	eb00 010a 	add.w	r1, r0, sl
   d57d4:	463a      	mov	r2, r7
   d57d6:	4648      	mov	r0, r9
   d57d8:	f003 fc4b 	bl	d9072 <memcpy>
   d57dc:	e7e6      	b.n	d57ac <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d57de:	3024      	adds	r0, #36	; 0x24
   d57e0:	9101      	str	r1, [sp, #4]
   d57e2:	f000 fa49 	bl	d5c78 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d57e6:	9901      	ldr	r1, [sp, #4]
   d57e8:	2800      	cmp	r0, #0
   d57ea:	d1cb      	bne.n	d5784 <_ZN7FatFile4readEPvj+0xf6>
   d57ec:	e760      	b.n	d56b0 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d57ee:	b003      	add	sp, #12
   d57f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d57f4 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d57f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d57f6:	6943      	ldr	r3, [r0, #20]
   d57f8:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d57fc:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d57fe:	b105      	cbz	r5, d5802 <_ZN7FatFile12readDirCacheEb+0xe>
   d5800:	b969      	cbnz	r1, d581e <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5802:	2201      	movs	r2, #1
   d5804:	f10d 0107 	add.w	r1, sp, #7
   d5808:	4620      	mov	r0, r4
   d580a:	f7ff ff40 	bl	d568e <_ZN7FatFile4readEPvj>
   d580e:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5810:	2801      	cmp	r0, #1
   d5812:	d001      	beq.n	d5818 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5814:	2000      	movs	r0, #0
   d5816:	e008      	b.n	d582a <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5818:	6963      	ldr	r3, [r4, #20]
   d581a:	331f      	adds	r3, #31
   d581c:	e000      	b.n	d5820 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d581e:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5820:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5822:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5824:	3030      	adds	r0, #48	; 0x30
   d5826:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d582a:	b003      	add	sp, #12
   d582c:	bd30      	pop	{r4, r5, pc}

000d582e <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d582e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5832:	460e      	mov	r6, r1
   d5834:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5836:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5838:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d583a:	2900      	cmp	r1, #0
   d583c:	d039      	beq.n	d58b2 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d583e:	6945      	ldr	r5, [r0, #20]
   d5840:	42b5      	cmp	r5, r6
   d5842:	d03a      	beq.n	d58ba <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5844:	b90e      	cbnz	r6, d584a <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5846:	6106      	str	r6, [r0, #16]
    goto done;
   d5848:	e031      	b.n	d58ae <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d584a:	070b      	lsls	r3, r1, #28
   d584c:	d503      	bpl.n	d5856 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d584e:	69c3      	ldr	r3, [r0, #28]
   d5850:	429e      	cmp	r6, r3
   d5852:	d82e      	bhi.n	d58b2 <_ZN7FatFile7seekSetEm+0x84>
   d5854:	e007      	b.n	d5866 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5856:	0688      	lsls	r0, r1, #26
   d5858:	d505      	bpl.n	d5866 <_ZN7FatFile7seekSetEm+0x38>
   d585a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d585c:	891b      	ldrh	r3, [r3, #8]
   d585e:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5862:	d826      	bhi.n	d58b2 <_ZN7FatFile7seekSetEm+0x84>
   d5864:	e023      	b.n	d58ae <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5866:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d586a:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d586e:	1e6a      	subs	r2, r5, #1
   d5870:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5874:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5876:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5878:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d587a:	429a      	cmp	r2, r3
   d587c:	d800      	bhi.n	d5880 <_ZN7FatFile7seekSetEm+0x52>
   d587e:	b94d      	cbnz	r5, d5894 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5880:	064a      	lsls	r2, r1, #25
   d5882:	bf4c      	ite	mi
   d5884:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5888:	6a22      	ldrpl	r2, [r4, #32]
   d588a:	6122      	str	r2, [r4, #16]
   d588c:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d588e:	f104 0810 	add.w	r8, r4, #16
   d5892:	e00a      	b.n	d58aa <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5894:	1a9b      	subs	r3, r3, r2
   d5896:	e7f9      	b.n	d588c <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5898:	4642      	mov	r2, r8
   d589a:	6921      	ldr	r1, [r4, #16]
   d589c:	68a0      	ldr	r0, [r4, #8]
   d589e:	f000 fa3c 	bl	d5d1a <_ZN9FatVolume6fatGetEmPm>
   d58a2:	2800      	cmp	r0, #0
   d58a4:	f105 35ff 	add.w	r5, r5, #4294967295
   d58a8:	dd03      	ble.n	d58b2 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d58aa:	2d00      	cmp	r5, #0
   d58ac:	d1f4      	bne.n	d5898 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d58ae:	6166      	str	r6, [r4, #20]
   d58b0:	e003      	b.n	d58ba <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d58b2:	6127      	str	r7, [r4, #16]
  return false;
   d58b4:	2000      	movs	r0, #0
   d58b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d58ba:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d58bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d58c0 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d58c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58c2:	460f      	mov	r7, r1
   d58c4:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d58c6:	2100      	movs	r1, #0
   d58c8:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d58ca:	4604      	mov	r4, r0
   d58cc:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d58ce:	f003 fbdb 	bl	d9088 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d58d2:	68b8      	ldr	r0, [r7, #8]
   d58d4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d58d6:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d58da:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d58dc:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d58e0:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d58e2:	6a3b      	ldr	r3, [r7, #32]
   d58e4:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d58e6:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d58e8:	7acb      	ldrb	r3, [r1, #11]
   d58ea:	071d      	lsls	r5, r3, #28
   d58ec:	d44c      	bmi.n	d5988 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d58ee:	1883      	adds	r3, r0, r2
   d58f0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d58f4:	f003 0317 	and.w	r3, r3, #23
   d58f8:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d58fa:	7ac9      	ldrb	r1, [r1, #11]
   d58fc:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5900:	bf04      	itt	eq
   d5902:	f043 0308 	orreq.w	r3, r3, #8
   d5906:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5908:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d590c:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d590e:	f006 0303 	and.w	r3, r6, #3
   d5912:	2b01      	cmp	r3, #1
   d5914:	d009      	beq.n	d592a <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5916:	2b02      	cmp	r3, #2
   d5918:	d005      	beq.n	d5926 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d591a:	2b00      	cmp	r3, #0
   d591c:	d134      	bne.n	d5988 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d591e:	0571      	lsls	r1, r6, #21
   d5920:	d432      	bmi.n	d5988 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5922:	2301      	movs	r3, #1
   d5924:	e002      	b.n	d592c <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5926:	2303      	movs	r3, #3
   d5928:	e000      	b.n	d592c <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d592a:	2302      	movs	r3, #2
   d592c:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d592e:	78a1      	ldrb	r1, [r4, #2]
   d5930:	078b      	lsls	r3, r1, #30
   d5932:	d503      	bpl.n	d593c <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5934:	7823      	ldrb	r3, [r4, #0]
   d5936:	f013 0f11 	tst.w	r3, #17
   d593a:	d125      	bne.n	d5988 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d593c:	b24b      	sxtb	r3, r1
   d593e:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5942:	f006 0108 	and.w	r1, r6, #8
   d5946:	bf14      	ite	ne
   d5948:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d594c:	2700      	moveq	r7, #0
   d594e:	4319      	orrs	r1, r3
   d5950:	4339      	orrs	r1, r7
   d5952:	70a1      	strb	r1, [r4, #2]
   d5954:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5956:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5958:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d595a:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d595c:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5960:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5964:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5968:	d504      	bpl.n	d5974 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d596a:	b181      	cbz	r1, d598e <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d596c:	f000 fa75 	bl	d5e5a <_ZN9FatVolume9freeChainEm>
   d5970:	b968      	cbnz	r0, d598e <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5972:	e009      	b.n	d5988 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5974:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5976:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5978:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d597a:	0473      	lsls	r3, r6, #17
   d597c:	d50c      	bpl.n	d5998 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d597e:	69e1      	ldr	r1, [r4, #28]
   d5980:	4620      	mov	r0, r4
   d5982:	f7ff ff54 	bl	d582e <_ZN7FatFile7seekSetEm>
   d5986:	b938      	cbnz	r0, d5998 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5988:	2000      	movs	r0, #0
   d598a:	7020      	strb	r0, [r4, #0]
  return false;
   d598c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d598e:	78a3      	ldrb	r3, [r4, #2]
   d5990:	f043 0304 	orr.w	r3, r3, #4
   d5994:	70a3      	strb	r3, [r4, #2]
   d5996:	e7f0      	b.n	d597a <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5998:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d599c <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d599c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d599e:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d59a0:	4604      	mov	r4, r0
  if (!isOpen()) {
   d59a2:	b90b      	cbnz	r3, d59a8 <_ZN7FatFile4syncEv+0xc>
    return true;
   d59a4:	2001      	movs	r0, #1
   d59a6:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d59a8:	7883      	ldrb	r3, [r0, #2]
   d59aa:	075a      	lsls	r2, r3, #29
   d59ac:	d523      	bpl.n	d59f6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d59ae:	2101      	movs	r1, #1
   d59b0:	f7ff fe46 	bl	d5640 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d59b4:	4605      	mov	r5, r0
   d59b6:	b928      	cbnz	r0, d59c4 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d59b8:	7863      	ldrb	r3, [r4, #1]
   d59ba:	f043 0301 	orr.w	r3, r3, #1
   d59be:	7063      	strb	r3, [r4, #1]
  return false;
   d59c0:	2000      	movs	r0, #0
   d59c2:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d59c4:	7803      	ldrb	r3, [r0, #0]
   d59c6:	2be5      	cmp	r3, #229	; 0xe5
   d59c8:	d0f6      	beq.n	d59b8 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d59ca:	7823      	ldrb	r3, [r4, #0]
   d59cc:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d59ce:	bf44      	itt	mi
   d59d0:	69e3      	ldrmi	r3, [r4, #28]
   d59d2:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d59d4:	8c23      	ldrh	r3, [r4, #32]
   d59d6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d59d8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d59da:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d59dc:	4b09      	ldr	r3, [pc, #36]	; (d5a04 <_ZN7FatFile4syncEv+0x68>)
   d59de:	681b      	ldr	r3, [r3, #0]
   d59e0:	b12b      	cbz	r3, d59ee <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d59e2:	f100 0116 	add.w	r1, r0, #22
   d59e6:	3018      	adds	r0, #24
   d59e8:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d59ea:	8b2b      	ldrh	r3, [r5, #24]
   d59ec:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d59ee:	78a3      	ldrb	r3, [r4, #2]
   d59f0:	f023 0304 	bic.w	r3, r3, #4
   d59f4:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d59f6:	68a0      	ldr	r0, [r4, #8]
   d59f8:	f7ff fabe 	bl	d4f78 <_ZN9FatVolume9cacheSyncEv>
   d59fc:	2800      	cmp	r0, #0
   d59fe:	d0db      	beq.n	d59b8 <_ZN7FatFile4syncEv+0x1c>
   d5a00:	e7d0      	b.n	d59a4 <_ZN7FatFile4syncEv+0x8>
   d5a02:	bf00      	nop
   d5a04:	2003e3d0 	.word	0x2003e3d0

000d5a08 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5a08:	b510      	push	{r4, lr}
   d5a0a:	4604      	mov	r4, r0
  bool rtn = sync();
   d5a0c:	f7ff ffc6 	bl	d599c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5a10:	2300      	movs	r3, #0
   d5a12:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5a14:	bd10      	pop	{r4, pc}

000d5a16 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5a16:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5a18:	b093      	sub	sp, #76	; 0x4c
   d5a1a:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5a1c:	2300      	movs	r3, #0
   d5a1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5a22:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5a26:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5a28:	9201      	str	r2, [sp, #4]
   d5a2a:	4606      	mov	r6, r0
   d5a2c:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5a2e:	b10b      	cbz	r3, d5a34 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5a30:	2000      	movs	r0, #0
   d5a32:	e03d      	b.n	d5ab0 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5a34:	780b      	ldrb	r3, [r1, #0]
   d5a36:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5a3a:	d0f9      	beq.n	d5a30 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5a3c:	7813      	ldrb	r3, [r2, #0]
   d5a3e:	2b2f      	cmp	r3, #47	; 0x2f
   d5a40:	d112      	bne.n	d5a68 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5a42:	9b01      	ldr	r3, [sp, #4]
   d5a44:	781a      	ldrb	r2, [r3, #0]
   d5a46:	2a2f      	cmp	r2, #47	; 0x2f
   d5a48:	d102      	bne.n	d5a50 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5a4a:	3301      	adds	r3, #1
   d5a4c:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5a4e:	e7f8      	b.n	d5a42 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5a50:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5a52:	b91a      	cbnz	r2, d5a5c <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5a54:	4630      	mov	r0, r6
   d5a56:	f7ff fe02 	bl	d565e <_ZN7FatFile8openRootEP9FatVolume>
   d5a5a:	e029      	b.n	d5ab0 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5a5c:	a809      	add	r0, sp, #36	; 0x24
   d5a5e:	f7ff fdfe 	bl	d565e <_ZN7FatFile8openRootEP9FatVolume>
   d5a62:	2800      	cmp	r0, #0
   d5a64:	d0e4      	beq.n	d5a30 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5a66:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5a68:	aa01      	add	r2, sp, #4
   d5a6a:	a903      	add	r1, sp, #12
   d5a6c:	9801      	ldr	r0, [sp, #4]
   d5a6e:	f7ff fa9f 	bl	d4fb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5a72:	2800      	cmp	r0, #0
   d5a74:	d0dc      	beq.n	d5a30 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5a76:	9b01      	ldr	r3, [sp, #4]
   d5a78:	781b      	ldrb	r3, [r3, #0]
   d5a7a:	b19b      	cbz	r3, d5aa4 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5a7c:	2300      	movs	r3, #0
   d5a7e:	aa03      	add	r2, sp, #12
   d5a80:	4621      	mov	r1, r4
   d5a82:	4630      	mov	r0, r6
   d5a84:	f7ff fbd6 	bl	d5234 <_ZN7FatFile4openEPS_P7fname_ti>
   d5a88:	2800      	cmp	r0, #0
   d5a8a:	d0d1      	beq.n	d5a30 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5a8c:	4635      	mov	r5, r6
   d5a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a90:	ac09      	add	r4, sp, #36	; 0x24
   d5a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a98:	682b      	ldr	r3, [r5, #0]
   d5a9a:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5a9c:	4630      	mov	r0, r6
   d5a9e:	f7ff ffb3 	bl	d5a08 <_ZN7FatFile5closeEv>
   d5aa2:	e7e0      	b.n	d5a66 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5aa4:	463b      	mov	r3, r7
   d5aa6:	aa03      	add	r2, sp, #12
   d5aa8:	4621      	mov	r1, r4
   d5aaa:	4630      	mov	r0, r6
   d5aac:	f7ff fbc2 	bl	d5234 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d5ab0:	b013      	add	sp, #76	; 0x4c
   d5ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ab4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5ab8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5aba:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5abc:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5abe:	4604      	mov	r4, r0
   d5ac0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5ac2:	d508      	bpl.n	d5ad6 <_ZN7FatFile5writeEPKvj+0x22>
   d5ac4:	7883      	ldrb	r3, [r0, #2]
   d5ac6:	079a      	lsls	r2, r3, #30
   d5ac8:	d505      	bpl.n	d5ad6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5aca:	071b      	lsls	r3, r3, #28
   d5acc:	d50b      	bpl.n	d5ae6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5ace:	69e1      	ldr	r1, [r4, #28]
   d5ad0:	f7ff fead 	bl	d582e <_ZN7FatFile7seekSetEm>
   d5ad4:	b938      	cbnz	r0, d5ae6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5ad6:	7863      	ldrb	r3, [r4, #1]
   d5ad8:	f043 0301 	orr.w	r3, r3, #1
   d5adc:	7063      	strb	r3, [r4, #1]
  return -1;
   d5ade:	f04f 30ff 	mov.w	r0, #4294967295
   d5ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5ae6:	6963      	ldr	r3, [r4, #20]
   d5ae8:	43db      	mvns	r3, r3
   d5aea:	4598      	cmp	r8, r3
   d5aec:	d8f3      	bhi.n	d5ad6 <_ZN7FatFile5writeEPKvj+0x22>
   d5aee:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5af0:	f04f 0a00 	mov.w	sl, #0
   d5af4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5af6:	2e00      	cmp	r6, #0
   d5af8:	f000 8081 	beq.w	d5bfe <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5afc:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5afe:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5b00:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5b04:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5b08:	d11c      	bne.n	d5b44 <_ZN7FatFile5writeEPKvj+0x90>
   d5b0a:	b9df      	cbnz	r7, d5b44 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5b0c:	6921      	ldr	r1, [r4, #16]
   d5b0e:	b171      	cbz	r1, d5b2e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5b10:	f104 0210 	add.w	r2, r4, #16
   d5b14:	f000 f901 	bl	d5d1a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5b18:	2800      	cmp	r0, #0
   d5b1a:	dbdc      	blt.n	d5ad6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5b1c:	f040 808e 	bne.w	d5c3c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5b20:	4620      	mov	r0, r4
   d5b22:	f7ff fd43 	bl	d55ac <_ZN7FatFile10addClusterEv>
   d5b26:	2800      	cmp	r0, #0
   d5b28:	f040 8088 	bne.w	d5c3c <_ZN7FatFile5writeEPKvj+0x188>
   d5b2c:	e7d3      	b.n	d5ad6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5b2e:	6a23      	ldr	r3, [r4, #32]
   d5b30:	b93b      	cbnz	r3, d5b42 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5b32:	4620      	mov	r0, r4
   d5b34:	f7ff fd3a 	bl	d55ac <_ZN7FatFile10addClusterEv>
   d5b38:	2800      	cmp	r0, #0
   d5b3a:	d0cc      	beq.n	d5ad6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5b3c:	6923      	ldr	r3, [r4, #16]
   d5b3e:	6223      	str	r3, [r4, #32]
   d5b40:	e000      	b.n	d5b44 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5b42:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5b44:	6921      	ldr	r1, [r4, #16]
   d5b46:	68a0      	ldr	r0, [r4, #8]
   d5b48:	f000 f8e1 	bl	d5d0e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5b4c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5b4e:	b917      	cbnz	r7, d5b56 <_ZN7FatFile5writeEPKvj+0xa2>
   d5b50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5b54:	d221      	bcs.n	d5b9a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5b56:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5b5a:	42b5      	cmp	r5, r6
   d5b5c:	bf28      	it	cs
   d5b5e:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5b60:	b937      	cbnz	r7, d5b70 <_ZN7FatFile5writeEPKvj+0xbc>
   d5b62:	6963      	ldr	r3, [r4, #20]
   d5b64:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5b66:	4293      	cmp	r3, r2
   d5b68:	bf34      	ite	cc
   d5b6a:	2201      	movcc	r2, #1
   d5b6c:	2205      	movcs	r2, #5
   d5b6e:	e000      	b.n	d5b72 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5b70:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5b72:	68a0      	ldr	r0, [r4, #8]
   d5b74:	3024      	adds	r0, #36	; 0x24
   d5b76:	f000 f8a6 	bl	d5cc6 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5b7a:	2800      	cmp	r0, #0
   d5b7c:	d0ab      	beq.n	d5ad6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5b7e:	4438      	add	r0, r7
   d5b80:	462a      	mov	r2, r5
   d5b82:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5b84:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5b86:	f003 fa74 	bl	d9072 <memcpy>
      if (512 == (n + blockOffset)) {
   d5b8a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5b8e:	d130      	bne.n	d5bf2 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5b90:	68a0      	ldr	r0, [r4, #8]
   d5b92:	3024      	adds	r0, #36	; 0x24
   d5b94:	f000 f870 	bl	d5c78 <_ZN8FatCache4syncEv>
   d5b98:	e017      	b.n	d5bca <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5b9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5b9e:	68a0      	ldr	r0, [r4, #8]
   d5ba0:	d315      	bcc.n	d5bce <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5ba2:	7902      	ldrb	r2, [r0, #4]
   d5ba4:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5ba6:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5ba8:	b2d2      	uxtb	r2, r2
   d5baa:	4293      	cmp	r3, r2
   d5bac:	bf28      	it	cs
   d5bae:	4613      	movcs	r3, r2
   d5bb0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5bb2:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5bb4:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5bb8:	d302      	bcc.n	d5bc0 <_ZN7FatFile5writeEPKvj+0x10c>
   d5bba:	441a      	add	r2, r3
   d5bbc:	4291      	cmp	r1, r2
   d5bbe:	d337      	bcc.n	d5c30 <_ZN7FatFile5writeEPKvj+0x17c>
   d5bc0:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5bc2:	464a      	mov	r2, r9
   d5bc4:	6838      	ldr	r0, [r7, #0]
   d5bc6:	f000 fc6d 	bl	d64a4 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5bca:	b990      	cbnz	r0, d5bf2 <_ZN7FatFile5writeEPKvj+0x13e>
   d5bcc:	e783      	b.n	d5ad6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5bce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5bd0:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5bd2:	bf02      	ittt	eq
   d5bd4:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5bd8:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5bdc:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5bde:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5be0:	464a      	mov	r2, r9
   d5be2:	6818      	ldr	r0, [r3, #0]
   d5be4:	f000 fbec 	bl	d63c0 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5be8:	2800      	cmp	r0, #0
   d5bea:	f43f af74 	beq.w	d5ad6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5bee:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5bf2:	6963      	ldr	r3, [r4, #20]
   d5bf4:	442b      	add	r3, r5
   d5bf6:	6163      	str	r3, [r4, #20]
    src += n;
   d5bf8:	44a9      	add	r9, r5
    nToWrite -= n;
   d5bfa:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5bfc:	e77a      	b.n	d5af4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5bfe:	69e2      	ldr	r2, [r4, #28]
   d5c00:	4293      	cmp	r3, r2
   d5c02:	d901      	bls.n	d5c08 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5c04:	61e3      	str	r3, [r4, #28]
   d5c06:	e002      	b.n	d5c0e <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5c08:	4b0f      	ldr	r3, [pc, #60]	; (d5c48 <_ZN7FatFile5writeEPKvj+0x194>)
   d5c0a:	681b      	ldr	r3, [r3, #0]
   d5c0c:	b11b      	cbz	r3, d5c16 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5c0e:	78a3      	ldrb	r3, [r4, #2]
   d5c10:	f043 0304 	orr.w	r3, r3, #4
   d5c14:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5c16:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5c1a:	2b00      	cmp	r3, #0
   d5c1c:	db02      	blt.n	d5c24 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5c1e:	4640      	mov	r0, r8
   d5c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5c24:	4620      	mov	r0, r4
   d5c26:	f7ff feb9 	bl	d599c <_ZN7FatFile4syncEv>
   d5c2a:	2800      	cmp	r0, #0
   d5c2c:	d1f7      	bne.n	d5c1e <_ZN7FatFile5writeEPKvj+0x16a>
   d5c2e:	e752      	b.n	d5ad6 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5c30:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5c34:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5c38:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5c3a:	e7c1      	b.n	d5bc0 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5c3c:	6921      	ldr	r1, [r4, #16]
   d5c3e:	68a0      	ldr	r0, [r4, #8]
   d5c40:	f000 f865 	bl	d5d0e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5c44:	4601      	mov	r1, r0
   d5c46:	e783      	b.n	d5b50 <_ZN7FatFile5writeEPKvj+0x9c>
   d5c48:	2003e3d0 	.word	0x2003e3d0

000d5c4c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5c4c:	f000 be16 	b.w	d687c <HAL_Pin_Map>

000d5c50 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c50:	b570      	push	{r4, r5, r6, lr}
   d5c52:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c54:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c56:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c58:	b149      	cbz	r1, d5c6e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c5a:	f003 fa60 	bl	d911e <strlen>
   d5c5e:	682b      	ldr	r3, [r5, #0]
   d5c60:	4602      	mov	r2, r0
   d5c62:	4621      	mov	r1, r4
   d5c64:	4628      	mov	r0, r5
   d5c66:	68db      	ldr	r3, [r3, #12]
    }
   d5c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c6c:	4718      	bx	r3
    }
   d5c6e:	bd70      	pop	{r4, r5, r6, pc}

000d5c70 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5c70:	f000 be04 	b.w	d687c <HAL_Pin_Map>

000d5c74 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5c74:	f000 be02 	b.w	d687c <HAL_Pin_Map>

000d5c78 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5c78:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5c7a:	7803      	ldrb	r3, [r0, #0]
   d5c7c:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5c7e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5c80:	d51e      	bpl.n	d5cc0 <_ZN8FatCache4syncEv+0x48>
   d5c82:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5c84:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5c86:	f100 060c 	add.w	r6, r0, #12
   d5c8a:	4632      	mov	r2, r6
   d5c8c:	6818      	ldr	r0, [r3, #0]
   d5c8e:	f000 fb97 	bl	d63c0 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5c92:	4605      	mov	r5, r0
   d5c94:	b908      	cbnz	r0, d5c9a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5c96:	2500      	movs	r5, #0
   d5c98:	e013      	b.n	d5cc2 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5c9a:	7823      	ldrb	r3, [r4, #0]
   d5c9c:	079b      	lsls	r3, r3, #30
   d5c9e:	d404      	bmi.n	d5caa <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5ca0:	7823      	ldrb	r3, [r4, #0]
   d5ca2:	f023 0301 	bic.w	r3, r3, #1
   d5ca6:	7023      	strb	r3, [r4, #0]
   d5ca8:	e00b      	b.n	d5cc2 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5caa:	6863      	ldr	r3, [r4, #4]
   d5cac:	68a0      	ldr	r0, [r4, #8]
   d5cae:	6919      	ldr	r1, [r3, #16]
   d5cb0:	4632      	mov	r2, r6
   d5cb2:	4401      	add	r1, r0
   d5cb4:	6818      	ldr	r0, [r3, #0]
   d5cb6:	f000 fb83 	bl	d63c0 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5cba:	2800      	cmp	r0, #0
   d5cbc:	d1f0      	bne.n	d5ca0 <_ZN8FatCache4syncEv+0x28>
   d5cbe:	e7ea      	b.n	d5c96 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5cc0:	2501      	movs	r5, #1

fail:
  return false;
}
   d5cc2:	4628      	mov	r0, r5
   d5cc4:	bd70      	pop	{r4, r5, r6, pc}

000d5cc6 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5cc6:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5cc8:	6883      	ldr	r3, [r0, #8]
   d5cca:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5ccc:	4604      	mov	r4, r0
   d5cce:	460e      	mov	r6, r1
   d5cd0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5cd2:	d014      	beq.n	d5cfe <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5cd4:	f7ff ffd0 	bl	d5c78 <_ZN8FatCache4syncEv>
   d5cd8:	b908      	cbnz	r0, d5cde <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5cda:	2000      	movs	r0, #0
   d5cdc:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5cde:	076b      	lsls	r3, r5, #29
   d5ce0:	d503      	bpl.n	d5cea <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5ce2:	2300      	movs	r3, #0
   d5ce4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5ce6:	60a6      	str	r6, [r4, #8]
   d5ce8:	e009      	b.n	d5cfe <_ZN8FatCache4readEmh+0x38>
   d5cea:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5cec:	f104 020c 	add.w	r2, r4, #12
   d5cf0:	4631      	mov	r1, r6
   d5cf2:	6818      	ldr	r0, [r3, #0]
   d5cf4:	f000 fada 	bl	d62ac <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5cf8:	2800      	cmp	r0, #0
   d5cfa:	d1f2      	bne.n	d5ce2 <_ZN8FatCache4readEmh+0x1c>
   d5cfc:	e7ed      	b.n	d5cda <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5cfe:	7823      	ldrb	r3, [r4, #0]
   d5d00:	4620      	mov	r0, r4
   d5d02:	f005 0503 	and.w	r5, r5, #3
   d5d06:	431d      	orrs	r5, r3
   d5d08:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5d0c:	bd70      	pop	{r4, r5, r6, pc}

000d5d0e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5d0e:	7983      	ldrb	r3, [r0, #6]
   d5d10:	6940      	ldr	r0, [r0, #20]
   d5d12:	3902      	subs	r1, #2
   d5d14:	4099      	lsls	r1, r3
}
   d5d16:	4408      	add	r0, r1
   d5d18:	4770      	bx	lr

000d5d1a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5d1a:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5d1c:	b570      	push	{r4, r5, r6, lr}
   d5d1e:	4605      	mov	r5, r0
   d5d20:	460c      	mov	r4, r1
   d5d22:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5d24:	d802      	bhi.n	d5d2c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5d26:	f04f 30ff 	mov.w	r0, #4294967295
   d5d2a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5d2c:	69c3      	ldr	r3, [r0, #28]
   d5d2e:	4299      	cmp	r1, r3
   d5d30:	d8f9      	bhi.n	d5d26 <_ZN9FatVolume6fatGetEmPm+0xc>
   d5d32:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5d34:	2b20      	cmp	r3, #32
   d5d36:	d110      	bne.n	d5d5a <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5d38:	6981      	ldr	r1, [r0, #24]
   d5d3a:	2202      	movs	r2, #2
   d5d3c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5d40:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5d44:	f7ff ffbf 	bl	d5cc6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5d48:	2800      	cmp	r0, #0
   d5d4a:	d0ec      	beq.n	d5d26 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5d4c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5d50:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5d54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5d58:	e00f      	b.n	d5d7a <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5d5a:	2b10      	cmp	r3, #16
   d5d5c:	d1e3      	bne.n	d5d26 <_ZN9FatVolume6fatGetEmPm+0xc>
   d5d5e:	6983      	ldr	r3, [r0, #24]
   d5d60:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5d64:	2202      	movs	r2, #2
   d5d66:	4419      	add	r1, r3
   d5d68:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5d6c:	f7ff ffab 	bl	d5cc6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5d70:	2800      	cmp	r0, #0
   d5d72:	d0d8      	beq.n	d5d26 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5d74:	b2e4      	uxtb	r4, r4
   d5d76:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5d7a:	69ea      	ldr	r2, [r5, #28]
   d5d7c:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5d7e:	bf9a      	itte	ls
   d5d80:	6033      	strls	r3, [r6, #0]
  return 1;
   d5d82:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5d84:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5d86:	bd70      	pop	{r4, r5, r6, pc}

000d5d88 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5d88:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d5d8a:	b538      	push	{r3, r4, r5, lr}
   d5d8c:	460c      	mov	r4, r1
   d5d8e:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5d90:	d801      	bhi.n	d5d96 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5d92:	2000      	movs	r0, #0
   d5d94:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5d96:	69c3      	ldr	r3, [r0, #28]
   d5d98:	4299      	cmp	r1, r3
   d5d9a:	d8fa      	bhi.n	d5d92 <_ZN9FatVolume6fatPutEmm+0xa>
   d5d9c:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5d9e:	2b20      	cmp	r3, #32
   d5da0:	d10e      	bne.n	d5dc0 <_ZN9FatVolume6fatPutEmm+0x38>
   d5da2:	6981      	ldr	r1, [r0, #24]
   d5da4:	2203      	movs	r2, #3
   d5da6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5daa:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5dae:	f7ff ff8a 	bl	d5cc6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5db2:	2800      	cmp	r0, #0
   d5db4:	d0ed      	beq.n	d5d92 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d5db6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5dba:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5dbe:	e00f      	b.n	d5de0 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5dc0:	2b10      	cmp	r3, #16
   d5dc2:	d1e6      	bne.n	d5d92 <_ZN9FatVolume6fatPutEmm+0xa>
   d5dc4:	6983      	ldr	r3, [r0, #24]
   d5dc6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5dca:	2203      	movs	r2, #3
   d5dcc:	4419      	add	r1, r3
   d5dce:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5dd2:	f7ff ff78 	bl	d5cc6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5dd6:	2800      	cmp	r0, #0
   d5dd8:	d0db      	beq.n	d5d92 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5dda:	b2e4      	uxtb	r4, r4
   d5ddc:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5de0:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d5de2:	bd38      	pop	{r3, r4, r5, pc}

000d5de4 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5de4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5de8:	68c4      	ldr	r4, [r0, #12]
   d5dea:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5dec:	4605      	mov	r5, r0
   d5dee:	460e      	mov	r6, r1
   d5df0:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5df2:	d207      	bcs.n	d5e04 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d5df4:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d5df6:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5df8:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5dfa:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5dfc:	429c      	cmp	r4, r3
   d5dfe:	d903      	bls.n	d5e08 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5e00:	b9cf      	cbnz	r7, d5e36 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d5e02:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5e04:	2701      	movs	r7, #1
   d5e06:	e7f7      	b.n	d5df8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5e08:	42a6      	cmp	r6, r4
   d5e0a:	d014      	beq.n	d5e36 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5e0c:	aa01      	add	r2, sp, #4
   d5e0e:	4621      	mov	r1, r4
   d5e10:	4628      	mov	r0, r5
   d5e12:	f7ff ff82 	bl	d5d1a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5e16:	2800      	cmp	r0, #0
   d5e18:	db0d      	blt.n	d5e36 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5e1a:	d0ed      	beq.n	d5df8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5e1c:	9b01      	ldr	r3, [sp, #4]
   d5e1e:	2b00      	cmp	r3, #0
   d5e20:	d1ea      	bne.n	d5df8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d5e22:	b107      	cbz	r7, d5e26 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5e24:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5e26:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5e2a:	4621      	mov	r1, r4
   d5e2c:	4628      	mov	r0, r5
   d5e2e:	f7ff ffab 	bl	d5d88 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d5e32:	4607      	mov	r7, r0
   d5e34:	b908      	cbnz	r0, d5e3a <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5e36:	2700      	movs	r7, #0
   d5e38:	e00b      	b.n	d5e52 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5e3a:	b916      	cbnz	r6, d5e42 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5e3c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5e40:	e007      	b.n	d5e52 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5e42:	4622      	mov	r2, r4
   d5e44:	4631      	mov	r1, r6
   d5e46:	4628      	mov	r0, r5
   d5e48:	f7ff ff9e 	bl	d5d88 <_ZN9FatVolume6fatPutEmm>
   d5e4c:	2800      	cmp	r0, #0
   d5e4e:	d1f5      	bne.n	d5e3c <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5e50:	e7f1      	b.n	d5e36 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5e52:	4638      	mov	r0, r7
   d5e54:	b002      	add	sp, #8
   d5e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e5a <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5e5c:	4605      	mov	r5, r0
   d5e5e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5e60:	aa01      	add	r2, sp, #4
   d5e62:	4621      	mov	r1, r4
   d5e64:	4628      	mov	r0, r5
   d5e66:	f7ff ff58 	bl	d5d1a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5e6a:	1e06      	subs	r6, r0, #0
   d5e6c:	da01      	bge.n	d5e72 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d5e6e:	2000      	movs	r0, #0
   d5e70:	e00f      	b.n	d5e92 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d5e72:	2200      	movs	r2, #0
   d5e74:	4621      	mov	r1, r4
   d5e76:	4628      	mov	r0, r5
   d5e78:	f7ff ff86 	bl	d5d88 <_ZN9FatVolume6fatPutEmm>
   d5e7c:	2800      	cmp	r0, #0
   d5e7e:	d0f6      	beq.n	d5e6e <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d5e80:	68eb      	ldr	r3, [r5, #12]
   d5e82:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5e84:	bf9c      	itt	ls
   d5e86:	f104 34ff 	addls.w	r4, r4, #4294967295
   d5e8a:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d5e8c:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d5e8e:	2e00      	cmp	r6, #0
   d5e90:	d1e6      	bne.n	d5e60 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5e92:	b002      	add	sp, #8
   d5e94:	bd70      	pop	{r4, r5, r6, pc}

000d5e96 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5e96:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d5e98:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5e9a:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5e9c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d5e9e:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5ea0:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5ea4:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d5ea6:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5ea8:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5eaa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5eae:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5eb0:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5eb4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d5eb8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d5ebc:	b1a1      	cbz	r1, d5ee8 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d5ebe:	2904      	cmp	r1, #4
   d5ec0:	d85d      	bhi.n	d5f7e <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5ec2:	4611      	mov	r1, r2
   d5ec4:	3024      	adds	r0, #36	; 0x24
   d5ec6:	f7ff fefe 	bl	d5cc6 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5eca:	2800      	cmp	r0, #0
   d5ecc:	d057      	beq.n	d5f7e <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d5ece:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d5ed2:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d5ed6:	065b      	lsls	r3, r3, #25
   d5ed8:	d151      	bne.n	d5f7e <_ZN9FatVolume4initEh+0xe8>
   d5eda:	351b      	adds	r5, #27
   d5edc:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d5ee0:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d5ee4:	2d00      	cmp	r5, #0
   d5ee6:	d04a      	beq.n	d5f7e <_ZN9FatVolume4initEh+0xe8>
   d5ee8:	2200      	movs	r2, #0
   d5eea:	4629      	mov	r1, r5
   d5eec:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5ef0:	f7ff fee9 	bl	d5cc6 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d5ef4:	2800      	cmp	r0, #0
   d5ef6:	d042      	beq.n	d5f7e <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d5ef8:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d5f00:	d13d      	bne.n	d5f7e <_ZN9FatVolume4initEh+0xe8>
   d5f02:	7c03      	ldrb	r3, [r0, #16]
   d5f04:	2b02      	cmp	r3, #2
   d5f06:	d13a      	bne.n	d5f7e <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5f08:	89c3      	ldrh	r3, [r0, #14]
   d5f0a:	2b00      	cmp	r3, #0
   d5f0c:	d037      	beq.n	d5f7e <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d5f0e:	7b41      	ldrb	r1, [r0, #13]
   d5f10:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d5f12:	1e4b      	subs	r3, r1, #1
   d5f14:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d5f16:	2300      	movs	r3, #0
   d5f18:	71a3      	strb	r3, [r4, #6]
   d5f1a:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5f1c:	2301      	movs	r3, #1
   d5f1e:	428b      	cmp	r3, r1
   d5f20:	d007      	beq.n	d5f32 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d5f22:	3e01      	subs	r6, #1
   d5f24:	d02b      	beq.n	d5f7e <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5f26:	79a2      	ldrb	r2, [r4, #6]
   d5f28:	005b      	lsls	r3, r3, #1
   d5f2a:	3201      	adds	r2, #1
   d5f2c:	b2db      	uxtb	r3, r3
   d5f2e:	71a2      	strb	r2, [r4, #6]
   d5f30:	e7f5      	b.n	d5f1e <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d5f32:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d5f34:	b902      	cbnz	r2, d5f38 <_ZN9FatVolume4initEh+0xa2>
   d5f36:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d5f38:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d5f3a:	89c6      	ldrh	r6, [r0, #14]
   d5f3c:	442e      	add	r6, r5
   d5f3e:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d5f40:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d5f44:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d5f46:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d5f4a:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5f4c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d5f50:	0152      	lsls	r2, r2, #5
   d5f52:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d5f56:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d5f5a:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5f5c:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d5f60:	b903      	cbnz	r3, d5f64 <_ZN9FatVolume4initEh+0xce>
   d5f62:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5f64:	1aad      	subs	r5, r5, r2
   d5f66:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d5f68:	79a5      	ldrb	r5, [r4, #6]
   d5f6a:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d5f6e:	1c6b      	adds	r3, r5, #1
   d5f70:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d5f72:	f640 73f4 	movw	r3, #4084	; 0xff4
   d5f76:	429d      	cmp	r5, r3
   d5f78:	d803      	bhi.n	d5f82 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d5f7a:	230c      	movs	r3, #12
   d5f7c:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d5f7e:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d5f80:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d5f82:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d5f86:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d5f88:	bf85      	ittet	hi
   d5f8a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5f8c:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d5f8e:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d5f90:	2320      	movhi	r3, #32
   d5f92:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d5f94:	2001      	movs	r0, #1

fail:
  return false;
}
   d5f96:	bd70      	pop	{r4, r5, r6, pc}

000d5f98 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d5f98:	f000 bc70 	b.w	d687c <HAL_Pin_Map>

000d5f9c <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5f9c:	f000 bc6e 	b.w	d687c <HAL_Pin_Map>

000d5fa0 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5fa0:	f000 bc6c 	b.w	d687c <HAL_Pin_Map>

000d5fa4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5fa4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5fa6:	4c0e      	ldr	r4, [pc, #56]	; (d5fe0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5fa8:	460e      	mov	r6, r1
   d5faa:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5fac:	f000 fcf6 	bl	d699c <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5fb0:	6823      	ldr	r3, [r4, #0]
   d5fb2:	1ac0      	subs	r0, r0, r3
   d5fb4:	4b0b      	ldr	r3, [pc, #44]	; (d5fe4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d5fb6:	4298      	cmp	r0, r3
   d5fb8:	d908      	bls.n	d5fcc <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5fba:	f000 fcf7 	bl	d69ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5fbe:	4b0a      	ldr	r3, [pc, #40]	; (d5fe8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d5fc0:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5fc2:	f000 fe67 	bl	d6c94 <spark_process>
   d5fc6:	f000 fce9 	bl	d699c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d5fca:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5fcc:	f000 fcee 	bl	d69ac <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5fd0:	b280      	uxth	r0, r0
   d5fd2:	1b80      	subs	r0, r0, r6
}
   d5fd4:	42a8      	cmp	r0, r5
   d5fd6:	bfd4      	ite	le
   d5fd8:	2000      	movle	r0, #0
   d5fda:	2001      	movgt	r0, #1
   d5fdc:	bd70      	pop	{r4, r5, r6, pc}
   d5fde:	bf00      	nop
   d5fe0:	2003e3d4 	.word	0x2003e3d4
   d5fe4:	000186a0 	.word	0x000186a0
   d5fe8:	2003e730 	.word	0x2003e730

000d5fec <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5fec:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d5fee:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5ff0:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d5ff2:	b94d      	cbnz	r5, d6008 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5ff4:	6840      	ldr	r0, [r0, #4]
   d5ff6:	f000 fa7d 	bl	d64f4 <_ZN14SdSpiAltDriver8activateEv>
   d5ffa:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5ffc:	4629      	mov	r1, r5
   d5ffe:	7d18      	ldrb	r0, [r3, #20]
   d6000:	f002 f82b 	bl	d805a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6004:	2301      	movs	r3, #1
   d6006:	7223      	strb	r3, [r4, #8]
   d6008:	bd38      	pop	{r3, r4, r5, pc}

000d600a <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d600a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d600c:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d600e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d6010:	b16b      	cbz	r3, d602e <_ZN9SdSpiCard7spiStopEv+0x24>
   d6012:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d6014:	2101      	movs	r1, #1
   d6016:	7d18      	ldrb	r0, [r3, #20]
   d6018:	f002 f81f 	bl	d805a <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d601c:	21ff      	movs	r1, #255	; 0xff
   d601e:	6860      	ldr	r0, [r4, #4]
   d6020:	f000 fa9a 	bl	d6558 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d6024:	6860      	ldr	r0, [r4, #4]
   d6026:	f000 fa79 	bl	d651c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d602a:	2300      	movs	r3, #0
   d602c:	7223      	strb	r3, [r4, #8]
   d602e:	bd10      	pop	{r4, pc}

000d6030 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d6030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6032:	4604      	mov	r4, r0
   d6034:	460d      	mov	r5, r1
   d6036:	4616      	mov	r6, r2
   d6038:	f000 fcb8 	bl	d69ac <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d603c:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d603e:	6860      	ldr	r0, [r4, #4]
   d6040:	f000 fa6f 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d6044:	28ff      	cmp	r0, #255	; 0xff
   d6046:	7260      	strb	r0, [r4, #9]
   d6048:	d109      	bne.n	d605e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d604a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d604e:	4639      	mov	r1, r7
   d6050:	4620      	mov	r0, r4
   d6052:	f7ff ffa7 	bl	d5fa4 <_ZN9SdSpiCard10isTimedOutEtt>
   d6056:	2800      	cmp	r0, #0
   d6058:	d0f1      	beq.n	d603e <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d605a:	2355      	movs	r3, #85	; 0x55
   d605c:	e00b      	b.n	d6076 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d605e:	28fe      	cmp	r0, #254	; 0xfe
   d6060:	d001      	beq.n	d6066 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d6062:	2350      	movs	r3, #80	; 0x50
   d6064:	e007      	b.n	d6076 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d6066:	4632      	mov	r2, r6
   d6068:	4629      	mov	r1, r5
   d606a:	6860      	ldr	r0, [r4, #4]
   d606c:	f000 fa5e 	bl	d652c <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d6070:	7260      	strb	r0, [r4, #9]
   d6072:	b130      	cbz	r0, d6082 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6074:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d6076:	4620      	mov	r0, r4
   d6078:	7023      	strb	r3, [r4, #0]
   d607a:	f7ff ffc6 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d607e:	2000      	movs	r0, #0
}
   d6080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6082:	6860      	ldr	r0, [r4, #4]
   d6084:	f000 fa4d 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
   d6088:	6860      	ldr	r0, [r4, #4]
   d608a:	f000 fa4a 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
   d608e:	2001      	movs	r0, #1
   d6090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6092 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6092:	b570      	push	{r4, r5, r6, lr}
   d6094:	4604      	mov	r4, r0
   d6096:	460e      	mov	r6, r1
   d6098:	f000 fc88 	bl	d69ac <HAL_Timer_Get_Milli_Seconds>
   d609c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d609e:	4632      	mov	r2, r6
   d60a0:	4629      	mov	r1, r5
   d60a2:	4620      	mov	r0, r4
   d60a4:	f7ff ff7e 	bl	d5fa4 <_ZN9SdSpiCard10isTimedOutEtt>
   d60a8:	b930      	cbnz	r0, d60b8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d60aa:	6860      	ldr	r0, [r4, #4]
   d60ac:	f000 fa39 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d60b0:	28ff      	cmp	r0, #255	; 0xff
   d60b2:	d1f4      	bne.n	d609e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d60b4:	2001      	movs	r0, #1
   d60b6:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d60b8:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d60ba:	bd70      	pop	{r4, r5, r6, pc}

000d60bc <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d60bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d60be:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d60c0:	9201      	str	r2, [sp, #4]
   d60c2:	4604      	mov	r4, r0
   d60c4:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d60c6:	b90b      	cbnz	r3, d60cc <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d60c8:	f7ff ff90 	bl	d5fec <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d60cc:	b125      	cbz	r5, d60d8 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d60ce:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d60d2:	4620      	mov	r0, r4
   d60d4:	f7ff ffdd 	bl	d6092 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d60d8:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d60dc:	6860      	ldr	r0, [r4, #4]
   d60de:	f000 fa3b 	bl	d6558 <_ZN14SdSpiAltDriver4sendEh>
   d60e2:	f10d 0607 	add.w	r6, sp, #7
   d60e6:	f10d 0703 	add.w	r7, sp, #3
   d60ea:	f816 1901 	ldrb.w	r1, [r6], #-1
   d60ee:	6860      	ldr	r0, [r4, #4]
   d60f0:	f000 fa32 	bl	d6558 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d60f4:	42be      	cmp	r6, r7
   d60f6:	d1f8      	bne.n	d60ea <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d60f8:	2d00      	cmp	r5, #0
   d60fa:	bf0c      	ite	eq
   d60fc:	2195      	moveq	r1, #149	; 0x95
   d60fe:	2187      	movne	r1, #135	; 0x87
   d6100:	6860      	ldr	r0, [r4, #4]
   d6102:	f000 fa29 	bl	d6558 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6106:	6860      	ldr	r0, [r4, #4]
   d6108:	f000 fa0b 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
   d610c:	250b      	movs	r5, #11
   d610e:	6860      	ldr	r0, [r4, #4]
   d6110:	f000 fa07 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6114:	0603      	lsls	r3, r0, #24
   d6116:	7260      	strb	r0, [r4, #9]
   d6118:	d503      	bpl.n	d6122 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d611a:	3d01      	subs	r5, #1
   d611c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6120:	d1f5      	bne.n	d610e <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d6122:	b003      	add	sp, #12
   d6124:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6126 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d6126:	b570      	push	{r4, r5, r6, lr}
   d6128:	4604      	mov	r4, r0
   d612a:	460d      	mov	r5, r1
   d612c:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d612e:	2137      	movs	r1, #55	; 0x37
   d6130:	2200      	movs	r2, #0
   d6132:	f7ff ffc3 	bl	d60bc <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d6136:	4632      	mov	r2, r6
   d6138:	4629      	mov	r1, r5
   d613a:	4620      	mov	r0, r4
  }
   d613c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d6140:	f7ff bfbc 	b.w	d60bc <_ZN9SdSpiCard11cardCommandEhm>

000d6144 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6148:	2500      	movs	r5, #0
   d614a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d614c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d614e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6150:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6152:	4604      	mov	r4, r0
   d6154:	4690      	mov	r8, r2
   d6156:	461e      	mov	r6, r3
   d6158:	f000 fc28 	bl	d69ac <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d615c:	4641      	mov	r1, r8
   d615e:	4607      	mov	r7, r0
   d6160:	6860      	ldr	r0, [r4, #4]
   d6162:	f000 f9cb 	bl	d64fc <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d6166:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d6168:	4a4f      	ldr	r2, [pc, #316]	; (d62a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d616a:	721d      	strb	r5, [r3, #8]
   d616c:	f04f 0801 	mov.w	r8, #1
   d6170:	60da      	str	r2, [r3, #12]
   d6172:	745d      	strb	r5, [r3, #17]
   d6174:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d6178:	4620      	mov	r0, r4
   d617a:	f7ff ff37 	bl	d5fec <_ZN9SdSpiCard8spiStartEv>
   d617e:	6863      	ldr	r3, [r4, #4]
   d6180:	4641      	mov	r1, r8
   d6182:	7d18      	ldrb	r0, [r3, #20]
   d6184:	f001 ff69 	bl	d805a <digitalWrite>
   d6188:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d618a:	21ff      	movs	r1, #255	; 0xff
   d618c:	6860      	ldr	r0, [r4, #4]
   d618e:	3d01      	subs	r5, #1
   d6190:	f000 f9e2 	bl	d6558 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6194:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6198:	d1f7      	bne.n	d618a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d619a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d619c:	4629      	mov	r1, r5
   d619e:	7d18      	ldrb	r0, [r3, #20]
   d61a0:	f001 ff5b 	bl	d805a <digitalWrite>
   d61a4:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d61a6:	2200      	movs	r2, #0
   d61a8:	4611      	mov	r1, r2
   d61aa:	4620      	mov	r0, r4
   d61ac:	f7ff ff86 	bl	d60bc <_ZN9SdSpiCard11cardCommandEhm>
   d61b0:	2801      	cmp	r0, #1
   d61b2:	4680      	mov	r8, r0
   d61b4:	d012      	beq.n	d61dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d61b6:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d61b8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d61bc:	d101      	bne.n	d61c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d61be:	2320      	movs	r3, #32
   d61c0:	e057      	b.n	d6272 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d61c2:	21fd      	movs	r1, #253	; 0xfd
   d61c4:	6860      	ldr	r0, [r4, #4]
   d61c6:	f000 f9c7 	bl	d6558 <_ZN14SdSpiAltDriver4sendEh>
   d61ca:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d61ce:	6860      	ldr	r0, [r4, #4]
   d61d0:	f000 f9a7 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d61d4:	f1b8 0801 	subs.w	r8, r8, #1
   d61d8:	d1f9      	bne.n	d61ce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d61da:	e7e4      	b.n	d61a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d61dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d61e0:	2108      	movs	r1, #8
   d61e2:	4620      	mov	r0, r4
   d61e4:	f7ff ff6a 	bl	d60bc <_ZN9SdSpiCard11cardCommandEhm>
   d61e8:	2805      	cmp	r0, #5
   d61ea:	d102      	bne.n	d61f2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d61ec:	f884 800a 	strb.w	r8, [r4, #10]
   d61f0:	e00f      	b.n	d6212 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d61f2:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d61f4:	6860      	ldr	r0, [r4, #4]
   d61f6:	f000 f994 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
   d61fa:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d61fc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6200:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6202:	d1f7      	bne.n	d61f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d6204:	28aa      	cmp	r0, #170	; 0xaa
   d6206:	d102      	bne.n	d620e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6208:	2302      	movs	r3, #2
   d620a:	72a3      	strb	r3, [r4, #10]
   d620c:	e001      	b.n	d6212 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d620e:	2325      	movs	r3, #37	; 0x25
   d6210:	e02f      	b.n	d6272 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6212:	7aa3      	ldrb	r3, [r4, #10]
   d6214:	2b02      	cmp	r3, #2
   d6216:	bf0c      	ite	eq
   d6218:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d621c:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d621e:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d6220:	462a      	mov	r2, r5
   d6222:	2129      	movs	r1, #41	; 0x29
   d6224:	4620      	mov	r0, r4
   d6226:	f7ff ff7e 	bl	d6126 <_ZN9SdSpiCard8cardAcmdEhm>
   d622a:	4602      	mov	r2, r0
   d622c:	b148      	cbz	r0, d6242 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d622e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6232:	4639      	mov	r1, r7
   d6234:	4620      	mov	r0, r4
   d6236:	f7ff feb5 	bl	d5fa4 <_ZN9SdSpiCard10isTimedOutEtt>
   d623a:	2800      	cmp	r0, #0
   d623c:	d0f0      	beq.n	d6220 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d623e:	2343      	movs	r3, #67	; 0x43
   d6240:	e017      	b.n	d6272 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d6242:	7aa3      	ldrb	r3, [r4, #10]
   d6244:	2b02      	cmp	r3, #2
   d6246:	d00e      	beq.n	d6266 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d6248:	4620      	mov	r0, r4
   d624a:	f7ff fede 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d624e:	6863      	ldr	r3, [r4, #4]
   d6250:	68b0      	ldr	r0, [r6, #8]
   d6252:	7934      	ldrb	r4, [r6, #4]
   d6254:	7b31      	ldrb	r1, [r6, #12]
   d6256:	7b72      	ldrb	r2, [r6, #13]
   d6258:	745a      	strb	r2, [r3, #17]
   d625a:	60d8      	str	r0, [r3, #12]
   d625c:	721c      	strb	r4, [r3, #8]
   d625e:	7419      	strb	r1, [r3, #16]
  return true;
   d6260:	2001      	movs	r0, #1
   d6262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d6266:	213a      	movs	r1, #58	; 0x3a
   d6268:	4620      	mov	r0, r4
   d626a:	f7ff ff27 	bl	d60bc <_ZN9SdSpiCard11cardCommandEhm>
   d626e:	b138      	cbz	r0, d6280 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d6270:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d6272:	4620      	mov	r0, r4
   d6274:	7023      	strb	r3, [r4, #0]
   d6276:	f7ff fec8 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d627a:	2000      	movs	r0, #0
}
   d627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6280:	6860      	ldr	r0, [r4, #4]
   d6282:	f000 f94e 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d6286:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d628a:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d628c:	bf04      	itt	eq
   d628e:	2303      	moveq	r3, #3
   d6290:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6292:	6860      	ldr	r0, [r4, #4]
   d6294:	f000 f945 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
   d6298:	6860      	ldr	r0, [r4, #4]
   d629a:	f000 f942 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
   d629e:	6860      	ldr	r0, [r4, #4]
   d62a0:	f000 f93f 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
   d62a4:	e7d0      	b.n	d6248 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d62a6:	bf00      	nop
   d62a8:	0003d090 	.word	0x0003d090

000d62ac <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d62ac:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d62ae:	7a83      	ldrb	r3, [r0, #10]
   d62b0:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d62b2:	bf18      	it	ne
   d62b4:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d62b6:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d62b8:	460a      	mov	r2, r1
   d62ba:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d62bc:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d62be:	f7ff fefd 	bl	d60bc <_ZN9SdSpiCard11cardCommandEhm>
   d62c2:	b110      	cbz	r0, d62ca <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d62c4:	2330      	movs	r3, #48	; 0x30
   d62c6:	7023      	strb	r3, [r4, #0]
   d62c8:	e00b      	b.n	d62e2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d62ca:	4629      	mov	r1, r5
   d62cc:	f44f 7200 	mov.w	r2, #512	; 0x200
   d62d0:	4620      	mov	r0, r4
   d62d2:	f7ff fead 	bl	d6030 <_ZN9SdSpiCard8readDataEPhj>
   d62d6:	4605      	mov	r5, r0
   d62d8:	b118      	cbz	r0, d62e2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d62da:	4620      	mov	r0, r4
   d62dc:	f7ff fe95 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d62e0:	e003      	b.n	d62ea <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d62e2:	4620      	mov	r0, r4
   d62e4:	f7ff fe91 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d62e8:	2500      	movs	r5, #0
}
   d62ea:	4628      	mov	r0, r5
   d62ec:	bd38      	pop	{r3, r4, r5, pc}

000d62ee <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d62ee:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d62f0:	7a83      	ldrb	r3, [r0, #10]
   d62f2:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d62f4:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d62f6:	bf18      	it	ne
   d62f8:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d62fa:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d62fc:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d62fe:	f7ff fedd 	bl	d60bc <_ZN9SdSpiCard11cardCommandEhm>
   d6302:	b130      	cbz	r0, d6312 <_ZN9SdSpiCard9readStartEm+0x24>
   d6304:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d6306:	4620      	mov	r0, r4
   d6308:	7023      	strb	r3, [r4, #0]
   d630a:	f7ff fe7e 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d630e:	2000      	movs	r0, #0
   d6310:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d6312:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6314:	bd10      	pop	{r4, pc}

000d6316 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6316:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6318:	2200      	movs	r2, #0
   d631a:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d631c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d631e:	f7ff fecd 	bl	d60bc <_ZN9SdSpiCard11cardCommandEhm>
   d6322:	b130      	cbz	r0, d6332 <_ZN9SdSpiCard8readStopEv+0x1c>
   d6324:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d6326:	4620      	mov	r0, r4
   d6328:	7023      	strb	r3, [r4, #0]
   d632a:	f7ff fe6e 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d632e:	2000      	movs	r0, #0
   d6330:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d6332:	4620      	mov	r0, r4
   d6334:	f7ff fe69 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6338:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d633a:	bd10      	pop	{r4, pc}

000d633c <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d633e:	4605      	mov	r5, r0
   d6340:	4616      	mov	r6, r2
   d6342:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6344:	f7ff ffd3 	bl	d62ee <_ZN9SdSpiCard9readStartEm>
   d6348:	b198      	cbz	r0, d6372 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d634a:	2400      	movs	r4, #0
   d634c:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d634e:	429f      	cmp	r7, r3
   d6350:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6354:	d908      	bls.n	d6368 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6356:	f44f 7200 	mov.w	r2, #512	; 0x200
   d635a:	4628      	mov	r0, r5
   d635c:	f7ff fe68 	bl	d6030 <_ZN9SdSpiCard8readDataEPhj>
   d6360:	3401      	adds	r4, #1
   d6362:	2800      	cmp	r0, #0
   d6364:	d1f2      	bne.n	d634c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d6366:	e004      	b.n	d6372 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6368:	4628      	mov	r0, r5
}
   d636a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d636e:	f7ff bfd2 	b.w	d6316 <_ZN9SdSpiCard8readStopEv>
}
   d6372:	2000      	movs	r0, #0
   d6374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6376 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6376:	b538      	push	{r3, r4, r5, lr}
   d6378:	4604      	mov	r4, r0
   d637a:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d637c:	6840      	ldr	r0, [r0, #4]
   d637e:	f000 f8eb 	bl	d6558 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d6382:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6386:	4629      	mov	r1, r5
   d6388:	6860      	ldr	r0, [r4, #4]
   d638a:	f000 f8e9 	bl	d6560 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d638e:	21ff      	movs	r1, #255	; 0xff
   d6390:	6860      	ldr	r0, [r4, #4]
   d6392:	f000 f8e1 	bl	d6558 <_ZN14SdSpiAltDriver4sendEh>
   d6396:	21ff      	movs	r1, #255	; 0xff
   d6398:	6860      	ldr	r0, [r4, #4]
   d639a:	f000 f8dd 	bl	d6558 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d639e:	6860      	ldr	r0, [r4, #4]
   d63a0:	f000 f8bf 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d63a4:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d63a6:	f000 001f 	and.w	r0, r0, #31
   d63aa:	2805      	cmp	r0, #5
   d63ac:	d006      	beq.n	d63bc <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63ae:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d63b0:	4620      	mov	r0, r4
   d63b2:	7023      	strb	r3, [r4, #0]
   d63b4:	f7ff fe29 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63b8:	2000      	movs	r0, #0
   d63ba:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d63bc:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d63be:	bd38      	pop	{r3, r4, r5, pc}

000d63c0 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d63c0:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d63c2:	7a83      	ldrb	r3, [r0, #10]
   d63c4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d63c6:	bf18      	it	ne
   d63c8:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d63ca:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d63cc:	460a      	mov	r2, r1
   d63ce:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d63d0:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d63d2:	f7ff fe73 	bl	d60bc <_ZN9SdSpiCard11cardCommandEhm>
   d63d6:	4606      	mov	r6, r0
   d63d8:	b108      	cbz	r0, d63de <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d63da:	2332      	movs	r3, #50	; 0x32
   d63dc:	e01d      	b.n	d641a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d63de:	462a      	mov	r2, r5
   d63e0:	21fe      	movs	r1, #254	; 0xfe
   d63e2:	4620      	mov	r0, r4
   d63e4:	f7ff ffc7 	bl	d6376 <_ZN9SdSpiCard9writeDataEhPKh>
   d63e8:	b1c0      	cbz	r0, d641c <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d63ea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d63ee:	4620      	mov	r0, r4
   d63f0:	f7ff fe4f 	bl	d6092 <_ZN9SdSpiCard11waitNotBusyEt>
   d63f4:	4605      	mov	r5, r0
   d63f6:	b908      	cbnz	r0, d63fc <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d63f8:	235a      	movs	r3, #90	; 0x5a
   d63fa:	e00e      	b.n	d641a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d63fc:	4632      	mov	r2, r6
   d63fe:	210d      	movs	r1, #13
   d6400:	4620      	mov	r0, r4
   d6402:	f7ff fe5b 	bl	d60bc <_ZN9SdSpiCard11cardCommandEhm>
   d6406:	b938      	cbnz	r0, d6418 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6408:	6860      	ldr	r0, [r4, #4]
   d640a:	f000 f88a 	bl	d6522 <_ZN14SdSpiAltDriver7receiveEv>
   d640e:	b918      	cbnz	r0, d6418 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d6410:	4620      	mov	r0, r4
   d6412:	f7ff fdfa 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6416:	e005      	b.n	d6424 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6418:	2329      	movs	r3, #41	; 0x29
   d641a:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d641c:	4620      	mov	r0, r4
   d641e:	f7ff fdf4 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6422:	2500      	movs	r5, #0
}
   d6424:	4628      	mov	r0, r5
   d6426:	bd70      	pop	{r4, r5, r6, pc}

000d6428 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6428:	b538      	push	{r3, r4, r5, lr}
   d642a:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d642c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6430:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6432:	f7ff fe2e 	bl	d6092 <_ZN9SdSpiCard11waitNotBusyEt>
   d6436:	b910      	cbnz	r0, d643e <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d6438:	235b      	movs	r3, #91	; 0x5b
   d643a:	7023      	strb	r3, [r4, #0]
   d643c:	e005      	b.n	d644a <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d643e:	462a      	mov	r2, r5
   d6440:	21fc      	movs	r1, #252	; 0xfc
   d6442:	4620      	mov	r0, r4
   d6444:	f7ff ff97 	bl	d6376 <_ZN9SdSpiCard9writeDataEhPKh>
   d6448:	b918      	cbnz	r0, d6452 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d644a:	4620      	mov	r0, r4
   d644c:	f7ff fddd 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6450:	2000      	movs	r0, #0
}
   d6452:	bd38      	pop	{r3, r4, r5, pc}

000d6454 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6454:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6456:	7a83      	ldrb	r3, [r0, #10]
   d6458:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d645a:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d645c:	bf18      	it	ne
   d645e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6460:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6462:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6464:	f7ff fe2a 	bl	d60bc <_ZN9SdSpiCard11cardCommandEhm>
   d6468:	b130      	cbz	r0, d6478 <_ZN9SdSpiCard10writeStartEm+0x24>
   d646a:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d646c:	4620      	mov	r0, r4
   d646e:	7023      	strb	r3, [r4, #0]
   d6470:	f7ff fdcb 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6474:	2000      	movs	r0, #0
   d6476:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6478:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d647a:	bd10      	pop	{r4, pc}

000d647c <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d647c:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d647e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6482:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6484:	f7ff fe05 	bl	d6092 <_ZN9SdSpiCard11waitNotBusyEt>
   d6488:	4605      	mov	r5, r0
   d648a:	b120      	cbz	r0, d6496 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d648c:	21fd      	movs	r1, #253	; 0xfd
   d648e:	6860      	ldr	r0, [r4, #4]
   d6490:	f000 f862 	bl	d6558 <_ZN14SdSpiAltDriver4sendEh>
   d6494:	e001      	b.n	d649a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6496:	2356      	movs	r3, #86	; 0x56
   d6498:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d649a:	4620      	mov	r0, r4
   d649c:	f7ff fdb5 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d64a0:	4628      	mov	r0, r5
   d64a2:	bd38      	pop	{r3, r4, r5, pc}

000d64a4 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d64a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64a6:	4605      	mov	r5, r0
   d64a8:	4616      	mov	r6, r2
   d64aa:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d64ac:	f7ff ffd2 	bl	d6454 <_ZN9SdSpiCard10writeStartEm>
   d64b0:	b170      	cbz	r0, d64d0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d64b2:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d64b4:	42bc      	cmp	r4, r7
   d64b6:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d64ba:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d64bc:	d004      	beq.n	d64c8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d64be:	f7ff ffb3 	bl	d6428 <_ZN9SdSpiCard9writeDataEPKh>
   d64c2:	b128      	cbz	r0, d64d0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d64c4:	3401      	adds	r4, #1
   d64c6:	e7f5      	b.n	d64b4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d64c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d64cc:	f7ff bfd6 	b.w	d647c <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d64d0:	4628      	mov	r0, r5
   d64d2:	f7ff fd9a 	bl	d600a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d64d6:	2000      	movs	r0, #0
   d64d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64da <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d64da:	f000 b9cf 	b.w	d687c <HAL_Pin_Map>

000d64de <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d64de:	f000 b9cd 	b.w	d687c <HAL_Pin_Map>

000d64e2 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d64e2:	f000 b9cb 	b.w	d687c <HAL_Pin_Map>
	...

000d64e8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d64e8:	4b01      	ldr	r3, [pc, #4]	; (d64f0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d64ea:	2201      	movs	r2, #1
   d64ec:	701a      	strb	r2, [r3, #0]
   d64ee:	4770      	bx	lr
   d64f0:	2003e3d8 	.word	0x2003e3d8

000d64f4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d64f4:	1d01      	adds	r1, r0, #4
   d64f6:	6800      	ldr	r0, [r0, #0]
   d64f8:	f000 bc94 	b.w	d6e24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d64fc <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d64fc:	b510      	push	{r4, lr}
   d64fe:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6500:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6502:	6800      	ldr	r0, [r0, #0]
   d6504:	f000 fc64 	bl	d6dd0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d6508:	7d20      	ldrb	r0, [r4, #20]
   d650a:	2101      	movs	r1, #1
   d650c:	f001 fd94 	bl	d8038 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6510:	7d20      	ldrb	r0, [r4, #20]
   d6512:	2101      	movs	r1, #1
}
   d6514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d6518:	f001 bd9f 	b.w	d805a <digitalWrite>

000d651c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d651c:	6800      	ldr	r0, [r0, #0]
   d651e:	f000 bc68 	b.w	d6df2 <_ZN8SPIClass14endTransactionEv>

000d6522 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6522:	21ff      	movs	r1, #255	; 0xff
   d6524:	6800      	ldr	r0, [r0, #0]
   d6526:	f000 bced 	b.w	d6f04 <_ZN8SPIClass8transferEh>
	...

000d652c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d652c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d652e:	4b08      	ldr	r3, [pc, #32]	; (d6550 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6530:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6532:	2500      	movs	r5, #0
   d6534:	4c07      	ldr	r4, [pc, #28]	; (d6554 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6536:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6538:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d653a:	4613      	mov	r3, r2
   d653c:	460a      	mov	r2, r1
   d653e:	4629      	mov	r1, r5
   d6540:	f000 fce6 	bl	d6f10 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6544:	7823      	ldrb	r3, [r4, #0]
   d6546:	2b00      	cmp	r3, #0
   d6548:	d0fc      	beq.n	d6544 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d654a:	2000      	movs	r0, #0
   d654c:	b003      	add	sp, #12
   d654e:	bd30      	pop	{r4, r5, pc}
   d6550:	000d64e9 	.word	0x000d64e9
   d6554:	2003e3d8 	.word	0x2003e3d8

000d6558 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6558:	6800      	ldr	r0, [r0, #0]
   d655a:	f000 bcd3 	b.w	d6f04 <_ZN8SPIClass8transferEh>
	...

000d6560 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6560:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6562:	4b07      	ldr	r3, [pc, #28]	; (d6580 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6564:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6566:	2500      	movs	r5, #0
   d6568:	4c06      	ldr	r4, [pc, #24]	; (d6584 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d656a:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d656c:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d656e:	4613      	mov	r3, r2
   d6570:	462a      	mov	r2, r5
   d6572:	f000 fccd 	bl	d6f10 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d6576:	7823      	ldrb	r3, [r4, #0]
   d6578:	2b00      	cmp	r3, #0
   d657a:	d0fc      	beq.n	d6576 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d657c:	b003      	add	sp, #12
   d657e:	bd30      	pop	{r4, r5, pc}
   d6580:	000d64e9 	.word	0x000d64e9
   d6584:	2003e3d8 	.word	0x2003e3d8

000d6588 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6588:	f000 b978 	b.w	d687c <HAL_Pin_Map>

000d658c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d658c:	b510      	push	{r4, lr}
   d658e:	4b05      	ldr	r3, [pc, #20]	; (d65a4 <_ZN10JsonBufferD1Ev+0x18>)
   d6590:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d6592:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d6594:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d6596:	b91b      	cbnz	r3, d65a0 <_ZN10JsonBufferD1Ev+0x14>
   d6598:	6840      	ldr	r0, [r0, #4]
   d659a:	b108      	cbz	r0, d65a0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d659c:	f000 fba2 	bl	d6ce4 <free>
	}
}
   d65a0:	4620      	mov	r0, r4
   d65a2:	bd10      	pop	{r4, pc}
   d65a4:	000d93e8 	.word	0x000d93e8

000d65a8 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d65a8:	b510      	push	{r4, lr}
   d65aa:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d65ac:	f7ff ffee 	bl	d658c <_ZN10JsonBufferD1Ev>
   d65b0:	4620      	mov	r0, r4
   d65b2:	2114      	movs	r1, #20
   d65b4:	f001 fdd0 	bl	d8158 <_ZdlPvj>
   d65b8:	4620      	mov	r0, r4
   d65ba:	bd10      	pop	{r4, pc}

000d65bc <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d65bc:	b510      	push	{r4, lr}
   d65be:	4b03      	ldr	r3, [pc, #12]	; (d65cc <_ZN10JsonWriterD1Ev+0x10>)
   d65c0:	6003      	str	r3, [r0, #0]
   d65c2:	4604      	mov	r4, r0
   d65c4:	f7ff ffe2 	bl	d658c <_ZN10JsonBufferD1Ev>

}
   d65c8:	4620      	mov	r0, r4
   d65ca:	bd10      	pop	{r4, pc}
   d65cc:	000d93f8 	.word	0x000d93f8

000d65d0 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d65d0:	b510      	push	{r4, lr}
   d65d2:	4604      	mov	r4, r0

}
   d65d4:	f7ff fff2 	bl	d65bc <_ZN10JsonWriterD1Ev>
   d65d8:	4620      	mov	r0, r4
   d65da:	2130      	movs	r1, #48	; 0x30
   d65dc:	f001 fdbc 	bl	d8158 <_ZdlPvj>
   d65e0:	4620      	mov	r0, r4
   d65e2:	bd10      	pop	{r4, pc}

000d65e4 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d65e4:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d65e6:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d65e8:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d65ea:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d65ec:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d65ee:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d65f0:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d65f4:	4770      	bx	lr
	...

000d65f8 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d65f8:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d65fa:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d65fc:	60c3      	str	r3, [r0, #12]
   d65fe:	2301      	movs	r3, #1
   d6600:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d6602:	4b05      	ldr	r3, [pc, #20]	; (d6618 <_ZN10JsonWriterC1EPcj+0x20>)
   d6604:	6003      	str	r3, [r0, #0]
   d6606:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d660a:	6041      	str	r1, [r0, #4]
   d660c:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d660e:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d6610:	f7ff ffe8 	bl	d65e4 <_ZN10JsonWriter4initEv>
}
   d6614:	bd10      	pop	{r4, pc}
   d6616:	bf00      	nop
   d6618:	000d93f8 	.word	0x000d93f8

000d661c <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d661c:	68c3      	ldr	r3, [r0, #12]
   d661e:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d6620:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d6622:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d6624:	bf3f      	itttt	cc
   d6626:	6842      	ldrcc	r2, [r0, #4]
   d6628:	1c5c      	addcc	r4, r3, #1
   d662a:	60c4      	strcc	r4, [r0, #12]
   d662c:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d662e:	bf24      	itt	cs
   d6630:	2301      	movcs	r3, #1
   d6632:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d6636:	bd10      	pop	{r4, pc}

000d6638 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d6638:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d663a:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d663c:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d663e:	b143      	cbz	r3, d6652 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d6640:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d6644:	7e59      	ldrb	r1, [r3, #25]
   d6646:	b109      	cbz	r1, d664c <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d6648:	f7ff ffe8 	bl	d661c <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d664c:	6963      	ldr	r3, [r4, #20]
   d664e:	3b01      	subs	r3, #1
   d6650:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d6652:	68a3      	ldr	r3, [r4, #8]
   d6654:	68e0      	ldr	r0, [r4, #12]
   d6656:	6861      	ldr	r1, [r4, #4]
   d6658:	4298      	cmp	r0, r3
   d665a:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d665e:	bf2a      	itet	cs
   d6660:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d6662:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d6664:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d6668:	bd10      	pop	{r4, pc}

000d666a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d666a:	b570      	push	{r4, r5, r6, lr}
   d666c:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d666e:	68c0      	ldr	r0, [r0, #12]
   d6670:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d6672:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d6674:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d6676:	4613      	mov	r3, r2
   d6678:	4430      	add	r0, r6
   d667a:	460a      	mov	r2, r1
   d667c:	4629      	mov	r1, r5
   d667e:	f000 fb39 	bl	d6cf4 <vsnprintf>
	if (count <= spaceAvailable) {
   d6682:	4285      	cmp	r5, r0
		offset += count;
   d6684:	bf2d      	iteet	cs
   d6686:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d6688:	68a3      	ldrcc	r3, [r4, #8]
   d668a:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d668c:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d668e:	bf36      	itet	cc
   d6690:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d6692:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d6694:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d6698:	bd70      	pop	{r4, r5, r6, pc}

000d669a <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d669a:	b40e      	push	{r1, r2, r3}
   d669c:	b503      	push	{r0, r1, lr}
   d669e:	aa03      	add	r2, sp, #12
   d66a0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d66a4:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d66a6:	f7ff ffe0 	bl	d666a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d66aa:	b002      	add	sp, #8
   d66ac:	f85d eb04 	ldr.w	lr, [sp], #4
   d66b0:	b003      	add	sp, #12
   d66b2:	4770      	bx	lr

000d66b4 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d66b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d66b8:	4604      	mov	r4, r0
   d66ba:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d66bc:	4617      	mov	r7, r2
   d66be:	b112      	cbz	r2, d66c6 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d66c0:	2122      	movs	r1, #34	; 0x22
   d66c2:	f7ff ffab 	bl	d661c <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d66c6:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d66c8:	5d71      	ldrb	r1, [r6, r5]
   d66ca:	eb06 0805 	add.w	r8, r6, r5
   d66ce:	2900      	cmp	r1, #0
   d66d0:	d071      	beq.n	d67b6 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d66d2:	68e2      	ldr	r2, [r4, #12]
   d66d4:	68a3      	ldr	r3, [r4, #8]
   d66d6:	429a      	cmp	r2, r3
   d66d8:	d26d      	bcs.n	d67b6 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d66da:	060b      	lsls	r3, r1, #24
   d66dc:	d533      	bpl.n	d6746 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d66de:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d66e2:	2be0      	cmp	r3, #224	; 0xe0
   d66e4:	d117      	bne.n	d6716 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d66e6:	f898 3001 	ldrb.w	r3, [r8, #1]
   d66ea:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d66ee:	2a80      	cmp	r2, #128	; 0x80
   d66f0:	d111      	bne.n	d6716 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d66f2:	f105 0802 	add.w	r8, r5, #2
   d66f6:	f816 2008 	ldrb.w	r2, [r6, r8]
   d66fa:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d66fe:	2880      	cmp	r0, #128	; 0x80
   d6700:	d109      	bne.n	d6716 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d6702:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d6706:	019b      	lsls	r3, r3, #6
   d6708:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d670c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d6710:	431a      	orrs	r2, r3
   d6712:	b292      	uxth	r2, r2
   d6714:	e011      	b.n	d673a <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d6716:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d671a:	2bc0      	cmp	r3, #192	; 0xc0
   d671c:	d146      	bne.n	d67ac <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d671e:	f105 0801 	add.w	r8, r5, #1
   d6722:	f816 3008 	ldrb.w	r3, [r6, r8]
   d6726:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d672a:	2a80      	cmp	r2, #128	; 0x80
   d672c:	d13e      	bne.n	d67ac <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d672e:	0189      	lsls	r1, r1, #6
   d6730:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d6734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d6738:	431a      	orrs	r2, r3
   d673a:	4923      	ldr	r1, [pc, #140]	; (d67c8 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d673c:	4620      	mov	r0, r4
   d673e:	f7ff ffac 	bl	d669a <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d6742:	4645      	mov	r5, r8
   d6744:	e035      	b.n	d67b2 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d6746:	290c      	cmp	r1, #12
   d6748:	d018      	beq.n	d677c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d674a:	d80b      	bhi.n	d6764 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d674c:	2909      	cmp	r1, #9
   d674e:	d021      	beq.n	d6794 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d6750:	290a      	cmp	r1, #10
   d6752:	d019      	beq.n	d6788 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d6754:	2908      	cmp	r1, #8
   d6756:	d129      	bne.n	d67ac <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d6758:	215c      	movs	r1, #92	; 0x5c
   d675a:	4620      	mov	r0, r4
   d675c:	f7ff ff5e 	bl	d661c <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d6760:	2162      	movs	r1, #98	; 0x62
   d6762:	e023      	b.n	d67ac <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d6764:	2922      	cmp	r1, #34	; 0x22
   d6766:	d01b      	beq.n	d67a0 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d6768:	295c      	cmp	r1, #92	; 0x5c
   d676a:	d019      	beq.n	d67a0 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d676c:	290d      	cmp	r1, #13
   d676e:	d11d      	bne.n	d67ac <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d6770:	215c      	movs	r1, #92	; 0x5c
   d6772:	4620      	mov	r0, r4
   d6774:	f7ff ff52 	bl	d661c <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d6778:	2172      	movs	r1, #114	; 0x72
   d677a:	e017      	b.n	d67ac <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d677c:	215c      	movs	r1, #92	; 0x5c
   d677e:	4620      	mov	r0, r4
   d6780:	f7ff ff4c 	bl	d661c <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d6784:	2166      	movs	r1, #102	; 0x66
   d6786:	e011      	b.n	d67ac <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d6788:	215c      	movs	r1, #92	; 0x5c
   d678a:	4620      	mov	r0, r4
   d678c:	f7ff ff46 	bl	d661c <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d6790:	216e      	movs	r1, #110	; 0x6e
   d6792:	e00b      	b.n	d67ac <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d6794:	215c      	movs	r1, #92	; 0x5c
   d6796:	4620      	mov	r0, r4
   d6798:	f7ff ff40 	bl	d661c <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d679c:	2174      	movs	r1, #116	; 0x74
   d679e:	e005      	b.n	d67ac <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d67a0:	215c      	movs	r1, #92	; 0x5c
   d67a2:	4620      	mov	r0, r4
   d67a4:	f7ff ff3a 	bl	d661c <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d67a8:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d67ac:	4620      	mov	r0, r4
   d67ae:	f7ff ff35 	bl	d661c <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d67b2:	3501      	adds	r5, #1
   d67b4:	e788      	b.n	d66c8 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d67b6:	b12f      	cbz	r7, d67c4 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d67b8:	4620      	mov	r0, r4
   d67ba:	2122      	movs	r1, #34	; 0x22
	}

}
   d67bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d67c0:	f7ff bf2c 	b.w	d661c <_ZN10JsonWriter10insertCharEc>
   d67c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d67c8:	000d940c 	.word	0x000d940c

000d67cc <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d67cc:	6942      	ldr	r2, [r0, #20]
   d67ce:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d67d2:	7e1a      	ldrb	r2, [r3, #24]
   d67d4:	b112      	cbz	r2, d67dc <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d67d6:	2200      	movs	r2, #0
   d67d8:	761a      	strb	r2, [r3, #24]
   d67da:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d67dc:	212c      	movs	r1, #44	; 0x2c
   d67de:	f7ff bf1d 	b.w	d661c <_ZN10JsonWriter10insertCharEc>

000d67e2 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d67e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d67e4:	6943      	ldr	r3, [r0, #20]
   d67e6:	3301      	adds	r3, #1
   d67e8:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d67ea:	460e      	mov	r6, r1
   d67ec:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d67ee:	d80e      	bhi.n	d680e <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d67f0:	f7ff ffec 	bl	d67cc <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d67f4:	6943      	ldr	r3, [r0, #20]
   d67f6:	1c5a      	adds	r2, r3, #1
   d67f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d67fc:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d67fe:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d6800:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d6802:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d6804:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d6806:	f7ff ff09 	bl	d661c <_ZN10JsonWriter10insertCharEc>
   d680a:	4620      	mov	r0, r4
   d680c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d680e:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d6810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d6814 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d6814:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6816:	4604      	mov	r4, r0
   d6818:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d681c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d681e:	2d00      	cmp	r5, #0
   d6820:	db0a      	blt.n	d6838 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d6822:	f002 f88d 	bl	d8940 <__aeabi_f2d>
   d6826:	462a      	mov	r2, r5
   d6828:	e9cd 0100 	strd	r0, r1, [sp]
   d682c:	4908      	ldr	r1, [pc, #32]	; (d6850 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d682e:	4620      	mov	r0, r4
   d6830:	f7ff ff33 	bl	d669a <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d6834:	b003      	add	sp, #12
   d6836:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d6838:	f002 f882 	bl	d8940 <__aeabi_f2d>
   d683c:	460b      	mov	r3, r1
   d683e:	4905      	ldr	r1, [pc, #20]	; (d6854 <_ZN10JsonWriter11insertValueEf+0x40>)
   d6840:	4602      	mov	r2, r0
   d6842:	4620      	mov	r0, r4
	}
}
   d6844:	b003      	add	sp, #12
   d6846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d684a:	f7ff bf26 	b.w	d669a <_ZN10JsonWriter13insertsprintfEPKcz>
   d684e:	bf00      	nop
   d6850:	000d941e 	.word	0x000d941e
   d6854:	000d9423 	.word	0x000d9423

000d6858 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d6858:	f000 b810 	b.w	d687c <HAL_Pin_Map>

000d685c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d685c:	b508      	push	{r3, lr}
   d685e:	4b02      	ldr	r3, [pc, #8]	; (d6868 <netdb_freeaddrinfo+0xc>)
   d6860:	681b      	ldr	r3, [r3, #0]
   d6862:	689b      	ldr	r3, [r3, #8]
   d6864:	9301      	str	r3, [sp, #4]
   d6866:	bd08      	pop	{r3, pc}
   d6868:	00030268 	.word	0x00030268

000d686c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d686c:	b508      	push	{r3, lr}
   d686e:	4b02      	ldr	r3, [pc, #8]	; (d6878 <netdb_getaddrinfo+0xc>)
   d6870:	681b      	ldr	r3, [r3, #0]
   d6872:	68db      	ldr	r3, [r3, #12]
   d6874:	9301      	str	r3, [sp, #4]
   d6876:	bd08      	pop	{r3, pc}
   d6878:	00030268 	.word	0x00030268

000d687c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d687c:	b508      	push	{r3, lr}
   d687e:	4b02      	ldr	r3, [pc, #8]	; (d6888 <HAL_Pin_Map+0xc>)
   d6880:	681b      	ldr	r3, [r3, #0]
   d6882:	681b      	ldr	r3, [r3, #0]
   d6884:	9301      	str	r3, [sp, #4]
   d6886:	bd08      	pop	{r3, pc}
   d6888:	0003022c 	.word	0x0003022c

000d688c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d688c:	b508      	push	{r3, lr}
   d688e:	4b02      	ldr	r3, [pc, #8]	; (d6898 <HAL_Validate_Pin_Function+0xc>)
   d6890:	681b      	ldr	r3, [r3, #0]
   d6892:	685b      	ldr	r3, [r3, #4]
   d6894:	9301      	str	r3, [sp, #4]
   d6896:	bd08      	pop	{r3, pc}
   d6898:	0003022c 	.word	0x0003022c

000d689c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d689c:	b508      	push	{r3, lr}
   d689e:	4b02      	ldr	r3, [pc, #8]	; (d68a8 <HAL_Pin_Mode+0xc>)
   d68a0:	681b      	ldr	r3, [r3, #0]
   d68a2:	689b      	ldr	r3, [r3, #8]
   d68a4:	9301      	str	r3, [sp, #4]
   d68a6:	bd08      	pop	{r3, pc}
   d68a8:	0003022c 	.word	0x0003022c

000d68ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d68ac:	b508      	push	{r3, lr}
   d68ae:	4b02      	ldr	r3, [pc, #8]	; (d68b8 <HAL_Get_Pin_Mode+0xc>)
   d68b0:	681b      	ldr	r3, [r3, #0]
   d68b2:	68db      	ldr	r3, [r3, #12]
   d68b4:	9301      	str	r3, [sp, #4]
   d68b6:	bd08      	pop	{r3, pc}
   d68b8:	0003022c 	.word	0x0003022c

000d68bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d68bc:	b508      	push	{r3, lr}
   d68be:	4b02      	ldr	r3, [pc, #8]	; (d68c8 <HAL_GPIO_Write+0xc>)
   d68c0:	681b      	ldr	r3, [r3, #0]
   d68c2:	691b      	ldr	r3, [r3, #16]
   d68c4:	9301      	str	r3, [sp, #4]
   d68c6:	bd08      	pop	{r3, pc}
   d68c8:	0003022c 	.word	0x0003022c

000d68cc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d68cc:	b508      	push	{r3, lr}
   d68ce:	4b02      	ldr	r3, [pc, #8]	; (d68d8 <HAL_ADC_Read+0xc>)
   d68d0:	681b      	ldr	r3, [r3, #0]
   d68d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68d4:	9301      	str	r3, [sp, #4]
   d68d6:	bd08      	pop	{r3, pc}
   d68d8:	0003022c 	.word	0x0003022c

000d68dc <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d68dc:	b508      	push	{r3, lr}
   d68de:	4b02      	ldr	r3, [pc, #8]	; (d68e8 <HAL_SPI_Begin+0xc>)
   d68e0:	681b      	ldr	r3, [r3, #0]
   d68e2:	681b      	ldr	r3, [r3, #0]
   d68e4:	9301      	str	r3, [sp, #4]
   d68e6:	bd08      	pop	{r3, pc}
   d68e8:	00030230 	.word	0x00030230

000d68ec <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d68ec:	b508      	push	{r3, lr}
   d68ee:	4b02      	ldr	r3, [pc, #8]	; (d68f8 <HAL_SPI_Send_Receive_Data+0xc>)
   d68f0:	681b      	ldr	r3, [r3, #0]
   d68f2:	695b      	ldr	r3, [r3, #20]
   d68f4:	9301      	str	r3, [sp, #4]
   d68f6:	bd08      	pop	{r3, pc}
   d68f8:	00030230 	.word	0x00030230

000d68fc <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d68fc:	b508      	push	{r3, lr}
   d68fe:	4b02      	ldr	r3, [pc, #8]	; (d6908 <HAL_SPI_Init+0xc>)
   d6900:	681b      	ldr	r3, [r3, #0]
   d6902:	69db      	ldr	r3, [r3, #28]
   d6904:	9301      	str	r3, [sp, #4]
   d6906:	bd08      	pop	{r3, pc}
   d6908:	00030230 	.word	0x00030230

000d690c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d690c:	b508      	push	{r3, lr}
   d690e:	4b02      	ldr	r3, [pc, #8]	; (d6918 <HAL_SPI_Is_Enabled+0xc>)
   d6910:	681b      	ldr	r3, [r3, #0]
   d6912:	6a1b      	ldr	r3, [r3, #32]
   d6914:	9301      	str	r3, [sp, #4]
   d6916:	bd08      	pop	{r3, pc}
   d6918:	00030230 	.word	0x00030230

000d691c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d691c:	b508      	push	{r3, lr}
   d691e:	4b02      	ldr	r3, [pc, #8]	; (d6928 <HAL_SPI_Info+0xc>)
   d6920:	681b      	ldr	r3, [r3, #0]
   d6922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6924:	9301      	str	r3, [sp, #4]
   d6926:	bd08      	pop	{r3, pc}
   d6928:	00030230 	.word	0x00030230

000d692c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d692c:	b508      	push	{r3, lr}
   d692e:	4b02      	ldr	r3, [pc, #8]	; (d6938 <HAL_SPI_DMA_Transfer+0xc>)
   d6930:	681b      	ldr	r3, [r3, #0]
   d6932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6934:	9301      	str	r3, [sp, #4]
   d6936:	bd08      	pop	{r3, pc}
   d6938:	00030230 	.word	0x00030230

000d693c <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d693c:	b508      	push	{r3, lr}
   d693e:	4b02      	ldr	r3, [pc, #8]	; (d6948 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6940:	681b      	ldr	r3, [r3, #0]
   d6942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6944:	9301      	str	r3, [sp, #4]
   d6946:	bd08      	pop	{r3, pc}
   d6948:	00030230 	.word	0x00030230

000d694c <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d694c:	b508      	push	{r3, lr}
   d694e:	4b02      	ldr	r3, [pc, #8]	; (d6958 <HAL_SPI_Set_Settings+0xc>)
   d6950:	681b      	ldr	r3, [r3, #0]
   d6952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6954:	9301      	str	r3, [sp, #4]
   d6956:	bd08      	pop	{r3, pc}
   d6958:	00030230 	.word	0x00030230

000d695c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d695c:	b508      	push	{r3, lr}
   d695e:	4b02      	ldr	r3, [pc, #8]	; (d6968 <HAL_SPI_Acquire+0xc>)
   d6960:	681b      	ldr	r3, [r3, #0]
   d6962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6964:	9301      	str	r3, [sp, #4]
   d6966:	bd08      	pop	{r3, pc}
   d6968:	00030230 	.word	0x00030230

000d696c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d696c:	b508      	push	{r3, lr}
   d696e:	4b02      	ldr	r3, [pc, #8]	; (d6978 <HAL_SPI_Release+0xc>)
   d6970:	681b      	ldr	r3, [r3, #0]
   d6972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6974:	9301      	str	r3, [sp, #4]
   d6976:	bd08      	pop	{r3, pc}
   d6978:	00030230 	.word	0x00030230

000d697c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d697c:	b508      	push	{r3, lr}
   d697e:	4b02      	ldr	r3, [pc, #8]	; (d6988 <HAL_RNG_GetRandomNumber+0xc>)
   d6980:	681b      	ldr	r3, [r3, #0]
   d6982:	685b      	ldr	r3, [r3, #4]
   d6984:	9301      	str	r3, [sp, #4]
   d6986:	bd08      	pop	{r3, pc}
   d6988:	00030218 	.word	0x00030218

000d698c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d698c:	b508      	push	{r3, lr}
   d698e:	4b02      	ldr	r3, [pc, #8]	; (d6998 <HAL_Delay_Microseconds+0xc>)
   d6990:	681b      	ldr	r3, [r3, #0]
   d6992:	68db      	ldr	r3, [r3, #12]
   d6994:	9301      	str	r3, [sp, #4]
   d6996:	bd08      	pop	{r3, pc}
   d6998:	00030218 	.word	0x00030218

000d699c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d699c:	b508      	push	{r3, lr}
   d699e:	4b02      	ldr	r3, [pc, #8]	; (d69a8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d69a0:	681b      	ldr	r3, [r3, #0]
   d69a2:	691b      	ldr	r3, [r3, #16]
   d69a4:	9301      	str	r3, [sp, #4]
   d69a6:	bd08      	pop	{r3, pc}
   d69a8:	00030218 	.word	0x00030218

000d69ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d69ac:	b508      	push	{r3, lr}
   d69ae:	4b02      	ldr	r3, [pc, #8]	; (d69b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d69b0:	681b      	ldr	r3, [r3, #0]
   d69b2:	695b      	ldr	r3, [r3, #20]
   d69b4:	9301      	str	r3, [sp, #4]
   d69b6:	bd08      	pop	{r3, pc}
   d69b8:	00030218 	.word	0x00030218

000d69bc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d69bc:	b508      	push	{r3, lr}
   d69be:	4b02      	ldr	r3, [pc, #8]	; (d69c8 <os_thread_is_current+0xc>)
   d69c0:	681b      	ldr	r3, [r3, #0]
   d69c2:	689b      	ldr	r3, [r3, #8]
   d69c4:	9301      	str	r3, [sp, #4]
   d69c6:	bd08      	pop	{r3, pc}
   d69c8:	00030248 	.word	0x00030248

000d69cc <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d69cc:	b508      	push	{r3, lr}
   d69ce:	4b02      	ldr	r3, [pc, #8]	; (d69d8 <os_thread_yield+0xc>)
   d69d0:	681b      	ldr	r3, [r3, #0]
   d69d2:	68db      	ldr	r3, [r3, #12]
   d69d4:	9301      	str	r3, [sp, #4]
   d69d6:	bd08      	pop	{r3, pc}
   d69d8:	00030248 	.word	0x00030248

000d69dc <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d69dc:	b508      	push	{r3, lr}
   d69de:	4b02      	ldr	r3, [pc, #8]	; (d69e8 <os_thread_join+0xc>)
   d69e0:	681b      	ldr	r3, [r3, #0]
   d69e2:	691b      	ldr	r3, [r3, #16]
   d69e4:	9301      	str	r3, [sp, #4]
   d69e6:	bd08      	pop	{r3, pc}
   d69e8:	00030248 	.word	0x00030248

000d69ec <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d69ec:	b508      	push	{r3, lr}
   d69ee:	4b02      	ldr	r3, [pc, #8]	; (d69f8 <os_thread_cleanup+0xc>)
   d69f0:	681b      	ldr	r3, [r3, #0]
   d69f2:	695b      	ldr	r3, [r3, #20]
   d69f4:	9301      	str	r3, [sp, #4]
   d69f6:	bd08      	pop	{r3, pc}
   d69f8:	00030248 	.word	0x00030248

000d69fc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d69fc:	b508      	push	{r3, lr}
   d69fe:	4b02      	ldr	r3, [pc, #8]	; (d6a08 <os_mutex_recursive_create+0xc>)
   d6a00:	681b      	ldr	r3, [r3, #0]
   d6a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a04:	9301      	str	r3, [sp, #4]
   d6a06:	bd08      	pop	{r3, pc}
   d6a08:	00030248 	.word	0x00030248

000d6a0c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6a0c:	b508      	push	{r3, lr}
   d6a0e:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <os_mutex_recursive_destroy+0xc>)
   d6a10:	681b      	ldr	r3, [r3, #0]
   d6a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6a14:	9301      	str	r3, [sp, #4]
   d6a16:	bd08      	pop	{r3, pc}
   d6a18:	00030248 	.word	0x00030248

000d6a1c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6a1c:	b508      	push	{r3, lr}
   d6a1e:	4b02      	ldr	r3, [pc, #8]	; (d6a28 <inet_inet_ntop+0xc>)
   d6a20:	681b      	ldr	r3, [r3, #0]
   d6a22:	695b      	ldr	r3, [r3, #20]
   d6a24:	9301      	str	r3, [sp, #4]
   d6a26:	bd08      	pop	{r3, pc}
   d6a28:	00030264 	.word	0x00030264

000d6a2c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6a2c:	b508      	push	{r3, lr}
   d6a2e:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <HAL_USART_Init+0xc>)
   d6a30:	681b      	ldr	r3, [r3, #0]
   d6a32:	681b      	ldr	r3, [r3, #0]
   d6a34:	9301      	str	r3, [sp, #4]
   d6a36:	bd08      	pop	{r3, pc}
   d6a38:	0003023c 	.word	0x0003023c

000d6a3c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6a3c:	b508      	push	{r3, lr}
   d6a3e:	4b02      	ldr	r3, [pc, #8]	; (d6a48 <HAL_USART_Write_Data+0xc>)
   d6a40:	681b      	ldr	r3, [r3, #0]
   d6a42:	68db      	ldr	r3, [r3, #12]
   d6a44:	9301      	str	r3, [sp, #4]
   d6a46:	bd08      	pop	{r3, pc}
   d6a48:	0003023c 	.word	0x0003023c

000d6a4c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6a4c:	b508      	push	{r3, lr}
   d6a4e:	4b02      	ldr	r3, [pc, #8]	; (d6a58 <HAL_USART_Available_Data+0xc>)
   d6a50:	681b      	ldr	r3, [r3, #0]
   d6a52:	691b      	ldr	r3, [r3, #16]
   d6a54:	9301      	str	r3, [sp, #4]
   d6a56:	bd08      	pop	{r3, pc}
   d6a58:	0003023c 	.word	0x0003023c

000d6a5c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6a5c:	b508      	push	{r3, lr}
   d6a5e:	4b02      	ldr	r3, [pc, #8]	; (d6a68 <HAL_USART_Read_Data+0xc>)
   d6a60:	681b      	ldr	r3, [r3, #0]
   d6a62:	695b      	ldr	r3, [r3, #20]
   d6a64:	9301      	str	r3, [sp, #4]
   d6a66:	bd08      	pop	{r3, pc}
   d6a68:	0003023c 	.word	0x0003023c

000d6a6c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6a6c:	b508      	push	{r3, lr}
   d6a6e:	4b02      	ldr	r3, [pc, #8]	; (d6a78 <HAL_USART_Peek_Data+0xc>)
   d6a70:	681b      	ldr	r3, [r3, #0]
   d6a72:	699b      	ldr	r3, [r3, #24]
   d6a74:	9301      	str	r3, [sp, #4]
   d6a76:	bd08      	pop	{r3, pc}
   d6a78:	0003023c 	.word	0x0003023c

000d6a7c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6a7c:	b508      	push	{r3, lr}
   d6a7e:	4b02      	ldr	r3, [pc, #8]	; (d6a88 <HAL_USART_Flush_Data+0xc>)
   d6a80:	681b      	ldr	r3, [r3, #0]
   d6a82:	69db      	ldr	r3, [r3, #28]
   d6a84:	9301      	str	r3, [sp, #4]
   d6a86:	bd08      	pop	{r3, pc}
   d6a88:	0003023c 	.word	0x0003023c

000d6a8c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6a8c:	b508      	push	{r3, lr}
   d6a8e:	4b02      	ldr	r3, [pc, #8]	; (d6a98 <HAL_USART_Is_Enabled+0xc>)
   d6a90:	681b      	ldr	r3, [r3, #0]
   d6a92:	6a1b      	ldr	r3, [r3, #32]
   d6a94:	9301      	str	r3, [sp, #4]
   d6a96:	bd08      	pop	{r3, pc}
   d6a98:	0003023c 	.word	0x0003023c

000d6a9c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6a9c:	b508      	push	{r3, lr}
   d6a9e:	4b02      	ldr	r3, [pc, #8]	; (d6aa8 <HAL_USART_Available_Data_For_Write+0xc>)
   d6aa0:	681b      	ldr	r3, [r3, #0]
   d6aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6aa4:	9301      	str	r3, [sp, #4]
   d6aa6:	bd08      	pop	{r3, pc}
   d6aa8:	0003023c 	.word	0x0003023c

000d6aac <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6aac:	b508      	push	{r3, lr}
   d6aae:	4b02      	ldr	r3, [pc, #8]	; (d6ab8 <HAL_I2C_Write_Data+0xc>)
   d6ab0:	681b      	ldr	r3, [r3, #0]
   d6ab2:	6a1b      	ldr	r3, [r3, #32]
   d6ab4:	9301      	str	r3, [sp, #4]
   d6ab6:	bd08      	pop	{r3, pc}
   d6ab8:	00030228 	.word	0x00030228

000d6abc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6abc:	b508      	push	{r3, lr}
   d6abe:	4b02      	ldr	r3, [pc, #8]	; (d6ac8 <HAL_I2C_Available_Data+0xc>)
   d6ac0:	681b      	ldr	r3, [r3, #0]
   d6ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ac4:	9301      	str	r3, [sp, #4]
   d6ac6:	bd08      	pop	{r3, pc}
   d6ac8:	00030228 	.word	0x00030228

000d6acc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6acc:	b508      	push	{r3, lr}
   d6ace:	4b02      	ldr	r3, [pc, #8]	; (d6ad8 <HAL_I2C_Read_Data+0xc>)
   d6ad0:	681b      	ldr	r3, [r3, #0]
   d6ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ad4:	9301      	str	r3, [sp, #4]
   d6ad6:	bd08      	pop	{r3, pc}
   d6ad8:	00030228 	.word	0x00030228

000d6adc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6adc:	b508      	push	{r3, lr}
   d6ade:	4b02      	ldr	r3, [pc, #8]	; (d6ae8 <HAL_I2C_Peek_Data+0xc>)
   d6ae0:	681b      	ldr	r3, [r3, #0]
   d6ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ae4:	9301      	str	r3, [sp, #4]
   d6ae6:	bd08      	pop	{r3, pc}
   d6ae8:	00030228 	.word	0x00030228

000d6aec <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6aec:	b508      	push	{r3, lr}
   d6aee:	4b02      	ldr	r3, [pc, #8]	; (d6af8 <HAL_I2C_Flush_Data+0xc>)
   d6af0:	681b      	ldr	r3, [r3, #0]
   d6af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6af4:	9301      	str	r3, [sp, #4]
   d6af6:	bd08      	pop	{r3, pc}
   d6af8:	00030228 	.word	0x00030228

000d6afc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6afc:	b508      	push	{r3, lr}
   d6afe:	4b02      	ldr	r3, [pc, #8]	; (d6b08 <HAL_I2C_Is_Enabled+0xc>)
   d6b00:	681b      	ldr	r3, [r3, #0]
   d6b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6b04:	9301      	str	r3, [sp, #4]
   d6b06:	bd08      	pop	{r3, pc}
   d6b08:	00030228 	.word	0x00030228

000d6b0c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6b0c:	b508      	push	{r3, lr}
   d6b0e:	4b02      	ldr	r3, [pc, #8]	; (d6b18 <HAL_I2C_Init+0xc>)
   d6b10:	681b      	ldr	r3, [r3, #0]
   d6b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6b14:	9301      	str	r3, [sp, #4]
   d6b16:	bd08      	pop	{r3, pc}
   d6b18:	00030228 	.word	0x00030228

000d6b1c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6b1c:	b508      	push	{r3, lr}
   d6b1e:	4b02      	ldr	r3, [pc, #8]	; (d6b28 <HAL_USB_USART_Init+0xc>)
   d6b20:	681b      	ldr	r3, [r3, #0]
   d6b22:	681b      	ldr	r3, [r3, #0]
   d6b24:	9301      	str	r3, [sp, #4]
   d6b26:	bd08      	pop	{r3, pc}
   d6b28:	0003024c 	.word	0x0003024c

000d6b2c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6b2c:	b508      	push	{r3, lr}
   d6b2e:	4b02      	ldr	r3, [pc, #8]	; (d6b38 <HAL_USB_USART_Begin+0xc>)
   d6b30:	681b      	ldr	r3, [r3, #0]
   d6b32:	685b      	ldr	r3, [r3, #4]
   d6b34:	9301      	str	r3, [sp, #4]
   d6b36:	bd08      	pop	{r3, pc}
   d6b38:	0003024c 	.word	0x0003024c

000d6b3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6b3c:	b508      	push	{r3, lr}
   d6b3e:	4b02      	ldr	r3, [pc, #8]	; (d6b48 <HAL_USB_USART_Available_Data+0xc>)
   d6b40:	681b      	ldr	r3, [r3, #0]
   d6b42:	691b      	ldr	r3, [r3, #16]
   d6b44:	9301      	str	r3, [sp, #4]
   d6b46:	bd08      	pop	{r3, pc}
   d6b48:	0003024c 	.word	0x0003024c

000d6b4c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6b4c:	b508      	push	{r3, lr}
   d6b4e:	4b02      	ldr	r3, [pc, #8]	; (d6b58 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6b50:	681b      	ldr	r3, [r3, #0]
   d6b52:	695b      	ldr	r3, [r3, #20]
   d6b54:	9301      	str	r3, [sp, #4]
   d6b56:	bd08      	pop	{r3, pc}
   d6b58:	0003024c 	.word	0x0003024c

000d6b5c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6b5c:	b508      	push	{r3, lr}
   d6b5e:	4b02      	ldr	r3, [pc, #8]	; (d6b68 <HAL_USB_USART_Receive_Data+0xc>)
   d6b60:	681b      	ldr	r3, [r3, #0]
   d6b62:	699b      	ldr	r3, [r3, #24]
   d6b64:	9301      	str	r3, [sp, #4]
   d6b66:	bd08      	pop	{r3, pc}
   d6b68:	0003024c 	.word	0x0003024c

000d6b6c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6b6c:	b508      	push	{r3, lr}
   d6b6e:	4b02      	ldr	r3, [pc, #8]	; (d6b78 <HAL_USB_USART_Send_Data+0xc>)
   d6b70:	681b      	ldr	r3, [r3, #0]
   d6b72:	69db      	ldr	r3, [r3, #28]
   d6b74:	9301      	str	r3, [sp, #4]
   d6b76:	bd08      	pop	{r3, pc}
   d6b78:	0003024c 	.word	0x0003024c

000d6b7c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6b7c:	b508      	push	{r3, lr}
   d6b7e:	4b02      	ldr	r3, [pc, #8]	; (d6b88 <HAL_USB_USART_Flush_Data+0xc>)
   d6b80:	681b      	ldr	r3, [r3, #0]
   d6b82:	6a1b      	ldr	r3, [r3, #32]
   d6b84:	9301      	str	r3, [sp, #4]
   d6b86:	bd08      	pop	{r3, pc}
   d6b88:	0003024c 	.word	0x0003024c

000d6b8c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6b8c:	b508      	push	{r3, lr}
   d6b8e:	4b02      	ldr	r3, [pc, #8]	; (d6b98 <set_system_mode+0xc>)
   d6b90:	681b      	ldr	r3, [r3, #0]
   d6b92:	685b      	ldr	r3, [r3, #4]
   d6b94:	9301      	str	r3, [sp, #4]
   d6b96:	bd08      	pop	{r3, pc}
   d6b98:	00030220 	.word	0x00030220

000d6b9c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6b9c:	b508      	push	{r3, lr}
   d6b9e:	4b02      	ldr	r3, [pc, #8]	; (d6ba8 <system_delay_ms+0xc>)
   d6ba0:	681b      	ldr	r3, [r3, #0]
   d6ba2:	695b      	ldr	r3, [r3, #20]
   d6ba4:	9301      	str	r3, [sp, #4]
   d6ba6:	bd08      	pop	{r3, pc}
   d6ba8:	00030220 	.word	0x00030220

000d6bac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6bac:	b508      	push	{r3, lr}
   d6bae:	4b02      	ldr	r3, [pc, #8]	; (d6bb8 <application_thread_current+0xc>)
   d6bb0:	681b      	ldr	r3, [r3, #0]
   d6bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6bb4:	9301      	str	r3, [sp, #4]
   d6bb6:	bd08      	pop	{r3, pc}
   d6bb8:	00030220 	.word	0x00030220

000d6bbc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6bbc:	b508      	push	{r3, lr}
   d6bbe:	4b02      	ldr	r3, [pc, #8]	; (d6bc8 <application_thread_invoke+0xc>)
   d6bc0:	681b      	ldr	r3, [r3, #0]
   d6bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6bc4:	9301      	str	r3, [sp, #4]
   d6bc6:	bd08      	pop	{r3, pc}
   d6bc8:	00030220 	.word	0x00030220

000d6bcc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6bcc:	b508      	push	{r3, lr}
   d6bce:	4b03      	ldr	r3, [pc, #12]	; (d6bdc <system_ctrl_set_app_request_handler+0x10>)
   d6bd0:	681b      	ldr	r3, [r3, #0]
   d6bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6bd6:	9301      	str	r3, [sp, #4]
   d6bd8:	bd08      	pop	{r3, pc}
   d6bda:	0000      	.short	0x0000
   d6bdc:	00030220 	.word	0x00030220

000d6be0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6be0:	b508      	push	{r3, lr}
   d6be2:	4b03      	ldr	r3, [pc, #12]	; (d6bf0 <system_ctrl_set_result+0x10>)
   d6be4:	681b      	ldr	r3, [r3, #0]
   d6be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6bea:	9301      	str	r3, [sp, #4]
   d6bec:	bd08      	pop	{r3, pc}
   d6bee:	0000      	.short	0x0000
   d6bf0:	00030220 	.word	0x00030220

000d6bf4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6bf4:	b508      	push	{r3, lr}
   d6bf6:	4b02      	ldr	r3, [pc, #8]	; (d6c00 <network_connect+0xc>)
   d6bf8:	681b      	ldr	r3, [r3, #0]
   d6bfa:	685b      	ldr	r3, [r3, #4]
   d6bfc:	9301      	str	r3, [sp, #4]
   d6bfe:	bd08      	pop	{r3, pc}
   d6c00:	00030240 	.word	0x00030240

000d6c04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6c04:	b508      	push	{r3, lr}
   d6c06:	4b02      	ldr	r3, [pc, #8]	; (d6c10 <network_connecting+0xc>)
   d6c08:	681b      	ldr	r3, [r3, #0]
   d6c0a:	689b      	ldr	r3, [r3, #8]
   d6c0c:	9301      	str	r3, [sp, #4]
   d6c0e:	bd08      	pop	{r3, pc}
   d6c10:	00030240 	.word	0x00030240

000d6c14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6c14:	b508      	push	{r3, lr}
   d6c16:	4b02      	ldr	r3, [pc, #8]	; (d6c20 <network_disconnect+0xc>)
   d6c18:	681b      	ldr	r3, [r3, #0]
   d6c1a:	68db      	ldr	r3, [r3, #12]
   d6c1c:	9301      	str	r3, [sp, #4]
   d6c1e:	bd08      	pop	{r3, pc}
   d6c20:	00030240 	.word	0x00030240

000d6c24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6c24:	b508      	push	{r3, lr}
   d6c26:	4b02      	ldr	r3, [pc, #8]	; (d6c30 <network_ready+0xc>)
   d6c28:	681b      	ldr	r3, [r3, #0]
   d6c2a:	691b      	ldr	r3, [r3, #16]
   d6c2c:	9301      	str	r3, [sp, #4]
   d6c2e:	bd08      	pop	{r3, pc}
   d6c30:	00030240 	.word	0x00030240

000d6c34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6c34:	b508      	push	{r3, lr}
   d6c36:	4b02      	ldr	r3, [pc, #8]	; (d6c40 <network_on+0xc>)
   d6c38:	681b      	ldr	r3, [r3, #0]
   d6c3a:	695b      	ldr	r3, [r3, #20]
   d6c3c:	9301      	str	r3, [sp, #4]
   d6c3e:	bd08      	pop	{r3, pc}
   d6c40:	00030240 	.word	0x00030240

000d6c44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6c44:	b508      	push	{r3, lr}
   d6c46:	4b02      	ldr	r3, [pc, #8]	; (d6c50 <network_off+0xc>)
   d6c48:	681b      	ldr	r3, [r3, #0]
   d6c4a:	699b      	ldr	r3, [r3, #24]
   d6c4c:	9301      	str	r3, [sp, #4]
   d6c4e:	bd08      	pop	{r3, pc}
   d6c50:	00030240 	.word	0x00030240

000d6c54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6c54:	b508      	push	{r3, lr}
   d6c56:	4b02      	ldr	r3, [pc, #8]	; (d6c60 <network_listen+0xc>)
   d6c58:	681b      	ldr	r3, [r3, #0]
   d6c5a:	69db      	ldr	r3, [r3, #28]
   d6c5c:	9301      	str	r3, [sp, #4]
   d6c5e:	bd08      	pop	{r3, pc}
   d6c60:	00030240 	.word	0x00030240

000d6c64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6c64:	b508      	push	{r3, lr}
   d6c66:	4b02      	ldr	r3, [pc, #8]	; (d6c70 <network_listening+0xc>)
   d6c68:	681b      	ldr	r3, [r3, #0]
   d6c6a:	6a1b      	ldr	r3, [r3, #32]
   d6c6c:	9301      	str	r3, [sp, #4]
   d6c6e:	bd08      	pop	{r3, pc}
   d6c70:	00030240 	.word	0x00030240

000d6c74 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6c74:	b508      	push	{r3, lr}
   d6c76:	4b02      	ldr	r3, [pc, #8]	; (d6c80 <network_set_listen_timeout+0xc>)
   d6c78:	681b      	ldr	r3, [r3, #0]
   d6c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c7c:	9301      	str	r3, [sp, #4]
   d6c7e:	bd08      	pop	{r3, pc}
   d6c80:	00030240 	.word	0x00030240

000d6c84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6c84:	b508      	push	{r3, lr}
   d6c86:	4b02      	ldr	r3, [pc, #8]	; (d6c90 <network_get_listen_timeout+0xc>)
   d6c88:	681b      	ldr	r3, [r3, #0]
   d6c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6c8c:	9301      	str	r3, [sp, #4]
   d6c8e:	bd08      	pop	{r3, pc}
   d6c90:	00030240 	.word	0x00030240

000d6c94 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6c94:	b508      	push	{r3, lr}
   d6c96:	4b02      	ldr	r3, [pc, #8]	; (d6ca0 <spark_process+0xc>)
   d6c98:	681b      	ldr	r3, [r3, #0]
   d6c9a:	689b      	ldr	r3, [r3, #8]
   d6c9c:	9301      	str	r3, [sp, #4]
   d6c9e:	bd08      	pop	{r3, pc}
   d6ca0:	00030244 	.word	0x00030244

000d6ca4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6ca4:	b508      	push	{r3, lr}
   d6ca6:	4b02      	ldr	r3, [pc, #8]	; (d6cb0 <spark_cloud_flag_connected+0xc>)
   d6ca8:	681b      	ldr	r3, [r3, #0]
   d6caa:	695b      	ldr	r3, [r3, #20]
   d6cac:	9301      	str	r3, [sp, #4]
   d6cae:	bd08      	pop	{r3, pc}
   d6cb0:	00030244 	.word	0x00030244

000d6cb4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6cb4:	b508      	push	{r3, lr}
   d6cb6:	4b02      	ldr	r3, [pc, #8]	; (d6cc0 <spark_send_event+0xc>)
   d6cb8:	681b      	ldr	r3, [r3, #0]
   d6cba:	6a1b      	ldr	r3, [r3, #32]
   d6cbc:	9301      	str	r3, [sp, #4]
   d6cbe:	bd08      	pop	{r3, pc}
   d6cc0:	00030244 	.word	0x00030244

000d6cc4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6cc4:	b508      	push	{r3, lr}
   d6cc6:	4b02      	ldr	r3, [pc, #8]	; (d6cd0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6cc8:	681b      	ldr	r3, [r3, #0]
   d6cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6ccc:	9301      	str	r3, [sp, #4]
   d6cce:	bd08      	pop	{r3, pc}
   d6cd0:	00030244 	.word	0x00030244

000d6cd4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6cd4:	b508      	push	{r3, lr}
   d6cd6:	4b02      	ldr	r3, [pc, #8]	; (d6ce0 <malloc+0xc>)
   d6cd8:	681b      	ldr	r3, [r3, #0]
   d6cda:	681b      	ldr	r3, [r3, #0]
   d6cdc:	9301      	str	r3, [sp, #4]
   d6cde:	bd08      	pop	{r3, pc}
   d6ce0:	0003021c 	.word	0x0003021c

000d6ce4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6ce4:	b508      	push	{r3, lr}
   d6ce6:	4b02      	ldr	r3, [pc, #8]	; (d6cf0 <free+0xc>)
   d6ce8:	681b      	ldr	r3, [r3, #0]
   d6cea:	685b      	ldr	r3, [r3, #4]
   d6cec:	9301      	str	r3, [sp, #4]
   d6cee:	bd08      	pop	{r3, pc}
   d6cf0:	0003021c 	.word	0x0003021c

000d6cf4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6cf4:	b508      	push	{r3, lr}
   d6cf6:	4b02      	ldr	r3, [pc, #8]	; (d6d00 <vsnprintf+0xc>)
   d6cf8:	681b      	ldr	r3, [r3, #0]
   d6cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6cfc:	9301      	str	r3, [sp, #4]
   d6cfe:	bd08      	pop	{r3, pc}
   d6d00:	0003021c 	.word	0x0003021c

000d6d04 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6d04:	b508      	push	{r3, lr}
   d6d06:	4b02      	ldr	r3, [pc, #8]	; (d6d10 <abort+0xc>)
   d6d08:	681b      	ldr	r3, [r3, #0]
   d6d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d0c:	9301      	str	r3, [sp, #4]
   d6d0e:	bd08      	pop	{r3, pc}
   d6d10:	0003021c 	.word	0x0003021c

000d6d14 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6d14:	b508      	push	{r3, lr}
   d6d16:	4b02      	ldr	r3, [pc, #8]	; (d6d20 <_malloc_r+0xc>)
   d6d18:	681b      	ldr	r3, [r3, #0]
   d6d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d1c:	9301      	str	r3, [sp, #4]
   d6d1e:	bd08      	pop	{r3, pc}
   d6d20:	0003021c 	.word	0x0003021c

000d6d24 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6d24:	b508      	push	{r3, lr}
   d6d26:	4b02      	ldr	r3, [pc, #8]	; (d6d30 <__errno+0xc>)
   d6d28:	681b      	ldr	r3, [r3, #0]
   d6d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6d2c:	9301      	str	r3, [sp, #4]
   d6d2e:	bd08      	pop	{r3, pc}
   d6d30:	0003021c 	.word	0x0003021c

000d6d34 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6d34:	2200      	movs	r2, #0
   d6d36:	4611      	mov	r1, r2
   d6d38:	6840      	ldr	r0, [r0, #4]
   d6d3a:	f7ff bf93 	b.w	d6c64 <network_listening>

000d6d3e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6d3e:	2200      	movs	r2, #0
   d6d40:	4611      	mov	r1, r2
   d6d42:	6840      	ldr	r0, [r0, #4]
   d6d44:	f7ff bf9e 	b.w	d6c84 <network_get_listen_timeout>

000d6d48 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6d48:	2200      	movs	r2, #0
   d6d4a:	6840      	ldr	r0, [r0, #4]
   d6d4c:	f7ff bf92 	b.w	d6c74 <network_set_listen_timeout>

000d6d50 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6d50:	2200      	movs	r2, #0
   d6d52:	f081 0101 	eor.w	r1, r1, #1
   d6d56:	6840      	ldr	r0, [r0, #4]
   d6d58:	f7ff bf7c 	b.w	d6c54 <network_listen>

000d6d5c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6d5c:	2300      	movs	r3, #0
   d6d5e:	461a      	mov	r2, r3
   d6d60:	4619      	mov	r1, r3
   d6d62:	6840      	ldr	r0, [r0, #4]
   d6d64:	f7ff bf6e 	b.w	d6c44 <network_off>

000d6d68 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6d68:	2300      	movs	r3, #0
   d6d6a:	461a      	mov	r2, r3
   d6d6c:	4619      	mov	r1, r3
   d6d6e:	6840      	ldr	r0, [r0, #4]
   d6d70:	f7ff bf60 	b.w	d6c34 <network_on>

000d6d74 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6d74:	2200      	movs	r2, #0
   d6d76:	4611      	mov	r1, r2
   d6d78:	6840      	ldr	r0, [r0, #4]
   d6d7a:	f7ff bf53 	b.w	d6c24 <network_ready>

000d6d7e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6d7e:	2200      	movs	r2, #0
   d6d80:	4611      	mov	r1, r2
   d6d82:	6840      	ldr	r0, [r0, #4]
   d6d84:	f7ff bf3e 	b.w	d6c04 <network_connecting>

000d6d88 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d88:	2200      	movs	r2, #0
   d6d8a:	2102      	movs	r1, #2
   d6d8c:	6840      	ldr	r0, [r0, #4]
   d6d8e:	f7ff bf41 	b.w	d6c14 <network_disconnect>

000d6d92 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6d92:	2300      	movs	r3, #0
   d6d94:	461a      	mov	r2, r3
   d6d96:	6840      	ldr	r0, [r0, #4]
   d6d98:	f7ff bf2c 	b.w	d6bf4 <network_connect>

000d6d9c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6d9c:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6d9e:	2203      	movs	r2, #3
   d6da0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6da2:	4a02      	ldr	r2, [pc, #8]	; (d6dac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6da4:	601a      	str	r2, [r3, #0]
   d6da6:	4770      	bx	lr
   d6da8:	2003e3dc 	.word	0x2003e3dc
   d6dac:	000d9438 	.word	0x000d9438

000d6db0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6db0:	2100      	movs	r1, #0
   d6db2:	f7ff bdd3 	b.w	d695c <HAL_SPI_Acquire>

000d6db6 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6db6:	2100      	movs	r1, #0
   d6db8:	f7ff bdd8 	b.w	d696c <HAL_SPI_Release>

000d6dbc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6dbc:	b510      	push	{r4, lr}
   d6dbe:	4604      	mov	r4, r0
{
    _spi = spi;
   d6dc0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6dc2:	4608      	mov	r0, r1
   d6dc4:	f7ff fd9a 	bl	d68fc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6dc8:	2300      	movs	r3, #0
   d6dca:	6063      	str	r3, [r4, #4]
}
   d6dcc:	4620      	mov	r0, r4
   d6dce:	bd10      	pop	{r4, pc}

000d6dd0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6dd0:	b510      	push	{r4, lr}
   d6dd2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6dd4:	7800      	ldrb	r0, [r0, #0]
   d6dd6:	f7ff ffeb 	bl	d6db0 <_ZN8SPIClass4lockEv.isra.0>
   d6dda:	b948      	cbnz	r0, d6df0 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6ddc:	7820      	ldrb	r0, [r4, #0]
   d6dde:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6de2:	f7ff fd7b 	bl	d68dc <HAL_SPI_Begin>
        unlock();
   d6de6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6dec:	f7ff bfe3 	b.w	d6db6 <_ZN8SPIClass6unlockEv.isra.1>
   d6df0:	bd10      	pop	{r4, pc}

000d6df2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6df2:	7800      	ldrb	r0, [r0, #0]
   d6df4:	f7ff bfdf 	b.w	d6db6 <_ZN8SPIClass6unlockEv.isra.1>

000d6df8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6df8:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6dfa:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6dfc:	6018      	str	r0, [r3, #0]
   d6dfe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6e00:	6818      	ldr	r0, [r3, #0]
   d6e02:	4288      	cmp	r0, r1
   d6e04:	b2e5      	uxtb	r5, r4
   d6e06:	d906      	bls.n	d6e16 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6e08:	3401      	adds	r4, #1
   d6e0a:	2c08      	cmp	r4, #8
   d6e0c:	d002      	beq.n	d6e14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6e0e:	0840      	lsrs	r0, r0, #1
   d6e10:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6e12:	e7f5      	b.n	d6e00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6e14:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6e16:	4b02      	ldr	r3, [pc, #8]	; (d6e20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6e18:	5d5b      	ldrb	r3, [r3, r5]
   d6e1a:	7013      	strb	r3, [r2, #0]
   d6e1c:	bd30      	pop	{r4, r5, pc}
   d6e1e:	bf00      	nop
   d6e20:	000d9464 	.word	0x000d9464

000d6e24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e28:	4607      	mov	r7, r0
   d6e2a:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6e2c:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6e2e:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6e30:	f7ff ffbe 	bl	d6db0 <_ZN8SPIClass4lockEv.isra.0>
   d6e34:	2800      	cmp	r0, #0
   d6e36:	db62      	blt.n	d6efe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6e38:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6e3a:	2214      	movs	r2, #20
   d6e3c:	2100      	movs	r1, #0
   d6e3e:	a809      	add	r0, sp, #36	; 0x24
   d6e40:	f002 f922 	bl	d9088 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6e44:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6e46:	4620      	mov	r0, r4
   d6e48:	2200      	movs	r2, #0
   d6e4a:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6e4c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6e50:	f7ff fd64 	bl	d691c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6e54:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6e58:	b154      	cbz	r4, d6e70 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6e5a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6e5e:	b935      	cbnz	r5, d6e6e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6e60:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6e64:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6e68:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6e6c:	e003      	b.n	d6e76 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6e6e:	2400      	movs	r4, #0
   d6e70:	46a1      	mov	r9, r4
   d6e72:	46a0      	mov	r8, r4
   d6e74:	2501      	movs	r5, #1
   d6e76:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6e78:	b105      	cbz	r5, d6e7c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d6e7a:	b9bb      	cbnz	r3, d6eac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6e7c:	429d      	cmp	r5, r3
   d6e7e:	d10b      	bne.n	d6e98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6e80:	68b2      	ldr	r2, [r6, #8]
   d6e82:	4542      	cmp	r2, r8
   d6e84:	d108      	bne.n	d6e98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6e86:	f88d 9020 	strb.w	r9, [sp, #32]
   d6e8a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6e8e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6e92:	89b2      	ldrh	r2, [r6, #12]
   d6e94:	4291      	cmp	r1, r2
   d6e96:	d009      	beq.n	d6eac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6e98:	b153      	cbz	r3, d6eb0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6e9a:	2400      	movs	r4, #0
   d6e9c:	7838      	ldrb	r0, [r7, #0]
   d6e9e:	9401      	str	r4, [sp, #4]
   d6ea0:	9400      	str	r4, [sp, #0]
   d6ea2:	4623      	mov	r3, r4
   d6ea4:	4622      	mov	r2, r4
   d6ea6:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6ea8:	f7ff fd50 	bl	d694c <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6eac:	2000      	movs	r0, #0
   d6eae:	e026      	b.n	d6efe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6eb0:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6eb4:	68b1      	ldr	r1, [r6, #8]
   d6eb6:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6eb8:	ab04      	add	r3, sp, #16
   d6eba:	f10d 020f 	add.w	r2, sp, #15
   d6ebe:	f7ff ff9b 	bl	d6df8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6ec2:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6ec4:	b105      	cbz	r5, d6ec8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6ec6:	b9b1      	cbnz	r1, d6ef6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6ec8:	42a9      	cmp	r1, r5
   d6eca:	d008      	beq.n	d6ede <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6ecc:	2400      	movs	r4, #0
   d6ece:	7838      	ldrb	r0, [r7, #0]
   d6ed0:	9401      	str	r4, [sp, #4]
   d6ed2:	7b74      	ldrb	r4, [r6, #13]
   d6ed4:	7b33      	ldrb	r3, [r6, #12]
   d6ed6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6eda:	9400      	str	r4, [sp, #0]
   d6edc:	e7e4      	b.n	d6ea8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6ede:	68b3      	ldr	r3, [r6, #8]
   d6ee0:	4543      	cmp	r3, r8
   d6ee2:	d3f3      	bcc.n	d6ecc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6ee4:	f88d 9020 	strb.w	r9, [sp, #32]
   d6ee8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6eec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6ef0:	89b3      	ldrh	r3, [r6, #12]
   d6ef2:	429a      	cmp	r2, r3
   d6ef4:	d1ea      	bne.n	d6ecc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6ef6:	9b04      	ldr	r3, [sp, #16]
   d6ef8:	4543      	cmp	r3, r8
   d6efa:	d1e7      	bne.n	d6ecc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6efc:	e7d6      	b.n	d6eac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6efe:	b00f      	add	sp, #60	; 0x3c
   d6f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6f04 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6f04:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6f06:	7800      	ldrb	r0, [r0, #0]
   d6f08:	f7ff fcf0 	bl	d68ec <HAL_SPI_Send_Receive_Data>
}
   d6f0c:	b2c0      	uxtb	r0, r0
   d6f0e:	bd08      	pop	{r3, pc}

000d6f10 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6f10:	b530      	push	{r4, r5, lr}
   d6f12:	b087      	sub	sp, #28
   d6f14:	4604      	mov	r4, r0
   d6f16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6f18:	7800      	ldrb	r0, [r0, #0]
   d6f1a:	9500      	str	r5, [sp, #0]
   d6f1c:	f7ff fd06 	bl	d692c <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d6f20:	b93d      	cbnz	r5, d6f32 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d6f22:	a902      	add	r1, sp, #8
   d6f24:	7820      	ldrb	r0, [r4, #0]
   d6f26:	f7ff fd09 	bl	d693c <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d6f2a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6f2e:	07db      	lsls	r3, r3, #31
   d6f30:	d4f7      	bmi.n	d6f22 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d6f32:	b007      	add	sp, #28
   d6f34:	bd30      	pop	{r4, r5, pc}

000d6f36 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6f36:	7800      	ldrb	r0, [r0, #0]
   d6f38:	f7ff bce8 	b.w	d690c <HAL_SPI_Is_Enabled>

000d6f3c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6f3c:	b510      	push	{r4, lr}
   d6f3e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6f40:	6800      	ldr	r0, [r0, #0]
   d6f42:	b118      	cbz	r0, d6f4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6f44:	f7ff fece 	bl	d6ce4 <free>
            wakeupSource_ = nullptr;
   d6f48:	2300      	movs	r3, #0
   d6f4a:	6023      	str	r3, [r4, #0]
   d6f4c:	bd10      	pop	{r4, pc}

000d6f4e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6f4e:	b510      	push	{r4, lr}
   d6f50:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6f52:	f7ff fff3 	bl	d6f3c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6f56:	4620      	mov	r0, r4
   d6f58:	bd10      	pop	{r4, pc}
	...

000d6f5c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6f5c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6f5e:	4c09      	ldr	r4, [pc, #36]	; (d6f84 <_GLOBAL__sub_I_System+0x28>)
   d6f60:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6f62:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6f66:	6020      	str	r0, [r4, #0]
   d6f68:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6f6a:	71a0      	strb	r0, [r4, #6]
   d6f6c:	8120      	strh	r0, [r4, #8]
   d6f6e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6f70:	f7ff fe0c 	bl	d6b8c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6f74:	4620      	mov	r0, r4
   d6f76:	4a04      	ldr	r2, [pc, #16]	; (d6f88 <_GLOBAL__sub_I_System+0x2c>)
   d6f78:	4904      	ldr	r1, [pc, #16]	; (d6f8c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6f7e:	f001 b8dd 	b.w	d813c <__aeabi_atexit>
   d6f82:	bf00      	nop
   d6f84:	2003e3e4 	.word	0x2003e3e4
   d6f88:	2003be8c 	.word	0x2003be8c
   d6f8c:	000d6f4f 	.word	0x000d6f4f

000d6f90 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6f90:	b510      	push	{r4, lr}
   d6f92:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6f94:	6800      	ldr	r0, [r0, #0]
   d6f96:	b108      	cbz	r0, d6f9c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6f98:	f7ff fd38 	bl	d6a0c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	bd10      	pop	{r4, pc}

000d6fa0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6fa0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6fa2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6fa4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6fa6:	689b      	ldr	r3, [r3, #8]
   d6fa8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6faa:	68a3      	ldr	r3, [r4, #8]
   d6fac:	3b01      	subs	r3, #1
   d6fae:	60a3      	str	r3, [r4, #8]
   d6fb0:	b92b      	cbnz	r3, d6fbe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d6fb2:	6823      	ldr	r3, [r4, #0]
   d6fb4:	4620      	mov	r0, r4
   d6fb6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6fbc:	4718      	bx	r3
   d6fbe:	bd10      	pop	{r4, pc}

000d6fc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6fc0:	680b      	ldr	r3, [r1, #0]
   d6fc2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6fc4:	b113      	cbz	r3, d6fcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6fc6:	685a      	ldr	r2, [r3, #4]
   d6fc8:	3201      	adds	r2, #1
   d6fca:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6fcc:	4770      	bx	lr

000d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d6fce:	b510      	push	{r4, lr}
   d6fd0:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d6fd2:	6800      	ldr	r0, [r0, #0]
   d6fd4:	b128      	cbz	r0, d6fe2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6fd6:	6843      	ldr	r3, [r0, #4]
   d6fd8:	3b01      	subs	r3, #1
   d6fda:	6043      	str	r3, [r0, #4]
   d6fdc:	b90b      	cbnz	r3, d6fe2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6fde:	f7ff ffdf 	bl	d6fa0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d6fe2:	4620      	mov	r0, r4
   d6fe4:	bd10      	pop	{r4, pc}
	...

000d6fe8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6fe8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6fea:	4c06      	ldr	r4, [pc, #24]	; (d7004 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6fec:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6fee:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6ff0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6ff2:	f7ff fd03 	bl	d69fc <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6ff6:	4620      	mov	r0, r4
   d6ff8:	4a03      	ldr	r2, [pc, #12]	; (d7008 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6ffa:	4904      	ldr	r1, [pc, #16]	; (d700c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7000:	f001 b89c 	b.w	d813c <__aeabi_atexit>
   d7004:	2003e3f0 	.word	0x2003e3f0
   d7008:	2003be8c 	.word	0x2003be8c
   d700c:	000d6f91 	.word	0x000d6f91

000d7010 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7012:	4606      	mov	r6, r0
   d7014:	460d      	mov	r5, r1
   d7016:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7018:	2400      	movs	r4, #0
  while (size--) {
   d701a:	42bd      	cmp	r5, r7
   d701c:	d00c      	beq.n	d7038 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d701e:	6833      	ldr	r3, [r6, #0]
   d7020:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7024:	689b      	ldr	r3, [r3, #8]
   d7026:	4630      	mov	r0, r6
   d7028:	4798      	blx	r3
     if (chunk>=0)
   d702a:	2800      	cmp	r0, #0
   d702c:	db01      	blt.n	d7032 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d702e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7030:	e7f3      	b.n	d701a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7032:	2c00      	cmp	r4, #0
   d7034:	bf08      	it	eq
   d7036:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7038:	4620      	mov	r0, r4
   d703a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d703c <_ZN5Print5printEPKc>:
   d703c:	b508      	push	{r3, lr}
   d703e:	f7fe fe07 	bl	d5c50 <_ZN5Print5writeEPKc>
   d7042:	bd08      	pop	{r3, pc}

000d7044 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7044:	6803      	ldr	r3, [r0, #0]
   d7046:	689b      	ldr	r3, [r3, #8]
   d7048:	4718      	bx	r3

000d704a <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d704a:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d704c:	f7fe fe00 	bl	d5c50 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d7050:	bd08      	pop	{r3, pc}

000d7052 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d7052:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7054:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7056:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7058:	f7ff fff4 	bl	d7044 <_ZN5Print5printEc>
  n += print('\n');
   d705c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d705e:	4604      	mov	r4, r0
  n += print('\n');
   d7060:	4628      	mov	r0, r5
   d7062:	f7ff ffef 	bl	d7044 <_ZN5Print5printEc>
  return n;
}
   d7066:	4420      	add	r0, r4
   d7068:	bd38      	pop	{r3, r4, r5, pc}

000d706a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d706a:	b538      	push	{r3, r4, r5, lr}
   d706c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d706e:	f7fe fdef 	bl	d5c50 <_ZN5Print5writeEPKc>
   d7072:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7074:	4628      	mov	r0, r5
   d7076:	f7ff ffec 	bl	d7052 <_ZN5Print7printlnEv>
  return n;
}
   d707a:	4420      	add	r0, r4
   d707c:	bd38      	pop	{r3, r4, r5, pc}

000d707e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d707e:	f7ff bff4 	b.w	d706a <_ZN5Print7printlnEPKc>

000d7082 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7082:	b530      	push	{r4, r5, lr}
   d7084:	b08b      	sub	sp, #44	; 0x2c
   d7086:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7088:	2100      	movs	r1, #0
   d708a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d708e:	2a01      	cmp	r2, #1
   d7090:	bf98      	it	ls
   d7092:	220a      	movls	r2, #10
   d7094:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7098:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d709c:	fb05 3312 	mls	r3, r5, r2, r3
   d70a0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d70a4:	2b09      	cmp	r3, #9
   d70a6:	bf94      	ite	ls
   d70a8:	3330      	addls	r3, #48	; 0x30
   d70aa:	3337      	addhi	r3, #55	; 0x37
   d70ac:	b2db      	uxtb	r3, r3
   d70ae:	4621      	mov	r1, r4
   d70b0:	f804 3901 	strb.w	r3, [r4], #-1
   d70b4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d70b6:	2d00      	cmp	r5, #0
   d70b8:	d1ee      	bne.n	d7098 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d70ba:	f7fe fdc9 	bl	d5c50 <_ZN5Print5writeEPKc>
}
   d70be:	b00b      	add	sp, #44	; 0x2c
   d70c0:	bd30      	pop	{r4, r5, pc}

000d70c2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d70c2:	b40c      	push	{r2, r3}
   d70c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d70c8:	b087      	sub	sp, #28
   d70ca:	af00      	add	r7, sp, #0
   d70cc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d70d0:	4605      	mov	r5, r0
   d70d2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d70d6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d70d8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d70da:	4623      	mov	r3, r4
   d70dc:	464a      	mov	r2, r9
   d70de:	2114      	movs	r1, #20
   d70e0:	1d38      	adds	r0, r7, #4
   d70e2:	f7ff fe07 	bl	d6cf4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d70e6:	2813      	cmp	r0, #19
   d70e8:	d805      	bhi.n	d70f6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d70ea:	1d39      	adds	r1, r7, #4
   d70ec:	4628      	mov	r0, r5
   d70ee:	f7fe fdaf 	bl	d5c50 <_ZN5Print5writeEPKc>
   d70f2:	4604      	mov	r4, r0
   d70f4:	e013      	b.n	d711e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d70f6:	f100 0308 	add.w	r3, r0, #8
   d70fa:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d70fe:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7100:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7104:	1c41      	adds	r1, r0, #1
   d7106:	4623      	mov	r3, r4
   d7108:	464a      	mov	r2, r9
   d710a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d710c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d710e:	f7ff fdf1 	bl	d6cf4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7112:	4669      	mov	r1, sp
   d7114:	4628      	mov	r0, r5
   d7116:	f7fe fd9b 	bl	d5c50 <_ZN5Print5writeEPKc>
   d711a:	4604      	mov	r4, r0
   d711c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d711e:	b11e      	cbz	r6, d7128 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7120:	4628      	mov	r0, r5
   d7122:	f7ff ff96 	bl	d7052 <_ZN5Print7printlnEv>
   d7126:	4404      	add	r4, r0
    return n;
}
   d7128:	4620      	mov	r0, r4
   d712a:	371c      	adds	r7, #28
   d712c:	46bd      	mov	sp, r7
   d712e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7132:	b002      	add	sp, #8
   d7134:	4770      	bx	lr
	...

000d7138 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7138:	4b01      	ldr	r3, [pc, #4]	; (d7140 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d713a:	4a02      	ldr	r2, [pc, #8]	; (d7144 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d713c:	601a      	str	r2, [r3, #0]
   d713e:	4770      	bx	lr
   d7140:	2003e3f4 	.word	0x2003e3f4
   d7144:	000d94df 	.word	0x000d94df

000d7148 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7148:	4b02      	ldr	r3, [pc, #8]	; (d7154 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d714a:	681a      	ldr	r2, [r3, #0]
   d714c:	4b02      	ldr	r3, [pc, #8]	; (d7158 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d714e:	601a      	str	r2, [r3, #0]
   d7150:	4770      	bx	lr
   d7152:	bf00      	nop
   d7154:	2003be20 	.word	0x2003be20
   d7158:	2003e3f8 	.word	0x2003e3f8

000d715c <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7160:	ed2d 8b02 	vpush	{d8}
   d7164:	eeb0 8a44 	vmov.f32	s16, s8
   d7168:	eef0 8a64 	vmov.f32	s17, s9
   d716c:	ec55 4b11 	vmov	r4, r5, d1
   d7170:	ec57 6b12 	vmov	r6, r7, d2
   d7174:	b083      	sub	sp, #12
    if (fromEnd == fromStart) {
   d7176:	ee11 2a10 	vmov	r2, s2
   d717a:	462b      	mov	r3, r5
   d717c:	ee12 0a10 	vmov	r0, s4
   d7180:	4639      	mov	r1, r7
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d7182:	ed8d 0b00 	vstr	d0, [sp]
   d7186:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   d718a:	f001 fe95 	bl	d8eb8 <__aeabi_dcmpeq>
   d718e:	ed9d 0b00 	vldr	d0, [sp]
   d7192:	bb38      	cbnz	r0, d71e4 <_Z3mapddddd+0x88>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d7194:	ec51 0b10 	vmov	r0, r1, d0
   d7198:	4622      	mov	r2, r4
   d719a:	462b      	mov	r3, r5
   d719c:	f001 fa70 	bl	d8680 <__aeabi_dsub>
   d71a0:	4652      	mov	r2, sl
   d71a2:	4680      	mov	r8, r0
   d71a4:	4689      	mov	r9, r1
   d71a6:	465b      	mov	r3, fp
   d71a8:	ec51 0b18 	vmov	r0, r1, d8
   d71ac:	f001 fa68 	bl	d8680 <__aeabi_dsub>
   d71b0:	4602      	mov	r2, r0
   d71b2:	460b      	mov	r3, r1
   d71b4:	4640      	mov	r0, r8
   d71b6:	4649      	mov	r1, r9
   d71b8:	f001 fc16 	bl	d89e8 <__aeabi_dmul>
   d71bc:	4622      	mov	r2, r4
   d71be:	4680      	mov	r8, r0
   d71c0:	4689      	mov	r9, r1
   d71c2:	462b      	mov	r3, r5
   d71c4:	4630      	mov	r0, r6
   d71c6:	4639      	mov	r1, r7
   d71c8:	f001 fa5a 	bl	d8680 <__aeabi_dsub>
   d71cc:	4602      	mov	r2, r0
   d71ce:	460b      	mov	r3, r1
   d71d0:	4640      	mov	r0, r8
   d71d2:	4649      	mov	r1, r9
   d71d4:	f001 fd32 	bl	d8c3c <__aeabi_ddiv>
   d71d8:	4652      	mov	r2, sl
   d71da:	465b      	mov	r3, fp
   d71dc:	f001 fa52 	bl	d8684 <__adddf3>
   d71e0:	ec41 0b10 	vmov	d0, r0, r1
}
   d71e4:	b003      	add	sp, #12
   d71e6:	ecbd 8b02 	vpop	{d8}
   d71ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d71ee <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d71ee:	2100      	movs	r1, #0
   d71f0:	f7ff bcd4 	b.w	d6b9c <system_delay_ms>

000d71f4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d71f4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d71f6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d71f8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d71fa:	b113      	cbz	r3, d7202 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d71fc:	2203      	movs	r2, #3
   d71fe:	4601      	mov	r1, r0
   d7200:	4798      	blx	r3
    }
   d7202:	4620      	mov	r0, r4
   d7204:	bd10      	pop	{r4, pc}

000d7206 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7206:	b510      	push	{r4, lr}
   d7208:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d720a:	f7ff fff3 	bl	d71f4 <_ZNSt14_Function_baseD1Ev>
   d720e:	4620      	mov	r0, r4
   d7210:	bd10      	pop	{r4, pc}

000d7212 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7212:	b513      	push	{r0, r1, r4, lr}
   d7214:	460b      	mov	r3, r1
   d7216:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7218:	c803      	ldmia	r0, {r0, r1}
   d721a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d721e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7222:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7226:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d722a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d722e:	b002      	add	sp, #8
   d7230:	bd10      	pop	{r4, pc}
	...

000d7234 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7234:	4803      	ldr	r0, [pc, #12]	; (d7244 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7236:	4a04      	ldr	r2, [pc, #16]	; (d7248 <_GLOBAL__sub_I_RGB+0x14>)
   d7238:	4904      	ldr	r1, [pc, #16]	; (d724c <_GLOBAL__sub_I_RGB+0x18>)
   d723a:	2300      	movs	r3, #0
   d723c:	6083      	str	r3, [r0, #8]
   d723e:	f000 bf7d 	b.w	d813c <__aeabi_atexit>
   d7242:	bf00      	nop
   d7244:	2003e3fc 	.word	0x2003e3fc
   d7248:	2003be8c 	.word	0x2003be8c
   d724c:	000d7207 	.word	0x000d7207

000d7250 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7250:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7252:	4b0c      	ldr	r3, [pc, #48]	; (d7284 <serialEventRun+0x34>)
   d7254:	b133      	cbz	r3, d7264 <serialEventRun+0x14>
   d7256:	f000 fc1b 	bl	d7a90 <_Z16_fetch_usbserialv>
   d725a:	6803      	ldr	r3, [r0, #0]
   d725c:	691b      	ldr	r3, [r3, #16]
   d725e:	4798      	blx	r3
   d7260:	2800      	cmp	r0, #0
   d7262:	dc09      	bgt.n	d7278 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7264:	4b08      	ldr	r3, [pc, #32]	; (d7288 <serialEventRun+0x38>)
   d7266:	b163      	cbz	r3, d7282 <serialEventRun+0x32>
   d7268:	f000 fc94 	bl	d7b94 <_Z22__fetch_global_Serial1v>
   d726c:	6803      	ldr	r3, [r0, #0]
   d726e:	691b      	ldr	r3, [r3, #16]
   d7270:	4798      	blx	r3
   d7272:	2800      	cmp	r0, #0
   d7274:	dc03      	bgt.n	d727e <serialEventRun+0x2e>
   d7276:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7278:	f3af 8000 	nop.w
   d727c:	e7f2      	b.n	d7264 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d727e:	f3af 8000 	nop.w
   d7282:	bd08      	pop	{r3, pc}
	...

000d728c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d728c:	b508      	push	{r3, lr}
	serialEventRun();
   d728e:	f7ff ffdf 	bl	d7250 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7292:	f7ff fb8b 	bl	d69ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7296:	4b01      	ldr	r3, [pc, #4]	; (d729c <_post_loop+0x10>)
   d7298:	6018      	str	r0, [r3, #0]
   d729a:	bd08      	pop	{r3, pc}
   d729c:	2003e730 	.word	0x2003e730

000d72a0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d72a0:	4802      	ldr	r0, [pc, #8]	; (d72ac <_Z33system_initialize_user_backup_ramv+0xc>)
   d72a2:	4a03      	ldr	r2, [pc, #12]	; (d72b0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d72a4:	4903      	ldr	r1, [pc, #12]	; (d72b4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d72a6:	1a12      	subs	r2, r2, r0
   d72a8:	f001 bee3 	b.w	d9072 <memcpy>
   d72ac:	2003f400 	.word	0x2003f400
   d72b0:	2003f404 	.word	0x2003f404
   d72b4:	000d97c0 	.word	0x000d97c0

000d72b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d72b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d72ba:	2300      	movs	r3, #0
   d72bc:	9300      	str	r3, [sp, #0]
   d72be:	461a      	mov	r2, r3
   d72c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d72c4:	f7ff fc8c 	bl	d6be0 <system_ctrl_set_result>
}
   d72c8:	b003      	add	sp, #12
   d72ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d72d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d72d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d72d2:	8843      	ldrh	r3, [r0, #2]
   d72d4:	2b0a      	cmp	r3, #10
   d72d6:	d008      	beq.n	d72ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d72d8:	2b50      	cmp	r3, #80	; 0x50
   d72da:	d109      	bne.n	d72f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d72dc:	4b09      	ldr	r3, [pc, #36]	; (d7304 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d72de:	681b      	ldr	r3, [r3, #0]
   d72e0:	b13b      	cbz	r3, d72f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d72e2:	b003      	add	sp, #12
   d72e4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d72e8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d72ea:	f7ff ffe5 	bl	d72b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d72ee:	e006      	b.n	d72fe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d72f0:	2300      	movs	r3, #0
   d72f2:	9300      	str	r3, [sp, #0]
   d72f4:	461a      	mov	r2, r3
   d72f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d72fa:	f7ff fc71 	bl	d6be0 <system_ctrl_set_result>
        break;
    }
}
   d72fe:	b003      	add	sp, #12
   d7300:	f85d fb04 	ldr.w	pc, [sp], #4
   d7304:	2003e40c 	.word	0x2003e40c

000d7308 <module_user_init_hook>:

void module_user_init_hook()
{
   d7308:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d730a:	4c10      	ldr	r4, [pc, #64]	; (d734c <module_user_init_hook+0x44>)
   d730c:	4d10      	ldr	r5, [pc, #64]	; (d7350 <module_user_init_hook+0x48>)
   d730e:	6823      	ldr	r3, [r4, #0]
   d7310:	42ab      	cmp	r3, r5
   d7312:	4b10      	ldr	r3, [pc, #64]	; (d7354 <module_user_init_hook+0x4c>)
   d7314:	bf0c      	ite	eq
   d7316:	2201      	moveq	r2, #1
   d7318:	2200      	movne	r2, #0
   d731a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d731c:	d002      	beq.n	d7324 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d731e:	f7ff ffbf 	bl	d72a0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7322:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7324:	f7ff fb2a 	bl	d697c <HAL_RNG_GetRandomNumber>
   d7328:	4604      	mov	r4, r0
    srand(seed);
   d732a:	f001 feb5 	bl	d9098 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d732e:	4b0a      	ldr	r3, [pc, #40]	; (d7358 <module_user_init_hook+0x50>)
   d7330:	b113      	cbz	r3, d7338 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7332:	4620      	mov	r0, r4
   d7334:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7338:	2100      	movs	r1, #0
   d733a:	4807      	ldr	r0, [pc, #28]	; (d7358 <module_user_init_hook+0x50>)
   d733c:	f7ff fcc2 	bl	d6cc4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7340:	2100      	movs	r1, #0
   d7342:	4806      	ldr	r0, [pc, #24]	; (d735c <module_user_init_hook+0x54>)
}
   d7344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7348:	f7ff bc40 	b.w	d6bcc <system_ctrl_set_app_request_handler>
   d734c:	2003f400 	.word	0x2003f400
   d7350:	9a271c1e 	.word	0x9a271c1e
   d7354:	2003e410 	.word	0x2003e410
   d7358:	00000000 	.word	0x00000000
   d735c:	000d72d1 	.word	0x000d72d1

000d7360 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7360:	4770      	bx	lr

000d7362 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7362:	2000      	movs	r0, #0
   d7364:	4770      	bx	lr

000d7366 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7366:	b510      	push	{r4, lr}
   d7368:	2110      	movs	r1, #16
   d736a:	4604      	mov	r4, r0
   d736c:	f000 fef4 	bl	d8158 <_ZdlPvj>
   d7370:	4620      	mov	r0, r4
   d7372:	bd10      	pop	{r4, pc}

000d7374 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7374:	b508      	push	{r3, lr}
      { delete this; }
   d7376:	b108      	cbz	r0, d737c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7378:	f7ff fff5 	bl	d7366 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d737c:	bd08      	pop	{r3, pc}

000d737e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d737e:	2200      	movs	r2, #0
   d7380:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7382:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7384:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d7388:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d738a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d738e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7390:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7392:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7394:	680c      	ldr	r4, [r1, #0]
   d7396:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7398:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d739a:	bd10      	pop	{r4, pc}

000d739c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d739c:	b510      	push	{r4, lr}
   d739e:	4604      	mov	r4, r0
    free((void*)msg_);
   d73a0:	6800      	ldr	r0, [r0, #0]
   d73a2:	f7ff fc9f 	bl	d6ce4 <free>
}
   d73a6:	4620      	mov	r0, r4
   d73a8:	bd10      	pop	{r4, pc}

000d73aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d73aa:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d73ac:	68c4      	ldr	r4, [r0, #12]
   d73ae:	b1f4      	cbz	r4, d73ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d73b0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d73b2:	2b02      	cmp	r3, #2
   d73b4:	d103      	bne.n	d73be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d73b6:	f104 000c 	add.w	r0, r4, #12
   d73ba:	f7ff ffef 	bl	d739c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d73be:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d73c0:	b135      	cbz	r5, d73d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d73c2:	4628      	mov	r0, r5
   d73c4:	f7ff ff16 	bl	d71f4 <_ZNSt14_Function_baseD1Ev>
   d73c8:	2110      	movs	r1, #16
   d73ca:	4628      	mov	r0, r5
   d73cc:	f000 fec4 	bl	d8158 <_ZdlPvj>
   d73d0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d73d2:	b135      	cbz	r5, d73e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d73d4:	4628      	mov	r0, r5
   d73d6:	f7ff ff0d 	bl	d71f4 <_ZNSt14_Function_baseD1Ev>
   d73da:	2110      	movs	r1, #16
   d73dc:	4628      	mov	r0, r5
   d73de:	f000 febb 	bl	d8158 <_ZdlPvj>
   d73e2:	4620      	mov	r0, r4
   d73e4:	2114      	movs	r1, #20
   d73e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d73ea:	f000 beb5 	b.w	d8158 <_ZdlPvj>
   d73ee:	bd38      	pop	{r3, r4, r5, pc}

000d73f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d73f0:	b513      	push	{r0, r1, r4, lr}
   d73f2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d73f4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d73f8:	2300      	movs	r3, #0
   d73fa:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d73fc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d73fe:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7400:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7402:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7404:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7406:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7408:	f7ff fde1 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d740c:	4620      	mov	r0, r4
   d740e:	b002      	add	sp, #8
   d7410:	bd10      	pop	{r4, pc}

000d7412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7414:	460c      	mov	r4, r1
   d7416:	ad02      	add	r5, sp, #8
   d7418:	f854 3b04 	ldr.w	r3, [r4], #4
   d741c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7420:	4606      	mov	r6, r0
   d7422:	460f      	mov	r7, r1
   d7424:	a801      	add	r0, sp, #4
   d7426:	4621      	mov	r1, r4
   d7428:	f7ff fdca 	bl	d6fc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d742c:	4629      	mov	r1, r5
   d742e:	4630      	mov	r0, r6
   d7430:	f7ff ffde 	bl	d73f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7434:	a801      	add	r0, sp, #4
   d7436:	f7ff fdca 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d743a:	4620      	mov	r0, r4
   d743c:	f7ff fdc7 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7440:	4638      	mov	r0, r7
   d7442:	2108      	movs	r1, #8
   d7444:	f000 fe88 	bl	d8158 <_ZdlPvj>
        return p;
    }
   d7448:	4630      	mov	r0, r6
   d744a:	b003      	add	sp, #12
   d744c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7450:	b538      	push	{r3, r4, r5, lr}
   d7452:	2300      	movs	r3, #0
   d7454:	4604      	mov	r4, r0
   d7456:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7458:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d745a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d745c:	f7fc fe1d 	bl	d409a <_Znwj>
   d7460:	b128      	cbz	r0, d746e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7462:	2301      	movs	r3, #1
   d7464:	6043      	str	r3, [r0, #4]
   d7466:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7468:	4b02      	ldr	r3, [pc, #8]	; (d7474 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d746a:	6003      	str	r3, [r0, #0]
   d746c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d746e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7470:	4620      	mov	r0, r4
   d7472:	bd38      	pop	{r3, r4, r5, pc}
   d7474:	000d957c 	.word	0x000d957c

000d7478 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7478:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d747a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d747c:	b90a      	cbnz	r2, d7482 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d747e:	f000 fe7e 	bl	d817e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7482:	68c3      	ldr	r3, [r0, #12]
    }
   d7484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7488:	4718      	bx	r3

000d748a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d748a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d748c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d748e:	f100 0110 	add.w	r1, r0, #16
   d7492:	f7ff fff1 	bl	d7478 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7496:	bd08      	pop	{r3, pc}

000d7498 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7498:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d749a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d749c:	b90a      	cbnz	r2, d74a2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d749e:	f000 fe6e 	bl	d817e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d74a2:	68c3      	ldr	r3, [r0, #12]
    }
   d74a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d74a8:	4718      	bx	r3

000d74aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d74aa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d74ac:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d74ae:	f100 0110 	add.w	r1, r0, #16
   d74b2:	f7ff fff1 	bl	d7498 <_ZNKSt8functionIFvRKbEEclES1_>
   d74b6:	bd08      	pop	{r3, pc}

000d74b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d74b8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d74ba:	2300      	movs	r3, #0
   d74bc:	6083      	str	r3, [r0, #8]
   d74be:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d74c0:	4604      	mov	r4, r0
   d74c2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d74c4:	b12b      	cbz	r3, d74d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d74c6:	2202      	movs	r2, #2
   d74c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d74ca:	68eb      	ldr	r3, [r5, #12]
   d74cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d74ce:	68ab      	ldr	r3, [r5, #8]
   d74d0:	60a3      	str	r3, [r4, #8]
	}
    }
   d74d2:	4620      	mov	r0, r4
   d74d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d74d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d74d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d74da:	b089      	sub	sp, #36	; 0x24
   d74dc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d74de:	4668      	mov	r0, sp
   d74e0:	f7ff ff4d 	bl	d737e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d74e4:	2300      	movs	r3, #0
   d74e6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d74ea:	f04f 0202 	mov.w	r2, #2
   d74ee:	e8d4 3f4f 	ldrexb	r3, [r4]
   d74f2:	2b00      	cmp	r3, #0
   d74f4:	d103      	bne.n	d74fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d74f6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d74fa:	2900      	cmp	r1, #0
   d74fc:	d1f7      	bne.n	d74ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d74fe:	d002      	beq.n	d7506 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7500:	f88d 3008 	strb.w	r3, [sp, #8]
   d7504:	e063      	b.n	d75ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7506:	f114 050c 	adds.w	r5, r4, #12
   d750a:	d003      	beq.n	d7514 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d750c:	4669      	mov	r1, sp
   d750e:	4628      	mov	r0, r5
   d7510:	f7ff ff35 	bl	d737e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7514:	f3bf 8f5f 	dmb	sy
   d7518:	2301      	movs	r3, #1
   d751a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d751c:	2000      	movs	r0, #0
   d751e:	f104 0308 	add.w	r3, r4, #8
   d7522:	f3bf 8f5f 	dmb	sy
   d7526:	e853 6f00 	ldrex	r6, [r3]
   d752a:	e843 0200 	strex	r2, r0, [r3]
   d752e:	2a00      	cmp	r2, #0
   d7530:	d1f9      	bne.n	d7526 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7532:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7536:	2e00      	cmp	r6, #0
   d7538:	d049      	beq.n	d75ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d753a:	f7ff fb37 	bl	d6bac <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d753e:	b120      	cbz	r0, d754a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7540:	4629      	mov	r1, r5
   d7542:	4630      	mov	r0, r6
   d7544:	f7ff ff98 	bl	d7478 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7548:	e03a      	b.n	d75c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d754a:	4631      	mov	r1, r6
   d754c:	a802      	add	r0, sp, #8
   d754e:	f7ff ffb3 	bl	d74b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7552:	68e0      	ldr	r0, [r4, #12]
   d7554:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7558:	b108      	cbz	r0, d755e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d755a:	f001 fdc5 	bl	d90e8 <strdup>
   d755e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7560:	2010      	movs	r0, #16
   d7562:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7566:	f7fc fd98 	bl	d409a <_Znwj>
   d756a:	4605      	mov	r5, r0
   d756c:	b1e8      	cbz	r0, d75aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d756e:	2700      	movs	r7, #0
   d7570:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7572:	2018      	movs	r0, #24
   d7574:	f7fc fd91 	bl	d409a <_Znwj>
   d7578:	4604      	mov	r4, r0
   d757a:	b188      	cbz	r0, d75a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d757c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d757e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7580:	a802      	add	r0, sp, #8
   d7582:	f7ff fe46 	bl	d7212 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7586:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7588:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d758a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d758c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d758e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7590:	a906      	add	r1, sp, #24
   d7592:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7594:	60e3      	str	r3, [r4, #12]
   d7596:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d759a:	9205      	str	r2, [sp, #20]
   d759c:	f7ff feef 	bl	d737e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d75a0:	4b0d      	ldr	r3, [pc, #52]	; (d75d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d75a2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d75a4:	4b0d      	ldr	r3, [pc, #52]	; (d75dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d75a6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d75a8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d75aa:	a806      	add	r0, sp, #24
   d75ac:	f7ff fef6 	bl	d739c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d75b0:	a802      	add	r0, sp, #8
   d75b2:	f7ff fe1f 	bl	d71f4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d75b6:	2200      	movs	r2, #0
   d75b8:	4629      	mov	r1, r5
   d75ba:	4809      	ldr	r0, [pc, #36]	; (d75e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d75bc:	f7ff fafe 	bl	d6bbc <application_thread_invoke>
   d75c0:	4630      	mov	r0, r6
   d75c2:	f7ff fe17 	bl	d71f4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d75c6:	2110      	movs	r1, #16
   d75c8:	4630      	mov	r0, r6
   d75ca:	f000 fdc5 	bl	d8158 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d75ce:	4668      	mov	r0, sp
   d75d0:	f7ff fee4 	bl	d739c <_ZN8particle5ErrorD1Ev>
    }
   d75d4:	b009      	add	sp, #36	; 0x24
   d75d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d75d8:	000d748b 	.word	0x000d748b
   d75dc:	000d7701 	.word	0x000d7701
   d75e0:	000d7be1 	.word	0x000d7be1

000d75e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d75e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d75e8:	b08b      	sub	sp, #44	; 0x2c
   d75ea:	4606      	mov	r6, r0
   d75ec:	460f      	mov	r7, r1
   d75ee:	4690      	mov	r8, r2
   d75f0:	4699      	mov	r9, r3
   d75f2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d75f6:	f7ff fb55 	bl	d6ca4 <spark_cloud_flag_connected>
   d75fa:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d75fc:	4683      	mov	fp, r0
   d75fe:	bb30      	cbnz	r0, d764e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7600:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7604:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7606:	a905      	add	r1, sp, #20
   d7608:	4628      	mov	r0, r5
   d760a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d760e:	f7ff feb6 	bl	d737e <_ZN8particle5ErrorC1EOS0_>
   d7612:	2014      	movs	r0, #20
   d7614:	f7fc fd41 	bl	d409a <_Znwj>
   d7618:	4604      	mov	r4, r0
   d761a:	b158      	cbz	r0, d7634 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d761c:	2302      	movs	r3, #2
   d761e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7620:	2301      	movs	r3, #1
   d7622:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7624:	f8c0 b004 	str.w	fp, [r0, #4]
   d7628:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d762c:	4629      	mov	r1, r5
   d762e:	300c      	adds	r0, #12
   d7630:	f7ff fea5 	bl	d737e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7634:	4630      	mov	r0, r6
   d7636:	4621      	mov	r1, r4
   d7638:	f840 4b04 	str.w	r4, [r0], #4
   d763c:	f7ff ff08 	bl	d7450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7640:	4628      	mov	r0, r5
   d7642:	f7ff feab 	bl	d739c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7646:	a805      	add	r0, sp, #20
   d7648:	f7ff fea8 	bl	d739c <_ZN8particle5ErrorD1Ev>
   d764c:	e052      	b.n	d76f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d764e:	2400      	movs	r4, #0
   d7650:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7652:	2014      	movs	r0, #20
   d7654:	606c      	str	r4, [r5, #4]
   d7656:	60ac      	str	r4, [r5, #8]
   d7658:	9307      	str	r3, [sp, #28]
   d765a:	f7fc fd1e 	bl	d409a <_Znwj>
   d765e:	4601      	mov	r1, r0
   d7660:	b118      	cbz	r0, d766a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d7662:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7664:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7666:	6044      	str	r4, [r0, #4]
   d7668:	6084      	str	r4, [r0, #8]
   d766a:	a804      	add	r0, sp, #16
   d766c:	9103      	str	r1, [sp, #12]
   d766e:	f7ff feef 	bl	d7450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7672:	4b22      	ldr	r3, [pc, #136]	; (d76fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d7674:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7676:	2008      	movs	r0, #8
   d7678:	f7fc fd0f 	bl	d409a <_Znwj>
   d767c:	4604      	mov	r4, r0
   d767e:	b128      	cbz	r0, d768c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7680:	9b03      	ldr	r3, [sp, #12]
   d7682:	f840 3b04 	str.w	r3, [r0], #4
   d7686:	a904      	add	r1, sp, #16
   d7688:	f7ff fc9a 	bl	d6fc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d768c:	9500      	str	r5, [sp, #0]
   d768e:	fa5f f38a 	uxtb.w	r3, sl
   d7692:	464a      	mov	r2, r9
   d7694:	4641      	mov	r1, r8
   d7696:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7698:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d769a:	f7ff fb0b 	bl	d6cb4 <spark_send_event>
   d769e:	b920      	cbnz	r0, d76aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d76a0:	9b03      	ldr	r3, [sp, #12]
   d76a2:	785b      	ldrb	r3, [r3, #1]
   d76a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d76a8:	b183      	cbz	r3, d76cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d76aa:	9b03      	ldr	r3, [sp, #12]
   d76ac:	9305      	str	r3, [sp, #20]
   d76ae:	a904      	add	r1, sp, #16
   d76b0:	a806      	add	r0, sp, #24
   d76b2:	f7ff fc85 	bl	d6fc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d76b6:	a905      	add	r1, sp, #20
   d76b8:	4630      	mov	r0, r6
   d76ba:	f7ff fe99 	bl	d73f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d76be:	a806      	add	r0, sp, #24
   d76c0:	f7ff fc85 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d76c4:	a804      	add	r0, sp, #16
   d76c6:	f7ff fc82 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d76ca:	e013      	b.n	d76f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d76cc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d76d0:	a905      	add	r1, sp, #20
   d76d2:	a803      	add	r0, sp, #12
   d76d4:	9205      	str	r2, [sp, #20]
   d76d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d76da:	f7ff fefd 	bl	d74d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d76de:	a805      	add	r0, sp, #20
   d76e0:	f7ff fe5c 	bl	d739c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d76e4:	a805      	add	r0, sp, #20
   d76e6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d76e8:	f7ff fe93 	bl	d7412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d76ec:	a806      	add	r0, sp, #24
   d76ee:	f7ff fc6e 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d76f2:	e7da      	b.n	d76aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d76f4:	4630      	mov	r0, r6
   d76f6:	b00b      	add	sp, #44	; 0x2c
   d76f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d76fc:	000d7871 	.word	0x000d7871

000d7700 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7700:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7704:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7706:	d006      	beq.n	d7716 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7708:	2a03      	cmp	r2, #3
   d770a:	d017      	beq.n	d773c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d770c:	2a01      	cmp	r2, #1
   d770e:	d122      	bne.n	d7756 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7710:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7712:	6003      	str	r3, [r0, #0]
	      break;
   d7714:	e01f      	b.n	d7756 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7716:	2018      	movs	r0, #24
   d7718:	680e      	ldr	r6, [r1, #0]
   d771a:	f7fc fcbe 	bl	d409a <_Znwj>
   d771e:	4605      	mov	r5, r0
   d7720:	b150      	cbz	r0, d7738 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7722:	4631      	mov	r1, r6
   d7724:	f7ff fec8 	bl	d74b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7728:	6930      	ldr	r0, [r6, #16]
   d772a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d772e:	b108      	cbz	r0, d7734 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7730:	f001 fcda 	bl	d90e8 <strdup>
   d7734:	6128      	str	r0, [r5, #16]
   d7736:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7738:	6025      	str	r5, [r4, #0]
   d773a:	e00c      	b.n	d7756 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d773c:	6804      	ldr	r4, [r0, #0]
   d773e:	b154      	cbz	r4, d7756 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7740:	f104 0010 	add.w	r0, r4, #16
   d7744:	f7ff fe2a 	bl	d739c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7748:	4620      	mov	r0, r4
   d774a:	f7ff fd53 	bl	d71f4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d774e:	2118      	movs	r1, #24
   d7750:	4620      	mov	r0, r4
   d7752:	f000 fd01 	bl	d8158 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7756:	2000      	movs	r0, #0
   d7758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d775a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d775a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d775c:	2300      	movs	r3, #0
   d775e:	6083      	str	r3, [r0, #8]
   d7760:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7762:	4604      	mov	r4, r0
   d7764:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7766:	b12b      	cbz	r3, d7774 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7768:	2202      	movs	r2, #2
   d776a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d776c:	68eb      	ldr	r3, [r5, #12]
   d776e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7770:	68ab      	ldr	r3, [r5, #8]
   d7772:	60a3      	str	r3, [r4, #8]
	}
    }
   d7774:	4620      	mov	r0, r4
   d7776:	bd38      	pop	{r3, r4, r5, pc}

000d7778 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7778:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d777a:	b570      	push	{r4, r5, r6, lr}
   d777c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d777e:	d006      	beq.n	d778e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7780:	2a03      	cmp	r2, #3
   d7782:	d011      	beq.n	d77a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7784:	2a01      	cmp	r2, #1
   d7786:	d118      	bne.n	d77ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7788:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d778a:	6003      	str	r3, [r0, #0]
	      break;
   d778c:	e015      	b.n	d77ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d778e:	2014      	movs	r0, #20
   d7790:	680e      	ldr	r6, [r1, #0]
   d7792:	f7fc fc82 	bl	d409a <_Znwj>
   d7796:	4605      	mov	r5, r0
   d7798:	b120      	cbz	r0, d77a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d779a:	4631      	mov	r1, r6
   d779c:	f7ff ffdd 	bl	d775a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d77a0:	7c33      	ldrb	r3, [r6, #16]
   d77a2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d77a4:	6025      	str	r5, [r4, #0]
   d77a6:	e008      	b.n	d77ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d77a8:	6804      	ldr	r4, [r0, #0]
   d77aa:	b134      	cbz	r4, d77ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d77ac:	4620      	mov	r0, r4
   d77ae:	f7ff fd21 	bl	d71f4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d77b2:	2114      	movs	r1, #20
   d77b4:	4620      	mov	r0, r4
   d77b6:	f000 fccf 	bl	d8158 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d77ba:	2000      	movs	r0, #0
   d77bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d77c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d77c0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d77c2:	2300      	movs	r3, #0
   d77c4:	b087      	sub	sp, #28
   d77c6:	460c      	mov	r4, r1
   d77c8:	f3bf 8f5f 	dmb	sy
   d77cc:	e850 6f00 	ldrex	r6, [r0]
   d77d0:	e840 3200 	strex	r2, r3, [r0]
   d77d4:	2a00      	cmp	r2, #0
   d77d6:	d1f9      	bne.n	d77cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d77d8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d77dc:	2e00      	cmp	r6, #0
   d77de:	d03f      	beq.n	d7860 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d77e0:	4618      	mov	r0, r3
   d77e2:	f7ff f9e3 	bl	d6bac <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d77e6:	4607      	mov	r7, r0
   d77e8:	b120      	cbz	r0, d77f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d77ea:	4621      	mov	r1, r4
   d77ec:	4630      	mov	r0, r6
   d77ee:	f7ff fe53 	bl	d7498 <_ZNKSt8functionIFvRKbEEclES1_>
   d77f2:	e02e      	b.n	d7852 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d77f4:	4631      	mov	r1, r6
   d77f6:	a801      	add	r0, sp, #4
   d77f8:	f7ff ffaf 	bl	d775a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d77fc:	7823      	ldrb	r3, [r4, #0]
   d77fe:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7802:	2010      	movs	r0, #16
   d7804:	f7fc fc49 	bl	d409a <_Znwj>
   d7808:	4605      	mov	r5, r0
   d780a:	b1d0      	cbz	r0, d7842 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d780c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d780e:	2014      	movs	r0, #20
   d7810:	f7fc fc43 	bl	d409a <_Znwj>
   d7814:	4604      	mov	r4, r0
   d7816:	b178      	cbz	r0, d7838 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7818:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d781a:	4601      	mov	r1, r0
   d781c:	a801      	add	r0, sp, #4
   d781e:	f7ff fcf8 	bl	d7212 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7822:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7824:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7826:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7828:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d782a:	9203      	str	r2, [sp, #12]
   d782c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d782e:	60e3      	str	r3, [r4, #12]
   d7830:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7834:	9204      	str	r2, [sp, #16]
   d7836:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7838:	4b0a      	ldr	r3, [pc, #40]	; (d7864 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d783a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d783c:	4b0a      	ldr	r3, [pc, #40]	; (d7868 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d783e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7840:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7842:	a801      	add	r0, sp, #4
   d7844:	f7ff fcd6 	bl	d71f4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7848:	2200      	movs	r2, #0
   d784a:	4629      	mov	r1, r5
   d784c:	4807      	ldr	r0, [pc, #28]	; (d786c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d784e:	f7ff f9b5 	bl	d6bbc <application_thread_invoke>
   d7852:	4630      	mov	r0, r6
   d7854:	f7ff fcce 	bl	d71f4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7858:	2110      	movs	r1, #16
   d785a:	4630      	mov	r0, r6
   d785c:	f000 fc7c 	bl	d8158 <_ZdlPvj>
        }
    }
   d7860:	b007      	add	sp, #28
   d7862:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7864:	000d74ab 	.word	0x000d74ab
   d7868:	000d7779 	.word	0x000d7779
   d786c:	000d7be1 	.word	0x000d7be1

000d7870 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7870:	b530      	push	{r4, r5, lr}
   d7872:	b085      	sub	sp, #20
   d7874:	4604      	mov	r4, r0
   d7876:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7878:	4668      	mov	r0, sp
   d787a:	4611      	mov	r1, r2
   d787c:	f7ff fdc9 	bl	d7412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7880:	b17c      	cbz	r4, d78a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7882:	b224      	sxth	r4, r4
   d7884:	4628      	mov	r0, r5
   d7886:	b10d      	cbz	r5, d788c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7888:	f001 fc2e 	bl	d90e8 <strdup>
   d788c:	9002      	str	r0, [sp, #8]
   d788e:	a902      	add	r1, sp, #8
   d7890:	4668      	mov	r0, sp
   d7892:	f8ad 400c 	strh.w	r4, [sp, #12]
   d7896:	f7ff fe1f 	bl	d74d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d789a:	a802      	add	r0, sp, #8
   d789c:	f7ff fd7e 	bl	d739c <_ZN8particle5ErrorD1Ev>
   d78a0:	e01d      	b.n	d78de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d78a2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d78a4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d78a8:	f04f 0201 	mov.w	r2, #1
   d78ac:	e8d0 3f4f 	ldrexb	r3, [r0]
   d78b0:	42a3      	cmp	r3, r4
   d78b2:	d103      	bne.n	d78bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d78b4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d78b8:	2900      	cmp	r1, #0
   d78ba:	d1f7      	bne.n	d78ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d78bc:	d002      	beq.n	d78c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d78be:	f88d 3008 	strb.w	r3, [sp, #8]
   d78c2:	e00c      	b.n	d78de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d78c4:	f110 010c 	adds.w	r1, r0, #12
   d78c8:	f04f 0301 	mov.w	r3, #1
   d78cc:	bf18      	it	ne
   d78ce:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d78d0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d78d4:	3004      	adds	r0, #4
   d78d6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d78da:	f7ff ff71 	bl	d77c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d78de:	a801      	add	r0, sp, #4
   d78e0:	f7ff fb75 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d78e4:	b005      	add	sp, #20
   d78e6:	bd30      	pop	{r4, r5, pc}

000d78e8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d78e8:	4770      	bx	lr

000d78ea <_ZN9IPAddressD0Ev>:
   d78ea:	b510      	push	{r4, lr}
   d78ec:	2118      	movs	r1, #24
   d78ee:	4604      	mov	r4, r0
   d78f0:	f000 fc32 	bl	d8158 <_ZdlPvj>
   d78f4:	4620      	mov	r0, r4
   d78f6:	bd10      	pop	{r4, pc}

000d78f8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d78f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d78fa:	7d03      	ldrb	r3, [r0, #20]
   d78fc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d78fe:	b08d      	sub	sp, #52	; 0x34
   d7900:	460e      	mov	r6, r1
   d7902:	f100 0704 	add.w	r7, r0, #4
   d7906:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d790a:	d002      	beq.n	d7912 <_ZNK9IPAddress7printToER5Print+0x1a>
   d790c:	f100 0508 	add.w	r5, r0, #8
   d7910:	e018      	b.n	d7944 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7912:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7914:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7916:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d791a:	232f      	movs	r3, #47	; 0x2f
   d791c:	462a      	mov	r2, r5
   d791e:	200a      	movs	r0, #10
   d7920:	f7ff f87c 	bl	d6a1c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7924:	4628      	mov	r0, r5
   d7926:	f001 fbfa 	bl	d911e <strlen>
   d792a:	6833      	ldr	r3, [r6, #0]
   d792c:	4602      	mov	r2, r0
   d792e:	68db      	ldr	r3, [r3, #12]
   d7930:	4629      	mov	r1, r5
   d7932:	4630      	mov	r0, r6
   d7934:	4798      	blx	r3
   d7936:	e00f      	b.n	d7958 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7938:	b124      	cbz	r4, d7944 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d793a:	212e      	movs	r1, #46	; 0x2e
   d793c:	4630      	mov	r0, r6
   d793e:	f7ff fb81 	bl	d7044 <_ZN5Print5printEc>
   d7942:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7944:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7948:	220a      	movs	r2, #10
   d794a:	4630      	mov	r0, r6
   d794c:	f7ff fb99 	bl	d7082 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7950:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7952:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7954:	d1f0      	bne.n	d7938 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7956:	4620      	mov	r0, r4
    }
    return n;
}
   d7958:	b00d      	add	sp, #52	; 0x34
   d795a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d795c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d795c:	b510      	push	{r4, lr}
   d795e:	4b05      	ldr	r3, [pc, #20]	; (d7974 <_ZN9IPAddressC1Ev+0x18>)
   d7960:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7962:	2211      	movs	r2, #17
   d7964:	f840 3b04 	str.w	r3, [r0], #4
   d7968:	2100      	movs	r1, #0
   d796a:	f001 fb8d 	bl	d9088 <memset>
{
    clear();
}
   d796e:	4620      	mov	r0, r4
   d7970:	bd10      	pop	{r4, pc}
   d7972:	bf00      	nop
   d7974:	000d9598 	.word	0x000d9598

000d7978 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7978:	4603      	mov	r3, r0
   d797a:	4a07      	ldr	r2, [pc, #28]	; (d7998 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d797c:	b510      	push	{r4, lr}
   d797e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7982:	f101 0210 	add.w	r2, r1, #16
   d7986:	f851 4b04 	ldr.w	r4, [r1], #4
   d798a:	f843 4b04 	str.w	r4, [r3], #4
   d798e:	4291      	cmp	r1, r2
   d7990:	d1f9      	bne.n	d7986 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7992:	780a      	ldrb	r2, [r1, #0]
   d7994:	701a      	strb	r2, [r3, #0]
}
   d7996:	bd10      	pop	{r4, pc}
   d7998:	000d9598 	.word	0x000d9598

000d799c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d799c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d799e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d79a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d79a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d79aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d79ae:	2304      	movs	r3, #4
   d79b0:	6041      	str	r1, [r0, #4]
   d79b2:	7503      	strb	r3, [r0, #20]
   d79b4:	bd10      	pop	{r4, pc}

000d79b6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d79b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d79b8:	780d      	ldrb	r5, [r1, #0]
   d79ba:	788b      	ldrb	r3, [r1, #2]
   d79bc:	784a      	ldrb	r2, [r1, #1]
   d79be:	78c9      	ldrb	r1, [r1, #3]
   d79c0:	9100      	str	r1, [sp, #0]
   d79c2:	4629      	mov	r1, r5
   d79c4:	f7ff ffea 	bl	d799c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d79c8:	b003      	add	sp, #12
   d79ca:	bd30      	pop	{r4, r5, pc}

000d79cc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d79cc:	7441      	strb	r1, [r0, #17]
   d79ce:	4770      	bx	lr

000d79d0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d79d0:	4770      	bx	lr

000d79d2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d79d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d79d4:	2100      	movs	r1, #0
   d79d6:	7c00      	ldrb	r0, [r0, #16]
   d79d8:	f7ff f8c0 	bl	d6b5c <HAL_USB_USART_Receive_Data>
}
   d79dc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d79e0:	bf28      	it	cs
   d79e2:	f04f 30ff 	movcs.w	r0, #4294967295
   d79e6:	bd08      	pop	{r3, pc}

000d79e8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d79e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d79ea:	2101      	movs	r1, #1
   d79ec:	7c00      	ldrb	r0, [r0, #16]
   d79ee:	f7ff f8b5 	bl	d6b5c <HAL_USB_USART_Receive_Data>
}
   d79f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d79f6:	bf28      	it	cs
   d79f8:	f04f 30ff 	movcs.w	r0, #4294967295
   d79fc:	bd08      	pop	{r3, pc}

000d79fe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d79fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7a00:	7c00      	ldrb	r0, [r0, #16]
   d7a02:	f7ff f8a3 	bl	d6b4c <HAL_USB_USART_Available_Data_For_Write>
}
   d7a06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a0a:	bd08      	pop	{r3, pc}

000d7a0c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7a0c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7a0e:	7c00      	ldrb	r0, [r0, #16]
   d7a10:	f7ff f894 	bl	d6b3c <HAL_USB_USART_Available_Data>
}
   d7a14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a18:	bd08      	pop	{r3, pc}

000d7a1a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7a1a:	7c00      	ldrb	r0, [r0, #16]
   d7a1c:	f7ff b8ae 	b.w	d6b7c <HAL_USB_USART_Flush_Data>

000d7a20 <_ZN9USBSerialD0Ev>:
   d7a20:	b510      	push	{r4, lr}
   d7a22:	2114      	movs	r1, #20
   d7a24:	4604      	mov	r4, r0
   d7a26:	f000 fb97 	bl	d8158 <_ZdlPvj>
   d7a2a:	4620      	mov	r0, r4
   d7a2c:	bd10      	pop	{r4, pc}

000d7a2e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7a2e:	b538      	push	{r3, r4, r5, lr}
   d7a30:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7a32:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7a34:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7a36:	f7ff f889 	bl	d6b4c <HAL_USB_USART_Available_Data_For_Write>
   d7a3a:	2800      	cmp	r0, #0
   d7a3c:	dc01      	bgt.n	d7a42 <_ZN9USBSerial5writeEh+0x14>
   d7a3e:	7c60      	ldrb	r0, [r4, #17]
   d7a40:	b128      	cbz	r0, d7a4e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7a42:	4629      	mov	r1, r5
   d7a44:	7c20      	ldrb	r0, [r4, #16]
   d7a46:	f7ff f891 	bl	d6b6c <HAL_USB_USART_Send_Data>
   d7a4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7a4e:	bd38      	pop	{r3, r4, r5, pc}

000d7a50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a50:	b510      	push	{r4, lr}
   d7a52:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7a54:	2300      	movs	r3, #0
   d7a56:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a5c:	60a3      	str	r3, [r4, #8]
   d7a5e:	4b05      	ldr	r3, [pc, #20]	; (d7a74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7a60:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7a62:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a64:	4608      	mov	r0, r1
{
  _serial = serial;
   d7a66:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7a68:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7a6a:	4611      	mov	r1, r2
   d7a6c:	f7ff f856 	bl	d6b1c <HAL_USB_USART_Init>
}
   d7a70:	4620      	mov	r0, r4
   d7a72:	bd10      	pop	{r4, pc}
   d7a74:	000d95ac 	.word	0x000d95ac

000d7a78 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7a78:	2200      	movs	r2, #0
   d7a7a:	7c00      	ldrb	r0, [r0, #16]
   d7a7c:	f7ff b856 	b.w	d6b2c <HAL_USB_USART_Begin>

000d7a80 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7a82:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a84:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7a86:	2100      	movs	r1, #0
   d7a88:	f001 fafe 	bl	d9088 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7a8c:	4620      	mov	r0, r4
   d7a8e:	bd10      	pop	{r4, pc}

000d7a90 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7a90:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a92:	4d0e      	ldr	r5, [pc, #56]	; (d7acc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7a94:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7a96:	a801      	add	r0, sp, #4
   d7a98:	f7ff fff2 	bl	d7a80 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a9c:	6829      	ldr	r1, [r5, #0]
   d7a9e:	f011 0401 	ands.w	r4, r1, #1
   d7aa2:	d110      	bne.n	d7ac6 <_Z16_fetch_usbserialv+0x36>
   d7aa4:	4628      	mov	r0, r5
   d7aa6:	f7fc fafe 	bl	d40a6 <__cxa_guard_acquire>
   d7aaa:	b160      	cbz	r0, d7ac6 <_Z16_fetch_usbserialv+0x36>
   d7aac:	aa01      	add	r2, sp, #4
   d7aae:	4621      	mov	r1, r4
   d7ab0:	4807      	ldr	r0, [pc, #28]	; (d7ad0 <_Z16_fetch_usbserialv+0x40>)
   d7ab2:	f7ff ffcd 	bl	d7a50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7ab6:	4628      	mov	r0, r5
   d7ab8:	f7fc fafa 	bl	d40b0 <__cxa_guard_release>
   d7abc:	4a05      	ldr	r2, [pc, #20]	; (d7ad4 <_Z16_fetch_usbserialv+0x44>)
   d7abe:	4906      	ldr	r1, [pc, #24]	; (d7ad8 <_Z16_fetch_usbserialv+0x48>)
   d7ac0:	4803      	ldr	r0, [pc, #12]	; (d7ad0 <_Z16_fetch_usbserialv+0x40>)
   d7ac2:	f000 fb3b 	bl	d813c <__aeabi_atexit>
	return _usbserial;
}
   d7ac6:	4802      	ldr	r0, [pc, #8]	; (d7ad0 <_Z16_fetch_usbserialv+0x40>)
   d7ac8:	b007      	add	sp, #28
   d7aca:	bd30      	pop	{r4, r5, pc}
   d7acc:	2003e414 	.word	0x2003e414
   d7ad0:	2003e418 	.word	0x2003e418
   d7ad4:	2003be8c 	.word	0x2003be8c
   d7ad8:	000d79d1 	.word	0x000d79d1

000d7adc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7adc:	4770      	bx	lr

000d7ade <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7ade:	7441      	strb	r1, [r0, #17]
   d7ae0:	4770      	bx	lr

000d7ae2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7ae2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7ae4:	7c00      	ldrb	r0, [r0, #16]
   d7ae6:	f7fe ffd9 	bl	d6a9c <HAL_USART_Available_Data_For_Write>
}
   d7aea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7aee:	bd08      	pop	{r3, pc}

000d7af0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7af0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7af2:	7c00      	ldrb	r0, [r0, #16]
   d7af4:	f7fe ffaa 	bl	d6a4c <HAL_USART_Available_Data>
}
   d7af8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7afc:	bd08      	pop	{r3, pc}

000d7afe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7afe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7b00:	7c00      	ldrb	r0, [r0, #16]
   d7b02:	f7fe ffb3 	bl	d6a6c <HAL_USART_Peek_Data>
}
   d7b06:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b0a:	bf28      	it	cs
   d7b0c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b10:	bd08      	pop	{r3, pc}

000d7b12 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7b12:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7b14:	7c00      	ldrb	r0, [r0, #16]
   d7b16:	f7fe ffa1 	bl	d6a5c <HAL_USART_Read_Data>
}
   d7b1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b1e:	bf28      	it	cs
   d7b20:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b24:	bd08      	pop	{r3, pc}

000d7b26 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7b26:	7c00      	ldrb	r0, [r0, #16]
   d7b28:	f7fe bfa8 	b.w	d6a7c <HAL_USART_Flush_Data>

000d7b2c <_ZN11USARTSerialD0Ev>:
   d7b2c:	b510      	push	{r4, lr}
   d7b2e:	2114      	movs	r1, #20
   d7b30:	4604      	mov	r4, r0
   d7b32:	f000 fb11 	bl	d8158 <_ZdlPvj>
   d7b36:	4620      	mov	r0, r4
   d7b38:	bd10      	pop	{r4, pc}

000d7b3a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7b3a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b3c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7b3e:	4604      	mov	r4, r0
   d7b40:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b42:	b925      	cbnz	r5, d7b4e <_ZN11USARTSerial5writeEh+0x14>
   d7b44:	7c00      	ldrb	r0, [r0, #16]
   d7b46:	f7fe ffa9 	bl	d6a9c <HAL_USART_Available_Data_For_Write>
   d7b4a:	2800      	cmp	r0, #0
   d7b4c:	dd05      	ble.n	d7b5a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7b4e:	4631      	mov	r1, r6
   d7b50:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7b56:	f7fe bf71 	b.w	d6a3c <HAL_USART_Write_Data>
  }
  return 0;
}
   d7b5a:	4628      	mov	r0, r5
   d7b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7b60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7b60:	b510      	push	{r4, lr}
   d7b62:	4604      	mov	r4, r0
   d7b64:	4608      	mov	r0, r1
   d7b66:	4611      	mov	r1, r2
   d7b68:	2200      	movs	r2, #0
   d7b6a:	6062      	str	r2, [r4, #4]
   d7b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7b70:	60a2      	str	r2, [r4, #8]
   d7b72:	4a05      	ldr	r2, [pc, #20]	; (d7b88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7b74:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7b76:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7b78:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7b7a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7b7c:	461a      	mov	r2, r3
   d7b7e:	f7fe ff55 	bl	d6a2c <HAL_USART_Init>
}
   d7b82:	4620      	mov	r0, r4
   d7b84:	bd10      	pop	{r4, pc}
   d7b86:	bf00      	nop
   d7b88:	000d95dc 	.word	0x000d95dc

000d7b8c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7b8c:	7c00      	ldrb	r0, [r0, #16]
   d7b8e:	f7fe bf7d 	b.w	d6a8c <HAL_USART_Is_Enabled>
	...

000d7b94 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7b94:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7b96:	4d0c      	ldr	r5, [pc, #48]	; (d7bc8 <_Z22__fetch_global_Serial1v+0x34>)
   d7b98:	6829      	ldr	r1, [r5, #0]
   d7b9a:	f011 0401 	ands.w	r4, r1, #1
   d7b9e:	d111      	bne.n	d7bc4 <_Z22__fetch_global_Serial1v+0x30>
   d7ba0:	4628      	mov	r0, r5
   d7ba2:	f7fc fa80 	bl	d40a6 <__cxa_guard_acquire>
   d7ba6:	b168      	cbz	r0, d7bc4 <_Z22__fetch_global_Serial1v+0x30>
   d7ba8:	4a08      	ldr	r2, [pc, #32]	; (d7bcc <_Z22__fetch_global_Serial1v+0x38>)
   d7baa:	4b09      	ldr	r3, [pc, #36]	; (d7bd0 <_Z22__fetch_global_Serial1v+0x3c>)
   d7bac:	4809      	ldr	r0, [pc, #36]	; (d7bd4 <_Z22__fetch_global_Serial1v+0x40>)
   d7bae:	4621      	mov	r1, r4
   d7bb0:	f7ff ffd6 	bl	d7b60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7bb4:	4628      	mov	r0, r5
   d7bb6:	f7fc fa7b 	bl	d40b0 <__cxa_guard_release>
   d7bba:	4a07      	ldr	r2, [pc, #28]	; (d7bd8 <_Z22__fetch_global_Serial1v+0x44>)
   d7bbc:	4907      	ldr	r1, [pc, #28]	; (d7bdc <_Z22__fetch_global_Serial1v+0x48>)
   d7bbe:	4805      	ldr	r0, [pc, #20]	; (d7bd4 <_Z22__fetch_global_Serial1v+0x40>)
   d7bc0:	f000 fabc 	bl	d813c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7bc4:	4803      	ldr	r0, [pc, #12]	; (d7bd4 <_Z22__fetch_global_Serial1v+0x40>)
   d7bc6:	bd38      	pop	{r3, r4, r5, pc}
   d7bc8:	2003e4c4 	.word	0x2003e4c4
   d7bcc:	2003e4c8 	.word	0x2003e4c8
   d7bd0:	2003e440 	.word	0x2003e440
   d7bd4:	2003e42c 	.word	0x2003e42c
   d7bd8:	2003be8c 	.word	0x2003be8c
   d7bdc:	000d7add 	.word	0x000d7add

000d7be0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7be0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7be2:	6883      	ldr	r3, [r0, #8]
   d7be4:	4604      	mov	r4, r0
   d7be6:	b90b      	cbnz	r3, d7bec <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7be8:	f000 fac9 	bl	d817e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7bec:	68c3      	ldr	r3, [r0, #12]
   d7bee:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7bf0:	68a3      	ldr	r3, [r4, #8]
   d7bf2:	b11b      	cbz	r3, d7bfc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7bf4:	2203      	movs	r2, #3
   d7bf6:	4621      	mov	r1, r4
   d7bf8:	4620      	mov	r0, r4
   d7bfa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7bfc:	4620      	mov	r0, r4
   d7bfe:	2110      	movs	r1, #16
}
   d7c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7c04:	f000 baa8 	b.w	d8158 <_ZdlPvj>

000d7c08 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7c08:	4770      	bx	lr

000d7c0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c0c:	4606      	mov	r6, r0
   d7c0e:	4615      	mov	r5, r2
   d7c10:	460c      	mov	r4, r1
   d7c12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7c14:	42bc      	cmp	r4, r7
   d7c16:	d006      	beq.n	d7c26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7c18:	6833      	ldr	r3, [r6, #0]
   d7c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7c1e:	689b      	ldr	r3, [r3, #8]
   d7c20:	4630      	mov	r0, r6
   d7c22:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7c24:	e7f6      	b.n	d7c14 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7c26:	4628      	mov	r0, r5
   d7c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c2a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7c2a:	2200      	movs	r2, #0
   d7c2c:	7c00      	ldrb	r0, [r0, #16]
   d7c2e:	f7fe bf3d 	b.w	d6aac <HAL_I2C_Write_Data>

000d7c32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7c32:	2100      	movs	r1, #0
   d7c34:	7c00      	ldrb	r0, [r0, #16]
   d7c36:	f7fe bf41 	b.w	d6abc <HAL_I2C_Available_Data>

000d7c3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7c3a:	2100      	movs	r1, #0
   d7c3c:	7c00      	ldrb	r0, [r0, #16]
   d7c3e:	f7fe bf45 	b.w	d6acc <HAL_I2C_Read_Data>

000d7c42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7c42:	2100      	movs	r1, #0
   d7c44:	7c00      	ldrb	r0, [r0, #16]
   d7c46:	f7fe bf49 	b.w	d6adc <HAL_I2C_Peek_Data>

000d7c4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7c4a:	2100      	movs	r1, #0
   d7c4c:	7c00      	ldrb	r0, [r0, #16]
   d7c4e:	f7fe bf4d 	b.w	d6aec <HAL_I2C_Flush_Data>

000d7c52 <_ZN7TwoWireD0Ev>:
   d7c52:	b510      	push	{r4, lr}
   d7c54:	2114      	movs	r1, #20
   d7c56:	4604      	mov	r4, r0
   d7c58:	f000 fa7e 	bl	d8158 <_ZdlPvj>
   d7c5c:	4620      	mov	r0, r4
   d7c5e:	bd10      	pop	{r4, pc}

000d7c60 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7c60:	b510      	push	{r4, lr}
   d7c62:	4604      	mov	r4, r0
   d7c64:	2300      	movs	r3, #0
   d7c66:	6063      	str	r3, [r4, #4]
   d7c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7c6c:	60a3      	str	r3, [r4, #8]
   d7c6e:	4b04      	ldr	r3, [pc, #16]	; (d7c80 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7c70:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7c72:	4608      	mov	r0, r1
   d7c74:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7c76:	4611      	mov	r1, r2
   d7c78:	f7fe ff48 	bl	d6b0c <HAL_I2C_Init>
}
   d7c7c:	4620      	mov	r0, r4
   d7c7e:	bd10      	pop	{r4, pc}
   d7c80:	000d960c 	.word	0x000d960c

000d7c84 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7c84:	2100      	movs	r1, #0
   d7c86:	7c00      	ldrb	r0, [r0, #16]
   d7c88:	f7fe bf38 	b.w	d6afc <HAL_I2C_Is_Enabled>

000d7c8c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7c8c:	2200      	movs	r2, #0
   d7c8e:	4611      	mov	r1, r2
   d7c90:	6840      	ldr	r0, [r0, #4]
   d7c92:	f7fe bfe7 	b.w	d6c64 <network_listening>

000d7c96 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7c96:	2200      	movs	r2, #0
   d7c98:	4611      	mov	r1, r2
   d7c9a:	6840      	ldr	r0, [r0, #4]
   d7c9c:	f7fe bff2 	b.w	d6c84 <network_get_listen_timeout>

000d7ca0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7ca0:	2200      	movs	r2, #0
   d7ca2:	6840      	ldr	r0, [r0, #4]
   d7ca4:	f7fe bfe6 	b.w	d6c74 <network_set_listen_timeout>

000d7ca8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7ca8:	2200      	movs	r2, #0
   d7caa:	f081 0101 	eor.w	r1, r1, #1
   d7cae:	6840      	ldr	r0, [r0, #4]
   d7cb0:	f7fe bfd0 	b.w	d6c54 <network_listen>

000d7cb4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7cb4:	2300      	movs	r3, #0
   d7cb6:	461a      	mov	r2, r3
   d7cb8:	2101      	movs	r1, #1
   d7cba:	6840      	ldr	r0, [r0, #4]
   d7cbc:	f7fe bfc2 	b.w	d6c44 <network_off>

000d7cc0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7cc0:	2300      	movs	r3, #0
   d7cc2:	461a      	mov	r2, r3
   d7cc4:	4619      	mov	r1, r3
   d7cc6:	6840      	ldr	r0, [r0, #4]
   d7cc8:	f7fe bfb4 	b.w	d6c34 <network_on>

000d7ccc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7ccc:	2200      	movs	r2, #0
   d7cce:	4611      	mov	r1, r2
   d7cd0:	6840      	ldr	r0, [r0, #4]
   d7cd2:	f7fe bfa7 	b.w	d6c24 <network_ready>

000d7cd6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7cd6:	2200      	movs	r2, #0
   d7cd8:	4611      	mov	r1, r2
   d7cda:	6840      	ldr	r0, [r0, #4]
   d7cdc:	f7fe bf92 	b.w	d6c04 <network_connecting>

000d7ce0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7ce0:	2200      	movs	r2, #0
   d7ce2:	2102      	movs	r1, #2
   d7ce4:	6840      	ldr	r0, [r0, #4]
   d7ce6:	f7fe bf95 	b.w	d6c14 <network_disconnect>

000d7cea <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7cea:	2300      	movs	r3, #0
   d7cec:	461a      	mov	r2, r3
   d7cee:	6840      	ldr	r0, [r0, #4]
   d7cf0:	f7fe bf80 	b.w	d6bf4 <network_connect>

000d7cf4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7cf4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7cf6:	4605      	mov	r5, r0
   d7cf8:	b188      	cbz	r0, d7d1e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7cfa:	6804      	ldr	r4, [r0, #0]
   d7cfc:	b14c      	cbz	r4, d7d12 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7cfe:	68a3      	ldr	r3, [r4, #8]
   d7d00:	b11b      	cbz	r3, d7d0a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7d02:	2203      	movs	r2, #3
   d7d04:	4621      	mov	r1, r4
   d7d06:	4620      	mov	r0, r4
   d7d08:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d0a:	2110      	movs	r1, #16
   d7d0c:	4620      	mov	r0, r4
   d7d0e:	f000 fa23 	bl	d8158 <_ZdlPvj>
   d7d12:	4628      	mov	r0, r5
   d7d14:	2114      	movs	r1, #20
      }
   d7d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d1a:	f000 ba1d 	b.w	d8158 <_ZdlPvj>
   d7d1e:	bd38      	pop	{r3, r4, r5, pc}

000d7d20 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7d20:	b110      	cbz	r0, d7d28 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7d22:	6803      	ldr	r3, [r0, #0]
   d7d24:	685b      	ldr	r3, [r3, #4]
   d7d26:	4718      	bx	r3
   d7d28:	4770      	bx	lr

000d7d2a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7d2a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7d2c:	6803      	ldr	r3, [r0, #0]
   d7d2e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7d30:	b1bb      	cbz	r3, d7d62 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7d32:	6858      	ldr	r0, [r3, #4]
   d7d34:	f7fe fe42 	bl	d69bc <os_thread_is_current>
   d7d38:	b978      	cbnz	r0, d7d5a <_ZN6ThreadD1Ev+0x30>
   d7d3a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7d3c:	7c5a      	ldrb	r2, [r3, #17]
   d7d3e:	b912      	cbnz	r2, d7d46 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7d40:	6858      	ldr	r0, [r3, #4]
   d7d42:	f7fe fe4b 	bl	d69dc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7d46:	6823      	ldr	r3, [r4, #0]
   d7d48:	6858      	ldr	r0, [r3, #4]
   d7d4a:	f7fe fe4f 	bl	d69ec <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d4e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7d50:	2300      	movs	r3, #0
   d7d52:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7d54:	b128      	cbz	r0, d7d62 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7d56:	f7ff ffcd 	bl	d7cf4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d5a:	6820      	ldr	r0, [r4, #0]
   d7d5c:	b108      	cbz	r0, d7d62 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7d5e:	f7ff ffc9 	bl	d7cf4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7d62:	4620      	mov	r0, r4
   d7d64:	bd10      	pop	{r4, pc}

000d7d66 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7d66:	b538      	push	{r3, r4, r5, lr}
   d7d68:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d6a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7d6e:	b108      	cbz	r0, d7d74 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7d70:	f7fc f997 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7d74:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7d78:	b108      	cbz	r0, d7d7e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7d7a:	f7fe fe47 	bl	d6a0c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d7e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7d82:	b135      	cbz	r5, d7d92 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d84:	4628      	mov	r0, r5
   d7d86:	f7ff ffd0 	bl	d7d2a <_ZN6ThreadD1Ev>
   d7d8a:	2104      	movs	r1, #4
   d7d8c:	4628      	mov	r0, r5
   d7d8e:	f000 f9e3 	bl	d8158 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d92:	6820      	ldr	r0, [r4, #0]
   d7d94:	b108      	cbz	r0, d7d9a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7d96:	f7ff ffc3 	bl	d7d20 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7d9a:	4620      	mov	r0, r4
   d7d9c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7da0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7da0:	b510      	push	{r4, lr}
   d7da2:	4b04      	ldr	r3, [pc, #16]	; (d7db4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7da4:	4604      	mov	r4, r0
   d7da6:	f840 3b08 	str.w	r3, [r0], #8
   d7daa:	f7ff ffdc 	bl	d7d66 <_ZN5spark11MeshPublishD1Ev>
   d7dae:	4620      	mov	r0, r4
   d7db0:	bd10      	pop	{r4, pc}
   d7db2:	bf00      	nop
   d7db4:	000d9634 	.word	0x000d9634

000d7db8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7db8:	b538      	push	{r3, r4, r5, lr}
   d7dba:	4c0e      	ldr	r4, [pc, #56]	; (d7df4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7dbc:	4b0e      	ldr	r3, [pc, #56]	; (d7df8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7dbe:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7dc0:	2500      	movs	r5, #0
   d7dc2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7dc4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7dc8:	6063      	str	r3, [r4, #4]
   d7dca:	60a5      	str	r5, [r4, #8]
   d7dcc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7dd0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7dd4:	f7fe fe12 	bl	d69fc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7dd8:	4b08      	ldr	r3, [pc, #32]	; (d7dfc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7dda:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7dde:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7de2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7de4:	4620      	mov	r0, r4
   d7de6:	4a06      	ldr	r2, [pc, #24]	; (d7e00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7de8:	4906      	ldr	r1, [pc, #24]	; (d7e04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7dee:	f000 b9a5 	b.w	d813c <__aeabi_atexit>
   d7df2:	bf00      	nop
   d7df4:	2003e54c 	.word	0x2003e54c
   d7df8:	000d969c 	.word	0x000d969c
   d7dfc:	000d9634 	.word	0x000d9634
   d7e00:	2003be8c 	.word	0x2003be8c
   d7e04:	000d7da1 	.word	0x000d7da1

000d7e08 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7e08:	2200      	movs	r2, #0
   d7e0a:	4611      	mov	r1, r2
   d7e0c:	6840      	ldr	r0, [r0, #4]
   d7e0e:	f7fe bf09 	b.w	d6c24 <network_ready>

000d7e12 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7e12:	2200      	movs	r2, #0
   d7e14:	4611      	mov	r1, r2
   d7e16:	6840      	ldr	r0, [r0, #4]
   d7e18:	f7fe bf24 	b.w	d6c64 <network_listening>

000d7e1c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7e1c:	2200      	movs	r2, #0
   d7e1e:	4611      	mov	r1, r2
   d7e20:	6840      	ldr	r0, [r0, #4]
   d7e22:	f7fe bf2f 	b.w	d6c84 <network_get_listen_timeout>

000d7e26 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7e26:	2200      	movs	r2, #0
   d7e28:	6840      	ldr	r0, [r0, #4]
   d7e2a:	f7fe bf23 	b.w	d6c74 <network_set_listen_timeout>

000d7e2e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7e2e:	2200      	movs	r2, #0
   d7e30:	f081 0101 	eor.w	r1, r1, #1
   d7e34:	6840      	ldr	r0, [r0, #4]
   d7e36:	f7fe bf0d 	b.w	d6c54 <network_listen>

000d7e3a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7e3a:	2300      	movs	r3, #0
   d7e3c:	461a      	mov	r2, r3
   d7e3e:	4619      	mov	r1, r3
   d7e40:	6840      	ldr	r0, [r0, #4]
   d7e42:	f7fe beff 	b.w	d6c44 <network_off>

000d7e46 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7e46:	2300      	movs	r3, #0
   d7e48:	461a      	mov	r2, r3
   d7e4a:	4619      	mov	r1, r3
   d7e4c:	6840      	ldr	r0, [r0, #4]
   d7e4e:	f7fe bef1 	b.w	d6c34 <network_on>

000d7e52 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7e52:	2200      	movs	r2, #0
   d7e54:	4611      	mov	r1, r2
   d7e56:	6840      	ldr	r0, [r0, #4]
   d7e58:	f7fe bed4 	b.w	d6c04 <network_connecting>

000d7e5c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7e5c:	2200      	movs	r2, #0
   d7e5e:	2102      	movs	r1, #2
   d7e60:	6840      	ldr	r0, [r0, #4]
   d7e62:	f7fe bed7 	b.w	d6c14 <network_disconnect>

000d7e66 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7e66:	2300      	movs	r3, #0
   d7e68:	461a      	mov	r2, r3
   d7e6a:	6840      	ldr	r0, [r0, #4]
   d7e6c:	f7fe bec2 	b.w	d6bf4 <network_connect>

000d7e70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7e70:	4b02      	ldr	r3, [pc, #8]	; (d7e7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7e72:	2204      	movs	r2, #4
   d7e74:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7e76:	4a02      	ldr	r2, [pc, #8]	; (d7e80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7e78:	601a      	str	r2, [r3, #0]
   d7e7a:	4770      	bx	lr
   d7e7c:	2003e720 	.word	0x2003e720
   d7e80:	000d9668 	.word	0x000d9668

000d7e84 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7e84:	2300      	movs	r3, #0
   d7e86:	461a      	mov	r2, r3
   d7e88:	6840      	ldr	r0, [r0, #4]
   d7e8a:	f7fe beb3 	b.w	d6bf4 <network_connect>

000d7e8e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7e8e:	2200      	movs	r2, #0
   d7e90:	2102      	movs	r1, #2
   d7e92:	6840      	ldr	r0, [r0, #4]
   d7e94:	f7fe bebe 	b.w	d6c14 <network_disconnect>

000d7e98 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7e98:	2200      	movs	r2, #0
   d7e9a:	4611      	mov	r1, r2
   d7e9c:	6840      	ldr	r0, [r0, #4]
   d7e9e:	f7fe beb1 	b.w	d6c04 <network_connecting>

000d7ea2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7ea2:	2200      	movs	r2, #0
   d7ea4:	4611      	mov	r1, r2
   d7ea6:	6840      	ldr	r0, [r0, #4]
   d7ea8:	f7fe bebc 	b.w	d6c24 <network_ready>

000d7eac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7eac:	2300      	movs	r3, #0
   d7eae:	461a      	mov	r2, r3
   d7eb0:	4619      	mov	r1, r3
   d7eb2:	6840      	ldr	r0, [r0, #4]
   d7eb4:	f7fe bebe 	b.w	d6c34 <network_on>

000d7eb8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7eb8:	2300      	movs	r3, #0
   d7eba:	461a      	mov	r2, r3
   d7ebc:	4619      	mov	r1, r3
   d7ebe:	6840      	ldr	r0, [r0, #4]
   d7ec0:	f7fe bec0 	b.w	d6c44 <network_off>

000d7ec4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7ec4:	2200      	movs	r2, #0
   d7ec6:	f081 0101 	eor.w	r1, r1, #1
   d7eca:	6840      	ldr	r0, [r0, #4]
   d7ecc:	f7fe bec2 	b.w	d6c54 <network_listen>

000d7ed0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7ed0:	2200      	movs	r2, #0
   d7ed2:	6840      	ldr	r0, [r0, #4]
   d7ed4:	f7fe bece 	b.w	d6c74 <network_set_listen_timeout>

000d7ed8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7ed8:	2200      	movs	r2, #0
   d7eda:	4611      	mov	r1, r2
   d7edc:	6840      	ldr	r0, [r0, #4]
   d7ede:	f7fe bed1 	b.w	d6c84 <network_get_listen_timeout>

000d7ee2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7ee2:	2200      	movs	r2, #0
   d7ee4:	4611      	mov	r1, r2
   d7ee6:	6840      	ldr	r0, [r0, #4]
   d7ee8:	f7fe bebc 	b.w	d6c64 <network_listening>

000d7eec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7ef0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7ef2:	b095      	sub	sp, #84	; 0x54
   d7ef4:	4616      	mov	r6, r2
   d7ef6:	460d      	mov	r5, r1
   d7ef8:	4607      	mov	r7, r0
    IPAddress addr;
   d7efa:	f7ff fd2f 	bl	d795c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7efe:	4621      	mov	r1, r4
   d7f00:	2220      	movs	r2, #32
   d7f02:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f04:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7f06:	f001 f8bf 	bl	d9088 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7f0a:	2340      	movs	r3, #64	; 0x40
   d7f0c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7f0e:	4621      	mov	r1, r4
   d7f10:	466b      	mov	r3, sp
   d7f12:	aa0c      	add	r2, sp, #48	; 0x30
   d7f14:	4630      	mov	r0, r6
   d7f16:	f7fe fca9 	bl	d686c <netdb_getaddrinfo>
    if (!r) {
   d7f1a:	4604      	mov	r4, r0
   d7f1c:	2800      	cmp	r0, #0
   d7f1e:	d144      	bne.n	d7faa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f20:	4602      	mov	r2, r0
   d7f22:	2101      	movs	r1, #1
   d7f24:	6868      	ldr	r0, [r5, #4]
   d7f26:	f7fe fe7d 	bl	d6c24 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f2a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f2c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f2e:	4622      	mov	r2, r4
   d7f30:	6868      	ldr	r0, [r5, #4]
   d7f32:	f7fe fe77 	bl	d6c24 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f36:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f38:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7f3a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f3c:	2e00      	cmp	r6, #0
   d7f3e:	d034      	beq.n	d7faa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7f40:	2900      	cmp	r1, #0
   d7f42:	d132      	bne.n	d7faa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7f44:	6873      	ldr	r3, [r6, #4]
   d7f46:	2b02      	cmp	r3, #2
   d7f48:	d002      	beq.n	d7f50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7f4a:	2b0a      	cmp	r3, #10
   d7f4c:	d009      	beq.n	d7f62 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7f4e:	e02a      	b.n	d7fa6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7f50:	f1b8 0f00 	cmp.w	r8, #0
   d7f54:	d027      	beq.n	d7fa6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7f56:	6971      	ldr	r1, [r6, #20]
   d7f58:	4638      	mov	r0, r7
   d7f5a:	3104      	adds	r1, #4
   d7f5c:	f7ff fd2b 	bl	d79b6 <_ZN9IPAddressaSEPKh>
   d7f60:	e020      	b.n	d7fa4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7f62:	f1b9 0f00 	cmp.w	r9, #0
   d7f66:	d01e      	beq.n	d7fa6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7f68:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7f6a:	2211      	movs	r2, #17
   d7f6c:	a801      	add	r0, sp, #4
   d7f6e:	f001 f88b 	bl	d9088 <memset>
                    a.v = 6;
   d7f72:	2306      	movs	r3, #6
   d7f74:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7f78:	ad01      	add	r5, sp, #4
   d7f7a:	f104 0308 	add.w	r3, r4, #8
   d7f7e:	3418      	adds	r4, #24
   d7f80:	6818      	ldr	r0, [r3, #0]
   d7f82:	6859      	ldr	r1, [r3, #4]
   d7f84:	462a      	mov	r2, r5
   d7f86:	c203      	stmia	r2!, {r0, r1}
   d7f88:	3308      	adds	r3, #8
   d7f8a:	42a3      	cmp	r3, r4
   d7f8c:	4615      	mov	r5, r2
   d7f8e:	d1f7      	bne.n	d7f80 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7f90:	a901      	add	r1, sp, #4
   d7f92:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7f94:	ad07      	add	r5, sp, #28
   d7f96:	f7ff fcef 	bl	d7978 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f9c:	1d3c      	adds	r4, r7, #4
   d7f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7fa0:	682b      	ldr	r3, [r5, #0]
   d7fa2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7fa4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fa6:	69f6      	ldr	r6, [r6, #28]
   d7fa8:	e7c8      	b.n	d7f3c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7faa:	9800      	ldr	r0, [sp, #0]
   d7fac:	f7fe fc56 	bl	d685c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7fb0:	4638      	mov	r0, r7
   d7fb2:	b015      	add	sp, #84	; 0x54
   d7fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7fb8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7fb8:	4b02      	ldr	r3, [pc, #8]	; (d7fc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7fba:	4a03      	ldr	r2, [pc, #12]	; (d7fc8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7fbc:	601a      	str	r2, [r3, #0]
   d7fbe:	2200      	movs	r2, #0
   d7fc0:	605a      	str	r2, [r3, #4]
   d7fc2:	4770      	bx	lr
   d7fc4:	2003e728 	.word	0x2003e728
   d7fc8:	000d969c 	.word	0x000d969c

000d7fcc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7fcc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7fce:	4e18      	ldr	r6, [pc, #96]	; (d8030 <pinAvailable+0x64>)
   d7fd0:	6831      	ldr	r1, [r6, #0]
   d7fd2:	f011 0501 	ands.w	r5, r1, #1
   d7fd6:	4604      	mov	r4, r0
   d7fd8:	d10a      	bne.n	d7ff0 <pinAvailable+0x24>
   d7fda:	4630      	mov	r0, r6
   d7fdc:	f7fc f863 	bl	d40a6 <__cxa_guard_acquire>
   d7fe0:	b130      	cbz	r0, d7ff0 <pinAvailable+0x24>
   d7fe2:	4629      	mov	r1, r5
   d7fe4:	4813      	ldr	r0, [pc, #76]	; (d8034 <pinAvailable+0x68>)
   d7fe6:	f7fe fee9 	bl	d6dbc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7fea:	4630      	mov	r0, r6
   d7fec:	f7fc f860 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7ff0:	4810      	ldr	r0, [pc, #64]	; (d8034 <pinAvailable+0x68>)
   d7ff2:	f7fe ffa0 	bl	d6f36 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7ff6:	b128      	cbz	r0, d8004 <pinAvailable+0x38>
   d7ff8:	f1a4 030b 	sub.w	r3, r4, #11
   d7ffc:	2b02      	cmp	r3, #2
   d7ffe:	d801      	bhi.n	d8004 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8000:	2000      	movs	r0, #0
   d8002:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8004:	f000 f874 	bl	d80f0 <_Z19__fetch_global_Wirev>
   d8008:	f7ff fe3c 	bl	d7c84 <_ZN7TwoWire9isEnabledEv>
   d800c:	b108      	cbz	r0, d8012 <pinAvailable+0x46>
   d800e:	2c01      	cmp	r4, #1
   d8010:	d9f6      	bls.n	d8000 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8012:	f7ff fdbf 	bl	d7b94 <_Z22__fetch_global_Serial1v>
   d8016:	f7ff fdb9 	bl	d7b8c <_ZN11USARTSerial9isEnabledEv>
   d801a:	b118      	cbz	r0, d8024 <pinAvailable+0x58>
   d801c:	f1a4 0309 	sub.w	r3, r4, #9
   d8020:	2b01      	cmp	r3, #1
   d8022:	d9ed      	bls.n	d8000 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8024:	2c23      	cmp	r4, #35	; 0x23
   d8026:	bf8c      	ite	hi
   d8028:	2000      	movhi	r0, #0
   d802a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d802c:	bd70      	pop	{r4, r5, r6, pc}
   d802e:	bf00      	nop
   d8030:	2003be90 	.word	0x2003be90
   d8034:	2003be94 	.word	0x2003be94

000d8038 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8038:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d803a:	b538      	push	{r3, r4, r5, lr}
   d803c:	4604      	mov	r4, r0
   d803e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8040:	d80a      	bhi.n	d8058 <pinMode+0x20>
   d8042:	29ff      	cmp	r1, #255	; 0xff
   d8044:	d008      	beq.n	d8058 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8046:	f7ff ffc1 	bl	d7fcc <pinAvailable>
   d804a:	b128      	cbz	r0, d8058 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d804c:	4629      	mov	r1, r5
   d804e:	4620      	mov	r0, r4
}
   d8050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8054:	f7fe bc22 	b.w	d689c <HAL_Pin_Mode>
   d8058:	bd38      	pop	{r3, r4, r5, pc}

000d805a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d805a:	b538      	push	{r3, r4, r5, lr}
   d805c:	4604      	mov	r4, r0
   d805e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8060:	f7fe fc24 	bl	d68ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8064:	28ff      	cmp	r0, #255	; 0xff
   d8066:	d010      	beq.n	d808a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8068:	2806      	cmp	r0, #6
   d806a:	d804      	bhi.n	d8076 <digitalWrite+0x1c>
   d806c:	234d      	movs	r3, #77	; 0x4d
   d806e:	fa23 f000 	lsr.w	r0, r3, r0
   d8072:	07c3      	lsls	r3, r0, #31
   d8074:	d409      	bmi.n	d808a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8076:	4620      	mov	r0, r4
   d8078:	f7ff ffa8 	bl	d7fcc <pinAvailable>
   d807c:	b128      	cbz	r0, d808a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d807e:	4629      	mov	r1, r5
   d8080:	4620      	mov	r0, r4
}
   d8082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8086:	f7fe bc19 	b.w	d68bc <HAL_GPIO_Write>
   d808a:	bd38      	pop	{r3, r4, r5, pc}

000d808c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d808c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d808e:	b510      	push	{r4, lr}
   d8090:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8092:	bf9c      	itt	ls
   d8094:	340e      	addls	r4, #14
   d8096:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8098:	4620      	mov	r0, r4
   d809a:	f7ff ff97 	bl	d7fcc <pinAvailable>
   d809e:	b150      	cbz	r0, d80b6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d80a0:	2103      	movs	r1, #3
   d80a2:	4620      	mov	r0, r4
   d80a4:	f7fe fbf2 	bl	d688c <HAL_Validate_Pin_Function>
   d80a8:	2803      	cmp	r0, #3
   d80aa:	d104      	bne.n	d80b6 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d80ac:	4620      	mov	r0, r4
}
   d80ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d80b2:	f7fe bc0b 	b.w	d68cc <HAL_ADC_Read>
}
   d80b6:	2000      	movs	r0, #0
   d80b8:	bd10      	pop	{r4, pc}
	...

000d80bc <_Z17acquireWireBufferv>:
   d80bc:	b570      	push	{r4, r5, r6, lr}
   d80be:	4604      	mov	r4, r0
   d80c0:	2514      	movs	r5, #20
   d80c2:	462a      	mov	r2, r5
   d80c4:	4e09      	ldr	r6, [pc, #36]	; (d80ec <_Z17acquireWireBufferv+0x30>)
   d80c6:	2100      	movs	r1, #0
   d80c8:	f000 ffde 	bl	d9088 <memset>
   d80cc:	8025      	strh	r5, [r4, #0]
   d80ce:	2520      	movs	r5, #32
   d80d0:	4631      	mov	r1, r6
   d80d2:	60a5      	str	r5, [r4, #8]
   d80d4:	6125      	str	r5, [r4, #16]
   d80d6:	4628      	mov	r0, r5
   d80d8:	f000 f840 	bl	d815c <_ZnajRKSt9nothrow_t>
   d80dc:	4631      	mov	r1, r6
   d80de:	6060      	str	r0, [r4, #4]
   d80e0:	4628      	mov	r0, r5
   d80e2:	f000 f83b 	bl	d815c <_ZnajRKSt9nothrow_t>
   d80e6:	60e0      	str	r0, [r4, #12]
   d80e8:	4620      	mov	r0, r4
   d80ea:	bd70      	pop	{r4, r5, r6, pc}
   d80ec:	000d96c8 	.word	0x000d96c8

000d80f0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d80f0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d80f2:	4d0e      	ldr	r5, [pc, #56]	; (d812c <_Z19__fetch_global_Wirev+0x3c>)
   d80f4:	6829      	ldr	r1, [r5, #0]
   d80f6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d80fa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d80fc:	d113      	bne.n	d8126 <_Z19__fetch_global_Wirev+0x36>
   d80fe:	4628      	mov	r0, r5
   d8100:	f7fb ffd1 	bl	d40a6 <__cxa_guard_acquire>
   d8104:	b178      	cbz	r0, d8126 <_Z19__fetch_global_Wirev+0x36>
   d8106:	a801      	add	r0, sp, #4
   d8108:	f7ff ffd8 	bl	d80bc <_Z17acquireWireBufferv>
   d810c:	aa01      	add	r2, sp, #4
   d810e:	4621      	mov	r1, r4
   d8110:	4807      	ldr	r0, [pc, #28]	; (d8130 <_Z19__fetch_global_Wirev+0x40>)
   d8112:	f7ff fda5 	bl	d7c60 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8116:	4628      	mov	r0, r5
   d8118:	f7fb ffca 	bl	d40b0 <__cxa_guard_release>
   d811c:	4a05      	ldr	r2, [pc, #20]	; (d8134 <_Z19__fetch_global_Wirev+0x44>)
   d811e:	4906      	ldr	r1, [pc, #24]	; (d8138 <_Z19__fetch_global_Wirev+0x48>)
   d8120:	4803      	ldr	r0, [pc, #12]	; (d8130 <_Z19__fetch_global_Wirev+0x40>)
   d8122:	f000 f80b 	bl	d813c <__aeabi_atexit>
	return wire;
}
   d8126:	4802      	ldr	r0, [pc, #8]	; (d8130 <_Z19__fetch_global_Wirev+0x40>)
   d8128:	b007      	add	sp, #28
   d812a:	bd30      	pop	{r4, r5, pc}
   d812c:	2003e734 	.word	0x2003e734
   d8130:	2003e738 	.word	0x2003e738
   d8134:	2003be8c 	.word	0x2003be8c
   d8138:	000d7c09 	.word	0x000d7c09

000d813c <__aeabi_atexit>:
   d813c:	460b      	mov	r3, r1
   d813e:	4601      	mov	r1, r0
   d8140:	4618      	mov	r0, r3
   d8142:	f000 bf79 	b.w	d9038 <__cxa_atexit>
	...

000d8148 <_ZSt15get_new_handlerv>:
   d8148:	4b02      	ldr	r3, [pc, #8]	; (d8154 <_ZSt15get_new_handlerv+0xc>)
   d814a:	6818      	ldr	r0, [r3, #0]
   d814c:	f3bf 8f5f 	dmb	sy
   d8150:	4770      	bx	lr
   d8152:	bf00      	nop
   d8154:	2003e74c 	.word	0x2003e74c

000d8158 <_ZdlPvj>:
   d8158:	f7fb bfa1 	b.w	d409e <_ZdlPv>

000d815c <_ZnajRKSt9nothrow_t>:
   d815c:	f000 b800 	b.w	d8160 <_ZnwjRKSt9nothrow_t>

000d8160 <_ZnwjRKSt9nothrow_t>:
   d8160:	b510      	push	{r4, lr}
   d8162:	2800      	cmp	r0, #0
   d8164:	bf14      	ite	ne
   d8166:	4604      	movne	r4, r0
   d8168:	2401      	moveq	r4, #1
   d816a:	4620      	mov	r0, r4
   d816c:	f7fe fdb2 	bl	d6cd4 <malloc>
   d8170:	b920      	cbnz	r0, d817c <_ZnwjRKSt9nothrow_t+0x1c>
   d8172:	f7ff ffe9 	bl	d8148 <_ZSt15get_new_handlerv>
   d8176:	b108      	cbz	r0, d817c <_ZnwjRKSt9nothrow_t+0x1c>
   d8178:	4780      	blx	r0
   d817a:	e7f6      	b.n	d816a <_ZnwjRKSt9nothrow_t+0xa>
   d817c:	bd10      	pop	{r4, pc}

000d817e <_ZSt25__throw_bad_function_callv>:
   d817e:	b508      	push	{r3, lr}
   d8180:	f7fe fdc0 	bl	d6d04 <abort>

000d8184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8184:	4b18      	ldr	r3, [pc, #96]	; (d81e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8186:	681a      	ldr	r2, [r3, #0]
   d8188:	07d1      	lsls	r1, r2, #31
   d818a:	bf5c      	itt	pl
   d818c:	2201      	movpl	r2, #1
   d818e:	601a      	strpl	r2, [r3, #0]
   d8190:	4b16      	ldr	r3, [pc, #88]	; (d81ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8192:	681a      	ldr	r2, [r3, #0]
   d8194:	07d2      	lsls	r2, r2, #31
   d8196:	bf5c      	itt	pl
   d8198:	2201      	movpl	r2, #1
   d819a:	601a      	strpl	r2, [r3, #0]
   d819c:	4b14      	ldr	r3, [pc, #80]	; (d81f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d819e:	681a      	ldr	r2, [r3, #0]
   d81a0:	07d0      	lsls	r0, r2, #31
   d81a2:	bf5c      	itt	pl
   d81a4:	2201      	movpl	r2, #1
   d81a6:	601a      	strpl	r2, [r3, #0]
   d81a8:	4b12      	ldr	r3, [pc, #72]	; (d81f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d81aa:	681a      	ldr	r2, [r3, #0]
   d81ac:	07d1      	lsls	r1, r2, #31
   d81ae:	bf5c      	itt	pl
   d81b0:	2201      	movpl	r2, #1
   d81b2:	601a      	strpl	r2, [r3, #0]
   d81b4:	4b10      	ldr	r3, [pc, #64]	; (d81f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d81b6:	681a      	ldr	r2, [r3, #0]
   d81b8:	07d2      	lsls	r2, r2, #31
   d81ba:	bf5c      	itt	pl
   d81bc:	2201      	movpl	r2, #1
   d81be:	601a      	strpl	r2, [r3, #0]
   d81c0:	4b0e      	ldr	r3, [pc, #56]	; (d81fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d81c2:	681a      	ldr	r2, [r3, #0]
   d81c4:	07d0      	lsls	r0, r2, #31
   d81c6:	bf5c      	itt	pl
   d81c8:	2201      	movpl	r2, #1
   d81ca:	601a      	strpl	r2, [r3, #0]
   d81cc:	4b0c      	ldr	r3, [pc, #48]	; (d8200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d81ce:	681a      	ldr	r2, [r3, #0]
   d81d0:	07d1      	lsls	r1, r2, #31
   d81d2:	bf5c      	itt	pl
   d81d4:	2201      	movpl	r2, #1
   d81d6:	601a      	strpl	r2, [r3, #0]
   d81d8:	4b0a      	ldr	r3, [pc, #40]	; (d8204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d81da:	681a      	ldr	r2, [r3, #0]
   d81dc:	07d2      	lsls	r2, r2, #31
   d81de:	bf5c      	itt	pl
   d81e0:	2201      	movpl	r2, #1
   d81e2:	601a      	strpl	r2, [r3, #0]
   d81e4:	4770      	bx	lr
   d81e6:	bf00      	nop
   d81e8:	2003e76c 	.word	0x2003e76c
   d81ec:	2003e768 	.word	0x2003e768
   d81f0:	2003e764 	.word	0x2003e764
   d81f4:	2003e760 	.word	0x2003e760
   d81f8:	2003e75c 	.word	0x2003e75c
   d81fc:	2003e758 	.word	0x2003e758
   d8200:	2003e754 	.word	0x2003e754
   d8204:	2003e750 	.word	0x2003e750

000d8208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8208:	4b24      	ldr	r3, [pc, #144]	; (d829c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d820a:	681a      	ldr	r2, [r3, #0]
   d820c:	07d0      	lsls	r0, r2, #31
   d820e:	bf5c      	itt	pl
   d8210:	2201      	movpl	r2, #1
   d8212:	601a      	strpl	r2, [r3, #0]
   d8214:	4b22      	ldr	r3, [pc, #136]	; (d82a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8216:	681a      	ldr	r2, [r3, #0]
   d8218:	07d1      	lsls	r1, r2, #31
   d821a:	bf5c      	itt	pl
   d821c:	2201      	movpl	r2, #1
   d821e:	601a      	strpl	r2, [r3, #0]
   d8220:	4b20      	ldr	r3, [pc, #128]	; (d82a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8222:	681a      	ldr	r2, [r3, #0]
   d8224:	07d2      	lsls	r2, r2, #31
   d8226:	bf5c      	itt	pl
   d8228:	2201      	movpl	r2, #1
   d822a:	601a      	strpl	r2, [r3, #0]
   d822c:	4b1e      	ldr	r3, [pc, #120]	; (d82a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d822e:	681a      	ldr	r2, [r3, #0]
   d8230:	07d0      	lsls	r0, r2, #31
   d8232:	bf5c      	itt	pl
   d8234:	2201      	movpl	r2, #1
   d8236:	601a      	strpl	r2, [r3, #0]
   d8238:	4b1c      	ldr	r3, [pc, #112]	; (d82ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d823a:	681a      	ldr	r2, [r3, #0]
   d823c:	07d1      	lsls	r1, r2, #31
   d823e:	bf5c      	itt	pl
   d8240:	2201      	movpl	r2, #1
   d8242:	601a      	strpl	r2, [r3, #0]
   d8244:	4b1a      	ldr	r3, [pc, #104]	; (d82b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8246:	681a      	ldr	r2, [r3, #0]
   d8248:	07d2      	lsls	r2, r2, #31
   d824a:	bf5c      	itt	pl
   d824c:	2201      	movpl	r2, #1
   d824e:	601a      	strpl	r2, [r3, #0]
   d8250:	4b18      	ldr	r3, [pc, #96]	; (d82b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8252:	681a      	ldr	r2, [r3, #0]
   d8254:	07d0      	lsls	r0, r2, #31
   d8256:	bf5c      	itt	pl
   d8258:	2201      	movpl	r2, #1
   d825a:	601a      	strpl	r2, [r3, #0]
   d825c:	4b16      	ldr	r3, [pc, #88]	; (d82b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d825e:	681a      	ldr	r2, [r3, #0]
   d8260:	07d1      	lsls	r1, r2, #31
   d8262:	bf5c      	itt	pl
   d8264:	2201      	movpl	r2, #1
   d8266:	601a      	strpl	r2, [r3, #0]
   d8268:	4b14      	ldr	r3, [pc, #80]	; (d82bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d826a:	681a      	ldr	r2, [r3, #0]
   d826c:	07d2      	lsls	r2, r2, #31
   d826e:	bf5c      	itt	pl
   d8270:	2201      	movpl	r2, #1
   d8272:	601a      	strpl	r2, [r3, #0]
   d8274:	4b12      	ldr	r3, [pc, #72]	; (d82c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8276:	681a      	ldr	r2, [r3, #0]
   d8278:	07d0      	lsls	r0, r2, #31
   d827a:	bf5c      	itt	pl
   d827c:	2201      	movpl	r2, #1
   d827e:	601a      	strpl	r2, [r3, #0]
   d8280:	4b10      	ldr	r3, [pc, #64]	; (d82c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8282:	681a      	ldr	r2, [r3, #0]
   d8284:	07d1      	lsls	r1, r2, #31
   d8286:	bf5c      	itt	pl
   d8288:	2201      	movpl	r2, #1
   d828a:	601a      	strpl	r2, [r3, #0]
   d828c:	4b0e      	ldr	r3, [pc, #56]	; (d82c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d828e:	681a      	ldr	r2, [r3, #0]
   d8290:	07d2      	lsls	r2, r2, #31
   d8292:	bf5c      	itt	pl
   d8294:	2201      	movpl	r2, #1
   d8296:	601a      	strpl	r2, [r3, #0]
   d8298:	4770      	bx	lr
   d829a:	bf00      	nop
   d829c:	2003e79c 	.word	0x2003e79c
   d82a0:	2003e798 	.word	0x2003e798
   d82a4:	2003e794 	.word	0x2003e794
   d82a8:	2003e790 	.word	0x2003e790
   d82ac:	2003e78c 	.word	0x2003e78c
   d82b0:	2003e788 	.word	0x2003e788
   d82b4:	2003e784 	.word	0x2003e784
   d82b8:	2003e780 	.word	0x2003e780
   d82bc:	2003e77c 	.word	0x2003e77c
   d82c0:	2003e778 	.word	0x2003e778
   d82c4:	2003e774 	.word	0x2003e774
   d82c8:	2003e770 	.word	0x2003e770

000d82cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d82cc:	4b24      	ldr	r3, [pc, #144]	; (d8360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d82ce:	681a      	ldr	r2, [r3, #0]
   d82d0:	07d0      	lsls	r0, r2, #31
   d82d2:	bf5c      	itt	pl
   d82d4:	2201      	movpl	r2, #1
   d82d6:	601a      	strpl	r2, [r3, #0]
   d82d8:	4b22      	ldr	r3, [pc, #136]	; (d8364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d82da:	681a      	ldr	r2, [r3, #0]
   d82dc:	07d1      	lsls	r1, r2, #31
   d82de:	bf5c      	itt	pl
   d82e0:	2201      	movpl	r2, #1
   d82e2:	601a      	strpl	r2, [r3, #0]
   d82e4:	4b20      	ldr	r3, [pc, #128]	; (d8368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d82e6:	681a      	ldr	r2, [r3, #0]
   d82e8:	07d2      	lsls	r2, r2, #31
   d82ea:	bf5c      	itt	pl
   d82ec:	2201      	movpl	r2, #1
   d82ee:	601a      	strpl	r2, [r3, #0]
   d82f0:	4b1e      	ldr	r3, [pc, #120]	; (d836c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d82f2:	681a      	ldr	r2, [r3, #0]
   d82f4:	07d0      	lsls	r0, r2, #31
   d82f6:	bf5c      	itt	pl
   d82f8:	2201      	movpl	r2, #1
   d82fa:	601a      	strpl	r2, [r3, #0]
   d82fc:	4b1c      	ldr	r3, [pc, #112]	; (d8370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d82fe:	681a      	ldr	r2, [r3, #0]
   d8300:	07d1      	lsls	r1, r2, #31
   d8302:	bf5c      	itt	pl
   d8304:	2201      	movpl	r2, #1
   d8306:	601a      	strpl	r2, [r3, #0]
   d8308:	4b1a      	ldr	r3, [pc, #104]	; (d8374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d830a:	681a      	ldr	r2, [r3, #0]
   d830c:	07d2      	lsls	r2, r2, #31
   d830e:	bf5c      	itt	pl
   d8310:	2201      	movpl	r2, #1
   d8312:	601a      	strpl	r2, [r3, #0]
   d8314:	4b18      	ldr	r3, [pc, #96]	; (d8378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8316:	681a      	ldr	r2, [r3, #0]
   d8318:	07d0      	lsls	r0, r2, #31
   d831a:	bf5c      	itt	pl
   d831c:	2201      	movpl	r2, #1
   d831e:	601a      	strpl	r2, [r3, #0]
   d8320:	4b16      	ldr	r3, [pc, #88]	; (d837c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8322:	681a      	ldr	r2, [r3, #0]
   d8324:	07d1      	lsls	r1, r2, #31
   d8326:	bf5c      	itt	pl
   d8328:	2201      	movpl	r2, #1
   d832a:	601a      	strpl	r2, [r3, #0]
   d832c:	4b14      	ldr	r3, [pc, #80]	; (d8380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d832e:	681a      	ldr	r2, [r3, #0]
   d8330:	07d2      	lsls	r2, r2, #31
   d8332:	bf5c      	itt	pl
   d8334:	2201      	movpl	r2, #1
   d8336:	601a      	strpl	r2, [r3, #0]
   d8338:	4b12      	ldr	r3, [pc, #72]	; (d8384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d833a:	681a      	ldr	r2, [r3, #0]
   d833c:	07d0      	lsls	r0, r2, #31
   d833e:	bf5c      	itt	pl
   d8340:	2201      	movpl	r2, #1
   d8342:	601a      	strpl	r2, [r3, #0]
   d8344:	4b10      	ldr	r3, [pc, #64]	; (d8388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8346:	681a      	ldr	r2, [r3, #0]
   d8348:	07d1      	lsls	r1, r2, #31
   d834a:	bf5c      	itt	pl
   d834c:	2201      	movpl	r2, #1
   d834e:	601a      	strpl	r2, [r3, #0]
   d8350:	4b0e      	ldr	r3, [pc, #56]	; (d838c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8352:	681a      	ldr	r2, [r3, #0]
   d8354:	07d2      	lsls	r2, r2, #31
   d8356:	bf5c      	itt	pl
   d8358:	2201      	movpl	r2, #1
   d835a:	601a      	strpl	r2, [r3, #0]
   d835c:	4770      	bx	lr
   d835e:	bf00      	nop
   d8360:	2003e7cc 	.word	0x2003e7cc
   d8364:	2003e7c8 	.word	0x2003e7c8
   d8368:	2003e7c4 	.word	0x2003e7c4
   d836c:	2003e7c0 	.word	0x2003e7c0
   d8370:	2003e7bc 	.word	0x2003e7bc
   d8374:	2003e7b8 	.word	0x2003e7b8
   d8378:	2003e7b4 	.word	0x2003e7b4
   d837c:	2003e7b0 	.word	0x2003e7b0
   d8380:	2003e7ac 	.word	0x2003e7ac
   d8384:	2003e7a8 	.word	0x2003e7a8
   d8388:	2003e7a4 	.word	0x2003e7a4
   d838c:	2003e7a0 	.word	0x2003e7a0

000d8390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8390:	4b18      	ldr	r3, [pc, #96]	; (d83f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8392:	681a      	ldr	r2, [r3, #0]
   d8394:	07d1      	lsls	r1, r2, #31
   d8396:	bf5c      	itt	pl
   d8398:	2201      	movpl	r2, #1
   d839a:	601a      	strpl	r2, [r3, #0]
   d839c:	4b16      	ldr	r3, [pc, #88]	; (d83f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d839e:	681a      	ldr	r2, [r3, #0]
   d83a0:	07d2      	lsls	r2, r2, #31
   d83a2:	bf5c      	itt	pl
   d83a4:	2201      	movpl	r2, #1
   d83a6:	601a      	strpl	r2, [r3, #0]
   d83a8:	4b14      	ldr	r3, [pc, #80]	; (d83fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d83aa:	681a      	ldr	r2, [r3, #0]
   d83ac:	07d0      	lsls	r0, r2, #31
   d83ae:	bf5c      	itt	pl
   d83b0:	2201      	movpl	r2, #1
   d83b2:	601a      	strpl	r2, [r3, #0]
   d83b4:	4b12      	ldr	r3, [pc, #72]	; (d8400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d83b6:	681a      	ldr	r2, [r3, #0]
   d83b8:	07d1      	lsls	r1, r2, #31
   d83ba:	bf5c      	itt	pl
   d83bc:	2201      	movpl	r2, #1
   d83be:	601a      	strpl	r2, [r3, #0]
   d83c0:	4b10      	ldr	r3, [pc, #64]	; (d8404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d83c2:	681a      	ldr	r2, [r3, #0]
   d83c4:	07d2      	lsls	r2, r2, #31
   d83c6:	bf5c      	itt	pl
   d83c8:	2201      	movpl	r2, #1
   d83ca:	601a      	strpl	r2, [r3, #0]
   d83cc:	4b0e      	ldr	r3, [pc, #56]	; (d8408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d83ce:	681a      	ldr	r2, [r3, #0]
   d83d0:	07d0      	lsls	r0, r2, #31
   d83d2:	bf5c      	itt	pl
   d83d4:	2201      	movpl	r2, #1
   d83d6:	601a      	strpl	r2, [r3, #0]
   d83d8:	4b0c      	ldr	r3, [pc, #48]	; (d840c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d83da:	681a      	ldr	r2, [r3, #0]
   d83dc:	07d1      	lsls	r1, r2, #31
   d83de:	bf5c      	itt	pl
   d83e0:	2201      	movpl	r2, #1
   d83e2:	601a      	strpl	r2, [r3, #0]
   d83e4:	4b0a      	ldr	r3, [pc, #40]	; (d8410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d83e6:	681a      	ldr	r2, [r3, #0]
   d83e8:	07d2      	lsls	r2, r2, #31
   d83ea:	bf5c      	itt	pl
   d83ec:	2201      	movpl	r2, #1
   d83ee:	601a      	strpl	r2, [r3, #0]
   d83f0:	4770      	bx	lr
   d83f2:	bf00      	nop
   d83f4:	2003e7ec 	.word	0x2003e7ec
   d83f8:	2003e7e8 	.word	0x2003e7e8
   d83fc:	2003e7e4 	.word	0x2003e7e4
   d8400:	2003e7e0 	.word	0x2003e7e0
   d8404:	2003e7dc 	.word	0x2003e7dc
   d8408:	2003e7d8 	.word	0x2003e7d8
   d840c:	2003e7d4 	.word	0x2003e7d4
   d8410:	2003e7d0 	.word	0x2003e7d0

000d8414 <sqrt>:
   d8414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8418:	ed2d 8b02 	vpush	{d8}
   d841c:	b08b      	sub	sp, #44	; 0x2c
   d841e:	ec55 4b10 	vmov	r4, r5, d0
   d8422:	f000 f857 	bl	d84d4 <__ieee754_sqrt>
   d8426:	4b29      	ldr	r3, [pc, #164]	; (d84cc <sqrt+0xb8>)
   d8428:	eeb0 8a40 	vmov.f32	s16, s0
   d842c:	eef0 8a60 	vmov.f32	s17, s1
   d8430:	f993 6000 	ldrsb.w	r6, [r3]
   d8434:	1c73      	adds	r3, r6, #1
   d8436:	d012      	beq.n	d845e <sqrt+0x4a>
   d8438:	4622      	mov	r2, r4
   d843a:	462b      	mov	r3, r5
   d843c:	4620      	mov	r0, r4
   d843e:	4629      	mov	r1, r5
   d8440:	f000 fd6c 	bl	d8f1c <__aeabi_dcmpun>
   d8444:	4607      	mov	r7, r0
   d8446:	b950      	cbnz	r0, d845e <sqrt+0x4a>
   d8448:	f04f 0800 	mov.w	r8, #0
   d844c:	f04f 0900 	mov.w	r9, #0
   d8450:	4620      	mov	r0, r4
   d8452:	4629      	mov	r1, r5
   d8454:	4642      	mov	r2, r8
   d8456:	464b      	mov	r3, r9
   d8458:	f000 fd38 	bl	d8ecc <__aeabi_dcmplt>
   d845c:	b940      	cbnz	r0, d8470 <sqrt+0x5c>
   d845e:	eeb0 0a48 	vmov.f32	s0, s16
   d8462:	eef0 0a68 	vmov.f32	s1, s17
   d8466:	b00b      	add	sp, #44	; 0x2c
   d8468:	ecbd 8b02 	vpop	{d8}
   d846c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8470:	4b17      	ldr	r3, [pc, #92]	; (d84d0 <sqrt+0xbc>)
   d8472:	9708      	str	r7, [sp, #32]
   d8474:	2201      	movs	r2, #1
   d8476:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d847a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d847e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d8482:	b1b6      	cbz	r6, d84b2 <sqrt+0x9e>
   d8484:	4642      	mov	r2, r8
   d8486:	464b      	mov	r3, r9
   d8488:	4640      	mov	r0, r8
   d848a:	4649      	mov	r1, r9
   d848c:	f000 fbd6 	bl	d8c3c <__aeabi_ddiv>
   d8490:	2e02      	cmp	r6, #2
   d8492:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8496:	d10e      	bne.n	d84b6 <sqrt+0xa2>
   d8498:	f7fe fc44 	bl	d6d24 <__errno>
   d849c:	2321      	movs	r3, #33	; 0x21
   d849e:	6003      	str	r3, [r0, #0]
   d84a0:	9b08      	ldr	r3, [sp, #32]
   d84a2:	b973      	cbnz	r3, d84c2 <sqrt+0xae>
   d84a4:	ed9d 0b06 	vldr	d0, [sp, #24]
   d84a8:	b00b      	add	sp, #44	; 0x2c
   d84aa:	ecbd 8b02 	vpop	{d8}
   d84ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d84b2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d84b6:	4668      	mov	r0, sp
   d84b8:	f000 f8dc 	bl	d8674 <matherr>
   d84bc:	2800      	cmp	r0, #0
   d84be:	d1ef      	bne.n	d84a0 <sqrt+0x8c>
   d84c0:	e7ea      	b.n	d8498 <sqrt+0x84>
   d84c2:	f7fe fc2f 	bl	d6d24 <__errno>
   d84c6:	9b08      	ldr	r3, [sp, #32]
   d84c8:	6003      	str	r3, [r0, #0]
   d84ca:	e7eb      	b.n	d84a4 <sqrt+0x90>
   d84cc:	2003be24 	.word	0x2003be24
   d84d0:	000d96cc 	.word	0x000d96cc

000d84d4 <__ieee754_sqrt>:
   d84d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d84d8:	4965      	ldr	r1, [pc, #404]	; (d8670 <__ieee754_sqrt+0x19c>)
   d84da:	ec55 4b10 	vmov	r4, r5, d0
   d84de:	460e      	mov	r6, r1
   d84e0:	4029      	ands	r1, r5
   d84e2:	42b1      	cmp	r1, r6
   d84e4:	f000 8097 	beq.w	d8616 <__ieee754_sqrt+0x142>
   d84e8:	2d00      	cmp	r5, #0
   d84ea:	462b      	mov	r3, r5
   d84ec:	ee10 2a10 	vmov	r2, s0
   d84f0:	dd74      	ble.n	d85dc <__ieee754_sqrt+0x108>
   d84f2:	152f      	asrs	r7, r5, #20
   d84f4:	d07f      	beq.n	d85f6 <__ieee754_sqrt+0x122>
   d84f6:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d84fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d84fe:	07f9      	lsls	r1, r7, #31
   d8500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8504:	d465      	bmi.n	d85d2 <__ieee754_sqrt+0xfe>
   d8506:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d850a:	2600      	movs	r6, #0
   d850c:	440b      	add	r3, r1
   d850e:	107f      	asrs	r7, r7, #1
   d8510:	0052      	lsls	r2, r2, #1
   d8512:	46b6      	mov	lr, r6
   d8514:	2016      	movs	r0, #22
   d8516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d851a:	eb0e 0401 	add.w	r4, lr, r1
   d851e:	429c      	cmp	r4, r3
   d8520:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d8524:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8528:	dc03      	bgt.n	d8532 <__ieee754_sqrt+0x5e>
   d852a:	1b1b      	subs	r3, r3, r4
   d852c:	eb04 0e01 	add.w	lr, r4, r1
   d8530:	440e      	add	r6, r1
   d8532:	3801      	subs	r0, #1
   d8534:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d8538:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d853c:	d1ed      	bne.n	d851a <__ieee754_sqrt+0x46>
   d853e:	4684      	mov	ip, r0
   d8540:	2420      	movs	r4, #32
   d8542:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d8546:	e009      	b.n	d855c <__ieee754_sqrt+0x88>
   d8548:	d020      	beq.n	d858c <__ieee754_sqrt+0xb8>
   d854a:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d854e:	3c01      	subs	r4, #1
   d8550:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8554:	442b      	add	r3, r5
   d8556:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d855a:	d020      	beq.n	d859e <__ieee754_sqrt+0xca>
   d855c:	459e      	cmp	lr, r3
   d855e:	eb01 050c 	add.w	r5, r1, ip
   d8562:	daf1      	bge.n	d8548 <__ieee754_sqrt+0x74>
   d8564:	2d00      	cmp	r5, #0
   d8566:	eb05 0c01 	add.w	ip, r5, r1
   d856a:	db09      	blt.n	d8580 <__ieee754_sqrt+0xac>
   d856c:	46f0      	mov	r8, lr
   d856e:	4295      	cmp	r5, r2
   d8570:	ebce 0303 	rsb	r3, lr, r3
   d8574:	d900      	bls.n	d8578 <__ieee754_sqrt+0xa4>
   d8576:	3b01      	subs	r3, #1
   d8578:	1b52      	subs	r2, r2, r5
   d857a:	4408      	add	r0, r1
   d857c:	46c6      	mov	lr, r8
   d857e:	e7e4      	b.n	d854a <__ieee754_sqrt+0x76>
   d8580:	f1bc 0f00 	cmp.w	ip, #0
   d8584:	dbf2      	blt.n	d856c <__ieee754_sqrt+0x98>
   d8586:	f10e 0801 	add.w	r8, lr, #1
   d858a:	e7f0      	b.n	d856e <__ieee754_sqrt+0x9a>
   d858c:	4295      	cmp	r5, r2
   d858e:	d81e      	bhi.n	d85ce <__ieee754_sqrt+0xfa>
   d8590:	2d00      	cmp	r5, #0
   d8592:	eb05 0c01 	add.w	ip, r5, r1
   d8596:	db50      	blt.n	d863a <__ieee754_sqrt+0x166>
   d8598:	4698      	mov	r8, r3
   d859a:	2300      	movs	r3, #0
   d859c:	e7ec      	b.n	d8578 <__ieee754_sqrt+0xa4>
   d859e:	4313      	orrs	r3, r2
   d85a0:	d004      	beq.n	d85ac <__ieee754_sqrt+0xd8>
   d85a2:	1c42      	adds	r2, r0, #1
   d85a4:	d04d      	beq.n	d8642 <__ieee754_sqrt+0x16e>
   d85a6:	f000 0301 	and.w	r3, r0, #1
   d85aa:	4418      	add	r0, r3
   d85ac:	0840      	lsrs	r0, r0, #1
   d85ae:	1071      	asrs	r1, r6, #1
   d85b0:	07f3      	lsls	r3, r6, #31
   d85b2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d85b6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d85ba:	bf48      	it	mi
   d85bc:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d85c0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d85c4:	4602      	mov	r2, r0
   d85c6:	ec43 2b10 	vmov	d0, r2, r3
   d85ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d85ce:	4673      	mov	r3, lr
   d85d0:	e7bb      	b.n	d854a <__ieee754_sqrt+0x76>
   d85d2:	005b      	lsls	r3, r3, #1
   d85d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d85d8:	0052      	lsls	r2, r2, #1
   d85da:	e794      	b.n	d8506 <__ieee754_sqrt+0x32>
   d85dc:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d85e0:	4321      	orrs	r1, r4
   d85e2:	d028      	beq.n	d8636 <__ieee754_sqrt+0x162>
   d85e4:	bbad      	cbnz	r5, d8652 <__ieee754_sqrt+0x17e>
   d85e6:	462f      	mov	r7, r5
   d85e8:	0ad3      	lsrs	r3, r2, #11
   d85ea:	3f15      	subs	r7, #21
   d85ec:	0552      	lsls	r2, r2, #21
   d85ee:	2b00      	cmp	r3, #0
   d85f0:	d0fa      	beq.n	d85e8 <__ieee754_sqrt+0x114>
   d85f2:	02dd      	lsls	r5, r3, #11
   d85f4:	d428      	bmi.n	d8648 <__ieee754_sqrt+0x174>
   d85f6:	2100      	movs	r1, #0
   d85f8:	e000      	b.n	d85fc <__ieee754_sqrt+0x128>
   d85fa:	4601      	mov	r1, r0
   d85fc:	005b      	lsls	r3, r3, #1
   d85fe:	02dc      	lsls	r4, r3, #11
   d8600:	f101 0001 	add.w	r0, r1, #1
   d8604:	d5f9      	bpl.n	d85fa <__ieee754_sqrt+0x126>
   d8606:	f1c0 0420 	rsb	r4, r0, #32
   d860a:	fa22 f404 	lsr.w	r4, r2, r4
   d860e:	4323      	orrs	r3, r4
   d8610:	1a7f      	subs	r7, r7, r1
   d8612:	4082      	lsls	r2, r0
   d8614:	e76f      	b.n	d84f6 <__ieee754_sqrt+0x22>
   d8616:	ee10 2a10 	vmov	r2, s0
   d861a:	462b      	mov	r3, r5
   d861c:	ee10 0a10 	vmov	r0, s0
   d8620:	4629      	mov	r1, r5
   d8622:	f000 f9e1 	bl	d89e8 <__aeabi_dmul>
   d8626:	4622      	mov	r2, r4
   d8628:	462b      	mov	r3, r5
   d862a:	f000 f82b 	bl	d8684 <__adddf3>
   d862e:	ec41 0b10 	vmov	d0, r0, r1
   d8632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d863a:	f1bc 0f00 	cmp.w	ip, #0
   d863e:	daa2      	bge.n	d8586 <__ieee754_sqrt+0xb2>
   d8640:	e7aa      	b.n	d8598 <__ieee754_sqrt+0xc4>
   d8642:	3601      	adds	r6, #1
   d8644:	4620      	mov	r0, r4
   d8646:	e7b2      	b.n	d85ae <__ieee754_sqrt+0xda>
   d8648:	2420      	movs	r4, #32
   d864a:	f04f 31ff 	mov.w	r1, #4294967295
   d864e:	2000      	movs	r0, #0
   d8650:	e7db      	b.n	d860a <__ieee754_sqrt+0x136>
   d8652:	ee10 2a10 	vmov	r2, s0
   d8656:	462b      	mov	r3, r5
   d8658:	4620      	mov	r0, r4
   d865a:	4629      	mov	r1, r5
   d865c:	f000 f810 	bl	d8680 <__aeabi_dsub>
   d8660:	4602      	mov	r2, r0
   d8662:	460b      	mov	r3, r1
   d8664:	f000 faea 	bl	d8c3c <__aeabi_ddiv>
   d8668:	ec41 0b10 	vmov	d0, r0, r1
   d866c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8670:	7ff00000 	.word	0x7ff00000

000d8674 <matherr>:
   d8674:	2000      	movs	r0, #0
   d8676:	4770      	bx	lr

000d8678 <__aeabi_drsub>:
   d8678:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d867c:	e002      	b.n	d8684 <__adddf3>
   d867e:	bf00      	nop

000d8680 <__aeabi_dsub>:
   d8680:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8684 <__adddf3>:
   d8684:	b530      	push	{r4, r5, lr}
   d8686:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d868a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d868e:	ea94 0f05 	teq	r4, r5
   d8692:	bf08      	it	eq
   d8694:	ea90 0f02 	teqeq	r0, r2
   d8698:	bf1f      	itttt	ne
   d869a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d869e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d86a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d86a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d86aa:	f000 80e2 	beq.w	d8872 <__adddf3+0x1ee>
   d86ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d86b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d86b6:	bfb8      	it	lt
   d86b8:	426d      	neglt	r5, r5
   d86ba:	dd0c      	ble.n	d86d6 <__adddf3+0x52>
   d86bc:	442c      	add	r4, r5
   d86be:	ea80 0202 	eor.w	r2, r0, r2
   d86c2:	ea81 0303 	eor.w	r3, r1, r3
   d86c6:	ea82 0000 	eor.w	r0, r2, r0
   d86ca:	ea83 0101 	eor.w	r1, r3, r1
   d86ce:	ea80 0202 	eor.w	r2, r0, r2
   d86d2:	ea81 0303 	eor.w	r3, r1, r3
   d86d6:	2d36      	cmp	r5, #54	; 0x36
   d86d8:	bf88      	it	hi
   d86da:	bd30      	pophi	{r4, r5, pc}
   d86dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d86e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d86e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d86e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d86ec:	d002      	beq.n	d86f4 <__adddf3+0x70>
   d86ee:	4240      	negs	r0, r0
   d86f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d86f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d86f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d86fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8700:	d002      	beq.n	d8708 <__adddf3+0x84>
   d8702:	4252      	negs	r2, r2
   d8704:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8708:	ea94 0f05 	teq	r4, r5
   d870c:	f000 80a7 	beq.w	d885e <__adddf3+0x1da>
   d8710:	f1a4 0401 	sub.w	r4, r4, #1
   d8714:	f1d5 0e20 	rsbs	lr, r5, #32
   d8718:	db0d      	blt.n	d8736 <__adddf3+0xb2>
   d871a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d871e:	fa22 f205 	lsr.w	r2, r2, r5
   d8722:	1880      	adds	r0, r0, r2
   d8724:	f141 0100 	adc.w	r1, r1, #0
   d8728:	fa03 f20e 	lsl.w	r2, r3, lr
   d872c:	1880      	adds	r0, r0, r2
   d872e:	fa43 f305 	asr.w	r3, r3, r5
   d8732:	4159      	adcs	r1, r3
   d8734:	e00e      	b.n	d8754 <__adddf3+0xd0>
   d8736:	f1a5 0520 	sub.w	r5, r5, #32
   d873a:	f10e 0e20 	add.w	lr, lr, #32
   d873e:	2a01      	cmp	r2, #1
   d8740:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8744:	bf28      	it	cs
   d8746:	f04c 0c02 	orrcs.w	ip, ip, #2
   d874a:	fa43 f305 	asr.w	r3, r3, r5
   d874e:	18c0      	adds	r0, r0, r3
   d8750:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8758:	d507      	bpl.n	d876a <__adddf3+0xe6>
   d875a:	f04f 0e00 	mov.w	lr, #0
   d875e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8762:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8766:	eb6e 0101 	sbc.w	r1, lr, r1
   d876a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d876e:	d31b      	bcc.n	d87a8 <__adddf3+0x124>
   d8770:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8774:	d30c      	bcc.n	d8790 <__adddf3+0x10c>
   d8776:	0849      	lsrs	r1, r1, #1
   d8778:	ea5f 0030 	movs.w	r0, r0, rrx
   d877c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8780:	f104 0401 	add.w	r4, r4, #1
   d8784:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8788:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d878c:	f080 809a 	bcs.w	d88c4 <__adddf3+0x240>
   d8790:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8794:	bf08      	it	eq
   d8796:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d879a:	f150 0000 	adcs.w	r0, r0, #0
   d879e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d87a2:	ea41 0105 	orr.w	r1, r1, r5
   d87a6:	bd30      	pop	{r4, r5, pc}
   d87a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d87ac:	4140      	adcs	r0, r0
   d87ae:	eb41 0101 	adc.w	r1, r1, r1
   d87b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87b6:	f1a4 0401 	sub.w	r4, r4, #1
   d87ba:	d1e9      	bne.n	d8790 <__adddf3+0x10c>
   d87bc:	f091 0f00 	teq	r1, #0
   d87c0:	bf04      	itt	eq
   d87c2:	4601      	moveq	r1, r0
   d87c4:	2000      	moveq	r0, #0
   d87c6:	fab1 f381 	clz	r3, r1
   d87ca:	bf08      	it	eq
   d87cc:	3320      	addeq	r3, #32
   d87ce:	f1a3 030b 	sub.w	r3, r3, #11
   d87d2:	f1b3 0220 	subs.w	r2, r3, #32
   d87d6:	da0c      	bge.n	d87f2 <__adddf3+0x16e>
   d87d8:	320c      	adds	r2, #12
   d87da:	dd08      	ble.n	d87ee <__adddf3+0x16a>
   d87dc:	f102 0c14 	add.w	ip, r2, #20
   d87e0:	f1c2 020c 	rsb	r2, r2, #12
   d87e4:	fa01 f00c 	lsl.w	r0, r1, ip
   d87e8:	fa21 f102 	lsr.w	r1, r1, r2
   d87ec:	e00c      	b.n	d8808 <__adddf3+0x184>
   d87ee:	f102 0214 	add.w	r2, r2, #20
   d87f2:	bfd8      	it	le
   d87f4:	f1c2 0c20 	rsble	ip, r2, #32
   d87f8:	fa01 f102 	lsl.w	r1, r1, r2
   d87fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8800:	bfdc      	itt	le
   d8802:	ea41 010c 	orrle.w	r1, r1, ip
   d8806:	4090      	lslle	r0, r2
   d8808:	1ae4      	subs	r4, r4, r3
   d880a:	bfa2      	ittt	ge
   d880c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8810:	4329      	orrge	r1, r5
   d8812:	bd30      	popge	{r4, r5, pc}
   d8814:	ea6f 0404 	mvn.w	r4, r4
   d8818:	3c1f      	subs	r4, #31
   d881a:	da1c      	bge.n	d8856 <__adddf3+0x1d2>
   d881c:	340c      	adds	r4, #12
   d881e:	dc0e      	bgt.n	d883e <__adddf3+0x1ba>
   d8820:	f104 0414 	add.w	r4, r4, #20
   d8824:	f1c4 0220 	rsb	r2, r4, #32
   d8828:	fa20 f004 	lsr.w	r0, r0, r4
   d882c:	fa01 f302 	lsl.w	r3, r1, r2
   d8830:	ea40 0003 	orr.w	r0, r0, r3
   d8834:	fa21 f304 	lsr.w	r3, r1, r4
   d8838:	ea45 0103 	orr.w	r1, r5, r3
   d883c:	bd30      	pop	{r4, r5, pc}
   d883e:	f1c4 040c 	rsb	r4, r4, #12
   d8842:	f1c4 0220 	rsb	r2, r4, #32
   d8846:	fa20 f002 	lsr.w	r0, r0, r2
   d884a:	fa01 f304 	lsl.w	r3, r1, r4
   d884e:	ea40 0003 	orr.w	r0, r0, r3
   d8852:	4629      	mov	r1, r5
   d8854:	bd30      	pop	{r4, r5, pc}
   d8856:	fa21 f004 	lsr.w	r0, r1, r4
   d885a:	4629      	mov	r1, r5
   d885c:	bd30      	pop	{r4, r5, pc}
   d885e:	f094 0f00 	teq	r4, #0
   d8862:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8866:	bf06      	itte	eq
   d8868:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d886c:	3401      	addeq	r4, #1
   d886e:	3d01      	subne	r5, #1
   d8870:	e74e      	b.n	d8710 <__adddf3+0x8c>
   d8872:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8876:	bf18      	it	ne
   d8878:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d887c:	d029      	beq.n	d88d2 <__adddf3+0x24e>
   d887e:	ea94 0f05 	teq	r4, r5
   d8882:	bf08      	it	eq
   d8884:	ea90 0f02 	teqeq	r0, r2
   d8888:	d005      	beq.n	d8896 <__adddf3+0x212>
   d888a:	ea54 0c00 	orrs.w	ip, r4, r0
   d888e:	bf04      	itt	eq
   d8890:	4619      	moveq	r1, r3
   d8892:	4610      	moveq	r0, r2
   d8894:	bd30      	pop	{r4, r5, pc}
   d8896:	ea91 0f03 	teq	r1, r3
   d889a:	bf1e      	ittt	ne
   d889c:	2100      	movne	r1, #0
   d889e:	2000      	movne	r0, #0
   d88a0:	bd30      	popne	{r4, r5, pc}
   d88a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d88a6:	d105      	bne.n	d88b4 <__adddf3+0x230>
   d88a8:	0040      	lsls	r0, r0, #1
   d88aa:	4149      	adcs	r1, r1
   d88ac:	bf28      	it	cs
   d88ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d88b2:	bd30      	pop	{r4, r5, pc}
   d88b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d88b8:	bf3c      	itt	cc
   d88ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d88be:	bd30      	popcc	{r4, r5, pc}
   d88c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d88c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d88c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d88cc:	f04f 0000 	mov.w	r0, #0
   d88d0:	bd30      	pop	{r4, r5, pc}
   d88d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d88d6:	bf1a      	itte	ne
   d88d8:	4619      	movne	r1, r3
   d88da:	4610      	movne	r0, r2
   d88dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d88e0:	bf1c      	itt	ne
   d88e2:	460b      	movne	r3, r1
   d88e4:	4602      	movne	r2, r0
   d88e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d88ea:	bf06      	itte	eq
   d88ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d88f0:	ea91 0f03 	teqeq	r1, r3
   d88f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d88f8:	bd30      	pop	{r4, r5, pc}
   d88fa:	bf00      	nop

000d88fc <__aeabi_ui2d>:
   d88fc:	f090 0f00 	teq	r0, #0
   d8900:	bf04      	itt	eq
   d8902:	2100      	moveq	r1, #0
   d8904:	4770      	bxeq	lr
   d8906:	b530      	push	{r4, r5, lr}
   d8908:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d890c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8910:	f04f 0500 	mov.w	r5, #0
   d8914:	f04f 0100 	mov.w	r1, #0
   d8918:	e750      	b.n	d87bc <__adddf3+0x138>
   d891a:	bf00      	nop

000d891c <__aeabi_i2d>:
   d891c:	f090 0f00 	teq	r0, #0
   d8920:	bf04      	itt	eq
   d8922:	2100      	moveq	r1, #0
   d8924:	4770      	bxeq	lr
   d8926:	b530      	push	{r4, r5, lr}
   d8928:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d892c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8930:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8934:	bf48      	it	mi
   d8936:	4240      	negmi	r0, r0
   d8938:	f04f 0100 	mov.w	r1, #0
   d893c:	e73e      	b.n	d87bc <__adddf3+0x138>
   d893e:	bf00      	nop

000d8940 <__aeabi_f2d>:
   d8940:	0042      	lsls	r2, r0, #1
   d8942:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8946:	ea4f 0131 	mov.w	r1, r1, rrx
   d894a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d894e:	bf1f      	itttt	ne
   d8950:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8954:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8958:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d895c:	4770      	bxne	lr
   d895e:	f092 0f00 	teq	r2, #0
   d8962:	bf14      	ite	ne
   d8964:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8968:	4770      	bxeq	lr
   d896a:	b530      	push	{r4, r5, lr}
   d896c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8970:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8974:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8978:	e720      	b.n	d87bc <__adddf3+0x138>
   d897a:	bf00      	nop

000d897c <__aeabi_ul2d>:
   d897c:	ea50 0201 	orrs.w	r2, r0, r1
   d8980:	bf08      	it	eq
   d8982:	4770      	bxeq	lr
   d8984:	b530      	push	{r4, r5, lr}
   d8986:	f04f 0500 	mov.w	r5, #0
   d898a:	e00a      	b.n	d89a2 <__aeabi_l2d+0x16>

000d898c <__aeabi_l2d>:
   d898c:	ea50 0201 	orrs.w	r2, r0, r1
   d8990:	bf08      	it	eq
   d8992:	4770      	bxeq	lr
   d8994:	b530      	push	{r4, r5, lr}
   d8996:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d899a:	d502      	bpl.n	d89a2 <__aeabi_l2d+0x16>
   d899c:	4240      	negs	r0, r0
   d899e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d89ae:	f43f aedc 	beq.w	d876a <__adddf3+0xe6>
   d89b2:	f04f 0203 	mov.w	r2, #3
   d89b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89ba:	bf18      	it	ne
   d89bc:	3203      	addne	r2, #3
   d89be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89c2:	bf18      	it	ne
   d89c4:	3203      	addne	r2, #3
   d89c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d89ca:	f1c2 0320 	rsb	r3, r2, #32
   d89ce:	fa00 fc03 	lsl.w	ip, r0, r3
   d89d2:	fa20 f002 	lsr.w	r0, r0, r2
   d89d6:	fa01 fe03 	lsl.w	lr, r1, r3
   d89da:	ea40 000e 	orr.w	r0, r0, lr
   d89de:	fa21 f102 	lsr.w	r1, r1, r2
   d89e2:	4414      	add	r4, r2
   d89e4:	e6c1      	b.n	d876a <__adddf3+0xe6>
   d89e6:	bf00      	nop

000d89e8 <__aeabi_dmul>:
   d89e8:	b570      	push	{r4, r5, r6, lr}
   d89ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d89ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d89f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d89f6:	bf1d      	ittte	ne
   d89f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d89fc:	ea94 0f0c 	teqne	r4, ip
   d8a00:	ea95 0f0c 	teqne	r5, ip
   d8a04:	f000 f8de 	bleq	d8bc4 <__aeabi_dmul+0x1dc>
   d8a08:	442c      	add	r4, r5
   d8a0a:	ea81 0603 	eor.w	r6, r1, r3
   d8a0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8a12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8a16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8a1a:	bf18      	it	ne
   d8a1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8a28:	d038      	beq.n	d8a9c <__aeabi_dmul+0xb4>
   d8a2a:	fba0 ce02 	umull	ip, lr, r0, r2
   d8a2e:	f04f 0500 	mov.w	r5, #0
   d8a32:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8a36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8a3a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8a3e:	f04f 0600 	mov.w	r6, #0
   d8a42:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8a46:	f09c 0f00 	teq	ip, #0
   d8a4a:	bf18      	it	ne
   d8a4c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8a50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8a54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8a58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8a5c:	d204      	bcs.n	d8a68 <__aeabi_dmul+0x80>
   d8a5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8a62:	416d      	adcs	r5, r5
   d8a64:	eb46 0606 	adc.w	r6, r6, r6
   d8a68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8a6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8a70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8a74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8a78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8a7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8a80:	bf88      	it	hi
   d8a82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8a86:	d81e      	bhi.n	d8ac6 <__aeabi_dmul+0xde>
   d8a88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8a8c:	bf08      	it	eq
   d8a8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8a92:	f150 0000 	adcs.w	r0, r0, #0
   d8a96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a9a:	bd70      	pop	{r4, r5, r6, pc}
   d8a9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8aa0:	ea46 0101 	orr.w	r1, r6, r1
   d8aa4:	ea40 0002 	orr.w	r0, r0, r2
   d8aa8:	ea81 0103 	eor.w	r1, r1, r3
   d8aac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8ab0:	bfc2      	ittt	gt
   d8ab2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8ab6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8aba:	bd70      	popgt	{r4, r5, r6, pc}
   d8abc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8ac0:	f04f 0e00 	mov.w	lr, #0
   d8ac4:	3c01      	subs	r4, #1
   d8ac6:	f300 80ab 	bgt.w	d8c20 <__aeabi_dmul+0x238>
   d8aca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8ace:	bfde      	ittt	le
   d8ad0:	2000      	movle	r0, #0
   d8ad2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8ad6:	bd70      	pople	{r4, r5, r6, pc}
   d8ad8:	f1c4 0400 	rsb	r4, r4, #0
   d8adc:	3c20      	subs	r4, #32
   d8ade:	da35      	bge.n	d8b4c <__aeabi_dmul+0x164>
   d8ae0:	340c      	adds	r4, #12
   d8ae2:	dc1b      	bgt.n	d8b1c <__aeabi_dmul+0x134>
   d8ae4:	f104 0414 	add.w	r4, r4, #20
   d8ae8:	f1c4 0520 	rsb	r5, r4, #32
   d8aec:	fa00 f305 	lsl.w	r3, r0, r5
   d8af0:	fa20 f004 	lsr.w	r0, r0, r4
   d8af4:	fa01 f205 	lsl.w	r2, r1, r5
   d8af8:	ea40 0002 	orr.w	r0, r0, r2
   d8afc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8b00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b08:	fa21 f604 	lsr.w	r6, r1, r4
   d8b0c:	eb42 0106 	adc.w	r1, r2, r6
   d8b10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b14:	bf08      	it	eq
   d8b16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b1a:	bd70      	pop	{r4, r5, r6, pc}
   d8b1c:	f1c4 040c 	rsb	r4, r4, #12
   d8b20:	f1c4 0520 	rsb	r5, r4, #32
   d8b24:	fa00 f304 	lsl.w	r3, r0, r4
   d8b28:	fa20 f005 	lsr.w	r0, r0, r5
   d8b2c:	fa01 f204 	lsl.w	r2, r1, r4
   d8b30:	ea40 0002 	orr.w	r0, r0, r2
   d8b34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b3c:	f141 0100 	adc.w	r1, r1, #0
   d8b40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b44:	bf08      	it	eq
   d8b46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b4a:	bd70      	pop	{r4, r5, r6, pc}
   d8b4c:	f1c4 0520 	rsb	r5, r4, #32
   d8b50:	fa00 f205 	lsl.w	r2, r0, r5
   d8b54:	ea4e 0e02 	orr.w	lr, lr, r2
   d8b58:	fa20 f304 	lsr.w	r3, r0, r4
   d8b5c:	fa01 f205 	lsl.w	r2, r1, r5
   d8b60:	ea43 0302 	orr.w	r3, r3, r2
   d8b64:	fa21 f004 	lsr.w	r0, r1, r4
   d8b68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b6c:	fa21 f204 	lsr.w	r2, r1, r4
   d8b70:	ea20 0002 	bic.w	r0, r0, r2
   d8b74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8b78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b7c:	bf08      	it	eq
   d8b7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b82:	bd70      	pop	{r4, r5, r6, pc}
   d8b84:	f094 0f00 	teq	r4, #0
   d8b88:	d10f      	bne.n	d8baa <__aeabi_dmul+0x1c2>
   d8b8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8b8e:	0040      	lsls	r0, r0, #1
   d8b90:	eb41 0101 	adc.w	r1, r1, r1
   d8b94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8b98:	bf08      	it	eq
   d8b9a:	3c01      	subeq	r4, #1
   d8b9c:	d0f7      	beq.n	d8b8e <__aeabi_dmul+0x1a6>
   d8b9e:	ea41 0106 	orr.w	r1, r1, r6
   d8ba2:	f095 0f00 	teq	r5, #0
   d8ba6:	bf18      	it	ne
   d8ba8:	4770      	bxne	lr
   d8baa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8bae:	0052      	lsls	r2, r2, #1
   d8bb0:	eb43 0303 	adc.w	r3, r3, r3
   d8bb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8bb8:	bf08      	it	eq
   d8bba:	3d01      	subeq	r5, #1
   d8bbc:	d0f7      	beq.n	d8bae <__aeabi_dmul+0x1c6>
   d8bbe:	ea43 0306 	orr.w	r3, r3, r6
   d8bc2:	4770      	bx	lr
   d8bc4:	ea94 0f0c 	teq	r4, ip
   d8bc8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8bcc:	bf18      	it	ne
   d8bce:	ea95 0f0c 	teqne	r5, ip
   d8bd2:	d00c      	beq.n	d8bee <__aeabi_dmul+0x206>
   d8bd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8bd8:	bf18      	it	ne
   d8bda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8bde:	d1d1      	bne.n	d8b84 <__aeabi_dmul+0x19c>
   d8be0:	ea81 0103 	eor.w	r1, r1, r3
   d8be4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8be8:	f04f 0000 	mov.w	r0, #0
   d8bec:	bd70      	pop	{r4, r5, r6, pc}
   d8bee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8bf2:	bf06      	itte	eq
   d8bf4:	4610      	moveq	r0, r2
   d8bf6:	4619      	moveq	r1, r3
   d8bf8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8bfc:	d019      	beq.n	d8c32 <__aeabi_dmul+0x24a>
   d8bfe:	ea94 0f0c 	teq	r4, ip
   d8c02:	d102      	bne.n	d8c0a <__aeabi_dmul+0x222>
   d8c04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8c08:	d113      	bne.n	d8c32 <__aeabi_dmul+0x24a>
   d8c0a:	ea95 0f0c 	teq	r5, ip
   d8c0e:	d105      	bne.n	d8c1c <__aeabi_dmul+0x234>
   d8c10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8c14:	bf1c      	itt	ne
   d8c16:	4610      	movne	r0, r2
   d8c18:	4619      	movne	r1, r3
   d8c1a:	d10a      	bne.n	d8c32 <__aeabi_dmul+0x24a>
   d8c1c:	ea81 0103 	eor.w	r1, r1, r3
   d8c20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8c2c:	f04f 0000 	mov.w	r0, #0
   d8c30:	bd70      	pop	{r4, r5, r6, pc}
   d8c32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8c3a:	bd70      	pop	{r4, r5, r6, pc}

000d8c3c <__aeabi_ddiv>:
   d8c3c:	b570      	push	{r4, r5, r6, lr}
   d8c3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8c46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8c4a:	bf1d      	ittte	ne
   d8c4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8c50:	ea94 0f0c 	teqne	r4, ip
   d8c54:	ea95 0f0c 	teqne	r5, ip
   d8c58:	f000 f8a7 	bleq	d8daa <__aeabi_ddiv+0x16e>
   d8c5c:	eba4 0405 	sub.w	r4, r4, r5
   d8c60:	ea81 0e03 	eor.w	lr, r1, r3
   d8c64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8c68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8c6c:	f000 8088 	beq.w	d8d80 <__aeabi_ddiv+0x144>
   d8c70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8c74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8c78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8c7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8c80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8c84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8c88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8c8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8c90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8c94:	429d      	cmp	r5, r3
   d8c96:	bf08      	it	eq
   d8c98:	4296      	cmpeq	r6, r2
   d8c9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8c9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8ca2:	d202      	bcs.n	d8caa <__aeabi_ddiv+0x6e>
   d8ca4:	085b      	lsrs	r3, r3, #1
   d8ca6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8caa:	1ab6      	subs	r6, r6, r2
   d8cac:	eb65 0503 	sbc.w	r5, r5, r3
   d8cb0:	085b      	lsrs	r3, r3, #1
   d8cb2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8cba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8cbe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cc6:	bf22      	ittt	cs
   d8cc8:	1ab6      	subcs	r6, r6, r2
   d8cca:	4675      	movcs	r5, lr
   d8ccc:	ea40 000c 	orrcs.w	r0, r0, ip
   d8cd0:	085b      	lsrs	r3, r3, #1
   d8cd2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cd6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cda:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cde:	bf22      	ittt	cs
   d8ce0:	1ab6      	subcs	r6, r6, r2
   d8ce2:	4675      	movcs	r5, lr
   d8ce4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8ce8:	085b      	lsrs	r3, r3, #1
   d8cea:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cee:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cf6:	bf22      	ittt	cs
   d8cf8:	1ab6      	subcs	r6, r6, r2
   d8cfa:	4675      	movcs	r5, lr
   d8cfc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8d00:	085b      	lsrs	r3, r3, #1
   d8d02:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d06:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d0e:	bf22      	ittt	cs
   d8d10:	1ab6      	subcs	r6, r6, r2
   d8d12:	4675      	movcs	r5, lr
   d8d14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8d18:	ea55 0e06 	orrs.w	lr, r5, r6
   d8d1c:	d018      	beq.n	d8d50 <__aeabi_ddiv+0x114>
   d8d1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8d22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8d26:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8d2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8d2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8d32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8d36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8d3a:	d1c0      	bne.n	d8cbe <__aeabi_ddiv+0x82>
   d8d3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d40:	d10b      	bne.n	d8d5a <__aeabi_ddiv+0x11e>
   d8d42:	ea41 0100 	orr.w	r1, r1, r0
   d8d46:	f04f 0000 	mov.w	r0, #0
   d8d4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8d4e:	e7b6      	b.n	d8cbe <__aeabi_ddiv+0x82>
   d8d50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d54:	bf04      	itt	eq
   d8d56:	4301      	orreq	r1, r0
   d8d58:	2000      	moveq	r0, #0
   d8d5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8d5e:	bf88      	it	hi
   d8d60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8d64:	f63f aeaf 	bhi.w	d8ac6 <__aeabi_dmul+0xde>
   d8d68:	ebb5 0c03 	subs.w	ip, r5, r3
   d8d6c:	bf04      	itt	eq
   d8d6e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8d72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8d76:	f150 0000 	adcs.w	r0, r0, #0
   d8d7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8d7e:	bd70      	pop	{r4, r5, r6, pc}
   d8d80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8d84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8d88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8d8c:	bfc2      	ittt	gt
   d8d8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8d92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8d96:	bd70      	popgt	{r4, r5, r6, pc}
   d8d98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d9c:	f04f 0e00 	mov.w	lr, #0
   d8da0:	3c01      	subs	r4, #1
   d8da2:	e690      	b.n	d8ac6 <__aeabi_dmul+0xde>
   d8da4:	ea45 0e06 	orr.w	lr, r5, r6
   d8da8:	e68d      	b.n	d8ac6 <__aeabi_dmul+0xde>
   d8daa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8dae:	ea94 0f0c 	teq	r4, ip
   d8db2:	bf08      	it	eq
   d8db4:	ea95 0f0c 	teqeq	r5, ip
   d8db8:	f43f af3b 	beq.w	d8c32 <__aeabi_dmul+0x24a>
   d8dbc:	ea94 0f0c 	teq	r4, ip
   d8dc0:	d10a      	bne.n	d8dd8 <__aeabi_ddiv+0x19c>
   d8dc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8dc6:	f47f af34 	bne.w	d8c32 <__aeabi_dmul+0x24a>
   d8dca:	ea95 0f0c 	teq	r5, ip
   d8dce:	f47f af25 	bne.w	d8c1c <__aeabi_dmul+0x234>
   d8dd2:	4610      	mov	r0, r2
   d8dd4:	4619      	mov	r1, r3
   d8dd6:	e72c      	b.n	d8c32 <__aeabi_dmul+0x24a>
   d8dd8:	ea95 0f0c 	teq	r5, ip
   d8ddc:	d106      	bne.n	d8dec <__aeabi_ddiv+0x1b0>
   d8dde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8de2:	f43f aefd 	beq.w	d8be0 <__aeabi_dmul+0x1f8>
   d8de6:	4610      	mov	r0, r2
   d8de8:	4619      	mov	r1, r3
   d8dea:	e722      	b.n	d8c32 <__aeabi_dmul+0x24a>
   d8dec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8df0:	bf18      	it	ne
   d8df2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8df6:	f47f aec5 	bne.w	d8b84 <__aeabi_dmul+0x19c>
   d8dfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8dfe:	f47f af0d 	bne.w	d8c1c <__aeabi_dmul+0x234>
   d8e02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8e06:	f47f aeeb 	bne.w	d8be0 <__aeabi_dmul+0x1f8>
   d8e0a:	e712      	b.n	d8c32 <__aeabi_dmul+0x24a>

000d8e0c <__gedf2>:
   d8e0c:	f04f 3cff 	mov.w	ip, #4294967295
   d8e10:	e006      	b.n	d8e20 <__cmpdf2+0x4>
   d8e12:	bf00      	nop

000d8e14 <__ledf2>:
   d8e14:	f04f 0c01 	mov.w	ip, #1
   d8e18:	e002      	b.n	d8e20 <__cmpdf2+0x4>
   d8e1a:	bf00      	nop

000d8e1c <__cmpdf2>:
   d8e1c:	f04f 0c01 	mov.w	ip, #1
   d8e20:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8e24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e30:	bf18      	it	ne
   d8e32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8e36:	d01b      	beq.n	d8e70 <__cmpdf2+0x54>
   d8e38:	b001      	add	sp, #4
   d8e3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8e3e:	bf0c      	ite	eq
   d8e40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8e44:	ea91 0f03 	teqne	r1, r3
   d8e48:	bf02      	ittt	eq
   d8e4a:	ea90 0f02 	teqeq	r0, r2
   d8e4e:	2000      	moveq	r0, #0
   d8e50:	4770      	bxeq	lr
   d8e52:	f110 0f00 	cmn.w	r0, #0
   d8e56:	ea91 0f03 	teq	r1, r3
   d8e5a:	bf58      	it	pl
   d8e5c:	4299      	cmppl	r1, r3
   d8e5e:	bf08      	it	eq
   d8e60:	4290      	cmpeq	r0, r2
   d8e62:	bf2c      	ite	cs
   d8e64:	17d8      	asrcs	r0, r3, #31
   d8e66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8e6a:	f040 0001 	orr.w	r0, r0, #1
   d8e6e:	4770      	bx	lr
   d8e70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e78:	d102      	bne.n	d8e80 <__cmpdf2+0x64>
   d8e7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8e7e:	d107      	bne.n	d8e90 <__cmpdf2+0x74>
   d8e80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e88:	d1d6      	bne.n	d8e38 <__cmpdf2+0x1c>
   d8e8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8e8e:	d0d3      	beq.n	d8e38 <__cmpdf2+0x1c>
   d8e90:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8e94:	4770      	bx	lr
   d8e96:	bf00      	nop

000d8e98 <__aeabi_cdrcmple>:
   d8e98:	4684      	mov	ip, r0
   d8e9a:	4610      	mov	r0, r2
   d8e9c:	4662      	mov	r2, ip
   d8e9e:	468c      	mov	ip, r1
   d8ea0:	4619      	mov	r1, r3
   d8ea2:	4663      	mov	r3, ip
   d8ea4:	e000      	b.n	d8ea8 <__aeabi_cdcmpeq>
   d8ea6:	bf00      	nop

000d8ea8 <__aeabi_cdcmpeq>:
   d8ea8:	b501      	push	{r0, lr}
   d8eaa:	f7ff ffb7 	bl	d8e1c <__cmpdf2>
   d8eae:	2800      	cmp	r0, #0
   d8eb0:	bf48      	it	mi
   d8eb2:	f110 0f00 	cmnmi.w	r0, #0
   d8eb6:	bd01      	pop	{r0, pc}

000d8eb8 <__aeabi_dcmpeq>:
   d8eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ebc:	f7ff fff4 	bl	d8ea8 <__aeabi_cdcmpeq>
   d8ec0:	bf0c      	ite	eq
   d8ec2:	2001      	moveq	r0, #1
   d8ec4:	2000      	movne	r0, #0
   d8ec6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8eca:	bf00      	nop

000d8ecc <__aeabi_dcmplt>:
   d8ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ed0:	f7ff ffea 	bl	d8ea8 <__aeabi_cdcmpeq>
   d8ed4:	bf34      	ite	cc
   d8ed6:	2001      	movcc	r0, #1
   d8ed8:	2000      	movcs	r0, #0
   d8eda:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ede:	bf00      	nop

000d8ee0 <__aeabi_dcmple>:
   d8ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ee4:	f7ff ffe0 	bl	d8ea8 <__aeabi_cdcmpeq>
   d8ee8:	bf94      	ite	ls
   d8eea:	2001      	movls	r0, #1
   d8eec:	2000      	movhi	r0, #0
   d8eee:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ef2:	bf00      	nop

000d8ef4 <__aeabi_dcmpge>:
   d8ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ef8:	f7ff ffce 	bl	d8e98 <__aeabi_cdrcmple>
   d8efc:	bf94      	ite	ls
   d8efe:	2001      	movls	r0, #1
   d8f00:	2000      	movhi	r0, #0
   d8f02:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f06:	bf00      	nop

000d8f08 <__aeabi_dcmpgt>:
   d8f08:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f0c:	f7ff ffc4 	bl	d8e98 <__aeabi_cdrcmple>
   d8f10:	bf34      	ite	cc
   d8f12:	2001      	movcc	r0, #1
   d8f14:	2000      	movcs	r0, #0
   d8f16:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f1a:	bf00      	nop

000d8f1c <__aeabi_dcmpun>:
   d8f1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f24:	d102      	bne.n	d8f2c <__aeabi_dcmpun+0x10>
   d8f26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8f2a:	d10a      	bne.n	d8f42 <__aeabi_dcmpun+0x26>
   d8f2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f34:	d102      	bne.n	d8f3c <__aeabi_dcmpun+0x20>
   d8f36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8f3a:	d102      	bne.n	d8f42 <__aeabi_dcmpun+0x26>
   d8f3c:	f04f 0000 	mov.w	r0, #0
   d8f40:	4770      	bx	lr
   d8f42:	f04f 0001 	mov.w	r0, #1
   d8f46:	4770      	bx	lr

000d8f48 <__aeabi_d2iz>:
   d8f48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8f4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8f50:	d215      	bcs.n	d8f7e <__aeabi_d2iz+0x36>
   d8f52:	d511      	bpl.n	d8f78 <__aeabi_d2iz+0x30>
   d8f54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8f58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8f5c:	d912      	bls.n	d8f84 <__aeabi_d2iz+0x3c>
   d8f5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8f66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8f6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8f6e:	fa23 f002 	lsr.w	r0, r3, r2
   d8f72:	bf18      	it	ne
   d8f74:	4240      	negne	r0, r0
   d8f76:	4770      	bx	lr
   d8f78:	f04f 0000 	mov.w	r0, #0
   d8f7c:	4770      	bx	lr
   d8f7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8f82:	d105      	bne.n	d8f90 <__aeabi_d2iz+0x48>
   d8f84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8f88:	bf08      	it	eq
   d8f8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8f8e:	4770      	bx	lr
   d8f90:	f04f 0000 	mov.w	r0, #0
   d8f94:	4770      	bx	lr
   d8f96:	bf00      	nop

000d8f98 <__aeabi_d2f>:
   d8f98:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8f9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8fa0:	bf24      	itt	cs
   d8fa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8fa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8faa:	d90d      	bls.n	d8fc8 <__aeabi_d2f+0x30>
   d8fac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8fb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8fb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8fb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8fbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8fc0:	bf08      	it	eq
   d8fc2:	f020 0001 	biceq.w	r0, r0, #1
   d8fc6:	4770      	bx	lr
   d8fc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8fcc:	d121      	bne.n	d9012 <__aeabi_d2f+0x7a>
   d8fce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8fd2:	bfbc      	itt	lt
   d8fd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8fd8:	4770      	bxlt	lr
   d8fda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8fde:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8fe2:	f1c2 0218 	rsb	r2, r2, #24
   d8fe6:	f1c2 0c20 	rsb	ip, r2, #32
   d8fea:	fa10 f30c 	lsls.w	r3, r0, ip
   d8fee:	fa20 f002 	lsr.w	r0, r0, r2
   d8ff2:	bf18      	it	ne
   d8ff4:	f040 0001 	orrne.w	r0, r0, #1
   d8ff8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8ffc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9000:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9004:	ea40 000c 	orr.w	r0, r0, ip
   d9008:	fa23 f302 	lsr.w	r3, r3, r2
   d900c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9010:	e7cc      	b.n	d8fac <__aeabi_d2f+0x14>
   d9012:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9016:	d107      	bne.n	d9028 <__aeabi_d2f+0x90>
   d9018:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d901c:	bf1e      	ittt	ne
   d901e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9022:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9026:	4770      	bxne	lr
   d9028:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d902c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9030:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9034:	4770      	bx	lr
   d9036:	bf00      	nop

000d9038 <__cxa_atexit>:
   d9038:	b510      	push	{r4, lr}
   d903a:	4c05      	ldr	r4, [pc, #20]	; (d9050 <__cxa_atexit+0x18>)
   d903c:	4613      	mov	r3, r2
   d903e:	b12c      	cbz	r4, d904c <__cxa_atexit+0x14>
   d9040:	460a      	mov	r2, r1
   d9042:	4601      	mov	r1, r0
   d9044:	2002      	movs	r0, #2
   d9046:	f3af 8000 	nop.w
   d904a:	bd10      	pop	{r4, pc}
   d904c:	4620      	mov	r0, r4
   d904e:	bd10      	pop	{r4, pc}
   d9050:	00000000 	.word	0x00000000

000d9054 <memcmp>:
   d9054:	b510      	push	{r4, lr}
   d9056:	3901      	subs	r1, #1
   d9058:	4402      	add	r2, r0
   d905a:	4290      	cmp	r0, r2
   d905c:	d007      	beq.n	d906e <memcmp+0x1a>
   d905e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9062:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9066:	42a3      	cmp	r3, r4
   d9068:	d0f7      	beq.n	d905a <memcmp+0x6>
   d906a:	1b18      	subs	r0, r3, r4
   d906c:	bd10      	pop	{r4, pc}
   d906e:	2000      	movs	r0, #0
   d9070:	bd10      	pop	{r4, pc}

000d9072 <memcpy>:
   d9072:	b510      	push	{r4, lr}
   d9074:	1e43      	subs	r3, r0, #1
   d9076:	440a      	add	r2, r1
   d9078:	4291      	cmp	r1, r2
   d907a:	d004      	beq.n	d9086 <memcpy+0x14>
   d907c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9080:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9084:	e7f8      	b.n	d9078 <memcpy+0x6>
   d9086:	bd10      	pop	{r4, pc}

000d9088 <memset>:
   d9088:	4402      	add	r2, r0
   d908a:	4603      	mov	r3, r0
   d908c:	4293      	cmp	r3, r2
   d908e:	d002      	beq.n	d9096 <memset+0xe>
   d9090:	f803 1b01 	strb.w	r1, [r3], #1
   d9094:	e7fa      	b.n	d908c <memset+0x4>
   d9096:	4770      	bx	lr

000d9098 <srand>:
   d9098:	b538      	push	{r3, r4, r5, lr}
   d909a:	4b12      	ldr	r3, [pc, #72]	; (d90e4 <srand+0x4c>)
   d909c:	681c      	ldr	r4, [r3, #0]
   d909e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d90a0:	4605      	mov	r5, r0
   d90a2:	b9d3      	cbnz	r3, d90da <srand+0x42>
   d90a4:	2018      	movs	r0, #24
   d90a6:	f7fd fe15 	bl	d6cd4 <malloc>
   d90aa:	f243 330e 	movw	r3, #13070	; 0x330e
   d90ae:	63a0      	str	r0, [r4, #56]	; 0x38
   d90b0:	8003      	strh	r3, [r0, #0]
   d90b2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d90b6:	8043      	strh	r3, [r0, #2]
   d90b8:	f241 2334 	movw	r3, #4660	; 0x1234
   d90bc:	8083      	strh	r3, [r0, #4]
   d90be:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d90c2:	80c3      	strh	r3, [r0, #6]
   d90c4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d90c8:	8103      	strh	r3, [r0, #8]
   d90ca:	2305      	movs	r3, #5
   d90cc:	8143      	strh	r3, [r0, #10]
   d90ce:	230b      	movs	r3, #11
   d90d0:	8183      	strh	r3, [r0, #12]
   d90d2:	2201      	movs	r2, #1
   d90d4:	2300      	movs	r3, #0
   d90d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d90da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d90dc:	2200      	movs	r2, #0
   d90de:	611d      	str	r5, [r3, #16]
   d90e0:	615a      	str	r2, [r3, #20]
   d90e2:	bd38      	pop	{r3, r4, r5, pc}
   d90e4:	2003be88 	.word	0x2003be88

000d90e8 <strdup>:
   d90e8:	4b02      	ldr	r3, [pc, #8]	; (d90f4 <strdup+0xc>)
   d90ea:	4601      	mov	r1, r0
   d90ec:	6818      	ldr	r0, [r3, #0]
   d90ee:	f000 b803 	b.w	d90f8 <_strdup_r>
   d90f2:	bf00      	nop
   d90f4:	2003be88 	.word	0x2003be88

000d90f8 <_strdup_r>:
   d90f8:	b570      	push	{r4, r5, r6, lr}
   d90fa:	4606      	mov	r6, r0
   d90fc:	4608      	mov	r0, r1
   d90fe:	460c      	mov	r4, r1
   d9100:	f000 f80d 	bl	d911e <strlen>
   d9104:	1c45      	adds	r5, r0, #1
   d9106:	4629      	mov	r1, r5
   d9108:	4630      	mov	r0, r6
   d910a:	f7fd fe03 	bl	d6d14 <_malloc_r>
   d910e:	4606      	mov	r6, r0
   d9110:	b118      	cbz	r0, d911a <_strdup_r+0x22>
   d9112:	462a      	mov	r2, r5
   d9114:	4621      	mov	r1, r4
   d9116:	f7ff ffac 	bl	d9072 <memcpy>
   d911a:	4630      	mov	r0, r6
   d911c:	bd70      	pop	{r4, r5, r6, pc}

000d911e <strlen>:
   d911e:	4603      	mov	r3, r0
   d9120:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9124:	2a00      	cmp	r2, #0
   d9126:	d1fb      	bne.n	d9120 <strlen+0x2>
   d9128:	1a18      	subs	r0, r3, r0
   d912a:	3801      	subs	r0, #1
   d912c:	4770      	bx	lr

000d912e <link_code_end>:
	...

000d9130 <dynalib_user>:
   d9130:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9140:	0000 0000                                   ....

000d9144 <_ZTVN8particle13__SPISettingsE>:
	...
   d914c:	40b9 000d                                   .@..

000d9150 <_ZTV6SdFile>:
	...
   d9158:	40b7 000d 4117 000d 414f 000d 4111 000d     .@...A..OA...A..

000d9168 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d9170:	4125 000d 4139 000d 6564 6166 6c75 2074     %A..9A..default 
   d9180:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   d9190:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   d91a0:	5053 5349 7465 6974 676e 2073 7325 6c25     SPISettings %s%l
   d91b0:	2075 7325 4d20 444f 2545 3e64 6d00 6369     u %s MODE%d>.mic
   d91c0:	2031 203d 6925 7c20 6d20 6369 2032 203d     1 = %i | mic2 = 
   d91d0:	6925 7c20 6d20 6369 2033 203d 6925 7c20     %i | mic3 = %i |
   d91e0:	5420 6d69 2065 203d 6925 000a 6177 7469      Time = %i..wait
   d91f0:	6e69 2067 6f66 2072 6f73 6e75 0064 3154     ing for sound.T1
   d9200:	3d20 2520 2069 207c 3254 3d20 2520 2069      = %i | T2 = %i 
   d9210:	207c 3354 3d20 2520 0a69 4300 6e61 7427     | T3 = %i..Can't
   d9220:	6120 6363 7365 2073 4453 6320 7261 2e64      access SD card.
   d9230:	4420 206f 6f6e 2074 6572 6f66 6d72 7461      Do not reformat
   d9240:	002e 6f4e 6320 7261 2c64 7720 6f72 676e     ..No card, wrong
   d9250:	6320 6968 2070 6573 656c 7463 7020 6e69      chip select pin
   d9260:	202c 726f 5320 4950 7020 6f72 6c62 6d65     , or SPI problem
   d9270:	003f 4453 6520 7272 726f 6f43 6564 203a     ?.SD errorCode: 
   d9280:	5830 2c00 5830 4900 766e 6c61 6469 6620     0X.,0X.Invalid f
   d9290:	726f 616d 2c74 7220 6665 726f 616d 2074     ormat, reformat 
   d92a0:	4453 002e 6143 276e 2074 706f 6e65 7220     SD..Can't open r
   d92b0:	6f6f 2074 6964 6572 7463 726f 2e79 4e00     oot directory..N
   d92c0:	206f 7265 6f72 2072 6f66 6e75 2e64 4100     o error found..A
   d92d0:	3d20 2520 2e30 6636 7c20 4220 3d20 2520      = %0.6f | B = %
   d92e0:	2e30 6636 000a 2054 203d 3025 322e 0a66     0.6f..T = %0.2f.
   d92f0:	5800 3d20 2520 2e30 6632 7c20 5920 3d20     .X = %0.2f | Y =
   d9300:	2520 2e30 6632 000a 2061 203d 3025 322e      %0.2f..a = %0.2
   d9310:	2066 207c 2062 203d 3025 322e 2066 207c     f | b = %0.2f | 
   d9320:	2063 203d 3025 322e 0a66 5300 6174 7472     c = %0.2f..Start
   d9330:	6e69 2067 6144 6174 4c20 676f 6967 676e     ing Data Logging
   d9340:	0a20 4300 6e61 7427 6320 6572 7461 2065      ..Can't create 
   d9350:	6966 656c 6e20 6d61 0065 6966 656c 6f2e     file name.file.o
   d9360:	6570 006e 6f4c 6767 6e69 2067 6f74 203a     pen.Logging to: 
   d9370:	7325 0a20 2500 2e30 6638 2c20 2520 2e30     %s ..%0.8f , %0.
   d9380:	6632 000a 6f44 656e 0a20 5200 6165 7964     2f..Done ..Ready
   d9390:	6620 726f 6e20 7865 2074 6164 6174 6c20      for next data l
   d93a0:	676f 0a20 4c00 6e6f 6967 7574 0064 614c     og ..Longitud.La
   d93b0:	6974 7574 6564 4e00 696f 6573 0000 0000     titude.Noise....
   d93c0:	c000 4001 1000 4002 2000 4002               ...@...@. .@

000d93cc <CSWTCH.65>:
   d93cc:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d93dc:	0050 0000                                   P...

000d93e0 <_ZTV10JsonBuffer>:
	...
   d93e8:	658d 000d 65a9 000d                         .e...e..

000d93f0 <_ZTV10JsonWriter>:
	...
   d93f8:	65bd 000d 65d1 000d 6425 2500 756c 2500     .e...e..%d.%lu.%
   d9408:	3430 0078 755c 3025 5834 7400 7572 0065     04x.\u%04X.true.
   d9418:	6166 736c 0065 2e25 662a 2500 0066 2e25     false.%.*f.%f.%.
   d9428:	6c2a 0066 6c25 0066                         *lf.%lf.

000d9430 <_ZTVN5spark13EthernetClassE>:
	...
   d9438:	6d93 000d 6d89 000d 6d7f 000d 6d75 000d     .m...m...m..um..
   d9448:	6d69 000d 6d5d 000d 6d51 000d 6d49 000d     im..]m..Qm..Im..
   d9458:	6d3f 000d 6d35 000d 7eed 000d               ?m..5m...~..

000d9464 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9464:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d9474:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d9484:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d9494:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d94a4:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d94b4:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d94c4:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d94d4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d94e4:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d94f4:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d9504:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d9514:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d9524:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d9534:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d9544:	6c61 006c 005a 2b25 3330 3a64 3025 7532     all.Z.%+03d:%02u
   d9554:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d9564:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d9574 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d957c:	7361 000d 7367 000d 73ab 000d 7375 000d     as..gs...s..us..
   d958c:	7363 000d                                   cs..

000d9590 <_ZTV9IPAddress>:
	...
   d9598:	78f9 000d 78e9 000d 78eb 000d               .x...x...x..

000d95a4 <_ZTV9USBSerial>:
	...
   d95ac:	79d1 000d 7a21 000d 7a2f 000d 7011 000d     .y..!z../z...p..
   d95bc:	7a0d 000d 79d3 000d 79e9 000d 7a1b 000d     .z...y...y...z..
   d95cc:	79ff 000d 79cd 000d                         .y...y..

000d95d4 <_ZTV11USARTSerial>:
	...
   d95dc:	7add 000d 7b2d 000d 7b3b 000d 7011 000d     .z..-{..;{...p..
   d95ec:	7af1 000d 7b13 000d 7aff 000d 7b27 000d     .z...{...z..'{..
   d95fc:	7adf 000d 7ae3 000d                         .z...z..

000d9604 <_ZTV7TwoWire>:
	...
   d960c:	7c09 000d 7c53 000d 7c2b 000d 7c0b 000d     .|..S|..+|...|..
   d961c:	7c33 000d 7c3b 000d 7c43 000d 7c4b 000d     3|..;|..C|..K|..

000d962c <_ZTVN5spark9MeshClassE>:
	...
   d9634:	7ceb 000d 7ce1 000d 7cd7 000d 7ccd 000d     .|...|...|...|..
   d9644:	7cc1 000d 7cb5 000d 7ca9 000d 7ca1 000d     .|...|...|...|..
   d9654:	7c97 000d 7c8d 000d 7eed 000d               .|...|...~..

000d9660 <_ZTVN5spark9WiFiClassE>:
	...
   d9668:	7e67 000d 7e5d 000d 7e53 000d 7e09 000d     g~..]~..S~...~..
   d9678:	7e47 000d 7e3b 000d 7e2f 000d 7e27 000d     G~..;~../~..'~..
   d9688:	7e1d 000d 7e13 000d 7eed 000d               .~...~...~..

000d9694 <_ZTVN5spark12NetworkClassE>:
	...
   d969c:	7e85 000d 7e8f 000d 7e99 000d 7ea3 000d     .~...~...~...~..
   d96ac:	7ead 000d 7eb9 000d 7ec5 000d 7ed1 000d     .~...~...~...~..
   d96bc:	7ed9 000d 7ee3 000d 7eed 000d               .~...~...~..

000d96c8 <_ZSt7nothrow>:
   d96c8:	0000 0000 7173 7472 0000 0000               ....sqrt....

000d96d4 <__sf_fake_stdin>:
	...

000d96f4 <__sf_fake_stdout>:
	...

000d9714 <__sf_fake_stderr>:
	...
   d9734:	0043                                        C.

000d9736 <link_const_variable_data_end>:
	...

000d9738 <link_constructors_location>:
   d9738:	000d4a0d 	.word	0x000d4a0d
   d973c:	000d4f5d 	.word	0x000d4f5d
   d9740:	000d4f71 	.word	0x000d4f71
   d9744:	000d4f75 	.word	0x000d4f75
   d9748:	000d559d 	.word	0x000d559d
   d974c:	000d55a1 	.word	0x000d55a1
   d9750:	000d55a5 	.word	0x000d55a5
   d9754:	000d55a9 	.word	0x000d55a9
   d9758:	000d5c4d 	.word	0x000d5c4d
   d975c:	000d5c71 	.word	0x000d5c71
   d9760:	000d5c75 	.word	0x000d5c75
   d9764:	000d5f99 	.word	0x000d5f99
   d9768:	000d5f9d 	.word	0x000d5f9d
   d976c:	000d5fa1 	.word	0x000d5fa1
   d9770:	000d64db 	.word	0x000d64db
   d9774:	000d64df 	.word	0x000d64df
   d9778:	000d64e3 	.word	0x000d64e3
   d977c:	000d6589 	.word	0x000d6589
   d9780:	000d6859 	.word	0x000d6859
   d9784:	000d6d9d 	.word	0x000d6d9d
   d9788:	000d6f5d 	.word	0x000d6f5d
   d978c:	000d6fe9 	.word	0x000d6fe9
   d9790:	000d7139 	.word	0x000d7139
   d9794:	000d7149 	.word	0x000d7149
   d9798:	000d7235 	.word	0x000d7235
   d979c:	000d7db9 	.word	0x000d7db9
   d97a0:	000d7e71 	.word	0x000d7e71
   d97a4:	000d7fb9 	.word	0x000d7fb9
   d97a8:	000d8185 	.word	0x000d8185
   d97ac:	000d8209 	.word	0x000d8209
   d97b0:	000d82cd 	.word	0x000d82cd
   d97b4:	000d8391 	.word	0x000d8391

000d97b8 <link_constructors_end>:
	...
