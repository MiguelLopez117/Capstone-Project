
c:/Users/User/Documents/IoT/Capstone-Project/Capstone_Project/target/1.5.2/argon/Capstone_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000045f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8610  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  2003de1c  000d8614  0001de1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000958  2003de98  2003de98  0002de98  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8690  000d8690  00028690  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d86b8  000d86b8  000286b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0019e446  00000000  00000000  000286bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001f949  00000000  00000000  001c6b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002c3bc  00000000  00000000  001e644b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e50  00000000  00000000  00212807  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005b18  00000000  00000000  00215657  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004dbea  00000000  00000000  0021b16f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00054697  00000000  00000000  00268d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001116b1  00000000  00000000  002bd3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ed2c  00000000  00000000  003ceaa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 ffdf 	bl	d7ff4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 ffe4 	bl	d800a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003de1c 	.word	0x2003de1c
   d404c:	000d8614 	.word	0x000d8614
   d4050:	2003de98 	.word	0x2003de98
   d4054:	2003de98 	.word	0x2003de98
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f923 	bl	d62a8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d860c 	.word	0x000d860c
   d4084:	000d858c 	.word	0x000d858c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b86e 	b.w	d4168 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb57 	bl	d4740 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b8c9 	b.w	d622c <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 be01 	b.w	d5ca0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 be07 	b.w	d5cb0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 be05 	b.w	d5cb0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40b6:	4770      	bx	lr

000d40b8 <_ZN6SdFileD0Ev>:
   d40b8:	b510      	push	{r4, lr}
   d40ba:	212c      	movs	r1, #44	; 0x2c
   d40bc:	4604      	mov	r4, r0
   d40be:	f003 f81b 	bl	d70f8 <_ZdlPvj>
   d40c2:	4620      	mov	r0, r4
   d40c4:	bd10      	pop	{r4, pc}
	...

000d40c8 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40c8:	b510      	push	{r4, lr}
   d40ca:	4b03      	ldr	r3, [pc, #12]	; (d40d8 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40cc:	6003      	str	r3, [r0, #0]
   d40ce:	4604      	mov	r4, r0
   d40d0:	f001 fa6a 	bl	d55a8 <_ZN10JsonWriterD1Ev>
   d40d4:	4620      	mov	r0, r4
   d40d6:	bd10      	pop	{r4, pc}
   d40d8:	000d80f4 	.word	0x000d80f4

000d40dc <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40dc:	b510      	push	{r4, lr}
   d40de:	4604      	mov	r4, r0
   d40e0:	f7ff fff2 	bl	d40c8 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40e4:	4620      	mov	r0, r4
   d40e6:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40ea:	f003 f805 	bl	d70f8 <_ZdlPvj>
   d40ee:	4620      	mov	r0, r4
   d40f0:	bd10      	pop	{r4, pc}

000d40f2 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d40f2:	3008      	adds	r0, #8
   d40f4:	f000 be8a 	b.w	d4e0c <_ZN7FatFile5writeEPKvj>

000d40f8 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d40f8:	b507      	push	{r0, r1, r2, lr}
   d40fa:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d40fc:	2201      	movs	r2, #1
   d40fe:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4102:	3008      	adds	r0, #8
   d4104:	4619      	mov	r1, r3
   d4106:	f000 fe81 	bl	d4e0c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d410a:	b003      	add	sp, #12
   d410c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4110 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4110:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4112:	4602      	mov	r2, r0
   d4114:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4116:	7913      	ldrb	r3, [r2, #4]
   d4118:	6895      	ldr	r5, [r2, #8]
   d411a:	b133      	cbz	r3, d412a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d411c:	b93d      	cbnz	r5, d412e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d411e:	490c      	ldr	r1, [pc, #48]	; (d4150 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4120:	b004      	add	sp, #16
   d4122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4126:	f001 bf5f 	b.w	d5fe8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d412a:	4b0a      	ldr	r3, [pc, #40]	; (d4154 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d412c:	e000      	b.n	d4130 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d412e:	4b0a      	ldr	r3, [pc, #40]	; (d4158 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4130:	7b16      	ldrb	r6, [r2, #12]
   d4132:	4c0a      	ldr	r4, [pc, #40]	; (d415c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4134:	490a      	ldr	r1, [pc, #40]	; (d4160 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4136:	7b52      	ldrb	r2, [r2, #13]
   d4138:	9202      	str	r2, [sp, #8]
   d413a:	2e01      	cmp	r6, #1
   d413c:	bf08      	it	eq
   d413e:	4621      	moveq	r1, r4
   d4140:	9101      	str	r1, [sp, #4]
   d4142:	9500      	str	r5, [sp, #0]
   d4144:	4a07      	ldr	r2, [pc, #28]	; (d4164 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4146:	2100      	movs	r1, #0
   d4148:	f001 ff8b 	bl	d6062 <_ZN5Print11printf_implEbPKcz>
  }
   d414c:	b004      	add	sp, #16
   d414e:	bd70      	pop	{r4, r5, r6, pc}
   d4150:	000d810d 	.word	0x000d810d
   d4154:	000d8364 	.word	0x000d8364
   d4158:	000d80fc 	.word	0x000d80fc
   d415c:	000d8105 	.word	0x000d8105
   d4160:	000d8109 	.word	0x000d8109
   d4164:	000d8123 	.word	0x000d8123

000d4168 <setup>:
float pointX, pointY;



// setup() runs once, when the device is first turned on.
void setup() {
   d4168:	b538      	push	{r3, r4, r5, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);

  pixelX.begin();
   d416a:	4d12      	ldr	r5, [pc, #72]	; (d41b4 <setup+0x4c>)
  pixelY.begin();
   d416c:	4c12      	ldr	r4, [pc, #72]	; (d41b8 <setup+0x50>)


// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d416e:	f002 fc5f 	bl	d6a30 <_Z16_fetch_usbserialv>
   d4172:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4176:	f002 fc4f 	bl	d6a18 <_ZN9USBSerial5beginEl>

  pixelX.begin();
   d417a:	4628      	mov	r0, r5
   d417c:	f000 fb7d 	bl	d487a <_ZN17Adafruit_NeoPixel5beginEv>
  pixelY.begin();
   d4180:	4620      	mov	r0, r4
   d4182:	f000 fb7a 	bl	d487a <_ZN17Adafruit_NeoPixel5beginEv>
  pixelX.clear();
   d4186:	4628      	mov	r0, r5
   d4188:	f000 fd7f 	bl	d4c8a <_ZN17Adafruit_NeoPixel5clearEv>
  pixelY.clear();
   d418c:	4620      	mov	r0, r4
   d418e:	f000 fd7c 	bl	d4c8a <_ZN17Adafruit_NeoPixel5clearEv>

  pinMode(micro1, INPUT);
   d4192:	4b0a      	ldr	r3, [pc, #40]	; (d41bc <setup+0x54>)
   d4194:	2100      	movs	r1, #0
   d4196:	8818      	ldrh	r0, [r3, #0]
   d4198:	f002 ff1e 	bl	d6fd8 <pinMode>
  pinMode(micro2, INPUT);
   d419c:	4b08      	ldr	r3, [pc, #32]	; (d41c0 <setup+0x58>)
   d419e:	2100      	movs	r1, #0
   d41a0:	8818      	ldrh	r0, [r3, #0]
   d41a2:	f002 ff19 	bl	d6fd8 <pinMode>
  pinMode(micro3, INPUT);
   d41a6:	4b07      	ldr	r3, [pc, #28]	; (d41c4 <setup+0x5c>)
   d41a8:	2100      	movs	r1, #0
   d41aa:	8818      	ldrh	r0, [r3, #0]
}
   d41ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  pixelX.clear();
  pixelY.clear();

  pinMode(micro1, INPUT);
  pinMode(micro2, INPUT);
  pinMode(micro3, INPUT);
   d41b0:	f002 bf12 	b.w	d6fd8 <pinMode>
   d41b4:	2003dedc 	.word	0x2003dedc
   d41b8:	2003deb4 	.word	0x2003deb4
   d41bc:	2003de20 	.word	0x2003de20
   d41c0:	2003de24 	.word	0x2003de24
   d41c4:	2003de28 	.word	0x2003de28

000d41c8 <_Z19getMicrophoneValuesv>:
  }
  Serial.printf("T1 = %i | T2 = %i | T3 = %i\n",T1, T2, T3);
}

void getMicrophoneValues()
{
   d41c8:	b508      	push	{r3, lr}
  val1 = analogRead(micro1);
   d41ca:	4b09      	ldr	r3, [pc, #36]	; (d41f0 <_Z19getMicrophoneValuesv+0x28>)
   d41cc:	8818      	ldrh	r0, [r3, #0]
   d41ce:	f002 ff2d 	bl	d702c <analogRead>
   d41d2:	4b08      	ldr	r3, [pc, #32]	; (d41f4 <_Z19getMicrophoneValuesv+0x2c>)
   d41d4:	6018      	str	r0, [r3, #0]
  val2 = analogRead(micro2);
   d41d6:	4b08      	ldr	r3, [pc, #32]	; (d41f8 <_Z19getMicrophoneValuesv+0x30>)
   d41d8:	8818      	ldrh	r0, [r3, #0]
   d41da:	f002 ff27 	bl	d702c <analogRead>
   d41de:	4b07      	ldr	r3, [pc, #28]	; (d41fc <_Z19getMicrophoneValuesv+0x34>)
   d41e0:	6018      	str	r0, [r3, #0]
  val3 = analogRead(micro3);
   d41e2:	4b07      	ldr	r3, [pc, #28]	; (d4200 <_Z19getMicrophoneValuesv+0x38>)
   d41e4:	8818      	ldrh	r0, [r3, #0]
   d41e6:	f002 ff21 	bl	d702c <analogRead>
   d41ea:	4b06      	ldr	r3, [pc, #24]	; (d4204 <_Z19getMicrophoneValuesv+0x3c>)
   d41ec:	6018      	str	r0, [r3, #0]
   d41ee:	bd08      	pop	{r3, pc}
   d41f0:	2003de20 	.word	0x2003de20
   d41f4:	2003e3b4 	.word	0x2003e3b4
   d41f8:	2003de24 	.word	0x2003de24
   d41fc:	2003e3b8 	.word	0x2003e3b8
   d4200:	2003de28 	.word	0x2003de28
   d4204:	2003ded8 	.word	0x2003ded8

000d4208 <_Z16getTimingOfSoundv>:
     Serial.printf("mic1 = %i | mic2 = %i | mic3 = %i | Time = %i\n",val1,val2,val3);
   }
}

void getTimingOfSound()
{
   d4208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  delay(2000);
   d420c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  T1 = 0;
   d4210:	4c27      	ldr	r4, [pc, #156]	; (d42b0 <_Z16getTimingOfSoundv+0xa8>)
  T2 = 0;
   d4212:	4d28      	ldr	r5, [pc, #160]	; (d42b4 <_Z16getTimingOfSoundv+0xac>)
  T3 = 0;
   d4214:	4e28      	ldr	r6, [pc, #160]	; (d42b8 <_Z16getTimingOfSoundv+0xb0>)
   }
}

void getTimingOfSound()
{
  delay(2000);
   d4216:	f001 ffba 	bl	d618e <delay>
  T1 = 0;
   d421a:	2300      	movs	r3, #0
   d421c:	6023      	str	r3, [r4, #0]
  T2 = 0;
   d421e:	602b      	str	r3, [r5, #0]
  T3 = 0;
   d4220:	6033      	str	r3, [r6, #0]
  Serial.println("waiting for sound");
   d4222:	f002 fc05 	bl	d6a30 <_Z16_fetch_usbserialv>
   d4226:	4925      	ldr	r1, [pc, #148]	; (d42bc <_Z16getTimingOfSoundv+0xb4>)
   d4228:	f001 fef1 	bl	d600e <_ZN5Print7printlnEPKc>
  while((T1 == 0) || (T2 == 0) || (T3 == 0))
   d422c:	46a0      	mov	r8, r4
   d422e:	46a9      	mov	r9, r5
   d4230:	4637      	mov	r7, r6
   d4232:	6823      	ldr	r3, [r4, #0]
   d4234:	b11b      	cbz	r3, d423e <_Z16getTimingOfSoundv+0x36>
   d4236:	682b      	ldr	r3, [r5, #0]
   d4238:	b10b      	cbz	r3, d423e <_Z16getTimingOfSoundv+0x36>
   d423a:	6833      	ldr	r3, [r6, #0]
   d423c:	bb33      	cbnz	r3, d428c <_Z16getTimingOfSoundv+0x84>
  {
    getMicrophoneValues();
   d423e:	f7ff ffc3 	bl	d41c8 <_Z19getMicrophoneValuesv>
    if((T1 == 0) && (val1 > threshold))
   d4242:	6823      	ldr	r3, [r4, #0]
   d4244:	b94b      	cbnz	r3, d425a <_Z16getTimingOfSoundv+0x52>
   d4246:	4b1e      	ldr	r3, [pc, #120]	; (d42c0 <_Z16getTimingOfSoundv+0xb8>)
   d4248:	681a      	ldr	r2, [r3, #0]
   d424a:	4b1e      	ldr	r3, [pc, #120]	; (d42c4 <_Z16getTimingOfSoundv+0xbc>)
   d424c:	681b      	ldr	r3, [r3, #0]
   d424e:	429a      	cmp	r2, r3
   d4250:	dd03      	ble.n	d425a <_Z16getTimingOfSoundv+0x52>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4252:	f001 fb91 	bl	d5978 <HAL_Timer_Get_Micro_Seconds>
    {
      T1 = micros();
   d4256:	f8c8 0000 	str.w	r0, [r8]
    }
    if((T2 == 0) && (val2 > threshold))
   d425a:	682b      	ldr	r3, [r5, #0]
   d425c:	b94b      	cbnz	r3, d4272 <_Z16getTimingOfSoundv+0x6a>
   d425e:	4b1a      	ldr	r3, [pc, #104]	; (d42c8 <_Z16getTimingOfSoundv+0xc0>)
   d4260:	681a      	ldr	r2, [r3, #0]
   d4262:	4b18      	ldr	r3, [pc, #96]	; (d42c4 <_Z16getTimingOfSoundv+0xbc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	429a      	cmp	r2, r3
   d4268:	dd03      	ble.n	d4272 <_Z16getTimingOfSoundv+0x6a>
   d426a:	f001 fb85 	bl	d5978 <HAL_Timer_Get_Micro_Seconds>
    {
      T2 = micros();
   d426e:	f8c9 0000 	str.w	r0, [r9]
    }
    if((T3 == 0) && (val3 > threshold))
   d4272:	6833      	ldr	r3, [r6, #0]
   d4274:	2b00      	cmp	r3, #0
   d4276:	d1dc      	bne.n	d4232 <_Z16getTimingOfSoundv+0x2a>
   d4278:	4b14      	ldr	r3, [pc, #80]	; (d42cc <_Z16getTimingOfSoundv+0xc4>)
   d427a:	681a      	ldr	r2, [r3, #0]
   d427c:	4b11      	ldr	r3, [pc, #68]	; (d42c4 <_Z16getTimingOfSoundv+0xbc>)
   d427e:	681b      	ldr	r3, [r3, #0]
   d4280:	429a      	cmp	r2, r3
   d4282:	ddd6      	ble.n	d4232 <_Z16getTimingOfSoundv+0x2a>
   d4284:	f001 fb78 	bl	d5978 <HAL_Timer_Get_Micro_Seconds>
    {
      T3 = micros();
   d4288:	6038      	str	r0, [r7, #0]
   d428a:	e7d2      	b.n	d4232 <_Z16getTimingOfSoundv+0x2a>
    }
  }
  Serial.printf("T1 = %i | T2 = %i | T3 = %i\n",T1, T2, T3);
   d428c:	f002 fbd0 	bl	d6a30 <_Z16_fetch_usbserialv>
   d4290:	4b09      	ldr	r3, [pc, #36]	; (d42b8 <_Z16getTimingOfSoundv+0xb0>)
   d4292:	4a0f      	ldr	r2, [pc, #60]	; (d42d0 <_Z16getTimingOfSoundv+0xc8>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	9301      	str	r3, [sp, #4]
   d4298:	4b06      	ldr	r3, [pc, #24]	; (d42b4 <_Z16getTimingOfSoundv+0xac>)
   d429a:	681b      	ldr	r3, [r3, #0]
   d429c:	9300      	str	r3, [sp, #0]
   d429e:	4b04      	ldr	r3, [pc, #16]	; (d42b0 <_Z16getTimingOfSoundv+0xa8>)
   d42a0:	2100      	movs	r1, #0
   d42a2:	681b      	ldr	r3, [r3, #0]
   d42a4:	f001 fedd 	bl	d6062 <_ZN5Print11printf_implEbPKcz>
}
   d42a8:	b003      	add	sp, #12
   d42aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d42ae:	bf00      	nop
   d42b0:	2003dea8 	.word	0x2003dea8
   d42b4:	2003deac 	.word	0x2003deac
   d42b8:	2003deb0 	.word	0x2003deb0
   d42bc:	000d8170 	.word	0x000d8170
   d42c0:	2003e3b4 	.word	0x2003e3b4
   d42c4:	2003de1c 	.word	0x2003de1c
   d42c8:	2003e3b8 	.word	0x2003e3b8
   d42cc:	2003ded8 	.word	0x2003ded8
   d42d0:	000d8182 	.word	0x000d8182
   d42d4:	00000000 	.word	0x00000000

000d42d8 <_Z23getTriangulationOfSoundv>:
  val3 = analogRead(micro3);
  //Serial.printf("Microphone 1 = %i | Microphone 2 = %i | Microphone 3 = %i\n", val1, val2, val3);
}

void getTriangulationOfSound()
{
   d42d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42dc:	ed2d 8b04 	vpush	{d8-d9}
   d42e0:	b089      	sub	sp, #36	; 0x24
  getTimingOfSound();
   d42e2:	f7ff ff91 	bl	d4208 <_Z16getTimingOfSoundv>
  A = ((T2 - T1)/1000000.0)*343;               
   d42e6:	4b84      	ldr	r3, [pc, #528]	; (d44f8 <_Z23getTriangulationOfSoundv+0x220>)
   d42e8:	4d84      	ldr	r5, [pc, #528]	; (d44fc <_Z23getTriangulationOfSoundv+0x224>)
   d42ea:	681c      	ldr	r4, [r3, #0]
   d42ec:	4b84      	ldr	r3, [pc, #528]	; (d4500 <_Z23getTriangulationOfSoundv+0x228>)
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d42ee:	f8df a234 	ldr.w	sl, [pc, #564]	; d4524 <_Z23getTriangulationOfSoundv+0x24c>
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
   d42f2:	6818      	ldr	r0, [r3, #0]
  B = ((T3 - T1)/1000000.0)*343; 
   d42f4:	4e83      	ldr	r6, [pc, #524]	; (d4504 <_Z23getTriangulationOfSoundv+0x22c>)
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d42f6:	4f84      	ldr	r7, [pc, #528]	; (d4508 <_Z23getTriangulationOfSoundv+0x230>)
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d42f8:	f8df b22c 	ldr.w	fp, [pc, #556]	; d4528 <_Z23getTriangulationOfSoundv+0x250>
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
   d42fc:	1b00      	subs	r0, r0, r4
   d42fe:	f003 fadd 	bl	d78bc <__aeabi_i2d>
   d4302:	a379      	add	r3, pc, #484	; (adr r3, d44e8 <_Z23getTriangulationOfSoundv+0x210>)
   d4304:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4308:	f003 fc68 	bl	d7bdc <__aeabi_ddiv>
   d430c:	a378      	add	r3, pc, #480	; (adr r3, d44f0 <_Z23getTriangulationOfSoundv+0x218>)
   d430e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4312:	f003 fb39 	bl	d7988 <__aeabi_dmul>
   d4316:	f003 fe0f 	bl	d7f38 <__aeabi_d2f>
  B = ((T3 - T1)/1000000.0)*343; 
   d431a:	4b7c      	ldr	r3, [pc, #496]	; (d450c <_Z23getTriangulationOfSoundv+0x234>)
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
   d431c:	6028      	str	r0, [r5, #0]
   d431e:	ee09 0a10 	vmov	s18, r0
  B = ((T3 - T1)/1000000.0)*343; 
   d4322:	6818      	ldr	r0, [r3, #0]
   d4324:	1b00      	subs	r0, r0, r4
   d4326:	f003 fac9 	bl	d78bc <__aeabi_i2d>
   d432a:	a36f      	add	r3, pc, #444	; (adr r3, d44e8 <_Z23getTriangulationOfSoundv+0x210>)
   d432c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4330:	f003 fc54 	bl	d7bdc <__aeabi_ddiv>
   d4334:	a36e      	add	r3, pc, #440	; (adr r3, d44f0 <_Z23getTriangulationOfSoundv+0x218>)
   d4336:	e9d3 2300 	ldrd	r2, r3, [r3]
   d433a:	f003 fb25 	bl	d7988 <__aeabi_dmul>
   d433e:	f003 fdfb 	bl	d7f38 <__aeabi_d2f>
   d4342:	ee08 0a90 	vmov	s17, r0
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d4346:	ee28 7aa8 	vmul.f32	s14, s17, s17
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d434a:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d434e:	eef0 6a47 	vmov.f32	s13, s14
   d4352:	eee9 6a09 	vfma.f32	s13, s18, s18
   d4356:	4c6e      	ldr	r4, [pc, #440]	; (d4510 <_Z23getTriangulationOfSoundv+0x238>)

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
   d4358:	6030      	str	r0, [r6, #0]
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d435a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d435e:	eeb0 6a48 	vmov.f32	s12, s16
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d4362:	ee76 6ae7 	vsub.f32	s13, s13, s15
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d4366:	eea9 6a09 	vfma.f32	s12, s18, s18
   d436a:	ee77 7a67 	vsub.f32	s15, s14, s15
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d436e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d4372:	ee68 8aa7 	vmul.f32	s17, s17, s15
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d4376:	ee67 7aa7 	vmul.f32	s15, s15, s15
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d437a:	eee9 8a06 	vfma.f32	s17, s18, s12
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d437e:	ee67 7a87 	vmul.f32	s15, s15, s14
   d4382:	ee26 6a06 	vmul.f32	s12, s12, s12
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d4386:	edc4 6a00 	vstr	s13, [r4]
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d438a:	eee6 7a07 	vfma.f32	s15, s12, s14
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d438e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   d4392:	ee66 6a87 	vmul.f32	s13, s13, s14
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d4396:	edca 7a00 	vstr	s15, [sl]
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d439a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d439e:	edc7 8a00 	vstr	s17, [r7]
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d43a2:	eee8 7aa8 	vfma.f32	s15, s17, s17
   d43a6:	ee17 0a90 	vmov	r0, s15
   d43aa:	f003 fa99 	bl	d78e0 <__aeabi_f2d>
   d43ae:	ec41 0b10 	vmov	d0, r0, r1
   d43b2:	f002 ffff 	bl	d73b4 <sqrt>
   d43b6:	eef1 7a68 	vneg.f32	s15, s17
   d43ba:	ec53 2b10 	vmov	r2, r3, d0
   d43be:	ee17 0a90 	vmov	r0, s15
   d43c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d43c6:	f003 fa8b 	bl	d78e0 <__aeabi_f2d>
   d43ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d43ce:	f003 f927 	bl	d7620 <__aeabi_dsub>
   d43d2:	edd4 7a00 	vldr	s15, [r4]
   d43d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
   d43da:	4680      	mov	r8, r0
   d43dc:	ee17 0a90 	vmov	r0, s15
   d43e0:	4689      	mov	r9, r1
   d43e2:	f003 fa7d 	bl	d78e0 <__aeabi_f2d>
   d43e6:	4602      	mov	r2, r0
   d43e8:	460b      	mov	r3, r1
   d43ea:	4640      	mov	r0, r8
   d43ec:	4649      	mov	r1, r9
   d43ee:	f003 fbf5 	bl	d7bdc <__aeabi_ddiv>
   d43f2:	f003 fda1 	bl	d7f38 <__aeabi_d2f>
  X = -((A*T) + ((sq(A)-1)/2));
   d43f6:	edd5 6a00 	vldr	s13, [r5]
   d43fa:	f8df 8130 	ldr.w	r8, [pc, #304]	; d452c <_Z23getTriangulationOfSoundv+0x254>
  Y = -((B*T) + ((sq(B)-1)/2));
   d43fe:	f8df 9130 	ldr.w	r9, [pc, #304]	; d4530 <_Z23getTriangulationOfSoundv+0x258>
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d4402:	f8cb 0000 	str.w	r0, [fp]
  X = -((A*T) + ((sq(A)-1)/2));
   d4406:	eef0 7a48 	vmov.f32	s15, s16
   d440a:	eee6 7aa6 	vfma.f32	s15, s13, s13
   d440e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d4412:	ee07 0a10 	vmov	s14, r0
  X = -((A*T) + ((sq(A)-1)/2));
   d4416:	ee67 7a86 	vmul.f32	s15, s15, s12
   d441a:	eee7 7a26 	vfma.f32	s15, s14, s13
   d441e:	eef1 7a67 	vneg.f32	s15, s15
   d4422:	edc8 7a00 	vstr	s15, [r8]
  Y = -((B*T) + ((sq(B)-1)/2));
   d4426:	edd6 7a00 	vldr	s15, [r6]
   d442a:	eea7 8aa7 	vfma.f32	s16, s15, s15
   d442e:	ee28 8a06 	vmul.f32	s16, s16, s12
   d4432:	eea7 8a27 	vfma.f32	s16, s14, s15
   d4436:	eeb1 8a48 	vneg.f32	s16, s16
   d443a:	ed89 8a00 	vstr	s16, [r9]
  Serial.printf("A = %0.6f | B = %0.6f\n", A, B);
   d443e:	f002 faf7 	bl	d6a30 <_Z16_fetch_usbserialv>
   d4442:	9006      	str	r0, [sp, #24]
   d4444:	6830      	ldr	r0, [r6, #0]
   d4446:	f003 fa4b 	bl	d78e0 <__aeabi_f2d>
   d444a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d444e:	6828      	ldr	r0, [r5, #0]
   d4450:	f003 fa46 	bl	d78e0 <__aeabi_f2d>
   d4454:	9b06      	ldr	r3, [sp, #24]
   d4456:	4a2f      	ldr	r2, [pc, #188]	; (d4514 <_Z23getTriangulationOfSoundv+0x23c>)
   d4458:	e9cd 0100 	strd	r0, r1, [sp]
   d445c:	4618      	mov	r0, r3
   d445e:	2100      	movs	r1, #0
   d4460:	f001 fdff 	bl	d6062 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("T = %0.2f\n", T);
   d4464:	f002 fae4 	bl	d6a30 <_Z16_fetch_usbserialv>
   d4468:	4605      	mov	r5, r0
   d446a:	f8db 0000 	ldr.w	r0, [fp]
   d446e:	f003 fa37 	bl	d78e0 <__aeabi_f2d>
   d4472:	4a29      	ldr	r2, [pc, #164]	; (d4518 <_Z23getTriangulationOfSoundv+0x240>)
   d4474:	e9cd 0100 	strd	r0, r1, [sp]
   d4478:	2100      	movs	r1, #0
   d447a:	4628      	mov	r0, r5
   d447c:	f001 fdf1 	bl	d6062 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("X = %0.2f | Y = %0.2f\n", X, Y);
   d4480:	f002 fad6 	bl	d6a30 <_Z16_fetch_usbserialv>
   d4484:	4605      	mov	r5, r0
   d4486:	f8d9 0000 	ldr.w	r0, [r9]
   d448a:	f003 fa29 	bl	d78e0 <__aeabi_f2d>
   d448e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4492:	f8d8 0000 	ldr.w	r0, [r8]
   d4496:	f003 fa23 	bl	d78e0 <__aeabi_f2d>
   d449a:	4a20      	ldr	r2, [pc, #128]	; (d451c <_Z23getTriangulationOfSoundv+0x244>)
   d449c:	e9cd 0100 	strd	r0, r1, [sp]
   d44a0:	2100      	movs	r1, #0
   d44a2:	4628      	mov	r0, r5
   d44a4:	f001 fddd 	bl	d6062 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("a = %0.2f | b = %0.2f | c = %0.2f\n",a,b,c);
   d44a8:	f002 fac2 	bl	d6a30 <_Z16_fetch_usbserialv>
   d44ac:	4605      	mov	r5, r0
   d44ae:	f8da 0000 	ldr.w	r0, [sl]
   d44b2:	f003 fa15 	bl	d78e0 <__aeabi_f2d>
   d44b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d44ba:	6838      	ldr	r0, [r7, #0]
   d44bc:	f003 fa10 	bl	d78e0 <__aeabi_f2d>
   d44c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d44c4:	6820      	ldr	r0, [r4, #0]
   d44c6:	f003 fa0b 	bl	d78e0 <__aeabi_f2d>
   d44ca:	4a15      	ldr	r2, [pc, #84]	; (d4520 <_Z23getTriangulationOfSoundv+0x248>)
   d44cc:	e9cd 0100 	strd	r0, r1, [sp]
   d44d0:	2100      	movs	r1, #0
   d44d2:	4628      	mov	r0, r5
   d44d4:	f001 fdc5 	bl	d6062 <_ZN5Print11printf_implEbPKcz>
}
   d44d8:	b009      	add	sp, #36	; 0x24
   d44da:	ecbd 8b04 	vpop	{d8-d9}
   d44de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d44e2:	bf00      	nop
   d44e4:	f3af 8000 	nop.w
   d44e8:	00000000 	.word	0x00000000
   d44ec:	412e8480 	.word	0x412e8480
   d44f0:	00000000 	.word	0x00000000
   d44f4:	40757000 	.word	0x40757000
   d44f8:	2003dea8 	.word	0x2003dea8
   d44fc:	2003e3c4 	.word	0x2003e3c4
   d4500:	2003deac 	.word	0x2003deac
   d4504:	2003e3c8 	.word	0x2003e3c8
   d4508:	2003def4 	.word	0x2003def4
   d450c:	2003deb0 	.word	0x2003deb0
   d4510:	2003def0 	.word	0x2003def0
   d4514:	000d819f 	.word	0x000d819f
   d4518:	000d81b6 	.word	0x000d81b6
   d451c:	000d81c1 	.word	0x000d81c1
   d4520:	000d81d8 	.word	0x000d81d8
   d4524:	2003dec8 	.word	0x2003dec8
   d4528:	2003decc 	.word	0x2003decc
   d452c:	2003ded0 	.word	0x2003ded0
   d4530:	2003ded4 	.word	0x2003ded4

000d4534 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4534:	b538      	push	{r3, r4, r5, lr}
   d4536:	4604      	mov	r4, r0
   d4538:	ed2d 8b02 	vpush	{d8}
   d453c:	460d      	mov	r5, r1
   d453e:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d4542:	f001 f939 	bl	d57b8 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4546:	4629      	mov	r1, r5
   d4548:	4620      	mov	r0, r4
   d454a:	2201      	movs	r2, #1
   d454c:	f001 f8a8 	bl	d56a0 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4550:	4620      	mov	r0, r4
   d4552:	213a      	movs	r1, #58	; 0x3a
   d4554:	f001 f858 	bl	d5608 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4558:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d455c:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4560:	4620      	mov	r0, r4
	}
   d4562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4566:	f001 b94b 	b.w	d5800 <_ZN10JsonWriter11insertValueEf>
	...

000d456c <_Z14somethingGreatff>:
  pixelY.setPixelColor(locationY,0,0,255);
  pixelY.show();
}

void somethingGreat(float X, float Y)
{
   d456c:	b510      	push	{r4, lr}
   d456e:	ed2d 8b02 	vpush	{d8}
   d4572:	b0d2      	sub	sp, #328	; 0x148
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d4574:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4578:	a912      	add	r1, sp, #72	; 0x48
   d457a:	a806      	add	r0, sp, #24
   d457c:	eeb0 8a60 	vmov.f32	s16, s1
   d4580:	eef0 8a40 	vmov.f32	s17, s0
   d4584:	f001 f82e 	bl	d55e4 <_ZN10JsonWriterC1EPcj>
   d4588:	4b1d      	ldr	r3, [pc, #116]	; (d4600 <_Z14somethingGreatff+0x94>)
   d458a:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d458c:	227d      	movs	r2, #125	; 0x7d
   d458e:	217b      	movs	r1, #123	; 0x7b
   d4590:	a806      	add	r0, sp, #24
   d4592:	f001 f91c 	bl	d57ce <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Longitud", X);
   d4596:	eeb0 0a68 	vmov.f32	s0, s17
   d459a:	491a      	ldr	r1, [pc, #104]	; (d4604 <_Z14somethingGreatff+0x98>)
   d459c:	a806      	add	r0, sp, #24
   d459e:	f7ff ffc9 	bl	d4534 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Latitude", Y);
   d45a2:	eeb0 0a48 	vmov.f32	s0, s16
   d45a6:	4918      	ldr	r1, [pc, #96]	; (d4608 <_Z14somethingGreatff+0x9c>)
   d45a8:	a806      	add	r0, sp, #24
   d45aa:	f7ff ffc3 	bl	d4534 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d45ae:	a806      	add	r0, sp, #24
   d45b0:	f001 f838 	bl	d5624 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d45b4:	9b07      	ldr	r3, [sp, #28]
   d45b6:	9303      	str	r3, [sp, #12]
   d45b8:	4b14      	ldr	r3, [pc, #80]	; (d460c <_Z14somethingGreatff+0xa0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d45ba:	9a03      	ldr	r2, [sp, #12]
   d45bc:	781b      	ldrb	r3, [r3, #0]
   d45be:	f88d 3000 	strb.w	r3, [sp]
   d45c2:	4913      	ldr	r1, [pc, #76]	; (d4610 <_Z14somethingGreatff+0xa4>)
   d45c4:	233c      	movs	r3, #60	; 0x3c
   d45c6:	a804      	add	r0, sp, #16
   d45c8:	f001 ffdc 	bl	d6584 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d45cc:	9c05      	ldr	r4, [sp, #20]
   d45ce:	b17c      	cbz	r4, d45f0 <_Z14somethingGreatff+0x84>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d45d0:	6863      	ldr	r3, [r4, #4]
   d45d2:	3b01      	subs	r3, #1
   d45d4:	6063      	str	r3, [r4, #4]
   d45d6:	b95b      	cbnz	r3, d45f0 <_Z14somethingGreatff+0x84>
        {
          _M_dispose();
   d45d8:	6823      	ldr	r3, [r4, #0]
   d45da:	4620      	mov	r0, r4
   d45dc:	689b      	ldr	r3, [r3, #8]
   d45de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d45e0:	68a3      	ldr	r3, [r4, #8]
   d45e2:	3b01      	subs	r3, #1
   d45e4:	60a3      	str	r3, [r4, #8]
   d45e6:	b91b      	cbnz	r3, d45f0 <_Z14somethingGreatff+0x84>
            _M_destroy();
   d45e8:	6823      	ldr	r3, [r4, #0]
   d45ea:	4620      	mov	r0, r4
   d45ec:	68db      	ldr	r3, [r3, #12]
   d45ee:	4798      	blx	r3
  pixelY.show();
}

void somethingGreat(float X, float Y)
{
  JsonWriterStatic<256> jw;
   d45f0:	a806      	add	r0, sp, #24
   d45f2:	f7ff fd69 	bl	d40c8 <_ZN16JsonWriterStaticILj256EED1Ev>

    jw.insertKeyValue("Longitud", X);
    jw.insertKeyValue("Latitude", Y);
  }
  Particle.publish("Noise",jw.getBuffer(), PRIVATE);
   d45f6:	b052      	add	sp, #328	; 0x148
   d45f8:	ecbd 8b02 	vpop	{d8}
   d45fc:	bd10      	pop	{r4, pc}
   d45fe:	bf00      	nop
   d4600:	000d80f4 	.word	0x000d80f4
   d4604:	000d81fb 	.word	0x000d81fb
   d4608:	000d8204 	.word	0x000d8204
   d460c:	2003def8 	.word	0x2003def8
   d4610:	000d820d 	.word	0x000d820d
   d4614:	00000000 	.word	0x00000000

000d4618 <_Z25showLocationWithNoepixlesv>:
  Serial.printf("X = %0.2f | Y = %0.2f\n", X, Y);
  Serial.printf("a = %0.2f | b = %0.2f | c = %0.2f\n",a,b,c);
}

void showLocationWithNoepixles()
{
   d4618:	b570      	push	{r4, r5, r6, lr}
   d461a:	ed2d 8b06 	vpush	{d8-d10}
  somethingGreat(X, Y);
   d461e:	4e40      	ldr	r6, [pc, #256]	; (d4720 <_Z25showLocationWithNoepixlesv+0x108>)
   d4620:	4c40      	ldr	r4, [pc, #256]	; (d4724 <_Z25showLocationWithNoepixlesv+0x10c>)
   d4622:	edd6 0a00 	vldr	s1, [r6]
   d4626:	ed94 0a00 	vldr	s0, [r4]
  getTriangulationOfSound();
  pointX = X;
  locationX = map(pointX,0.0,1.0,0.0,31.0);
   d462a:	4d3f      	ldr	r5, [pc, #252]	; (d4728 <_Z25showLocationWithNoepixlesv+0x110>)
  Serial.printf("X = %0.2f | Y = %0.2f\n", X, Y);
  Serial.printf("a = %0.2f | b = %0.2f | c = %0.2f\n",a,b,c);
}

void showLocationWithNoepixles()
{
   d462c:	b082      	sub	sp, #8
  somethingGreat(X, Y);
   d462e:	f7ff ff9d 	bl	d456c <_Z14somethingGreatff>
  getTriangulationOfSound();
   d4632:	f7ff fe51 	bl	d42d8 <_Z23getTriangulationOfSoundv>
  pointX = X;
   d4636:	4b3d      	ldr	r3, [pc, #244]	; (d472c <_Z25showLocationWithNoepixlesv+0x114>)
   d4638:	6820      	ldr	r0, [r4, #0]
   d463a:	6018      	str	r0, [r3, #0]
  locationX = map(pointX,0.0,1.0,0.0,31.0);
   d463c:	f003 f950 	bl	d78e0 <__aeabi_f2d>
   d4640:	ed9f 8b31 	vldr	d8, [pc, #196]	; d4708 <_Z25showLocationWithNoepixlesv+0xf0>
   d4644:	ed9f ab32 	vldr	d10, [pc, #200]	; d4710 <_Z25showLocationWithNoepixlesv+0xf8>
   d4648:	eeb0 3a48 	vmov.f32	s6, s16
   d464c:	eef0 3a68 	vmov.f32	s7, s17
   d4650:	eeb0 1a48 	vmov.f32	s2, s16
   d4654:	eef0 1a68 	vmov.f32	s3, s17
   d4658:	ed9f 9b2f 	vldr	d9, [pc, #188]	; d4718 <_Z25showLocationWithNoepixlesv+0x100>
   d465c:	eeb0 4a4a 	vmov.f32	s8, s20
   d4660:	eef0 4a6a 	vmov.f32	s9, s21
   d4664:	eeb0 2a49 	vmov.f32	s4, s18
   d4668:	eef0 2a69 	vmov.f32	s5, s19
   d466c:	ec41 0b10 	vmov	d0, r0, r1
   d4670:	f001 fd44 	bl	d60fc <_Z3mapddddd>
   d4674:	ec51 0b10 	vmov	r0, r1, d0
   d4678:	f003 fc36 	bl	d7ee8 <__aeabi_d2iz>
  pixelX.clear();
   d467c:	4c2c      	ldr	r4, [pc, #176]	; (d4730 <_Z25showLocationWithNoepixlesv+0x118>)
void showLocationWithNoepixles()
{
  somethingGreat(X, Y);
  getTriangulationOfSound();
  pointX = X;
  locationX = map(pointX,0.0,1.0,0.0,31.0);
   d467e:	6028      	str	r0, [r5, #0]
  pixelX.clear();
   d4680:	4620      	mov	r0, r4
   d4682:	f000 fb02 	bl	d4c8a <_ZN17Adafruit_NeoPixel5clearEv>
  pixelX.setPixelColor(locationX,255,0,0);
   d4686:	8829      	ldrh	r1, [r5, #0]
   d4688:	2500      	movs	r5, #0
   d468a:	22ff      	movs	r2, #255	; 0xff
   d468c:	462b      	mov	r3, r5
   d468e:	4620      	mov	r0, r4
   d4690:	9500      	str	r5, [sp, #0]
   d4692:	f000 facb 	bl	d4c2c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  pixelX.show();
   d4696:	4620      	mov	r0, r4
   d4698:	f000 f926 	bl	d48e8 <_ZN17Adafruit_NeoPixel4showEv>

  pointY = Y;
   d469c:	4b25      	ldr	r3, [pc, #148]	; (d4734 <_Z25showLocationWithNoepixlesv+0x11c>)
   d469e:	6830      	ldr	r0, [r6, #0]
   d46a0:	6018      	str	r0, [r3, #0]
  locationY = map(pointY,0.0,1.0,0.0,31.0);
   d46a2:	f003 f91d 	bl	d78e0 <__aeabi_f2d>
   d46a6:	eeb0 4a4a 	vmov.f32	s8, s20
   d46aa:	eef0 4a6a 	vmov.f32	s9, s21
   d46ae:	eeb0 3a48 	vmov.f32	s6, s16
   d46b2:	eef0 3a68 	vmov.f32	s7, s17
   d46b6:	eeb0 2a49 	vmov.f32	s4, s18
   d46ba:	eef0 2a69 	vmov.f32	s5, s19
   d46be:	eeb0 1a48 	vmov.f32	s2, s16
   d46c2:	eef0 1a68 	vmov.f32	s3, s17
   d46c6:	ec41 0b10 	vmov	d0, r0, r1
   d46ca:	f001 fd17 	bl	d60fc <_Z3mapddddd>
   d46ce:	ec51 0b10 	vmov	r0, r1, d0
   d46d2:	f003 fc09 	bl	d7ee8 <__aeabi_d2iz>
  pixelY.clear();
   d46d6:	4c18      	ldr	r4, [pc, #96]	; (d4738 <_Z25showLocationWithNoepixlesv+0x120>)
  pixelX.clear();
  pixelX.setPixelColor(locationX,255,0,0);
  pixelX.show();

  pointY = Y;
  locationY = map(pointY,0.0,1.0,0.0,31.0);
   d46d8:	4e18      	ldr	r6, [pc, #96]	; (d473c <_Z25showLocationWithNoepixlesv+0x124>)
   d46da:	6030      	str	r0, [r6, #0]
  pixelY.clear();
   d46dc:	4620      	mov	r0, r4
   d46de:	f000 fad4 	bl	d4c8a <_ZN17Adafruit_NeoPixel5clearEv>
  pixelY.setPixelColor(locationY,0,0,255);
   d46e2:	23ff      	movs	r3, #255	; 0xff
   d46e4:	8831      	ldrh	r1, [r6, #0]
   d46e6:	9300      	str	r3, [sp, #0]
   d46e8:	4620      	mov	r0, r4
   d46ea:	462b      	mov	r3, r5
   d46ec:	462a      	mov	r2, r5
   d46ee:	f000 fa9d 	bl	d4c2c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  pixelY.show();
   d46f2:	4620      	mov	r0, r4
}
   d46f4:	b002      	add	sp, #8
   d46f6:	ecbd 8b06 	vpop	{d8-d10}
   d46fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  pointY = Y;
  locationY = map(pointY,0.0,1.0,0.0,31.0);
  pixelY.clear();
  pixelY.setPixelColor(locationY,0,0,255);
  pixelY.show();
   d46fe:	f000 b8f3 	b.w	d48e8 <_ZN17Adafruit_NeoPixel4showEv>
   d4702:	bf00      	nop
   d4704:	f3af 8000 	nop.w
	...
   d4714:	403f0000 	.word	0x403f0000
   d4718:	00000000 	.word	0x00000000
   d471c:	3ff00000 	.word	0x3ff00000
   d4720:	2003ded4 	.word	0x2003ded4
   d4724:	2003ded0 	.word	0x2003ded0
   d4728:	2003df28 	.word	0x2003df28
   d472c:	2003e3bc 	.word	0x2003e3bc
   d4730:	2003dedc 	.word	0x2003dedc
   d4734:	2003e3c0 	.word	0x2003e3c0
   d4738:	2003deb4 	.word	0x2003deb4
   d473c:	2003df2c 	.word	0x2003df2c

000d4740 <loop>:
void loop() {
  // The core of your code will likely live here.
  //simpleSoundTest();
  //getTimingOfSound();
  //getTriangulationOfSound();
  showLocationWithNoepixles();
   d4740:	f7ff bf6a 	b.w	d4618 <_Z25showLocationWithNoepixlesv>

000d4744 <_GLOBAL__sub_I_pixelX>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4744:	4b29      	ldr	r3, [pc, #164]	; (d47ec <_GLOBAL__sub_I_pixelX+0xa8>)

    jw.insertKeyValue("Longitud", X);
    jw.insertKeyValue("Latitude", Y);
  }
  Particle.publish("Noise",jw.getBuffer(), PRIVATE);
   d4746:	b570      	push	{r4, r5, r6, lr}
   d4748:	2401      	movs	r4, #1
   d474a:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d474c:	f001 f88c 	bl	d5868 <HAL_Pin_Map>
#include <SdFat.h>

#define PIXEL_PIN A4
#define PIXEL_COUNT 31
#define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixelX(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4750:	2302      	movs	r3, #2
   d4752:	220f      	movs	r2, #15
   d4754:	211f      	movs	r1, #31
   d4756:	4826      	ldr	r0, [pc, #152]	; (d47f0 <_GLOBAL__sub_I_pixelX+0xac>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4758:	4e26      	ldr	r6, [pc, #152]	; (d47f4 <_GLOBAL__sub_I_pixelX+0xb0>)
   d475a:	f000 f8b3 	bl	d48c4 <_ZN17Adafruit_NeoPixelC1Ethh>
   d475e:	4a26      	ldr	r2, [pc, #152]	; (d47f8 <_GLOBAL__sub_I_pixelX+0xb4>)
   d4760:	4926      	ldr	r1, [pc, #152]	; (d47fc <_GLOBAL__sub_I_pixelX+0xb8>)
   d4762:	4823      	ldr	r0, [pc, #140]	; (d47f0 <_GLOBAL__sub_I_pixelX+0xac>)
   d4764:	f002 fcba 	bl	d70dc <__aeabi_atexit>

#define PIXEL_PIN2 A3
#define PIXEL_COUNT 31
#define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixelY(PIXEL_COUNT, PIXEL_PIN2, PIXEL_TYPE);
   d4768:	2302      	movs	r3, #2
   d476a:	2210      	movs	r2, #16
   d476c:	211f      	movs	r1, #31
   d476e:	4824      	ldr	r0, [pc, #144]	; (d4800 <_GLOBAL__sub_I_pixelX+0xbc>)
   d4770:	f000 f8a8 	bl	d48c4 <_ZN17Adafruit_NeoPixelC1Ethh>
   d4774:	4a20      	ldr	r2, [pc, #128]	; (d47f8 <_GLOBAL__sub_I_pixelX+0xb4>)
   d4776:	4921      	ldr	r1, [pc, #132]	; (d47fc <_GLOBAL__sub_I_pixelX+0xb8>)
   d4778:	4821      	ldr	r0, [pc, #132]	; (d4800 <_GLOBAL__sub_I_pixelX+0xbc>)
   d477a:	f002 fcaf 	bl	d70dc <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d477e:	4b21      	ldr	r3, [pc, #132]	; (d4804 <_GLOBAL__sub_I_pixelX+0xc0>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4780:	2164      	movs	r1, #100	; 0x64
   d4782:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4786:	4920      	ldr	r1, [pc, #128]	; (d4808 <_GLOBAL__sub_I_pixelX+0xc4>)
   d4788:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d478c:	6831      	ldr	r1, [r6, #0]
   d478e:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
   d4792:	2200      	movs	r2, #0
   d4794:	ea11 0504 	ands.w	r5, r1, r4
   d4798:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d479a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d479e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d47a2:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d47a6:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d47aa:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d47ae:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d47b2:	461c      	mov	r4, r3
   d47b4:	d10a      	bne.n	d47cc <_GLOBAL__sub_I_pixelX+0x88>
   d47b6:	4630      	mov	r0, r6
   d47b8:	f7ff fc75 	bl	d40a6 <__cxa_guard_acquire>
   d47bc:	b130      	cbz	r0, d47cc <_GLOBAL__sub_I_pixelX+0x88>
   d47be:	4629      	mov	r1, r5
   d47c0:	4812      	ldr	r0, [pc, #72]	; (d480c <_GLOBAL__sub_I_pixelX+0xc8>)
   d47c2:	f001 fae1 	bl	d5d88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d47c6:	4630      	mov	r0, r6
   d47c8:	f7ff fc72 	bl	d40b0 <__cxa_guard_release>
   d47cc:	4810      	ldr	r0, [pc, #64]	; (d4810 <_GLOBAL__sub_I_pixelX+0xcc>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d47ce:	4b0f      	ldr	r3, [pc, #60]	; (d480c <_GLOBAL__sub_I_pixelX+0xc8>)
   d47d0:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d47d4:	2300      	movs	r3, #0
   d47d6:	7203      	strb	r3, [r0, #8]
   d47d8:	7243      	strb	r3, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d47da:	6043      	str	r3, [r0, #4]
 public:
  SdFile() {}
   d47dc:	4b0d      	ldr	r3, [pc, #52]	; (d4814 <_GLOBAL__sub_I_pixelX+0xd0>)
   d47de:	6003      	str	r3, [r0, #0]
const int chipSelect = SS;

#define FILE_BASE_NAME "Data"

SdFat sd;
SdFile file;
   d47e0:	4a05      	ldr	r2, [pc, #20]	; (d47f8 <_GLOBAL__sub_I_pixelX+0xb4>)
   d47e2:	490d      	ldr	r1, [pc, #52]	; (d4818 <_GLOBAL__sub_I_pixelX+0xd4>)

    jw.insertKeyValue("Longitud", X);
    jw.insertKeyValue("Latitude", Y);
  }
  Particle.publish("Noise",jw.getBuffer(), PRIVATE);
   d47e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
const int chipSelect = SS;

#define FILE_BASE_NAME "Data"

SdFat sd;
SdFile file;
   d47e8:	f002 bc78 	b.w	d70dc <__aeabi_atexit>
   d47ec:	2003def8 	.word	0x2003def8
   d47f0:	2003dedc 	.word	0x2003dedc
   d47f4:	2003de9c 	.word	0x2003de9c
   d47f8:	2003de98 	.word	0x2003de98
   d47fc:	000d4825 	.word	0x000d4825
   d4800:	2003deb4 	.word	0x2003deb4
   d4804:	2003df30 	.word	0x2003df30
   d4808:	000d80d0 	.word	0x000d80d0
   d480c:	2003dea0 	.word	0x2003dea0
   d4810:	2003defc 	.word	0x2003defc
   d4814:	000d80dc 	.word	0x000d80dc
   d4818:	000d40b7 	.word	0x000d40b7

000d481c <micros>:
   d481c:	f001 b8ac 	b.w	d5978 <HAL_Timer_Get_Micro_Seconds>

000d4820 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4820:	f001 b8a2 	b.w	d5968 <HAL_Delay_Microseconds>

000d4824 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4824:	b510      	push	{r4, lr}
   d4826:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4828:	68c0      	ldr	r0, [r0, #12]
   d482a:	b108      	cbz	r0, d4830 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d482c:	f001 fa40 	bl	d5cb0 <free>
  if (begun) pinMode(pin, INPUT);
   d4830:	7823      	ldrb	r3, [r4, #0]
   d4832:	b11b      	cbz	r3, d483c <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4834:	2100      	movs	r1, #0
   d4836:	79e0      	ldrb	r0, [r4, #7]
   d4838:	f002 fbce 	bl	d6fd8 <pinMode>
}
   d483c:	4620      	mov	r0, r4
   d483e:	bd10      	pop	{r4, pc}

000d4840 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4840:	b538      	push	{r3, r4, r5, lr}
   d4842:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4844:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4846:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4848:	b108      	cbz	r0, d484e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d484a:	f001 fa31 	bl	d5cb0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d484e:	79a3      	ldrb	r3, [r4, #6]
   d4850:	2b06      	cmp	r3, #6
   d4852:	bf0c      	ite	eq
   d4854:	2004      	moveq	r0, #4
   d4856:	2003      	movne	r0, #3
   d4858:	fb10 f005 	smulbb	r0, r0, r5
   d485c:	b280      	uxth	r0, r0
   d485e:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4860:	f001 fa1e 	bl	d5ca0 <malloc>
   d4864:	60e0      	str	r0, [r4, #12]
   d4866:	b128      	cbz	r0, d4874 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4868:	88a2      	ldrh	r2, [r4, #4]
   d486a:	2100      	movs	r1, #0
   d486c:	f003 fbcd 	bl	d800a <memset>
    numLEDs = n;
   d4870:	8065      	strh	r5, [r4, #2]
   d4872:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4874:	80a0      	strh	r0, [r4, #4]
   d4876:	8060      	strh	r0, [r4, #2]
   d4878:	bd38      	pop	{r3, r4, r5, pc}

000d487a <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d487a:	b510      	push	{r4, lr}
   d487c:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d487e:	2101      	movs	r1, #1
   d4880:	79c0      	ldrb	r0, [r0, #7]
   d4882:	f002 fba9 	bl	d6fd8 <pinMode>
  digitalWrite(pin, LOW);
   d4886:	2100      	movs	r1, #0
   d4888:	79e0      	ldrb	r0, [r4, #7]
   d488a:	f002 fbb6 	bl	d6ffa <digitalWrite>
  begun = true;
   d488e:	2301      	movs	r3, #1
   d4890:	7023      	strb	r3, [r4, #0]
   d4892:	bd10      	pop	{r4, pc}

000d4894 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4894:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d4896:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4898:	4605      	mov	r5, r0
   d489a:	460c      	mov	r4, r1
    if (begun) {
   d489c:	b11b      	cbz	r3, d48a6 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d489e:	2100      	movs	r1, #0
   d48a0:	79c0      	ldrb	r0, [r0, #7]
   d48a2:	f002 fb99 	bl	d6fd8 <pinMode>
    }
    pin = p;
    if (begun) {
   d48a6:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d48a8:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d48aa:	b153      	cbz	r3, d48c2 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d48ac:	b2a4      	uxth	r4, r4
   d48ae:	4620      	mov	r0, r4
   d48b0:	2101      	movs	r1, #1
   d48b2:	f002 fb91 	bl	d6fd8 <pinMode>
        digitalWrite(p, LOW);
   d48b6:	4620      	mov	r0, r4
   d48b8:	2100      	movs	r1, #0
    }
}
   d48ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d48be:	f002 bb9c 	b.w	d6ffa <digitalWrite>
   d48c2:	bd38      	pop	{r3, r4, r5, pc}

000d48c4 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d48c4:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d48c6:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d48c8:	4604      	mov	r4, r0
   d48ca:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d48cc:	7183      	strb	r3, [r0, #6]
   d48ce:	7005      	strb	r5, [r0, #0]
   d48d0:	7205      	strb	r5, [r0, #8]
   d48d2:	60c5      	str	r5, [r0, #12]
   d48d4:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d48d6:	f7ff ffb3 	bl	d4840 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d48da:	4620      	mov	r0, r4
   d48dc:	4631      	mov	r1, r6
   d48de:	f7ff ffd9 	bl	d4894 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d48e2:	4620      	mov	r0, r4
   d48e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d48e8 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d48e8:	68c3      	ldr	r3, [r0, #12]
   d48ea:	2b00      	cmp	r3, #0
   d48ec:	f000 818b 	beq.w	d4c06 <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d48f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d48f4:	7983      	ldrb	r3, [r0, #6]
   d48f6:	3b02      	subs	r3, #2
   d48f8:	b2db      	uxtb	r3, r3
   d48fa:	2b04      	cmp	r3, #4
   d48fc:	bf9c      	itt	ls
   d48fe:	4ac4      	ldrls	r2, [pc, #784]	; (d4c10 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4900:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4904:	b087      	sub	sp, #28
   d4906:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4908:	bf88      	it	hi
   d490a:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d490c:	f7ff ff86 	bl	d481c <micros>
   d4910:	692b      	ldr	r3, [r5, #16]
   d4912:	1ac0      	subs	r0, r0, r3
   d4914:	42a0      	cmp	r0, r4
   d4916:	d3f9      	bcc.n	d490c <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4918:	4abe      	ldr	r2, [pc, #760]	; (d4c14 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d491a:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d491c:	ca07      	ldmia	r2, {r0, r1, r2}
   d491e:	ac06      	add	r4, sp, #24
   d4920:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4924:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4926:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4928:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d492c:	3304      	adds	r3, #4
   d492e:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4930:	b922      	cbnz	r2, d493c <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4932:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4936:	2b00      	cmp	r3, #0
   d4938:	f2c0 8155 	blt.w	d4be6 <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d493c:	9c04      	ldr	r4, [sp, #16]
   d493e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4942:	b923      	cbnz	r3, d494e <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4944:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4948:	2b00      	cmp	r3, #0
   d494a:	f2c0 813c 	blt.w	d4bc6 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d494e:	9c05      	ldr	r4, [sp, #20]
   d4950:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4954:	b91b      	cbnz	r3, d495e <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4956:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d495a:	2b00      	cmp	r3, #0
   d495c:	db6e      	blt.n	d4a3c <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d495e:	4bae      	ldr	r3, [pc, #696]	; (d4c18 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d4960:	79ea      	ldrb	r2, [r5, #7]
   d4962:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4964:	4cad      	ldr	r4, [pc, #692]	; (d4c1c <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4966:	49ae      	ldr	r1, [pc, #696]	; (d4c20 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4968:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d496a:	0112      	lsls	r2, r2, #4
   d496c:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d496e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4972:	785b      	ldrb	r3, [r3, #1]
   d4974:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4976:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4978:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d497a:	f003 031f 	and.w	r3, r3, #31
   d497e:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4982:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4984:	433a      	orrs	r2, r7
   d4986:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d4988:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d498a:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d498c:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4990:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4994:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4996:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4998:	2800      	cmp	r0, #0
   d499a:	d044      	beq.n	d4a26 <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d499c:	46cc      	mov	ip, r9
   d499e:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d49a0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d49a4:	f81c eb01 	ldrb.w	lr, [ip], #1
   d49a8:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d49aa:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d49ac:	6863      	ldr	r3, [r4, #4]
   d49ae:	1a9b      	subs	r3, r3, r2
   d49b0:	2b46      	cmp	r3, #70	; 0x46
   d49b2:	d9fb      	bls.n	d49ac <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d49b4:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d49b8:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d49bc:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d49c0:	ea43 0307 	orr.w	r3, r3, r7
   d49c4:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d49c8:	d02f      	beq.n	d4a2a <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d49ca:	6863      	ldr	r3, [r4, #4]
   d49cc:	1a9b      	subs	r3, r3, r2
   d49ce:	2b28      	cmp	r3, #40	; 0x28
   d49d0:	d9fb      	bls.n	d49ca <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d49d2:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d49d6:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d49d8:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d49dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d49e0:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d49e4:	d1e2      	bne.n	d49ac <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d49e6:	ebc9 030c 	rsb	r3, r9, ip
   d49ea:	88a8      	ldrh	r0, [r5, #4]
   d49ec:	b29b      	uxth	r3, r3
   d49ee:	4298      	cmp	r0, r3
   d49f0:	d8d8      	bhi.n	d49a4 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d49f2:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d49f6:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d49fa:	6863      	ldr	r3, [r4, #4]
   d49fc:	1a9b      	subs	r3, r3, r2
   d49fe:	2b46      	cmp	r3, #70	; 0x46
   d4a00:	d9fb      	bls.n	d49fa <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4a02:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4a06:	ebca 0a03 	rsb	sl, sl, r3
   d4a0a:	4582      	cmp	sl, r0
   d4a0c:	f0c0 80d5 	bcc.w	d4bba <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4a10:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4a14:	f7ff ff04 	bl	d4820 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4a18:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4a1a:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4a1e:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4a22:	2800      	cmp	r0, #0
   d4a24:	d1ba      	bne.n	d499c <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4a26:	4602      	mov	r2, r0
   d4a28:	e7e7      	b.n	d49fa <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4a2a:	6863      	ldr	r3, [r4, #4]
   d4a2c:	1a9b      	subs	r3, r3, r2
   d4a2e:	2b11      	cmp	r3, #17
   d4a30:	d8cf      	bhi.n	d49d2 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4a32:	6863      	ldr	r3, [r4, #4]
   d4a34:	1a9b      	subs	r3, r3, r2
   d4a36:	2b11      	cmp	r3, #17
   d4a38:	d9f7      	bls.n	d4a2a <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4a3a:	e7ca      	b.n	d49d2 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a3c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a40:	2b00      	cmp	r3, #0
   d4a42:	da8c      	bge.n	d495e <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a44:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a48:	2b00      	cmp	r3, #0
   d4a4a:	da88      	bge.n	d495e <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4a4c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a50:	2b00      	cmp	r3, #0
   d4a52:	da84      	bge.n	d495e <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4a54:	9801      	ldr	r0, [sp, #4]
   d4a56:	f001 f923 	bl	d5ca0 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4a5a:	2800      	cmp	r0, #0
   d4a5c:	f43f af7f 	beq.w	d495e <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4a60:	88ab      	ldrh	r3, [r5, #4]
   d4a62:	2b00      	cmp	r3, #0
   d4a64:	f000 80d0 	beq.w	d4c08 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4a68:	2700      	movs	r7, #0
   d4a6a:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4a6c:	4e6d      	ldr	r6, [pc, #436]	; (d4c24 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d4a6e:	496e      	ldr	r1, [pc, #440]	; (d4c28 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4a70:	e000      	b.n	d4a74 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4a72:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4a74:	68ea      	ldr	r2, [r5, #12]
   d4a76:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4a78:	f103 0e01 	add.w	lr, r3, #1
   d4a7c:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4a80:	bf14      	ite	ne
   d4a82:	46b0      	movne	r8, r6
   d4a84:	4688      	moveq	r8, r1
   d4a86:	fa1f fe8e 	uxth.w	lr, lr
   d4a8a:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4a8e:	bf14      	ite	ne
   d4a90:	46b1      	movne	r9, r6
   d4a92:	4689      	moveq	r9, r1
   d4a94:	f012 0f20 	tst.w	r2, #32
   d4a98:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4a9c:	bf18      	it	ne
   d4a9e:	46b2      	movne	sl, r6
   d4aa0:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4aa4:	bf08      	it	eq
   d4aa6:	468a      	moveq	sl, r1
   d4aa8:	f103 0802 	add.w	r8, r3, #2
   d4aac:	f012 0f10 	tst.w	r2, #16
   d4ab0:	f103 0e03 	add.w	lr, r3, #3
   d4ab4:	bf14      	ite	ne
   d4ab6:	46b4      	movne	ip, r6
   d4ab8:	468c      	moveq	ip, r1
   d4aba:	fa1f f888 	uxth.w	r8, r8
   d4abe:	f012 0f08 	tst.w	r2, #8
   d4ac2:	fa1f fe8e 	uxth.w	lr, lr
   d4ac6:	f103 0904 	add.w	r9, r3, #4
   d4aca:	fa1f f989 	uxth.w	r9, r9
   d4ace:	bf14      	ite	ne
   d4ad0:	46b3      	movne	fp, r6
   d4ad2:	468b      	moveq	fp, r1
   d4ad4:	f012 0f04 	tst.w	r2, #4
   d4ad8:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4adc:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4ae0:	bf14      	ite	ne
   d4ae2:	46b2      	movne	sl, r6
   d4ae4:	468a      	moveq	sl, r1
   d4ae6:	f103 0805 	add.w	r8, r3, #5
   d4aea:	f012 0f02 	tst.w	r2, #2
   d4aee:	f103 0c06 	add.w	ip, r3, #6
   d4af2:	f103 0e07 	add.w	lr, r3, #7
   d4af6:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d4afa:	fa1f fe8e 	uxth.w	lr, lr
   d4afe:	bf14      	ite	ne
   d4b00:	46b1      	movne	r9, r6
   d4b02:	4689      	moveq	r9, r1
   d4b04:	fa1f f888 	uxth.w	r8, r8
   d4b08:	f012 0f01 	tst.w	r2, #1
   d4b0c:	fa1f fc8c 	uxth.w	ip, ip
   d4b10:	bf14      	ite	ne
   d4b12:	4632      	movne	r2, r6
   d4b14:	460a      	moveq	r2, r1
   d4b16:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4b1a:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d4b1e:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4b22:	3701      	adds	r7, #1
   d4b24:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4b28:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4b2a:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4b2e:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4b30:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4b32:	d89e      	bhi.n	d4a72 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4b34:	f103 0209 	add.w	r2, r3, #9
   d4b38:	330a      	adds	r3, #10
   d4b3a:	b292      	uxth	r2, r2
   d4b3c:	b29b      	uxth	r3, r3
   d4b3e:	0052      	lsls	r2, r2, #1
   d4b40:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4b42:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4b44:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4b48:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4b4a:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4b4c:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4b4e:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4b50:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4b52:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b56:	4e30      	ldr	r6, [pc, #192]	; (d4c18 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4b58:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4b5c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4b60:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4b64:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4b68:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4b6c:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4b70:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4b74:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b78:	79eb      	ldrb	r3, [r5, #7]
   d4b7a:	6831      	ldr	r1, [r6, #0]
   d4b7c:	011b      	lsls	r3, r3, #4
   d4b7e:	18ce      	adds	r6, r1, r3
   d4b80:	5cc9      	ldrb	r1, [r1, r3]
   d4b82:	7873      	ldrb	r3, [r6, #1]
   d4b84:	f003 031f 	and.w	r3, r3, #31
   d4b88:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4b8c:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b8e:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4b92:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4b96:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4b9a:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4b9c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4ba0:	2b00      	cmp	r3, #0
   d4ba2:	d0fb      	beq.n	d4b9c <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4ba4:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4ba6:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4baa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4bae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4bb2:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d4bb6:	f001 f87b 	bl	d5cb0 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4bba:	f7ff fe2f 	bl	d481c <micros>
   d4bbe:	6128      	str	r0, [r5, #16]
}
   d4bc0:	b007      	add	sp, #28
   d4bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bc6:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bca:	2b00      	cmp	r3, #0
   d4bcc:	f6bf aebf 	bge.w	d494e <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bd0:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bd4:	2b00      	cmp	r3, #0
   d4bd6:	f6bf aeba 	bge.w	d494e <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4bda:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bde:	2b00      	cmp	r3, #0
   d4be0:	f6bf aeb5 	bge.w	d494e <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d4be4:	e736      	b.n	d4a54 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4be6:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bea:	2b00      	cmp	r3, #0
   d4bec:	f6bf aea6 	bge.w	d493c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bf0:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bf4:	2b00      	cmp	r3, #0
   d4bf6:	f6bf aea1 	bge.w	d493c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4bfa:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bfe:	2b00      	cmp	r3, #0
   d4c00:	f6bf ae9c 	bge.w	d493c <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4c04:	e726      	b.n	d4a54 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4c06:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4c08:	2304      	movs	r3, #4
   d4c0a:	2202      	movs	r2, #2
   d4c0c:	e799      	b.n	d4b42 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4c0e:	bf00      	nop
   d4c10:	000d8220 	.word	0x000d8220
   d4c14:	000d8214 	.word	0x000d8214
   d4c18:	2003e3cc 	.word	0x2003e3cc
   d4c1c:	e000edf0 	.word	0xe000edf0
   d4c20:	e0001000 	.word	0xe0001000
   d4c24:	ffff800d 	.word	0xffff800d
   d4c28:	ffff8006 	.word	0xffff8006

000d4c2c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4c2e:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4c30:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
   d4c34:	428c      	cmp	r4, r1
   d4c36:	d927      	bls.n	d4c88 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
   d4c38:	7a04      	ldrb	r4, [r0, #8]
   d4c3a:	b144      	cbz	r4, d4c4e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   d4c3c:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   d4c40:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   d4c44:	fb14 f405 	smulbb	r4, r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d4c48:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   d4c4a:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   d4c4c:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
   d4c4e:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
   d4c50:	68c6      	ldr	r6, [r0, #12]
   d4c52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d4c56:	2f08      	cmp	r7, #8
   d4c58:	eb06 0401 	add.w	r4, r6, r1
   d4c5c:	d811      	bhi.n	d4c82 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
   d4c5e:	2001      	movs	r0, #1
   d4c60:	40b8      	lsls	r0, r7
   d4c62:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
   d4c66:	d108      	bne.n	d4c7a <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
   d4c68:	06c0      	lsls	r0, r0, #27
   d4c6a:	d50a      	bpl.n	d4c82 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d4c6c:	2aff      	cmp	r2, #255	; 0xff
   d4c6e:	bf08      	it	eq
   d4c70:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
   d4c72:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   d4c74:	7065      	strb	r5, [r4, #1]
          *p = g;
   d4c76:	70a3      	strb	r3, [r4, #2]
   d4c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4c7a:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   d4c7c:	7062      	strb	r2, [r4, #1]
          *p = b;
   d4c7e:	70a5      	strb	r5, [r4, #2]
   d4c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d4c82:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   d4c84:	7063      	strb	r3, [r4, #1]
          *p = b;
   d4c86:	70a5      	strb	r5, [r4, #2]
   d4c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c8a <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d4c8a:	8882      	ldrh	r2, [r0, #4]
   d4c8c:	68c0      	ldr	r0, [r0, #12]
   d4c8e:	2100      	movs	r1, #0
   d4c90:	f003 b9bb 	b.w	d800a <memset>

000d4c94 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d4c94:	b508      	push	{r3, lr}
   d4c96:	f000 fde7 	bl	d5868 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4c9a:	f000 fde5 	bl	d5868 <HAL_Pin_Map>
   d4c9e:	4b01      	ldr	r3, [pc, #4]	; (d4ca4 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4ca0:	6018      	str	r0, [r3, #0]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	2003e3cc 	.word	0x2003e3cc

000d4ca8 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d4ca8:	f000 bdde 	b.w	d5868 <HAL_Pin_Map>

000d4cac <_GLOBAL__sub_I__ZN7istream3getEv>:
   d4cac:	f000 bddc 	b.w	d5868 <HAL_Pin_Map>

000d4cb0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4cb0:	b510      	push	{r4, lr}
   d4cb2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4cb4:	3024      	adds	r0, #36	; 0x24
   d4cb6:	f000 f98b 	bl	d4fd0 <_ZN8FatCache4syncEv>
   d4cba:	b128      	cbz	r0, d4cc8 <_ZN9FatVolume9cacheSyncEv+0x18>
   d4cbc:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d4cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4cc4:	f000 b984 	b.w	d4fd0 <_ZN8FatCache4syncEv>
  }
   d4cc8:	bd10      	pop	{r4, pc}

000d4cca <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d4cca:	f000 bdcd 	b.w	d5868 <HAL_Pin_Map>

000d4cce <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d4cce:	f000 bdcb 	b.w	d5868 <HAL_Pin_Map>

000d4cd2 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d4cd2:	f000 bdc9 	b.w	d5868 <HAL_Pin_Map>

000d4cd6 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d4cd6:	f000 bdc7 	b.w	d5868 <HAL_Pin_Map>

000d4cda <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4cda:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4cdc:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4cde:	f043 0304 	orr.w	r3, r3, #4
   d4ce2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4ce4:	f100 0210 	add.w	r2, r0, #16
   d4ce8:	6880      	ldr	r0, [r0, #8]
   d4cea:	f000 ba27 	b.w	d513c <_ZN9FatVolume15allocateClusterEmPm>

000d4cee <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d4cee:	b510      	push	{r4, lr}
   d4cf0:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4cf2:	6880      	ldr	r0, [r0, #8]
   d4cf4:	460a      	mov	r2, r1
   d4cf6:	3024      	adds	r0, #36	; 0x24
   d4cf8:	69a1      	ldr	r1, [r4, #24]
   d4cfa:	f000 f990 	bl	d501e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d4cfe:	b120      	cbz	r0, d4d0a <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d4d00:	88a3      	ldrh	r3, [r4, #4]
   d4d02:	f003 030f 	and.w	r3, r3, #15
   d4d06:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d4d0a:	bd10      	pop	{r4, pc}

000d4d0c <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d10:	460e      	mov	r6, r1
   d4d12:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d4d14:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4d16:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d4d18:	2900      	cmp	r1, #0
   d4d1a:	d039      	beq.n	d4d90 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d4d1c:	6945      	ldr	r5, [r0, #20]
   d4d1e:	42b5      	cmp	r5, r6
   d4d20:	d03a      	beq.n	d4d98 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d4d22:	b90e      	cbnz	r6, d4d28 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d4d24:	6106      	str	r6, [r0, #16]
    goto done;
   d4d26:	e031      	b.n	d4d8c <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d4d28:	070b      	lsls	r3, r1, #28
   d4d2a:	d503      	bpl.n	d4d34 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d4d2c:	69c3      	ldr	r3, [r0, #28]
   d4d2e:	429e      	cmp	r6, r3
   d4d30:	d82e      	bhi.n	d4d90 <_ZN7FatFile7seekSetEm+0x84>
   d4d32:	e007      	b.n	d4d44 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d4d34:	0688      	lsls	r0, r1, #26
   d4d36:	d505      	bpl.n	d4d44 <_ZN7FatFile7seekSetEm+0x38>
   d4d38:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d4d3a:	891b      	ldrh	r3, [r3, #8]
   d4d3c:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d4d40:	d826      	bhi.n	d4d90 <_ZN7FatFile7seekSetEm+0x84>
   d4d42:	e023      	b.n	d4d8c <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4d44:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d4d48:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d4d4c:	1e6a      	subs	r2, r5, #1
   d4d4e:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4d52:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4d54:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4d56:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d4d58:	429a      	cmp	r2, r3
   d4d5a:	d800      	bhi.n	d4d5e <_ZN7FatFile7seekSetEm+0x52>
   d4d5c:	b94d      	cbnz	r5, d4d72 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4d5e:	064a      	lsls	r2, r1, #25
   d4d60:	bf4c      	ite	mi
   d4d62:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d4d66:	6a22      	ldrpl	r2, [r4, #32]
   d4d68:	6122      	str	r2, [r4, #16]
   d4d6a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4d6c:	f104 0810 	add.w	r8, r4, #16
   d4d70:	e00a      	b.n	d4d88 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d4d72:	1a9b      	subs	r3, r3, r2
   d4d74:	e7f9      	b.n	d4d6a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4d76:	4642      	mov	r2, r8
   d4d78:	6921      	ldr	r1, [r4, #16]
   d4d7a:	68a0      	ldr	r0, [r4, #8]
   d4d7c:	f000 f979 	bl	d5072 <_ZN9FatVolume6fatGetEmPm>
   d4d80:	2800      	cmp	r0, #0
   d4d82:	f105 35ff 	add.w	r5, r5, #4294967295
   d4d86:	dd03      	ble.n	d4d90 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d4d88:	2d00      	cmp	r5, #0
   d4d8a:	d1f4      	bne.n	d4d76 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d4d8c:	6166      	str	r6, [r4, #20]
   d4d8e:	e003      	b.n	d4d98 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d4d90:	6127      	str	r7, [r4, #16]
  return false;
   d4d92:	2000      	movs	r0, #0
   d4d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d4d98:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d4d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4da0 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4da0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d4da2:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4da4:	4604      	mov	r4, r0
  if (!isOpen()) {
   d4da6:	b90b      	cbnz	r3, d4dac <_ZN7FatFile4syncEv+0xc>
    return true;
   d4da8:	2001      	movs	r0, #1
   d4daa:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d4dac:	7883      	ldrb	r3, [r0, #2]
   d4dae:	075a      	lsls	r2, r3, #29
   d4db0:	d523      	bpl.n	d4dfa <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d4db2:	2101      	movs	r1, #1
   d4db4:	f7ff ff9b 	bl	d4cee <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4db8:	4605      	mov	r5, r0
   d4dba:	b928      	cbnz	r0, d4dc8 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d4dbc:	7863      	ldrb	r3, [r4, #1]
   d4dbe:	f043 0301 	orr.w	r3, r3, #1
   d4dc2:	7063      	strb	r3, [r4, #1]
  return false;
   d4dc4:	2000      	movs	r0, #0
   d4dc6:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4dc8:	7803      	ldrb	r3, [r0, #0]
   d4dca:	2be5      	cmp	r3, #229	; 0xe5
   d4dcc:	d0f6      	beq.n	d4dbc <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d4dce:	7823      	ldrb	r3, [r4, #0]
   d4dd0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d4dd2:	bf44      	itt	mi
   d4dd4:	69e3      	ldrmi	r3, [r4, #28]
   d4dd6:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d4dd8:	8c23      	ldrh	r3, [r4, #32]
   d4dda:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d4ddc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4dde:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d4de0:	4b09      	ldr	r3, [pc, #36]	; (d4e08 <_ZN7FatFile4syncEv+0x68>)
   d4de2:	681b      	ldr	r3, [r3, #0]
   d4de4:	b12b      	cbz	r3, d4df2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d4de6:	f100 0116 	add.w	r1, r0, #22
   d4dea:	3018      	adds	r0, #24
   d4dec:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d4dee:	8b2b      	ldrh	r3, [r5, #24]
   d4df0:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d4df2:	78a3      	ldrb	r3, [r4, #2]
   d4df4:	f023 0304 	bic.w	r3, r3, #4
   d4df8:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d4dfa:	68a0      	ldr	r0, [r4, #8]
   d4dfc:	f7ff ff58 	bl	d4cb0 <_ZN9FatVolume9cacheSyncEv>
   d4e00:	2800      	cmp	r0, #0
   d4e02:	d0db      	beq.n	d4dbc <_ZN7FatFile4syncEv+0x1c>
   d4e04:	e7d0      	b.n	d4da8 <_ZN7FatFile4syncEv+0x8>
   d4e06:	bf00      	nop
   d4e08:	2003e3d0 	.word	0x2003e3d0

000d4e0c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4e10:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4e12:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4e14:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4e16:	4604      	mov	r4, r0
   d4e18:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4e1a:	d508      	bpl.n	d4e2e <_ZN7FatFile5writeEPKvj+0x22>
   d4e1c:	7883      	ldrb	r3, [r0, #2]
   d4e1e:	079a      	lsls	r2, r3, #30
   d4e20:	d505      	bpl.n	d4e2e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d4e22:	071b      	lsls	r3, r3, #28
   d4e24:	d50b      	bpl.n	d4e3e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d4e26:	69e1      	ldr	r1, [r4, #28]
   d4e28:	f7ff ff70 	bl	d4d0c <_ZN7FatFile7seekSetEm>
   d4e2c:	b938      	cbnz	r0, d4e3e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d4e2e:	7863      	ldrb	r3, [r4, #1]
   d4e30:	f043 0301 	orr.w	r3, r3, #1
   d4e34:	7063      	strb	r3, [r4, #1]
  return -1;
   d4e36:	f04f 30ff 	mov.w	r0, #4294967295
   d4e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d4e3e:	6963      	ldr	r3, [r4, #20]
   d4e40:	43db      	mvns	r3, r3
   d4e42:	4598      	cmp	r8, r3
   d4e44:	d8f3      	bhi.n	d4e2e <_ZN7FatFile5writeEPKvj+0x22>
   d4e46:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4e48:	f04f 0a00 	mov.w	sl, #0
   d4e4c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4e4e:	2e00      	cmp	r6, #0
   d4e50:	f000 8081 	beq.w	d4f56 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d4e54:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4e56:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4e58:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d4e5c:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4e60:	d11c      	bne.n	d4e9c <_ZN7FatFile5writeEPKvj+0x90>
   d4e62:	b9df      	cbnz	r7, d4e9c <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d4e64:	6921      	ldr	r1, [r4, #16]
   d4e66:	b171      	cbz	r1, d4e86 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4e68:	f104 0210 	add.w	r2, r4, #16
   d4e6c:	f000 f901 	bl	d5072 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d4e70:	2800      	cmp	r0, #0
   d4e72:	dbdc      	blt.n	d4e2e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d4e74:	f040 808e 	bne.w	d4f94 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d4e78:	4620      	mov	r0, r4
   d4e7a:	f7ff ff2e 	bl	d4cda <_ZN7FatFile10addClusterEv>
   d4e7e:	2800      	cmp	r0, #0
   d4e80:	f040 8088 	bne.w	d4f94 <_ZN7FatFile5writeEPKvj+0x188>
   d4e84:	e7d3      	b.n	d4e2e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d4e86:	6a23      	ldr	r3, [r4, #32]
   d4e88:	b93b      	cbnz	r3, d4e9a <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d4e8a:	4620      	mov	r0, r4
   d4e8c:	f7ff ff25 	bl	d4cda <_ZN7FatFile10addClusterEv>
   d4e90:	2800      	cmp	r0, #0
   d4e92:	d0cc      	beq.n	d4e2e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d4e94:	6923      	ldr	r3, [r4, #16]
   d4e96:	6223      	str	r3, [r4, #32]
   d4e98:	e000      	b.n	d4e9c <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d4e9a:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4e9c:	6921      	ldr	r1, [r4, #16]
   d4e9e:	68a0      	ldr	r0, [r4, #8]
   d4ea0:	f000 f8e1 	bl	d5066 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4ea4:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d4ea6:	b917      	cbnz	r7, d4eae <_ZN7FatFile5writeEPKvj+0xa2>
   d4ea8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d4eac:	d221      	bcs.n	d4ef2 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d4eae:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d4eb2:	42b5      	cmp	r5, r6
   d4eb4:	bf28      	it	cs
   d4eb6:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d4eb8:	b937      	cbnz	r7, d4ec8 <_ZN7FatFile5writeEPKvj+0xbc>
   d4eba:	6963      	ldr	r3, [r4, #20]
   d4ebc:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d4ebe:	4293      	cmp	r3, r2
   d4ec0:	bf34      	ite	cc
   d4ec2:	2201      	movcc	r2, #1
   d4ec4:	2205      	movcs	r2, #5
   d4ec6:	e000      	b.n	d4eca <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d4ec8:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4eca:	68a0      	ldr	r0, [r4, #8]
   d4ecc:	3024      	adds	r0, #36	; 0x24
   d4ece:	f000 f8a6 	bl	d501e <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d4ed2:	2800      	cmp	r0, #0
   d4ed4:	d0ab      	beq.n	d4e2e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4ed6:	4438      	add	r0, r7
   d4ed8:	462a      	mov	r2, r5
   d4eda:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d4edc:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4ede:	f003 f889 	bl	d7ff4 <memcpy>
      if (512 == (n + blockOffset)) {
   d4ee2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d4ee6:	d130      	bne.n	d4f4a <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4ee8:	68a0      	ldr	r0, [r4, #8]
   d4eea:	3024      	adds	r0, #36	; 0x24
   d4eec:	f000 f870 	bl	d4fd0 <_ZN8FatCache4syncEv>
   d4ef0:	e017      	b.n	d4f22 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d4ef2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4ef6:	68a0      	ldr	r0, [r4, #8]
   d4ef8:	d315      	bcc.n	d4f26 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d4efa:	7902      	ldrb	r2, [r0, #4]
   d4efc:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d4efe:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d4f00:	b2d2      	uxtb	r2, r2
   d4f02:	4293      	cmp	r3, r2
   d4f04:	bf28      	it	cs
   d4f06:	4613      	movcs	r3, r2
   d4f08:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4f0a:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d4f0c:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4f10:	d302      	bcc.n	d4f18 <_ZN7FatFile5writeEPKvj+0x10c>
   d4f12:	441a      	add	r2, r3
   d4f14:	4291      	cmp	r1, r2
   d4f16:	d337      	bcc.n	d4f88 <_ZN7FatFile5writeEPKvj+0x17c>
   d4f18:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d4f1a:	464a      	mov	r2, r9
   d4f1c:	6838      	ldr	r0, [r7, #0]
   d4f1e:	f000 fac8 	bl	d54b2 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d4f22:	b990      	cbnz	r0, d4f4a <_ZN7FatFile5writeEPKvj+0x13e>
   d4f24:	e783      	b.n	d4e2e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d4f26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4f28:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4f2a:	bf02      	ittt	eq
   d4f2c:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4f30:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4f34:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d4f36:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4f38:	464a      	mov	r2, r9
   d4f3a:	6818      	ldr	r0, [r3, #0]
   d4f3c:	f000 fa47 	bl	d53ce <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d4f40:	2800      	cmp	r0, #0
   d4f42:	f43f af74 	beq.w	d4e2e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d4f46:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d4f4a:	6963      	ldr	r3, [r4, #20]
   d4f4c:	442b      	add	r3, r5
   d4f4e:	6163      	str	r3, [r4, #20]
    src += n;
   d4f50:	44a9      	add	r9, r5
    nToWrite -= n;
   d4f52:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4f54:	e77a      	b.n	d4e4c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d4f56:	69e2      	ldr	r2, [r4, #28]
   d4f58:	4293      	cmp	r3, r2
   d4f5a:	d901      	bls.n	d4f60 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d4f5c:	61e3      	str	r3, [r4, #28]
   d4f5e:	e002      	b.n	d4f66 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d4f60:	4b0f      	ldr	r3, [pc, #60]	; (d4fa0 <_ZN7FatFile5writeEPKvj+0x194>)
   d4f62:	681b      	ldr	r3, [r3, #0]
   d4f64:	b11b      	cbz	r3, d4f6e <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d4f66:	78a3      	ldrb	r3, [r4, #2]
   d4f68:	f043 0304 	orr.w	r3, r3, #4
   d4f6c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d4f6e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d4f72:	2b00      	cmp	r3, #0
   d4f74:	db02      	blt.n	d4f7c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d4f76:	4640      	mov	r0, r8
   d4f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d4f7c:	4620      	mov	r0, r4
   d4f7e:	f7ff ff0f 	bl	d4da0 <_ZN7FatFile4syncEv>
   d4f82:	2800      	cmp	r0, #0
   d4f84:	d1f7      	bne.n	d4f76 <_ZN7FatFile5writeEPKvj+0x16a>
   d4f86:	e752      	b.n	d4e2e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4f88:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4f8c:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4f90:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4f92:	e7c1      	b.n	d4f18 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4f94:	6921      	ldr	r1, [r4, #16]
   d4f96:	68a0      	ldr	r0, [r4, #8]
   d4f98:	f000 f865 	bl	d5066 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4f9c:	4601      	mov	r1, r0
   d4f9e:	e783      	b.n	d4ea8 <_ZN7FatFile5writeEPKvj+0x9c>
   d4fa0:	2003e3d0 	.word	0x2003e3d0

000d4fa4 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d4fa4:	f000 bc60 	b.w	d5868 <HAL_Pin_Map>

000d4fa8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4fa8:	b570      	push	{r4, r5, r6, lr}
   d4faa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4fac:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4fae:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4fb0:	b149      	cbz	r1, d4fc6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4fb2:	f003 f876 	bl	d80a2 <strlen>
   d4fb6:	682b      	ldr	r3, [r5, #0]
   d4fb8:	4602      	mov	r2, r0
   d4fba:	4621      	mov	r1, r4
   d4fbc:	4628      	mov	r0, r5
   d4fbe:	68db      	ldr	r3, [r3, #12]
    }
   d4fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4fc4:	4718      	bx	r3
    }
   d4fc6:	bd70      	pop	{r4, r5, r6, pc}

000d4fc8 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d4fc8:	f000 bc4e 	b.w	d5868 <HAL_Pin_Map>

000d4fcc <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d4fcc:	f000 bc4c 	b.w	d5868 <HAL_Pin_Map>

000d4fd0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d4fd0:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d4fd2:	7803      	ldrb	r3, [r0, #0]
   d4fd4:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d4fd6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d4fd8:	d51e      	bpl.n	d5018 <_ZN8FatCache4syncEv+0x48>
   d4fda:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4fdc:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d4fde:	f100 060c 	add.w	r6, r0, #12
   d4fe2:	4632      	mov	r2, r6
   d4fe4:	6818      	ldr	r0, [r3, #0]
   d4fe6:	f000 f9f2 	bl	d53ce <_ZN9SdSpiCard10writeBlockEmPKh>
   d4fea:	4605      	mov	r5, r0
   d4fec:	b908      	cbnz	r0, d4ff2 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d4fee:	2500      	movs	r5, #0
   d4ff0:	e013      	b.n	d501a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d4ff2:	7823      	ldrb	r3, [r4, #0]
   d4ff4:	079b      	lsls	r3, r3, #30
   d4ff6:	d404      	bmi.n	d5002 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d4ff8:	7823      	ldrb	r3, [r4, #0]
   d4ffa:	f023 0301 	bic.w	r3, r3, #1
   d4ffe:	7023      	strb	r3, [r4, #0]
   d5000:	e00b      	b.n	d501a <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5002:	6863      	ldr	r3, [r4, #4]
   d5004:	68a0      	ldr	r0, [r4, #8]
   d5006:	6919      	ldr	r1, [r3, #16]
   d5008:	4632      	mov	r2, r6
   d500a:	4401      	add	r1, r0
   d500c:	6818      	ldr	r0, [r3, #0]
   d500e:	f000 f9de 	bl	d53ce <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5012:	2800      	cmp	r0, #0
   d5014:	d1f0      	bne.n	d4ff8 <_ZN8FatCache4syncEv+0x28>
   d5016:	e7ea      	b.n	d4fee <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5018:	2501      	movs	r5, #1

fail:
  return false;
}
   d501a:	4628      	mov	r0, r5
   d501c:	bd70      	pop	{r4, r5, r6, pc}

000d501e <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d501e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5020:	6883      	ldr	r3, [r0, #8]
   d5022:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5024:	4604      	mov	r4, r0
   d5026:	460e      	mov	r6, r1
   d5028:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d502a:	d014      	beq.n	d5056 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d502c:	f7ff ffd0 	bl	d4fd0 <_ZN8FatCache4syncEv>
   d5030:	b908      	cbnz	r0, d5036 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5032:	2000      	movs	r0, #0
   d5034:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5036:	076b      	lsls	r3, r5, #29
   d5038:	d503      	bpl.n	d5042 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d503a:	2300      	movs	r3, #0
   d503c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d503e:	60a6      	str	r6, [r4, #8]
   d5040:	e009      	b.n	d5056 <_ZN8FatCache4readEmh+0x38>
   d5042:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5044:	f104 020c 	add.w	r2, r4, #12
   d5048:	4631      	mov	r1, r6
   d504a:	6818      	ldr	r0, [r3, #0]
   d504c:	f000 f979 	bl	d5342 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5050:	2800      	cmp	r0, #0
   d5052:	d1f2      	bne.n	d503a <_ZN8FatCache4readEmh+0x1c>
   d5054:	e7ed      	b.n	d5032 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5056:	7823      	ldrb	r3, [r4, #0]
   d5058:	4620      	mov	r0, r4
   d505a:	f005 0503 	and.w	r5, r5, #3
   d505e:	431d      	orrs	r5, r3
   d5060:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5064:	bd70      	pop	{r4, r5, r6, pc}

000d5066 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5066:	7983      	ldrb	r3, [r0, #6]
   d5068:	6940      	ldr	r0, [r0, #20]
   d506a:	3902      	subs	r1, #2
   d506c:	4099      	lsls	r1, r3
}
   d506e:	4408      	add	r0, r1
   d5070:	4770      	bx	lr

000d5072 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5072:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5074:	b570      	push	{r4, r5, r6, lr}
   d5076:	4605      	mov	r5, r0
   d5078:	460c      	mov	r4, r1
   d507a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d507c:	d802      	bhi.n	d5084 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d507e:	f04f 30ff 	mov.w	r0, #4294967295
   d5082:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5084:	69c3      	ldr	r3, [r0, #28]
   d5086:	4299      	cmp	r1, r3
   d5088:	d8f9      	bhi.n	d507e <_ZN9FatVolume6fatGetEmPm+0xc>
   d508a:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d508c:	2b20      	cmp	r3, #32
   d508e:	d110      	bne.n	d50b2 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5090:	6981      	ldr	r1, [r0, #24]
   d5092:	2202      	movs	r2, #2
   d5094:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5098:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d509c:	f7ff ffbf 	bl	d501e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d50a0:	2800      	cmp	r0, #0
   d50a2:	d0ec      	beq.n	d507e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d50a4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d50a8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d50ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d50b0:	e00f      	b.n	d50d2 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d50b2:	2b10      	cmp	r3, #16
   d50b4:	d1e3      	bne.n	d507e <_ZN9FatVolume6fatGetEmPm+0xc>
   d50b6:	6983      	ldr	r3, [r0, #24]
   d50b8:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d50bc:	2202      	movs	r2, #2
   d50be:	4419      	add	r1, r3
   d50c0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d50c4:	f7ff ffab 	bl	d501e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d50c8:	2800      	cmp	r0, #0
   d50ca:	d0d8      	beq.n	d507e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d50cc:	b2e4      	uxtb	r4, r4
   d50ce:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d50d2:	69ea      	ldr	r2, [r5, #28]
   d50d4:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d50d6:	bf9a      	itte	ls
   d50d8:	6033      	strls	r3, [r6, #0]
  return 1;
   d50da:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d50dc:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d50de:	bd70      	pop	{r4, r5, r6, pc}

000d50e0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d50e0:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d50e2:	b538      	push	{r3, r4, r5, lr}
   d50e4:	460c      	mov	r4, r1
   d50e6:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d50e8:	d801      	bhi.n	d50ee <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d50ea:	2000      	movs	r0, #0
   d50ec:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d50ee:	69c3      	ldr	r3, [r0, #28]
   d50f0:	4299      	cmp	r1, r3
   d50f2:	d8fa      	bhi.n	d50ea <_ZN9FatVolume6fatPutEmm+0xa>
   d50f4:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d50f6:	2b20      	cmp	r3, #32
   d50f8:	d10e      	bne.n	d5118 <_ZN9FatVolume6fatPutEmm+0x38>
   d50fa:	6981      	ldr	r1, [r0, #24]
   d50fc:	2203      	movs	r2, #3
   d50fe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5102:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5106:	f7ff ff8a 	bl	d501e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d510a:	2800      	cmp	r0, #0
   d510c:	d0ed      	beq.n	d50ea <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d510e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5112:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5116:	e00f      	b.n	d5138 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5118:	2b10      	cmp	r3, #16
   d511a:	d1e6      	bne.n	d50ea <_ZN9FatVolume6fatPutEmm+0xa>
   d511c:	6983      	ldr	r3, [r0, #24]
   d511e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5122:	2203      	movs	r2, #3
   d5124:	4419      	add	r1, r3
   d5126:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d512a:	f7ff ff78 	bl	d501e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d512e:	2800      	cmp	r0, #0
   d5130:	d0db      	beq.n	d50ea <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5132:	b2e4      	uxtb	r4, r4
   d5134:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5138:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d513a:	bd38      	pop	{r3, r4, r5, pc}

000d513c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d513c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5140:	68c4      	ldr	r4, [r0, #12]
   d5142:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5144:	4605      	mov	r5, r0
   d5146:	460e      	mov	r6, r1
   d5148:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d514a:	d207      	bcs.n	d515c <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d514c:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d514e:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5150:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5152:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5154:	429c      	cmp	r4, r3
   d5156:	d903      	bls.n	d5160 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5158:	b9cf      	cbnz	r7, d518e <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d515a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d515c:	2701      	movs	r7, #1
   d515e:	e7f7      	b.n	d5150 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5160:	42a6      	cmp	r6, r4
   d5162:	d014      	beq.n	d518e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5164:	aa01      	add	r2, sp, #4
   d5166:	4621      	mov	r1, r4
   d5168:	4628      	mov	r0, r5
   d516a:	f7ff ff82 	bl	d5072 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d516e:	2800      	cmp	r0, #0
   d5170:	db0d      	blt.n	d518e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5172:	d0ed      	beq.n	d5150 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5174:	9b01      	ldr	r3, [sp, #4]
   d5176:	2b00      	cmp	r3, #0
   d5178:	d1ea      	bne.n	d5150 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d517a:	b107      	cbz	r7, d517e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d517c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d517e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5182:	4621      	mov	r1, r4
   d5184:	4628      	mov	r0, r5
   d5186:	f7ff ffab 	bl	d50e0 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d518a:	4607      	mov	r7, r0
   d518c:	b908      	cbnz	r0, d5192 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d518e:	2700      	movs	r7, #0
   d5190:	e00b      	b.n	d51aa <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5192:	b916      	cbnz	r6, d519a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5194:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5198:	e007      	b.n	d51aa <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d519a:	4622      	mov	r2, r4
   d519c:	4631      	mov	r1, r6
   d519e:	4628      	mov	r0, r5
   d51a0:	f7ff ff9e 	bl	d50e0 <_ZN9FatVolume6fatPutEmm>
   d51a4:	2800      	cmp	r0, #0
   d51a6:	d1f5      	bne.n	d5194 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d51a8:	e7f1      	b.n	d518e <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d51aa:	4638      	mov	r0, r7
   d51ac:	b002      	add	sp, #8
   d51ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d51b2 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d51b2:	f000 bb59 	b.w	d5868 <HAL_Pin_Map>

000d51b6 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d51b6:	f000 bb57 	b.w	d5868 <HAL_Pin_Map>

000d51ba <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d51ba:	f000 bb55 	b.w	d5868 <HAL_Pin_Map>
	...

000d51c0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d51c0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d51c2:	4c0e      	ldr	r4, [pc, #56]	; (d51fc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d51c4:	460e      	mov	r6, r1
   d51c6:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d51c8:	f000 fbd6 	bl	d5978 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d51cc:	6823      	ldr	r3, [r4, #0]
   d51ce:	1ac0      	subs	r0, r0, r3
   d51d0:	4b0b      	ldr	r3, [pc, #44]	; (d5200 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d51d2:	4298      	cmp	r0, r3
   d51d4:	d908      	bls.n	d51e8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d51d6:	f000 fbd7 	bl	d5988 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d51da:	4b0a      	ldr	r3, [pc, #40]	; (d5204 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d51dc:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d51de:	f000 fd3f 	bl	d5c60 <spark_process>
   d51e2:	f000 fbc9 	bl	d5978 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d51e6:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d51e8:	f000 fbce 	bl	d5988 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d51ec:	b280      	uxth	r0, r0
   d51ee:	1b80      	subs	r0, r0, r6
}
   d51f0:	42a8      	cmp	r0, r5
   d51f2:	bfd4      	ite	le
   d51f4:	2000      	movle	r0, #0
   d51f6:	2001      	movgt	r0, #1
   d51f8:	bd70      	pop	{r4, r5, r6, pc}
   d51fa:	bf00      	nop
   d51fc:	2003e3d4 	.word	0x2003e3d4
   d5200:	000186a0 	.word	0x000186a0
   d5204:	2003e730 	.word	0x2003e730

000d5208 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5208:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d520a:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d520c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d520e:	b94d      	cbnz	r5, d5224 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5210:	6840      	ldr	r0, [r0, #4]
   d5212:	f000 f975 	bl	d5500 <_ZN14SdSpiAltDriver8activateEv>
   d5216:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5218:	4629      	mov	r1, r5
   d521a:	7d18      	ldrb	r0, [r3, #20]
   d521c:	f001 feed 	bl	d6ffa <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5220:	2301      	movs	r3, #1
   d5222:	7223      	strb	r3, [r4, #8]
   d5224:	bd38      	pop	{r3, r4, r5, pc}

000d5226 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5226:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5228:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d522a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d522c:	b16b      	cbz	r3, d524a <_ZN9SdSpiCard7spiStopEv+0x24>
   d522e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5230:	2101      	movs	r1, #1
   d5232:	7d18      	ldrb	r0, [r3, #20]
   d5234:	f001 fee1 	bl	d6ffa <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5238:	21ff      	movs	r1, #255	; 0xff
   d523a:	6860      	ldr	r0, [r4, #4]
   d523c:	f000 f982 	bl	d5544 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5240:	6860      	ldr	r0, [r4, #4]
   d5242:	f000 f961 	bl	d5508 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d5246:	2300      	movs	r3, #0
   d5248:	7223      	strb	r3, [r4, #8]
   d524a:	bd10      	pop	{r4, pc}

000d524c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d524e:	4604      	mov	r4, r0
   d5250:	460d      	mov	r5, r1
   d5252:	4616      	mov	r6, r2
   d5254:	f000 fb98 	bl	d5988 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5258:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d525a:	6860      	ldr	r0, [r4, #4]
   d525c:	f000 f957 	bl	d550e <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5260:	28ff      	cmp	r0, #255	; 0xff
   d5262:	7260      	strb	r0, [r4, #9]
   d5264:	d109      	bne.n	d527a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d526a:	4639      	mov	r1, r7
   d526c:	4620      	mov	r0, r4
   d526e:	f7ff ffa7 	bl	d51c0 <_ZN9SdSpiCard10isTimedOutEtt>
   d5272:	2800      	cmp	r0, #0
   d5274:	d0f1      	beq.n	d525a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5276:	2355      	movs	r3, #85	; 0x55
   d5278:	e00b      	b.n	d5292 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d527a:	28fe      	cmp	r0, #254	; 0xfe
   d527c:	d001      	beq.n	d5282 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d527e:	2350      	movs	r3, #80	; 0x50
   d5280:	e007      	b.n	d5292 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5282:	4632      	mov	r2, r6
   d5284:	4629      	mov	r1, r5
   d5286:	6860      	ldr	r0, [r4, #4]
   d5288:	f000 f946 	bl	d5518 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d528c:	7260      	strb	r0, [r4, #9]
   d528e:	b130      	cbz	r0, d529e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5290:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5292:	4620      	mov	r0, r4
   d5294:	7023      	strb	r3, [r4, #0]
   d5296:	f7ff ffc6 	bl	d5226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d529a:	2000      	movs	r0, #0
}
   d529c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d529e:	6860      	ldr	r0, [r4, #4]
   d52a0:	f000 f935 	bl	d550e <_ZN14SdSpiAltDriver7receiveEv>
   d52a4:	6860      	ldr	r0, [r4, #4]
   d52a6:	f000 f932 	bl	d550e <_ZN14SdSpiAltDriver7receiveEv>
   d52aa:	2001      	movs	r0, #1
   d52ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52ae <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d52ae:	b570      	push	{r4, r5, r6, lr}
   d52b0:	4604      	mov	r4, r0
   d52b2:	460e      	mov	r6, r1
   d52b4:	f000 fb68 	bl	d5988 <HAL_Timer_Get_Milli_Seconds>
   d52b8:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d52ba:	4632      	mov	r2, r6
   d52bc:	4629      	mov	r1, r5
   d52be:	4620      	mov	r0, r4
   d52c0:	f7ff ff7e 	bl	d51c0 <_ZN9SdSpiCard10isTimedOutEtt>
   d52c4:	b930      	cbnz	r0, d52d4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d52c6:	6860      	ldr	r0, [r4, #4]
   d52c8:	f000 f921 	bl	d550e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d52cc:	28ff      	cmp	r0, #255	; 0xff
   d52ce:	d1f4      	bne.n	d52ba <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d52d0:	2001      	movs	r0, #1
   d52d2:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d52d4:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d52d6:	bd70      	pop	{r4, r5, r6, pc}

000d52d8 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d52d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d52da:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d52dc:	9201      	str	r2, [sp, #4]
   d52de:	4604      	mov	r4, r0
   d52e0:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d52e2:	b90b      	cbnz	r3, d52e8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d52e4:	f7ff ff90 	bl	d5208 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d52e8:	b125      	cbz	r5, d52f4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d52ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d52ee:	4620      	mov	r0, r4
   d52f0:	f7ff ffdd 	bl	d52ae <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d52f4:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d52f8:	6860      	ldr	r0, [r4, #4]
   d52fa:	f000 f923 	bl	d5544 <_ZN14SdSpiAltDriver4sendEh>
   d52fe:	f10d 0607 	add.w	r6, sp, #7
   d5302:	f10d 0703 	add.w	r7, sp, #3
   d5306:	f816 1901 	ldrb.w	r1, [r6], #-1
   d530a:	6860      	ldr	r0, [r4, #4]
   d530c:	f000 f91a 	bl	d5544 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5310:	42be      	cmp	r6, r7
   d5312:	d1f8      	bne.n	d5306 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5314:	2d00      	cmp	r5, #0
   d5316:	bf0c      	ite	eq
   d5318:	2195      	moveq	r1, #149	; 0x95
   d531a:	2187      	movne	r1, #135	; 0x87
   d531c:	6860      	ldr	r0, [r4, #4]
   d531e:	f000 f911 	bl	d5544 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5322:	6860      	ldr	r0, [r4, #4]
   d5324:	f000 f8f3 	bl	d550e <_ZN14SdSpiAltDriver7receiveEv>
   d5328:	250b      	movs	r5, #11
   d532a:	6860      	ldr	r0, [r4, #4]
   d532c:	f000 f8ef 	bl	d550e <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5330:	0603      	lsls	r3, r0, #24
   d5332:	7260      	strb	r0, [r4, #9]
   d5334:	d503      	bpl.n	d533e <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d5336:	3d01      	subs	r5, #1
   d5338:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d533c:	d1f5      	bne.n	d532a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d533e:	b003      	add	sp, #12
   d5340:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5342 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5342:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5344:	7a83      	ldrb	r3, [r0, #10]
   d5346:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5348:	bf18      	it	ne
   d534a:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d534c:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d534e:	460a      	mov	r2, r1
   d5350:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5352:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5354:	f7ff ffc0 	bl	d52d8 <_ZN9SdSpiCard11cardCommandEhm>
   d5358:	b110      	cbz	r0, d5360 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d535a:	2330      	movs	r3, #48	; 0x30
   d535c:	7023      	strb	r3, [r4, #0]
   d535e:	e00b      	b.n	d5378 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d5360:	4629      	mov	r1, r5
   d5362:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5366:	4620      	mov	r0, r4
   d5368:	f7ff ff70 	bl	d524c <_ZN9SdSpiCard8readDataEPhj>
   d536c:	4605      	mov	r5, r0
   d536e:	b118      	cbz	r0, d5378 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d5370:	4620      	mov	r0, r4
   d5372:	f7ff ff58 	bl	d5226 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5376:	e003      	b.n	d5380 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d5378:	4620      	mov	r0, r4
   d537a:	f7ff ff54 	bl	d5226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d537e:	2500      	movs	r5, #0
}
   d5380:	4628      	mov	r0, r5
   d5382:	bd38      	pop	{r3, r4, r5, pc}

000d5384 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d5384:	b538      	push	{r3, r4, r5, lr}
   d5386:	4604      	mov	r4, r0
   d5388:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d538a:	6840      	ldr	r0, [r0, #4]
   d538c:	f000 f8da 	bl	d5544 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d5390:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5394:	4629      	mov	r1, r5
   d5396:	6860      	ldr	r0, [r4, #4]
   d5398:	f000 f8d8 	bl	d554c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d539c:	21ff      	movs	r1, #255	; 0xff
   d539e:	6860      	ldr	r0, [r4, #4]
   d53a0:	f000 f8d0 	bl	d5544 <_ZN14SdSpiAltDriver4sendEh>
   d53a4:	21ff      	movs	r1, #255	; 0xff
   d53a6:	6860      	ldr	r0, [r4, #4]
   d53a8:	f000 f8cc 	bl	d5544 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d53ac:	6860      	ldr	r0, [r4, #4]
   d53ae:	f000 f8ae 	bl	d550e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d53b2:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d53b4:	f000 001f 	and.w	r0, r0, #31
   d53b8:	2805      	cmp	r0, #5
   d53ba:	d006      	beq.n	d53ca <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d53bc:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d53be:	4620      	mov	r0, r4
   d53c0:	7023      	strb	r3, [r4, #0]
   d53c2:	f7ff ff30 	bl	d5226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d53c6:	2000      	movs	r0, #0
   d53c8:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d53ca:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d53cc:	bd38      	pop	{r3, r4, r5, pc}

000d53ce <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d53ce:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d53d0:	7a83      	ldrb	r3, [r0, #10]
   d53d2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d53d4:	bf18      	it	ne
   d53d6:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d53d8:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d53da:	460a      	mov	r2, r1
   d53dc:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d53de:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d53e0:	f7ff ff7a 	bl	d52d8 <_ZN9SdSpiCard11cardCommandEhm>
   d53e4:	4606      	mov	r6, r0
   d53e6:	b108      	cbz	r0, d53ec <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d53e8:	2332      	movs	r3, #50	; 0x32
   d53ea:	e01d      	b.n	d5428 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d53ec:	462a      	mov	r2, r5
   d53ee:	21fe      	movs	r1, #254	; 0xfe
   d53f0:	4620      	mov	r0, r4
   d53f2:	f7ff ffc7 	bl	d5384 <_ZN9SdSpiCard9writeDataEhPKh>
   d53f6:	b1c0      	cbz	r0, d542a <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d53f8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d53fc:	4620      	mov	r0, r4
   d53fe:	f7ff ff56 	bl	d52ae <_ZN9SdSpiCard11waitNotBusyEt>
   d5402:	4605      	mov	r5, r0
   d5404:	b908      	cbnz	r0, d540a <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5406:	235a      	movs	r3, #90	; 0x5a
   d5408:	e00e      	b.n	d5428 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d540a:	4632      	mov	r2, r6
   d540c:	210d      	movs	r1, #13
   d540e:	4620      	mov	r0, r4
   d5410:	f7ff ff62 	bl	d52d8 <_ZN9SdSpiCard11cardCommandEhm>
   d5414:	b938      	cbnz	r0, d5426 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5416:	6860      	ldr	r0, [r4, #4]
   d5418:	f000 f879 	bl	d550e <_ZN14SdSpiAltDriver7receiveEv>
   d541c:	b918      	cbnz	r0, d5426 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d541e:	4620      	mov	r0, r4
   d5420:	f7ff ff01 	bl	d5226 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5424:	e005      	b.n	d5432 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5426:	2329      	movs	r3, #41	; 0x29
   d5428:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d542a:	4620      	mov	r0, r4
   d542c:	f7ff fefb 	bl	d5226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5430:	2500      	movs	r5, #0
}
   d5432:	4628      	mov	r0, r5
   d5434:	bd70      	pop	{r4, r5, r6, pc}

000d5436 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5436:	b538      	push	{r3, r4, r5, lr}
   d5438:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d543a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d543e:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5440:	f7ff ff35 	bl	d52ae <_ZN9SdSpiCard11waitNotBusyEt>
   d5444:	b910      	cbnz	r0, d544c <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d5446:	235b      	movs	r3, #91	; 0x5b
   d5448:	7023      	strb	r3, [r4, #0]
   d544a:	e005      	b.n	d5458 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d544c:	462a      	mov	r2, r5
   d544e:	21fc      	movs	r1, #252	; 0xfc
   d5450:	4620      	mov	r0, r4
   d5452:	f7ff ff97 	bl	d5384 <_ZN9SdSpiCard9writeDataEhPKh>
   d5456:	b918      	cbnz	r0, d5460 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5458:	4620      	mov	r0, r4
   d545a:	f7ff fee4 	bl	d5226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d545e:	2000      	movs	r0, #0
}
   d5460:	bd38      	pop	{r3, r4, r5, pc}

000d5462 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5462:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5464:	7a83      	ldrb	r3, [r0, #10]
   d5466:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5468:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d546a:	bf18      	it	ne
   d546c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d546e:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5470:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5472:	f7ff ff31 	bl	d52d8 <_ZN9SdSpiCard11cardCommandEhm>
   d5476:	b130      	cbz	r0, d5486 <_ZN9SdSpiCard10writeStartEm+0x24>
   d5478:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d547a:	4620      	mov	r0, r4
   d547c:	7023      	strb	r3, [r4, #0]
   d547e:	f7ff fed2 	bl	d5226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5482:	2000      	movs	r0, #0
   d5484:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d5486:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5488:	bd10      	pop	{r4, pc}

000d548a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d548a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d548c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5490:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5492:	f7ff ff0c 	bl	d52ae <_ZN9SdSpiCard11waitNotBusyEt>
   d5496:	4605      	mov	r5, r0
   d5498:	b120      	cbz	r0, d54a4 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d549a:	21fd      	movs	r1, #253	; 0xfd
   d549c:	6860      	ldr	r0, [r4, #4]
   d549e:	f000 f851 	bl	d5544 <_ZN14SdSpiAltDriver4sendEh>
   d54a2:	e001      	b.n	d54a8 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d54a4:	2356      	movs	r3, #86	; 0x56
   d54a6:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d54a8:	4620      	mov	r0, r4
   d54aa:	f7ff febc 	bl	d5226 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d54ae:	4628      	mov	r0, r5
   d54b0:	bd38      	pop	{r3, r4, r5, pc}

000d54b2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d54b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54b4:	4605      	mov	r5, r0
   d54b6:	4616      	mov	r6, r2
   d54b8:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d54ba:	f7ff ffd2 	bl	d5462 <_ZN9SdSpiCard10writeStartEm>
   d54be:	b170      	cbz	r0, d54de <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d54c0:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d54c2:	42bc      	cmp	r4, r7
   d54c4:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d54c8:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d54ca:	d004      	beq.n	d54d6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d54cc:	f7ff ffb3 	bl	d5436 <_ZN9SdSpiCard9writeDataEPKh>
   d54d0:	b128      	cbz	r0, d54de <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d54d2:	3401      	adds	r4, #1
   d54d4:	e7f5      	b.n	d54c2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d54d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d54da:	f7ff bfd6 	b.w	d548a <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d54de:	4628      	mov	r0, r5
   d54e0:	f7ff fea1 	bl	d5226 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d54e4:	2000      	movs	r0, #0
   d54e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54e8 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d54e8:	f000 b9be 	b.w	d5868 <HAL_Pin_Map>

000d54ec <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d54ec:	f000 b9bc 	b.w	d5868 <HAL_Pin_Map>

000d54f0 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d54f0:	f000 b9ba 	b.w	d5868 <HAL_Pin_Map>

000d54f4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d54f4:	4b01      	ldr	r3, [pc, #4]	; (d54fc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d54f6:	2201      	movs	r2, #1
   d54f8:	701a      	strb	r2, [r3, #0]
   d54fa:	4770      	bx	lr
   d54fc:	2003e3d8 	.word	0x2003e3d8

000d5500 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5500:	1d01      	adds	r1, r0, #4
   d5502:	6800      	ldr	r0, [r0, #0]
   d5504:	f000 bc64 	b.w	d5dd0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5508 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5508:	6800      	ldr	r0, [r0, #0]
   d550a:	f000 bc47 	b.w	d5d9c <_ZN8SPIClass14endTransactionEv>

000d550e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d550e:	21ff      	movs	r1, #255	; 0xff
   d5510:	6800      	ldr	r0, [r0, #0]
   d5512:	f000 bccd 	b.w	d5eb0 <_ZN8SPIClass8transferEh>
	...

000d5518 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5518:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d551a:	4b08      	ldr	r3, [pc, #32]	; (d553c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d551c:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d551e:	2500      	movs	r5, #0
   d5520:	4c07      	ldr	r4, [pc, #28]	; (d5540 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5522:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5524:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5526:	4613      	mov	r3, r2
   d5528:	460a      	mov	r2, r1
   d552a:	4629      	mov	r1, r5
   d552c:	f000 fcc6 	bl	d5ebc <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5530:	7823      	ldrb	r3, [r4, #0]
   d5532:	2b00      	cmp	r3, #0
   d5534:	d0fc      	beq.n	d5530 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5536:	2000      	movs	r0, #0
   d5538:	b003      	add	sp, #12
   d553a:	bd30      	pop	{r4, r5, pc}
   d553c:	000d54f5 	.word	0x000d54f5
   d5540:	2003e3d8 	.word	0x2003e3d8

000d5544 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5544:	6800      	ldr	r0, [r0, #0]
   d5546:	f000 bcb3 	b.w	d5eb0 <_ZN8SPIClass8transferEh>
	...

000d554c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d554c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d554e:	4b07      	ldr	r3, [pc, #28]	; (d556c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5550:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5552:	2500      	movs	r5, #0
   d5554:	4c06      	ldr	r4, [pc, #24]	; (d5570 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5556:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5558:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d555a:	4613      	mov	r3, r2
   d555c:	462a      	mov	r2, r5
   d555e:	f000 fcad 	bl	d5ebc <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5562:	7823      	ldrb	r3, [r4, #0]
   d5564:	2b00      	cmp	r3, #0
   d5566:	d0fc      	beq.n	d5562 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5568:	b003      	add	sp, #12
   d556a:	bd30      	pop	{r4, r5, pc}
   d556c:	000d54f5 	.word	0x000d54f5
   d5570:	2003e3d8 	.word	0x2003e3d8

000d5574 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5574:	f000 b978 	b.w	d5868 <HAL_Pin_Map>

000d5578 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5578:	b510      	push	{r4, lr}
   d557a:	4b05      	ldr	r3, [pc, #20]	; (d5590 <_ZN10JsonBufferD1Ev+0x18>)
   d557c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d557e:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5580:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d5582:	b91b      	cbnz	r3, d558c <_ZN10JsonBufferD1Ev+0x14>
   d5584:	6840      	ldr	r0, [r0, #4]
   d5586:	b108      	cbz	r0, d558c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5588:	f000 fb92 	bl	d5cb0 <free>
	}
}
   d558c:	4620      	mov	r0, r4
   d558e:	bd10      	pop	{r4, pc}
   d5590:	000d823c 	.word	0x000d823c

000d5594 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5594:	b510      	push	{r4, lr}
   d5596:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d5598:	f7ff ffee 	bl	d5578 <_ZN10JsonBufferD1Ev>
   d559c:	4620      	mov	r0, r4
   d559e:	2114      	movs	r1, #20
   d55a0:	f001 fdaa 	bl	d70f8 <_ZdlPvj>
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}

000d55a8 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d55a8:	b510      	push	{r4, lr}
   d55aa:	4b03      	ldr	r3, [pc, #12]	; (d55b8 <_ZN10JsonWriterD1Ev+0x10>)
   d55ac:	6003      	str	r3, [r0, #0]
   d55ae:	4604      	mov	r4, r0
   d55b0:	f7ff ffe2 	bl	d5578 <_ZN10JsonBufferD1Ev>

}
   d55b4:	4620      	mov	r0, r4
   d55b6:	bd10      	pop	{r4, pc}
   d55b8:	000d824c 	.word	0x000d824c

000d55bc <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d55bc:	b510      	push	{r4, lr}
   d55be:	4604      	mov	r4, r0

}
   d55c0:	f7ff fff2 	bl	d55a8 <_ZN10JsonWriterD1Ev>
   d55c4:	4620      	mov	r0, r4
   d55c6:	2130      	movs	r1, #48	; 0x30
   d55c8:	f001 fd96 	bl	d70f8 <_ZdlPvj>
   d55cc:	4620      	mov	r0, r4
   d55ce:	bd10      	pop	{r4, pc}

000d55d0 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d55d0:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d55d2:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d55d4:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d55d6:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d55d8:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d55da:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d55dc:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d55e0:	4770      	bx	lr
	...

000d55e4 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d55e4:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d55e6:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d55e8:	60c3      	str	r3, [r0, #12]
   d55ea:	2301      	movs	r3, #1
   d55ec:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d55ee:	4b05      	ldr	r3, [pc, #20]	; (d5604 <_ZN10JsonWriterC1EPcj+0x20>)
   d55f0:	6003      	str	r3, [r0, #0]
   d55f2:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d55f6:	6041      	str	r1, [r0, #4]
   d55f8:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d55fa:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d55fc:	f7ff ffe8 	bl	d55d0 <_ZN10JsonWriter4initEv>
}
   d5600:	bd10      	pop	{r4, pc}
   d5602:	bf00      	nop
   d5604:	000d824c 	.word	0x000d824c

000d5608 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d5608:	68c3      	ldr	r3, [r0, #12]
   d560a:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d560c:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d560e:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d5610:	bf3f      	itttt	cc
   d5612:	6842      	ldrcc	r2, [r0, #4]
   d5614:	1c5c      	addcc	r4, r3, #1
   d5616:	60c4      	strcc	r4, [r0, #12]
   d5618:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d561a:	bf24      	itt	cs
   d561c:	2301      	movcs	r3, #1
   d561e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d5622:	bd10      	pop	{r4, pc}

000d5624 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5624:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d5626:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5628:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d562a:	b143      	cbz	r3, d563e <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d562c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d5630:	7e59      	ldrb	r1, [r3, #25]
   d5632:	b109      	cbz	r1, d5638 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d5634:	f7ff ffe8 	bl	d5608 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d5638:	6963      	ldr	r3, [r4, #20]
   d563a:	3b01      	subs	r3, #1
   d563c:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d563e:	68a3      	ldr	r3, [r4, #8]
   d5640:	68e0      	ldr	r0, [r4, #12]
   d5642:	6861      	ldr	r1, [r4, #4]
   d5644:	4298      	cmp	r0, r3
   d5646:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d564a:	bf2a      	itet	cs
   d564c:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d564e:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5650:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5654:	bd10      	pop	{r4, pc}

000d5656 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5656:	b570      	push	{r4, r5, r6, lr}
   d5658:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d565a:	68c0      	ldr	r0, [r0, #12]
   d565c:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d565e:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d5660:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5662:	4613      	mov	r3, r2
   d5664:	4430      	add	r0, r6
   d5666:	460a      	mov	r2, r1
   d5668:	4629      	mov	r1, r5
   d566a:	f000 fb29 	bl	d5cc0 <vsnprintf>
	if (count <= spaceAvailable) {
   d566e:	4285      	cmp	r5, r0
		offset += count;
   d5670:	bf2d      	iteet	cs
   d5672:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5674:	68a3      	ldrcc	r3, [r4, #8]
   d5676:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5678:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d567a:	bf36      	itet	cc
   d567c:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d567e:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5680:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d5684:	bd70      	pop	{r4, r5, r6, pc}

000d5686 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5686:	b40e      	push	{r1, r2, r3}
   d5688:	b503      	push	{r0, r1, lr}
   d568a:	aa03      	add	r2, sp, #12
   d568c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d5690:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d5692:	f7ff ffe0 	bl	d5656 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5696:	b002      	add	sp, #8
   d5698:	f85d eb04 	ldr.w	lr, [sp], #4
   d569c:	b003      	add	sp, #12
   d569e:	4770      	bx	lr

000d56a0 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d56a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d56a4:	4604      	mov	r4, r0
   d56a6:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d56a8:	4617      	mov	r7, r2
   d56aa:	b112      	cbz	r2, d56b2 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d56ac:	2122      	movs	r1, #34	; 0x22
   d56ae:	f7ff ffab 	bl	d5608 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d56b2:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d56b4:	5d71      	ldrb	r1, [r6, r5]
   d56b6:	eb06 0805 	add.w	r8, r6, r5
   d56ba:	2900      	cmp	r1, #0
   d56bc:	d071      	beq.n	d57a2 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d56be:	68e2      	ldr	r2, [r4, #12]
   d56c0:	68a3      	ldr	r3, [r4, #8]
   d56c2:	429a      	cmp	r2, r3
   d56c4:	d26d      	bcs.n	d57a2 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d56c6:	060b      	lsls	r3, r1, #24
   d56c8:	d533      	bpl.n	d5732 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d56ca:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d56ce:	2be0      	cmp	r3, #224	; 0xe0
   d56d0:	d117      	bne.n	d5702 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d56d2:	f898 3001 	ldrb.w	r3, [r8, #1]
   d56d6:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d56da:	2a80      	cmp	r2, #128	; 0x80
   d56dc:	d111      	bne.n	d5702 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d56de:	f105 0802 	add.w	r8, r5, #2
   d56e2:	f816 2008 	ldrb.w	r2, [r6, r8]
   d56e6:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d56ea:	2880      	cmp	r0, #128	; 0x80
   d56ec:	d109      	bne.n	d5702 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d56ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d56f2:	019b      	lsls	r3, r3, #6
   d56f4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d56f8:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d56fc:	431a      	orrs	r2, r3
   d56fe:	b292      	uxth	r2, r2
   d5700:	e011      	b.n	d5726 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d5702:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d5706:	2bc0      	cmp	r3, #192	; 0xc0
   d5708:	d146      	bne.n	d5798 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d570a:	f105 0801 	add.w	r8, r5, #1
   d570e:	f816 3008 	ldrb.w	r3, [r6, r8]
   d5712:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5716:	2a80      	cmp	r2, #128	; 0x80
   d5718:	d13e      	bne.n	d5798 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d571a:	0189      	lsls	r1, r1, #6
   d571c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d5720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d5724:	431a      	orrs	r2, r3
   d5726:	4923      	ldr	r1, [pc, #140]	; (d57b4 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d5728:	4620      	mov	r0, r4
   d572a:	f7ff ffac 	bl	d5686 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d572e:	4645      	mov	r5, r8
   d5730:	e035      	b.n	d579e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5732:	290c      	cmp	r1, #12
   d5734:	d018      	beq.n	d5768 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d5736:	d80b      	bhi.n	d5750 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d5738:	2909      	cmp	r1, #9
   d573a:	d021      	beq.n	d5780 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d573c:	290a      	cmp	r1, #10
   d573e:	d019      	beq.n	d5774 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d5740:	2908      	cmp	r1, #8
   d5742:	d129      	bne.n	d5798 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d5744:	215c      	movs	r1, #92	; 0x5c
   d5746:	4620      	mov	r0, r4
   d5748:	f7ff ff5e 	bl	d5608 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d574c:	2162      	movs	r1, #98	; 0x62
   d574e:	e023      	b.n	d5798 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5750:	2922      	cmp	r1, #34	; 0x22
   d5752:	d01b      	beq.n	d578c <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5754:	295c      	cmp	r1, #92	; 0x5c
   d5756:	d019      	beq.n	d578c <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5758:	290d      	cmp	r1, #13
   d575a:	d11d      	bne.n	d5798 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d575c:	215c      	movs	r1, #92	; 0x5c
   d575e:	4620      	mov	r0, r4
   d5760:	f7ff ff52 	bl	d5608 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d5764:	2172      	movs	r1, #114	; 0x72
   d5766:	e017      	b.n	d5798 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5768:	215c      	movs	r1, #92	; 0x5c
   d576a:	4620      	mov	r0, r4
   d576c:	f7ff ff4c 	bl	d5608 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5770:	2166      	movs	r1, #102	; 0x66
   d5772:	e011      	b.n	d5798 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d5774:	215c      	movs	r1, #92	; 0x5c
   d5776:	4620      	mov	r0, r4
   d5778:	f7ff ff46 	bl	d5608 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d577c:	216e      	movs	r1, #110	; 0x6e
   d577e:	e00b      	b.n	d5798 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d5780:	215c      	movs	r1, #92	; 0x5c
   d5782:	4620      	mov	r0, r4
   d5784:	f7ff ff40 	bl	d5608 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5788:	2174      	movs	r1, #116	; 0x74
   d578a:	e005      	b.n	d5798 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d578c:	215c      	movs	r1, #92	; 0x5c
   d578e:	4620      	mov	r0, r4
   d5790:	f7ff ff3a 	bl	d5608 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5794:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5798:	4620      	mov	r0, r4
   d579a:	f7ff ff35 	bl	d5608 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d579e:	3501      	adds	r5, #1
   d57a0:	e788      	b.n	d56b4 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d57a2:	b12f      	cbz	r7, d57b0 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d57a4:	4620      	mov	r0, r4
   d57a6:	2122      	movs	r1, #34	; 0x22
	}

}
   d57a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d57ac:	f7ff bf2c 	b.w	d5608 <_ZN10JsonWriter10insertCharEc>
   d57b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d57b4:	000d8260 	.word	0x000d8260

000d57b8 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d57b8:	6942      	ldr	r2, [r0, #20]
   d57ba:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d57be:	7e1a      	ldrb	r2, [r3, #24]
   d57c0:	b112      	cbz	r2, d57c8 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d57c2:	2200      	movs	r2, #0
   d57c4:	761a      	strb	r2, [r3, #24]
   d57c6:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d57c8:	212c      	movs	r1, #44	; 0x2c
   d57ca:	f7ff bf1d 	b.w	d5608 <_ZN10JsonWriter10insertCharEc>

000d57ce <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d57ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d57d0:	6943      	ldr	r3, [r0, #20]
   d57d2:	3301      	adds	r3, #1
   d57d4:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d57d6:	460e      	mov	r6, r1
   d57d8:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d57da:	d80e      	bhi.n	d57fa <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d57dc:	f7ff ffec 	bl	d57b8 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d57e0:	6943      	ldr	r3, [r0, #20]
   d57e2:	1c5a      	adds	r2, r3, #1
   d57e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d57e8:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d57ea:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d57ec:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d57ee:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d57f0:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d57f2:	f7ff ff09 	bl	d5608 <_ZN10JsonWriter10insertCharEc>
   d57f6:	4620      	mov	r0, r4
   d57f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d57fa:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d57fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5800 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d5800:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5802:	4604      	mov	r4, r0
   d5804:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d5808:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d580a:	2d00      	cmp	r5, #0
   d580c:	db0a      	blt.n	d5824 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d580e:	f002 f867 	bl	d78e0 <__aeabi_f2d>
   d5812:	462a      	mov	r2, r5
   d5814:	e9cd 0100 	strd	r0, r1, [sp]
   d5818:	4908      	ldr	r1, [pc, #32]	; (d583c <_ZN10JsonWriter11insertValueEf+0x3c>)
   d581a:	4620      	mov	r0, r4
   d581c:	f7ff ff33 	bl	d5686 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d5820:	b003      	add	sp, #12
   d5822:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d5824:	f002 f85c 	bl	d78e0 <__aeabi_f2d>
   d5828:	460b      	mov	r3, r1
   d582a:	4905      	ldr	r1, [pc, #20]	; (d5840 <_ZN10JsonWriter11insertValueEf+0x40>)
   d582c:	4602      	mov	r2, r0
   d582e:	4620      	mov	r0, r4
	}
}
   d5830:	b003      	add	sp, #12
   d5832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d5836:	f7ff bf26 	b.w	d5686 <_ZN10JsonWriter13insertsprintfEPKcz>
   d583a:	bf00      	nop
   d583c:	000d8272 	.word	0x000d8272
   d5840:	000d8277 	.word	0x000d8277

000d5844 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5844:	f000 b810 	b.w	d5868 <HAL_Pin_Map>

000d5848 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <netdb_freeaddrinfo+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	689b      	ldr	r3, [r3, #8]
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	00030268 	.word	0x00030268

000d5858 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <netdb_getaddrinfo+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	68db      	ldr	r3, [r3, #12]
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	00030268 	.word	0x00030268

000d5868 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <HAL_Pin_Map+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	681b      	ldr	r3, [r3, #0]
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	0003022c 	.word	0x0003022c

000d5878 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <HAL_Validate_Pin_Function+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	685b      	ldr	r3, [r3, #4]
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	0003022c 	.word	0x0003022c

000d5888 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <HAL_Pin_Mode+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	689b      	ldr	r3, [r3, #8]
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	0003022c 	.word	0x0003022c

000d5898 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <HAL_Get_Pin_Mode+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	68db      	ldr	r3, [r3, #12]
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	0003022c 	.word	0x0003022c

000d58a8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <HAL_GPIO_Write+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	691b      	ldr	r3, [r3, #16]
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003022c 	.word	0x0003022c

000d58b8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <HAL_ADC_Read+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	0003022c 	.word	0x0003022c

000d58c8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d58c8:	b508      	push	{r3, lr}
   d58ca:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <HAL_SPI_Send_Receive_Data+0xc>)
   d58cc:	681b      	ldr	r3, [r3, #0]
   d58ce:	695b      	ldr	r3, [r3, #20]
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	bd08      	pop	{r3, pc}
   d58d4:	00030230 	.word	0x00030230

000d58d8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <HAL_SPI_Init+0xc>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	69db      	ldr	r3, [r3, #28]
   d58e0:	9301      	str	r3, [sp, #4]
   d58e2:	bd08      	pop	{r3, pc}
   d58e4:	00030230 	.word	0x00030230

000d58e8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <HAL_SPI_Is_Enabled+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	6a1b      	ldr	r3, [r3, #32]
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	00030230 	.word	0x00030230

000d58f8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <HAL_SPI_Info+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	00030230 	.word	0x00030230

000d5908 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <HAL_SPI_DMA_Transfer+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	00030230 	.word	0x00030230

000d5918 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b02      	ldr	r3, [pc, #8]	; (d5924 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5920:	9301      	str	r3, [sp, #4]
   d5922:	bd08      	pop	{r3, pc}
   d5924:	00030230 	.word	0x00030230

000d5928 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <HAL_SPI_Set_Settings+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	00030230 	.word	0x00030230

000d5938 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <HAL_SPI_Acquire+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	00030230 	.word	0x00030230

000d5948 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <HAL_SPI_Release+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	00030230 	.word	0x00030230

000d5958 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <HAL_RNG_GetRandomNumber+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	685b      	ldr	r3, [r3, #4]
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	00030218 	.word	0x00030218

000d5968 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <HAL_Delay_Microseconds+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	68db      	ldr	r3, [r3, #12]
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	00030218 	.word	0x00030218

000d5978 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	691b      	ldr	r3, [r3, #16]
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030218 	.word	0x00030218

000d5988 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	695b      	ldr	r3, [r3, #20]
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030218 	.word	0x00030218

000d5998 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <os_thread_is_current+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	689b      	ldr	r3, [r3, #8]
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	00030248 	.word	0x00030248

000d59a8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <os_thread_join+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	691b      	ldr	r3, [r3, #16]
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	00030248 	.word	0x00030248

000d59b8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <os_thread_cleanup+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	695b      	ldr	r3, [r3, #20]
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	00030248 	.word	0x00030248

000d59c8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <os_mutex_recursive_create+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	00030248 	.word	0x00030248

000d59d8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <os_mutex_recursive_destroy+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	00030248 	.word	0x00030248

000d59e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <inet_inet_ntop+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	695b      	ldr	r3, [r3, #20]
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	00030264 	.word	0x00030264

000d59f8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <HAL_USART_Init+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	681b      	ldr	r3, [r3, #0]
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	0003023c 	.word	0x0003023c

000d5a08 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <HAL_USART_Write_Data+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	68db      	ldr	r3, [r3, #12]
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	0003023c 	.word	0x0003023c

000d5a18 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <HAL_USART_Available_Data+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	691b      	ldr	r3, [r3, #16]
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	0003023c 	.word	0x0003023c

000d5a28 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <HAL_USART_Read_Data+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	695b      	ldr	r3, [r3, #20]
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	0003023c 	.word	0x0003023c

000d5a38 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b02      	ldr	r3, [pc, #8]	; (d5a44 <HAL_USART_Peek_Data+0xc>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	699b      	ldr	r3, [r3, #24]
   d5a40:	9301      	str	r3, [sp, #4]
   d5a42:	bd08      	pop	{r3, pc}
   d5a44:	0003023c 	.word	0x0003023c

000d5a48 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5a48:	b508      	push	{r3, lr}
   d5a4a:	4b02      	ldr	r3, [pc, #8]	; (d5a54 <HAL_USART_Flush_Data+0xc>)
   d5a4c:	681b      	ldr	r3, [r3, #0]
   d5a4e:	69db      	ldr	r3, [r3, #28]
   d5a50:	9301      	str	r3, [sp, #4]
   d5a52:	bd08      	pop	{r3, pc}
   d5a54:	0003023c 	.word	0x0003023c

000d5a58 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <HAL_USART_Is_Enabled+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	6a1b      	ldr	r3, [r3, #32]
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	0003023c 	.word	0x0003023c

000d5a68 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <HAL_USART_Available_Data_For_Write+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	0003023c 	.word	0x0003023c

000d5a78 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <HAL_I2C_Write_Data+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	6a1b      	ldr	r3, [r3, #32]
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	00030228 	.word	0x00030228

000d5a88 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <HAL_I2C_Available_Data+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	00030228 	.word	0x00030228

000d5a98 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <HAL_I2C_Read_Data+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	00030228 	.word	0x00030228

000d5aa8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <HAL_I2C_Peek_Data+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	00030228 	.word	0x00030228

000d5ab8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <HAL_I2C_Flush_Data+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030228 	.word	0x00030228

000d5ac8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <HAL_I2C_Is_Enabled+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	00030228 	.word	0x00030228

000d5ad8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <HAL_I2C_Init+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	00030228 	.word	0x00030228

000d5ae8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <HAL_USB_USART_Init+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	681b      	ldr	r3, [r3, #0]
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	0003024c 	.word	0x0003024c

000d5af8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <HAL_USB_USART_Begin+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	685b      	ldr	r3, [r3, #4]
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	0003024c 	.word	0x0003024c

000d5b08 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <HAL_USB_USART_Available_Data+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	691b      	ldr	r3, [r3, #16]
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	0003024c 	.word	0x0003024c

000d5b18 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	695b      	ldr	r3, [r3, #20]
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	0003024c 	.word	0x0003024c

000d5b28 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <HAL_USB_USART_Receive_Data+0xc>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	699b      	ldr	r3, [r3, #24]
   d5b30:	9301      	str	r3, [sp, #4]
   d5b32:	bd08      	pop	{r3, pc}
   d5b34:	0003024c 	.word	0x0003024c

000d5b38 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b38:	b508      	push	{r3, lr}
   d5b3a:	4b02      	ldr	r3, [pc, #8]	; (d5b44 <HAL_USB_USART_Send_Data+0xc>)
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	69db      	ldr	r3, [r3, #28]
   d5b40:	9301      	str	r3, [sp, #4]
   d5b42:	bd08      	pop	{r3, pc}
   d5b44:	0003024c 	.word	0x0003024c

000d5b48 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5b48:	b508      	push	{r3, lr}
   d5b4a:	4b02      	ldr	r3, [pc, #8]	; (d5b54 <HAL_USB_USART_Flush_Data+0xc>)
   d5b4c:	681b      	ldr	r3, [r3, #0]
   d5b4e:	6a1b      	ldr	r3, [r3, #32]
   d5b50:	9301      	str	r3, [sp, #4]
   d5b52:	bd08      	pop	{r3, pc}
   d5b54:	0003024c 	.word	0x0003024c

000d5b58 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5b58:	b508      	push	{r3, lr}
   d5b5a:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <set_system_mode+0xc>)
   d5b5c:	681b      	ldr	r3, [r3, #0]
   d5b5e:	685b      	ldr	r3, [r3, #4]
   d5b60:	9301      	str	r3, [sp, #4]
   d5b62:	bd08      	pop	{r3, pc}
   d5b64:	00030220 	.word	0x00030220

000d5b68 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <system_delay_ms+0xc>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	695b      	ldr	r3, [r3, #20]
   d5b70:	9301      	str	r3, [sp, #4]
   d5b72:	bd08      	pop	{r3, pc}
   d5b74:	00030220 	.word	0x00030220

000d5b78 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5b78:	b508      	push	{r3, lr}
   d5b7a:	4b02      	ldr	r3, [pc, #8]	; (d5b84 <application_thread_current+0xc>)
   d5b7c:	681b      	ldr	r3, [r3, #0]
   d5b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	bd08      	pop	{r3, pc}
   d5b84:	00030220 	.word	0x00030220

000d5b88 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <application_thread_invoke+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	00030220 	.word	0x00030220

000d5b98 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b03      	ldr	r3, [pc, #12]	; (d5ba8 <system_ctrl_set_app_request_handler+0x10>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5ba2:	9301      	str	r3, [sp, #4]
   d5ba4:	bd08      	pop	{r3, pc}
   d5ba6:	0000      	.short	0x0000
   d5ba8:	00030220 	.word	0x00030220

000d5bac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b03      	ldr	r3, [pc, #12]	; (d5bbc <system_ctrl_set_result+0x10>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5bb6:	9301      	str	r3, [sp, #4]
   d5bb8:	bd08      	pop	{r3, pc}
   d5bba:	0000      	.short	0x0000
   d5bbc:	00030220 	.word	0x00030220

000d5bc0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <network_connect+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	685b      	ldr	r3, [r3, #4]
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	00030240 	.word	0x00030240

000d5bd0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <network_connecting+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	689b      	ldr	r3, [r3, #8]
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	00030240 	.word	0x00030240

000d5be0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <network_disconnect+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	68db      	ldr	r3, [r3, #12]
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	00030240 	.word	0x00030240

000d5bf0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <network_ready+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	691b      	ldr	r3, [r3, #16]
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	00030240 	.word	0x00030240

000d5c00 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <network_on+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	695b      	ldr	r3, [r3, #20]
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	00030240 	.word	0x00030240

000d5c10 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <network_off+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	699b      	ldr	r3, [r3, #24]
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	00030240 	.word	0x00030240

000d5c20 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <network_listen+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	69db      	ldr	r3, [r3, #28]
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	00030240 	.word	0x00030240

000d5c30 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <network_listening+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	6a1b      	ldr	r3, [r3, #32]
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	00030240 	.word	0x00030240

000d5c40 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <network_set_listen_timeout+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	00030240 	.word	0x00030240

000d5c50 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <network_get_listen_timeout+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	00030240 	.word	0x00030240

000d5c60 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <spark_process+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	689b      	ldr	r3, [r3, #8]
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	00030244 	.word	0x00030244

000d5c70 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <spark_cloud_flag_connected+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	695b      	ldr	r3, [r3, #20]
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	00030244 	.word	0x00030244

000d5c80 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <spark_send_event+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	6a1b      	ldr	r3, [r3, #32]
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	00030244 	.word	0x00030244

000d5c90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	00030244 	.word	0x00030244

000d5ca0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <malloc+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	681b      	ldr	r3, [r3, #0]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	0003021c 	.word	0x0003021c

000d5cb0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <free+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	685b      	ldr	r3, [r3, #4]
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	0003021c 	.word	0x0003021c

000d5cc0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <vsnprintf+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	0003021c 	.word	0x0003021c

000d5cd0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <abort+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	0003021c 	.word	0x0003021c

000d5ce0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <_malloc_r+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	0003021c 	.word	0x0003021c

000d5cf0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <__errno+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	0003021c 	.word	0x0003021c

000d5d00 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d00:	2200      	movs	r2, #0
   d5d02:	4611      	mov	r1, r2
   d5d04:	6840      	ldr	r0, [r0, #4]
   d5d06:	f7ff bf93 	b.w	d5c30 <network_listening>

000d5d0a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5d0a:	2200      	movs	r2, #0
   d5d0c:	4611      	mov	r1, r2
   d5d0e:	6840      	ldr	r0, [r0, #4]
   d5d10:	f7ff bf9e 	b.w	d5c50 <network_get_listen_timeout>

000d5d14 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5d14:	2200      	movs	r2, #0
   d5d16:	6840      	ldr	r0, [r0, #4]
   d5d18:	f7ff bf92 	b.w	d5c40 <network_set_listen_timeout>

000d5d1c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d1c:	2200      	movs	r2, #0
   d5d1e:	f081 0101 	eor.w	r1, r1, #1
   d5d22:	6840      	ldr	r0, [r0, #4]
   d5d24:	f7ff bf7c 	b.w	d5c20 <network_listen>

000d5d28 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5d28:	2300      	movs	r3, #0
   d5d2a:	461a      	mov	r2, r3
   d5d2c:	4619      	mov	r1, r3
   d5d2e:	6840      	ldr	r0, [r0, #4]
   d5d30:	f7ff bf6e 	b.w	d5c10 <network_off>

000d5d34 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5d34:	2300      	movs	r3, #0
   d5d36:	461a      	mov	r2, r3
   d5d38:	4619      	mov	r1, r3
   d5d3a:	6840      	ldr	r0, [r0, #4]
   d5d3c:	f7ff bf60 	b.w	d5c00 <network_on>

000d5d40 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d40:	2200      	movs	r2, #0
   d5d42:	4611      	mov	r1, r2
   d5d44:	6840      	ldr	r0, [r0, #4]
   d5d46:	f7ff bf53 	b.w	d5bf0 <network_ready>

000d5d4a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5d4a:	2200      	movs	r2, #0
   d5d4c:	4611      	mov	r1, r2
   d5d4e:	6840      	ldr	r0, [r0, #4]
   d5d50:	f7ff bf3e 	b.w	d5bd0 <network_connecting>

000d5d54 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d54:	2200      	movs	r2, #0
   d5d56:	2102      	movs	r1, #2
   d5d58:	6840      	ldr	r0, [r0, #4]
   d5d5a:	f7ff bf41 	b.w	d5be0 <network_disconnect>

000d5d5e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5d5e:	2300      	movs	r3, #0
   d5d60:	461a      	mov	r2, r3
   d5d62:	6840      	ldr	r0, [r0, #4]
   d5d64:	f7ff bf2c 	b.w	d5bc0 <network_connect>

000d5d68 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5d68:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5d6a:	2203      	movs	r2, #3
   d5d6c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5d6e:	4a02      	ldr	r2, [pc, #8]	; (d5d78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5d70:	601a      	str	r2, [r3, #0]
   d5d72:	4770      	bx	lr
   d5d74:	2003e3dc 	.word	0x2003e3dc
   d5d78:	000d828c 	.word	0x000d828c

000d5d7c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5d7c:	2100      	movs	r1, #0
   d5d7e:	f7ff bddb 	b.w	d5938 <HAL_SPI_Acquire>

000d5d82 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5d82:	2100      	movs	r1, #0
   d5d84:	f7ff bde0 	b.w	d5948 <HAL_SPI_Release>

000d5d88 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5d88:	b510      	push	{r4, lr}
   d5d8a:	4604      	mov	r4, r0
{
    _spi = spi;
   d5d8c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5d8e:	4608      	mov	r0, r1
   d5d90:	f7ff fda2 	bl	d58d8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5d94:	2300      	movs	r3, #0
   d5d96:	6063      	str	r3, [r4, #4]
}
   d5d98:	4620      	mov	r0, r4
   d5d9a:	bd10      	pop	{r4, pc}

000d5d9c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5d9c:	7800      	ldrb	r0, [r0, #0]
   d5d9e:	f7ff bff0 	b.w	d5d82 <_ZN8SPIClass6unlockEv.isra.1>
	...

000d5da4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5da4:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5da6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5da8:	6018      	str	r0, [r3, #0]
   d5daa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5dac:	6818      	ldr	r0, [r3, #0]
   d5dae:	4288      	cmp	r0, r1
   d5db0:	b2e5      	uxtb	r5, r4
   d5db2:	d906      	bls.n	d5dc2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5db4:	3401      	adds	r4, #1
   d5db6:	2c08      	cmp	r4, #8
   d5db8:	d002      	beq.n	d5dc0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5dba:	0840      	lsrs	r0, r0, #1
   d5dbc:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5dbe:	e7f5      	b.n	d5dac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5dc0:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5dc2:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5dc4:	5d5b      	ldrb	r3, [r3, r5]
   d5dc6:	7013      	strb	r3, [r2, #0]
   d5dc8:	bd30      	pop	{r4, r5, pc}
   d5dca:	bf00      	nop
   d5dcc:	000d82b8 	.word	0x000d82b8

000d5dd0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5dd4:	4607      	mov	r7, r0
   d5dd6:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d5dd8:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5dda:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d5ddc:	f7ff ffce 	bl	d5d7c <_ZN8SPIClass4lockEv.isra.0>
   d5de0:	2800      	cmp	r0, #0
   d5de2:	db62      	blt.n	d5eaa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d5de4:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5de6:	2214      	movs	r2, #20
   d5de8:	2100      	movs	r1, #0
   d5dea:	a809      	add	r0, sp, #36	; 0x24
   d5dec:	f002 f90d 	bl	d800a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5df0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5df2:	4620      	mov	r0, r4
   d5df4:	2200      	movs	r2, #0
   d5df6:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5df8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d5dfc:	f7ff fd7c 	bl	d58f8 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d5e00:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d5e04:	b154      	cbz	r4, d5e1c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d5e06:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5e0a:	b935      	cbnz	r5, d5e1a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d5e0c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5e10:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5e14:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d5e18:	e003      	b.n	d5e22 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5e1a:	2400      	movs	r4, #0
   d5e1c:	46a1      	mov	r9, r4
   d5e1e:	46a0      	mov	r8, r4
   d5e20:	2501      	movs	r5, #1
   d5e22:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5e24:	b105      	cbz	r5, d5e28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d5e26:	b9bb      	cbnz	r3, d5e58 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d5e28:	429d      	cmp	r5, r3
   d5e2a:	d10b      	bne.n	d5e44 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d5e2c:	68b2      	ldr	r2, [r6, #8]
   d5e2e:	4542      	cmp	r2, r8
   d5e30:	d108      	bne.n	d5e44 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5e32:	f88d 9020 	strb.w	r9, [sp, #32]
   d5e36:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5e3a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d5e3e:	89b2      	ldrh	r2, [r6, #12]
   d5e40:	4291      	cmp	r1, r2
   d5e42:	d009      	beq.n	d5e58 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d5e44:	b153      	cbz	r3, d5e5c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5e46:	2400      	movs	r4, #0
   d5e48:	7838      	ldrb	r0, [r7, #0]
   d5e4a:	9401      	str	r4, [sp, #4]
   d5e4c:	9400      	str	r4, [sp, #0]
   d5e4e:	4623      	mov	r3, r4
   d5e50:	4622      	mov	r2, r4
   d5e52:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5e54:	f7ff fd68 	bl	d5928 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d5e58:	2000      	movs	r0, #0
   d5e5a:	e026      	b.n	d5eaa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d5e5c:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d5e60:	68b1      	ldr	r1, [r6, #8]
   d5e62:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5e64:	ab04      	add	r3, sp, #16
   d5e66:	f10d 020f 	add.w	r2, sp, #15
   d5e6a:	f7ff ff9b 	bl	d5da4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d5e6e:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5e70:	b105      	cbz	r5, d5e74 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d5e72:	b9b1      	cbnz	r1, d5ea2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d5e74:	42a9      	cmp	r1, r5
   d5e76:	d008      	beq.n	d5e8a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5e78:	2400      	movs	r4, #0
   d5e7a:	7838      	ldrb	r0, [r7, #0]
   d5e7c:	9401      	str	r4, [sp, #4]
   d5e7e:	7b74      	ldrb	r4, [r6, #13]
   d5e80:	7b33      	ldrb	r3, [r6, #12]
   d5e82:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5e86:	9400      	str	r4, [sp, #0]
   d5e88:	e7e4      	b.n	d5e54 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d5e8a:	68b3      	ldr	r3, [r6, #8]
   d5e8c:	4543      	cmp	r3, r8
   d5e8e:	d3f3      	bcc.n	d5e78 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5e90:	f88d 9020 	strb.w	r9, [sp, #32]
   d5e94:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5e98:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5e9c:	89b3      	ldrh	r3, [r6, #12]
   d5e9e:	429a      	cmp	r2, r3
   d5ea0:	d1ea      	bne.n	d5e78 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5ea2:	9b04      	ldr	r3, [sp, #16]
   d5ea4:	4543      	cmp	r3, r8
   d5ea6:	d1e7      	bne.n	d5e78 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d5ea8:	e7d6      	b.n	d5e58 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d5eaa:	b00f      	add	sp, #60	; 0x3c
   d5eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5eb0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5eb0:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d5eb2:	7800      	ldrb	r0, [r0, #0]
   d5eb4:	f7ff fd08 	bl	d58c8 <HAL_SPI_Send_Receive_Data>
}
   d5eb8:	b2c0      	uxtb	r0, r0
   d5eba:	bd08      	pop	{r3, pc}

000d5ebc <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d5ebc:	b530      	push	{r4, r5, lr}
   d5ebe:	b087      	sub	sp, #28
   d5ec0:	4604      	mov	r4, r0
   d5ec2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d5ec4:	7800      	ldrb	r0, [r0, #0]
   d5ec6:	9500      	str	r5, [sp, #0]
   d5ec8:	f7ff fd1e 	bl	d5908 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d5ecc:	b93d      	cbnz	r5, d5ede <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d5ece:	a902      	add	r1, sp, #8
   d5ed0:	7820      	ldrb	r0, [r4, #0]
   d5ed2:	f7ff fd21 	bl	d5918 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d5ed6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d5eda:	07db      	lsls	r3, r3, #31
   d5edc:	d4f7      	bmi.n	d5ece <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d5ede:	b007      	add	sp, #28
   d5ee0:	bd30      	pop	{r4, r5, pc}

000d5ee2 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5ee2:	7800      	ldrb	r0, [r0, #0]
   d5ee4:	f7ff bd00 	b.w	d58e8 <HAL_SPI_Is_Enabled>

000d5ee8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5ee8:	b510      	push	{r4, lr}
   d5eea:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5eec:	6800      	ldr	r0, [r0, #0]
   d5eee:	b118      	cbz	r0, d5ef8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5ef0:	f7ff fede 	bl	d5cb0 <free>
            wakeupSource_ = nullptr;
   d5ef4:	2300      	movs	r3, #0
   d5ef6:	6023      	str	r3, [r4, #0]
   d5ef8:	bd10      	pop	{r4, pc}

000d5efa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5efa:	b510      	push	{r4, lr}
   d5efc:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5efe:	f7ff fff3 	bl	d5ee8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5f02:	4620      	mov	r0, r4
   d5f04:	bd10      	pop	{r4, pc}
	...

000d5f08 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5f08:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5f0a:	4c09      	ldr	r4, [pc, #36]	; (d5f30 <_GLOBAL__sub_I_System+0x28>)
   d5f0c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5f12:	6020      	str	r0, [r4, #0]
   d5f14:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5f16:	71a0      	strb	r0, [r4, #6]
   d5f18:	8120      	strh	r0, [r4, #8]
   d5f1a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5f1c:	f7ff fe1c 	bl	d5b58 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5f20:	4620      	mov	r0, r4
   d5f22:	4a04      	ldr	r2, [pc, #16]	; (d5f34 <_GLOBAL__sub_I_System+0x2c>)
   d5f24:	4904      	ldr	r1, [pc, #16]	; (d5f38 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5f2a:	f001 b8d7 	b.w	d70dc <__aeabi_atexit>
   d5f2e:	bf00      	nop
   d5f30:	2003e3e4 	.word	0x2003e3e4
   d5f34:	2003de98 	.word	0x2003de98
   d5f38:	000d5efb 	.word	0x000d5efb

000d5f3c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5f3c:	b510      	push	{r4, lr}
   d5f3e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5f40:	6800      	ldr	r0, [r0, #0]
   d5f42:	b108      	cbz	r0, d5f48 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5f44:	f7ff fd48 	bl	d59d8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5f48:	4620      	mov	r0, r4
   d5f4a:	bd10      	pop	{r4, pc}

000d5f4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5f4c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5f4e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5f50:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5f52:	689b      	ldr	r3, [r3, #8]
   d5f54:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f56:	68a3      	ldr	r3, [r4, #8]
   d5f58:	3b01      	subs	r3, #1
   d5f5a:	60a3      	str	r3, [r4, #8]
   d5f5c:	b92b      	cbnz	r3, d5f6a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5f5e:	6823      	ldr	r3, [r4, #0]
   d5f60:	4620      	mov	r0, r4
   d5f62:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5f68:	4718      	bx	r3
   d5f6a:	bd10      	pop	{r4, pc}

000d5f6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5f6c:	680b      	ldr	r3, [r1, #0]
   d5f6e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5f70:	b113      	cbz	r3, d5f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5f72:	685a      	ldr	r2, [r3, #4]
   d5f74:	3201      	adds	r2, #1
   d5f76:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5f78:	4770      	bx	lr

000d5f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5f7a:	b510      	push	{r4, lr}
   d5f7c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5f7e:	6800      	ldr	r0, [r0, #0]
   d5f80:	b128      	cbz	r0, d5f8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5f82:	6843      	ldr	r3, [r0, #4]
   d5f84:	3b01      	subs	r3, #1
   d5f86:	6043      	str	r3, [r0, #4]
   d5f88:	b90b      	cbnz	r3, d5f8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5f8a:	f7ff ffdf 	bl	d5f4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5f8e:	4620      	mov	r0, r4
   d5f90:	bd10      	pop	{r4, pc}
	...

000d5f94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5f94:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f96:	4c06      	ldr	r4, [pc, #24]	; (d5fb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5f98:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5f9a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f9c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5f9e:	f7ff fd13 	bl	d59c8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	4a03      	ldr	r2, [pc, #12]	; (d5fb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5fa6:	4904      	ldr	r1, [pc, #16]	; (d5fb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5fac:	f001 b896 	b.w	d70dc <__aeabi_atexit>
   d5fb0:	2003e3f0 	.word	0x2003e3f0
   d5fb4:	2003de98 	.word	0x2003de98
   d5fb8:	000d5f3d 	.word	0x000d5f3d

000d5fbc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5fbe:	4606      	mov	r6, r0
   d5fc0:	460d      	mov	r5, r1
   d5fc2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5fc4:	2400      	movs	r4, #0
  while (size--) {
   d5fc6:	42bd      	cmp	r5, r7
   d5fc8:	d00c      	beq.n	d5fe4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5fca:	6833      	ldr	r3, [r6, #0]
   d5fcc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5fd0:	689b      	ldr	r3, [r3, #8]
   d5fd2:	4630      	mov	r0, r6
   d5fd4:	4798      	blx	r3
     if (chunk>=0)
   d5fd6:	2800      	cmp	r0, #0
   d5fd8:	db01      	blt.n	d5fde <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5fda:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5fdc:	e7f3      	b.n	d5fc6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5fde:	2c00      	cmp	r4, #0
   d5fe0:	bf08      	it	eq
   d5fe2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5fe4:	4620      	mov	r0, r4
   d5fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5fe8 <_ZN5Print5printEPKc>:
   d5fe8:	b508      	push	{r3, lr}
   d5fea:	f7fe ffdd 	bl	d4fa8 <_ZN5Print5writeEPKc>
   d5fee:	bd08      	pop	{r3, pc}

000d5ff0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5ff0:	6803      	ldr	r3, [r0, #0]
   d5ff2:	689b      	ldr	r3, [r3, #8]
   d5ff4:	4718      	bx	r3

000d5ff6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5ff6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5ff8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5ffa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5ffc:	f7ff fff8 	bl	d5ff0 <_ZN5Print5printEc>
  n += print('\n');
   d6000:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6002:	4604      	mov	r4, r0
  n += print('\n');
   d6004:	4628      	mov	r0, r5
   d6006:	f7ff fff3 	bl	d5ff0 <_ZN5Print5printEc>
  return n;
}
   d600a:	4420      	add	r0, r4
   d600c:	bd38      	pop	{r3, r4, r5, pc}

000d600e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d600e:	b538      	push	{r3, r4, r5, lr}
   d6010:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6012:	f7fe ffc9 	bl	d4fa8 <_ZN5Print5writeEPKc>
   d6016:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6018:	4628      	mov	r0, r5
   d601a:	f7ff ffec 	bl	d5ff6 <_ZN5Print7printlnEv>
  return n;
}
   d601e:	4420      	add	r0, r4
   d6020:	bd38      	pop	{r3, r4, r5, pc}

000d6022 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6022:	b530      	push	{r4, r5, lr}
   d6024:	b08b      	sub	sp, #44	; 0x2c
   d6026:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6028:	2100      	movs	r1, #0
   d602a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d602e:	2a01      	cmp	r2, #1
   d6030:	bf98      	it	ls
   d6032:	220a      	movls	r2, #10
   d6034:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6038:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d603c:	fb05 3312 	mls	r3, r5, r2, r3
   d6040:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6044:	2b09      	cmp	r3, #9
   d6046:	bf94      	ite	ls
   d6048:	3330      	addls	r3, #48	; 0x30
   d604a:	3337      	addhi	r3, #55	; 0x37
   d604c:	b2db      	uxtb	r3, r3
   d604e:	4621      	mov	r1, r4
   d6050:	f804 3901 	strb.w	r3, [r4], #-1
   d6054:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6056:	2d00      	cmp	r5, #0
   d6058:	d1ee      	bne.n	d6038 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d605a:	f7fe ffa5 	bl	d4fa8 <_ZN5Print5writeEPKc>
}
   d605e:	b00b      	add	sp, #44	; 0x2c
   d6060:	bd30      	pop	{r4, r5, pc}

000d6062 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6062:	b40c      	push	{r2, r3}
   d6064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6068:	b087      	sub	sp, #28
   d606a:	af00      	add	r7, sp, #0
   d606c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6070:	4605      	mov	r5, r0
   d6072:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6076:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6078:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d607a:	4623      	mov	r3, r4
   d607c:	464a      	mov	r2, r9
   d607e:	2114      	movs	r1, #20
   d6080:	1d38      	adds	r0, r7, #4
   d6082:	f7ff fe1d 	bl	d5cc0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6086:	2813      	cmp	r0, #19
   d6088:	d805      	bhi.n	d6096 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d608a:	1d39      	adds	r1, r7, #4
   d608c:	4628      	mov	r0, r5
   d608e:	f7fe ff8b 	bl	d4fa8 <_ZN5Print5writeEPKc>
   d6092:	4604      	mov	r4, r0
   d6094:	e013      	b.n	d60be <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6096:	f100 0308 	add.w	r3, r0, #8
   d609a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d609e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d60a0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d60a4:	1c41      	adds	r1, r0, #1
   d60a6:	4623      	mov	r3, r4
   d60a8:	464a      	mov	r2, r9
   d60aa:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d60ac:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d60ae:	f7ff fe07 	bl	d5cc0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60b2:	4669      	mov	r1, sp
   d60b4:	4628      	mov	r0, r5
   d60b6:	f7fe ff77 	bl	d4fa8 <_ZN5Print5writeEPKc>
   d60ba:	4604      	mov	r4, r0
   d60bc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d60be:	b11e      	cbz	r6, d60c8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d60c0:	4628      	mov	r0, r5
   d60c2:	f7ff ff98 	bl	d5ff6 <_ZN5Print7printlnEv>
   d60c6:	4404      	add	r4, r0
    return n;
}
   d60c8:	4620      	mov	r0, r4
   d60ca:	371c      	adds	r7, #28
   d60cc:	46bd      	mov	sp, r7
   d60ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d60d2:	b002      	add	sp, #8
   d60d4:	4770      	bx	lr
	...

000d60d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d60d8:	4b01      	ldr	r3, [pc, #4]	; (d60e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d60da:	4a02      	ldr	r2, [pc, #8]	; (d60e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d60dc:	601a      	str	r2, [r3, #0]
   d60de:	4770      	bx	lr
   d60e0:	2003e3f4 	.word	0x2003e3f4
   d60e4:	000d8333 	.word	0x000d8333

000d60e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d60e8:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d60ea:	681a      	ldr	r2, [r3, #0]
   d60ec:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d60ee:	601a      	str	r2, [r3, #0]
   d60f0:	4770      	bx	lr
   d60f2:	bf00      	nop
   d60f4:	2003de2c 	.word	0x2003de2c
   d60f8:	2003e3f8 	.word	0x2003e3f8

000d60fc <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d60fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6100:	ed2d 8b02 	vpush	{d8}
   d6104:	eeb0 8a44 	vmov.f32	s16, s8
   d6108:	eef0 8a64 	vmov.f32	s17, s9
   d610c:	ec55 4b11 	vmov	r4, r5, d1
   d6110:	ec57 6b12 	vmov	r6, r7, d2
   d6114:	b083      	sub	sp, #12
    if (fromEnd == fromStart) {
   d6116:	ee11 2a10 	vmov	r2, s2
   d611a:	462b      	mov	r3, r5
   d611c:	ee12 0a10 	vmov	r0, s4
   d6120:	4639      	mov	r1, r7
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d6122:	ed8d 0b00 	vstr	d0, [sp]
   d6126:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   d612a:	f001 fe95 	bl	d7e58 <__aeabi_dcmpeq>
   d612e:	ed9d 0b00 	vldr	d0, [sp]
   d6132:	bb38      	cbnz	r0, d6184 <_Z3mapddddd+0x88>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d6134:	ec51 0b10 	vmov	r0, r1, d0
   d6138:	4622      	mov	r2, r4
   d613a:	462b      	mov	r3, r5
   d613c:	f001 fa70 	bl	d7620 <__aeabi_dsub>
   d6140:	4652      	mov	r2, sl
   d6142:	4680      	mov	r8, r0
   d6144:	4689      	mov	r9, r1
   d6146:	465b      	mov	r3, fp
   d6148:	ec51 0b18 	vmov	r0, r1, d8
   d614c:	f001 fa68 	bl	d7620 <__aeabi_dsub>
   d6150:	4602      	mov	r2, r0
   d6152:	460b      	mov	r3, r1
   d6154:	4640      	mov	r0, r8
   d6156:	4649      	mov	r1, r9
   d6158:	f001 fc16 	bl	d7988 <__aeabi_dmul>
   d615c:	4622      	mov	r2, r4
   d615e:	4680      	mov	r8, r0
   d6160:	4689      	mov	r9, r1
   d6162:	462b      	mov	r3, r5
   d6164:	4630      	mov	r0, r6
   d6166:	4639      	mov	r1, r7
   d6168:	f001 fa5a 	bl	d7620 <__aeabi_dsub>
   d616c:	4602      	mov	r2, r0
   d616e:	460b      	mov	r3, r1
   d6170:	4640      	mov	r0, r8
   d6172:	4649      	mov	r1, r9
   d6174:	f001 fd32 	bl	d7bdc <__aeabi_ddiv>
   d6178:	4652      	mov	r2, sl
   d617a:	465b      	mov	r3, fp
   d617c:	f001 fa52 	bl	d7624 <__adddf3>
   d6180:	ec41 0b10 	vmov	d0, r0, r1
}
   d6184:	b003      	add	sp, #12
   d6186:	ecbd 8b02 	vpop	{d8}
   d618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d618e <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d618e:	2100      	movs	r1, #0
   d6190:	f7ff bcea 	b.w	d5b68 <system_delay_ms>

000d6194 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6194:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6196:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6198:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d619a:	b113      	cbz	r3, d61a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d619c:	2203      	movs	r2, #3
   d619e:	4601      	mov	r1, r0
   d61a0:	4798      	blx	r3
    }
   d61a2:	4620      	mov	r0, r4
   d61a4:	bd10      	pop	{r4, pc}

000d61a6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d61a6:	b510      	push	{r4, lr}
   d61a8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d61aa:	f7ff fff3 	bl	d6194 <_ZNSt14_Function_baseD1Ev>
   d61ae:	4620      	mov	r0, r4
   d61b0:	bd10      	pop	{r4, pc}

000d61b2 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d61b2:	b513      	push	{r0, r1, r4, lr}
   d61b4:	460b      	mov	r3, r1
   d61b6:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61b8:	c803      	ldmia	r0, {r0, r1}
   d61ba:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d61be:	e893 0003 	ldmia.w	r3, {r0, r1}
   d61c2:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d61c6:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d61ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d61ce:	b002      	add	sp, #8
   d61d0:	bd10      	pop	{r4, pc}
	...

000d61d4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61d4:	4803      	ldr	r0, [pc, #12]	; (d61e4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d61d6:	4a04      	ldr	r2, [pc, #16]	; (d61e8 <_GLOBAL__sub_I_RGB+0x14>)
   d61d8:	4904      	ldr	r1, [pc, #16]	; (d61ec <_GLOBAL__sub_I_RGB+0x18>)
   d61da:	2300      	movs	r3, #0
   d61dc:	6083      	str	r3, [r0, #8]
   d61de:	f000 bf7d 	b.w	d70dc <__aeabi_atexit>
   d61e2:	bf00      	nop
   d61e4:	2003e3fc 	.word	0x2003e3fc
   d61e8:	2003de98 	.word	0x2003de98
   d61ec:	000d61a7 	.word	0x000d61a7

000d61f0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d61f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d61f2:	4b0c      	ldr	r3, [pc, #48]	; (d6224 <serialEventRun+0x34>)
   d61f4:	b133      	cbz	r3, d6204 <serialEventRun+0x14>
   d61f6:	f000 fc1b 	bl	d6a30 <_Z16_fetch_usbserialv>
   d61fa:	6803      	ldr	r3, [r0, #0]
   d61fc:	691b      	ldr	r3, [r3, #16]
   d61fe:	4798      	blx	r3
   d6200:	2800      	cmp	r0, #0
   d6202:	dc09      	bgt.n	d6218 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6204:	4b08      	ldr	r3, [pc, #32]	; (d6228 <serialEventRun+0x38>)
   d6206:	b163      	cbz	r3, d6222 <serialEventRun+0x32>
   d6208:	f000 fc94 	bl	d6b34 <_Z22__fetch_global_Serial1v>
   d620c:	6803      	ldr	r3, [r0, #0]
   d620e:	691b      	ldr	r3, [r3, #16]
   d6210:	4798      	blx	r3
   d6212:	2800      	cmp	r0, #0
   d6214:	dc03      	bgt.n	d621e <serialEventRun+0x2e>
   d6216:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6218:	f3af 8000 	nop.w
   d621c:	e7f2      	b.n	d6204 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d621e:	f3af 8000 	nop.w
   d6222:	bd08      	pop	{r3, pc}
	...

000d622c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d622c:	b508      	push	{r3, lr}
	serialEventRun();
   d622e:	f7ff ffdf 	bl	d61f0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6232:	f7ff fba9 	bl	d5988 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6236:	4b01      	ldr	r3, [pc, #4]	; (d623c <_post_loop+0x10>)
   d6238:	6018      	str	r0, [r3, #0]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	2003e730 	.word	0x2003e730

000d6240 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6240:	4802      	ldr	r0, [pc, #8]	; (d624c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6242:	4a03      	ldr	r2, [pc, #12]	; (d6250 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6244:	4903      	ldr	r1, [pc, #12]	; (d6254 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6246:	1a12      	subs	r2, r2, r0
   d6248:	f001 bed4 	b.w	d7ff4 <memcpy>
   d624c:	2003f400 	.word	0x2003f400
   d6250:	2003f404 	.word	0x2003f404
   d6254:	000d8610 	.word	0x000d8610

000d6258 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6258:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d625a:	2300      	movs	r3, #0
   d625c:	9300      	str	r3, [sp, #0]
   d625e:	461a      	mov	r2, r3
   d6260:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6264:	f7ff fca2 	bl	d5bac <system_ctrl_set_result>
}
   d6268:	b003      	add	sp, #12
   d626a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6270 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6270:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6272:	8843      	ldrh	r3, [r0, #2]
   d6274:	2b0a      	cmp	r3, #10
   d6276:	d008      	beq.n	d628a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6278:	2b50      	cmp	r3, #80	; 0x50
   d627a:	d109      	bne.n	d6290 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d627c:	4b09      	ldr	r3, [pc, #36]	; (d62a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d627e:	681b      	ldr	r3, [r3, #0]
   d6280:	b13b      	cbz	r3, d6292 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6282:	b003      	add	sp, #12
   d6284:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6288:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d628a:	f7ff ffe5 	bl	d6258 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d628e:	e006      	b.n	d629e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6290:	2300      	movs	r3, #0
   d6292:	9300      	str	r3, [sp, #0]
   d6294:	461a      	mov	r2, r3
   d6296:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d629a:	f7ff fc87 	bl	d5bac <system_ctrl_set_result>
        break;
    }
}
   d629e:	b003      	add	sp, #12
   d62a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d62a4:	2003e40c 	.word	0x2003e40c

000d62a8 <module_user_init_hook>:

void module_user_init_hook()
{
   d62a8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d62aa:	4c10      	ldr	r4, [pc, #64]	; (d62ec <module_user_init_hook+0x44>)
   d62ac:	4d10      	ldr	r5, [pc, #64]	; (d62f0 <module_user_init_hook+0x48>)
   d62ae:	6823      	ldr	r3, [r4, #0]
   d62b0:	42ab      	cmp	r3, r5
   d62b2:	4b10      	ldr	r3, [pc, #64]	; (d62f4 <module_user_init_hook+0x4c>)
   d62b4:	bf0c      	ite	eq
   d62b6:	2201      	moveq	r2, #1
   d62b8:	2200      	movne	r2, #0
   d62ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d62bc:	d002      	beq.n	d62c4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d62be:	f7ff ffbf 	bl	d6240 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d62c2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d62c4:	f7ff fb48 	bl	d5958 <HAL_RNG_GetRandomNumber>
   d62c8:	4604      	mov	r4, r0
    srand(seed);
   d62ca:	f001 fea7 	bl	d801c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d62ce:	4b0a      	ldr	r3, [pc, #40]	; (d62f8 <module_user_init_hook+0x50>)
   d62d0:	b113      	cbz	r3, d62d8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d62d2:	4620      	mov	r0, r4
   d62d4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d62d8:	2100      	movs	r1, #0
   d62da:	4807      	ldr	r0, [pc, #28]	; (d62f8 <module_user_init_hook+0x50>)
   d62dc:	f7ff fcd8 	bl	d5c90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d62e0:	2100      	movs	r1, #0
   d62e2:	4806      	ldr	r0, [pc, #24]	; (d62fc <module_user_init_hook+0x54>)
}
   d62e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d62e8:	f7ff bc56 	b.w	d5b98 <system_ctrl_set_app_request_handler>
   d62ec:	2003f400 	.word	0x2003f400
   d62f0:	9a271c1e 	.word	0x9a271c1e
   d62f4:	2003e410 	.word	0x2003e410
   d62f8:	00000000 	.word	0x00000000
   d62fc:	000d6271 	.word	0x000d6271

000d6300 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6300:	4770      	bx	lr

000d6302 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6302:	2000      	movs	r0, #0
   d6304:	4770      	bx	lr

000d6306 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6306:	b510      	push	{r4, lr}
   d6308:	2110      	movs	r1, #16
   d630a:	4604      	mov	r4, r0
   d630c:	f000 fef4 	bl	d70f8 <_ZdlPvj>
   d6310:	4620      	mov	r0, r4
   d6312:	bd10      	pop	{r4, pc}

000d6314 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6314:	b508      	push	{r3, lr}
      { delete this; }
   d6316:	b108      	cbz	r0, d631c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6318:	f7ff fff5 	bl	d6306 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d631c:	bd08      	pop	{r3, pc}

000d631e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d631e:	2200      	movs	r2, #0
   d6320:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6322:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6324:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6328:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d632a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d632e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6330:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6332:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6334:	680c      	ldr	r4, [r1, #0]
   d6336:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6338:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d633a:	bd10      	pop	{r4, pc}

000d633c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d633c:	b510      	push	{r4, lr}
   d633e:	4604      	mov	r4, r0
    free((void*)msg_);
   d6340:	6800      	ldr	r0, [r0, #0]
   d6342:	f7ff fcb5 	bl	d5cb0 <free>
}
   d6346:	4620      	mov	r0, r4
   d6348:	bd10      	pop	{r4, pc}

000d634a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d634a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d634c:	68c4      	ldr	r4, [r0, #12]
   d634e:	b1f4      	cbz	r4, d638e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6350:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6352:	2b02      	cmp	r3, #2
   d6354:	d103      	bne.n	d635e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6356:	f104 000c 	add.w	r0, r4, #12
   d635a:	f7ff ffef 	bl	d633c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d635e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6360:	b135      	cbz	r5, d6370 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6362:	4628      	mov	r0, r5
   d6364:	f7ff ff16 	bl	d6194 <_ZNSt14_Function_baseD1Ev>
   d6368:	2110      	movs	r1, #16
   d636a:	4628      	mov	r0, r5
   d636c:	f000 fec4 	bl	d70f8 <_ZdlPvj>
   d6370:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6372:	b135      	cbz	r5, d6382 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6374:	4628      	mov	r0, r5
   d6376:	f7ff ff0d 	bl	d6194 <_ZNSt14_Function_baseD1Ev>
   d637a:	2110      	movs	r1, #16
   d637c:	4628      	mov	r0, r5
   d637e:	f000 febb 	bl	d70f8 <_ZdlPvj>
   d6382:	4620      	mov	r0, r4
   d6384:	2114      	movs	r1, #20
   d6386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d638a:	f000 beb5 	b.w	d70f8 <_ZdlPvj>
   d638e:	bd38      	pop	{r3, r4, r5, pc}

000d6390 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6390:	b513      	push	{r0, r1, r4, lr}
   d6392:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6394:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6398:	2300      	movs	r3, #0
   d639a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d639c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d639e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d63a0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63a2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d63a4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d63a6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63a8:	f7ff fde7 	bl	d5f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63ac:	4620      	mov	r0, r4
   d63ae:	b002      	add	sp, #8
   d63b0:	bd10      	pop	{r4, pc}

000d63b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d63b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63b4:	460c      	mov	r4, r1
   d63b6:	ad02      	add	r5, sp, #8
   d63b8:	f854 3b04 	ldr.w	r3, [r4], #4
   d63bc:	f845 3d08 	str.w	r3, [r5, #-8]!
   d63c0:	4606      	mov	r6, r0
   d63c2:	460f      	mov	r7, r1
   d63c4:	a801      	add	r0, sp, #4
   d63c6:	4621      	mov	r1, r4
   d63c8:	f7ff fdd0 	bl	d5f6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d63cc:	4629      	mov	r1, r5
   d63ce:	4630      	mov	r0, r6
   d63d0:	f7ff ffde 	bl	d6390 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63d4:	a801      	add	r0, sp, #4
   d63d6:	f7ff fdd0 	bl	d5f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63da:	4620      	mov	r0, r4
   d63dc:	f7ff fdcd 	bl	d5f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d63e0:	4638      	mov	r0, r7
   d63e2:	2108      	movs	r1, #8
   d63e4:	f000 fe88 	bl	d70f8 <_ZdlPvj>
        return p;
    }
   d63e8:	4630      	mov	r0, r6
   d63ea:	b003      	add	sp, #12
   d63ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d63f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d63f0:	b538      	push	{r3, r4, r5, lr}
   d63f2:	2300      	movs	r3, #0
   d63f4:	4604      	mov	r4, r0
   d63f6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d63f8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d63fa:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d63fc:	f7fd fe4d 	bl	d409a <_Znwj>
   d6400:	b128      	cbz	r0, d640e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6402:	2301      	movs	r3, #1
   d6404:	6043      	str	r3, [r0, #4]
   d6406:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6408:	4b02      	ldr	r3, [pc, #8]	; (d6414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d640a:	6003      	str	r3, [r0, #0]
   d640c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d640e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6410:	4620      	mov	r0, r4
   d6412:	bd38      	pop	{r3, r4, r5, pc}
   d6414:	000d83d0 	.word	0x000d83d0

000d6418 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6418:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d641a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d641c:	b90a      	cbnz	r2, d6422 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d641e:	f000 fe7e 	bl	d711e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6422:	68c3      	ldr	r3, [r0, #12]
    }
   d6424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6428:	4718      	bx	r3

000d642a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d642a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d642c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d642e:	f100 0110 	add.w	r1, r0, #16
   d6432:	f7ff fff1 	bl	d6418 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6436:	bd08      	pop	{r3, pc}

000d6438 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6438:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d643a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d643c:	b90a      	cbnz	r2, d6442 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d643e:	f000 fe6e 	bl	d711e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6442:	68c3      	ldr	r3, [r0, #12]
    }
   d6444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6448:	4718      	bx	r3

000d644a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d644a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d644c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d644e:	f100 0110 	add.w	r1, r0, #16
   d6452:	f7ff fff1 	bl	d6438 <_ZNKSt8functionIFvRKbEEclES1_>
   d6456:	bd08      	pop	{r3, pc}

000d6458 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6458:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d645a:	2300      	movs	r3, #0
   d645c:	6083      	str	r3, [r0, #8]
   d645e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6460:	4604      	mov	r4, r0
   d6462:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6464:	b12b      	cbz	r3, d6472 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6466:	2202      	movs	r2, #2
   d6468:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d646a:	68eb      	ldr	r3, [r5, #12]
   d646c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d646e:	68ab      	ldr	r3, [r5, #8]
   d6470:	60a3      	str	r3, [r4, #8]
	}
    }
   d6472:	4620      	mov	r0, r4
   d6474:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6478 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6478:	b5f0      	push	{r4, r5, r6, r7, lr}
   d647a:	b089      	sub	sp, #36	; 0x24
   d647c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d647e:	4668      	mov	r0, sp
   d6480:	f7ff ff4d 	bl	d631e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6484:	2300      	movs	r3, #0
   d6486:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d648a:	f04f 0202 	mov.w	r2, #2
   d648e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6492:	2b00      	cmp	r3, #0
   d6494:	d103      	bne.n	d649e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6496:	e8c4 2f41 	strexb	r1, r2, [r4]
   d649a:	2900      	cmp	r1, #0
   d649c:	d1f7      	bne.n	d648e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d649e:	d002      	beq.n	d64a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d64a0:	f88d 3008 	strb.w	r3, [sp, #8]
   d64a4:	e063      	b.n	d656e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d64a6:	f114 050c 	adds.w	r5, r4, #12
   d64aa:	d003      	beq.n	d64b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d64ac:	4669      	mov	r1, sp
   d64ae:	4628      	mov	r0, r5
   d64b0:	f7ff ff35 	bl	d631e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d64b4:	f3bf 8f5f 	dmb	sy
   d64b8:	2301      	movs	r3, #1
   d64ba:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d64bc:	2000      	movs	r0, #0
   d64be:	f104 0308 	add.w	r3, r4, #8
   d64c2:	f3bf 8f5f 	dmb	sy
   d64c6:	e853 6f00 	ldrex	r6, [r3]
   d64ca:	e843 0200 	strex	r2, r0, [r3]
   d64ce:	2a00      	cmp	r2, #0
   d64d0:	d1f9      	bne.n	d64c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d64d2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d64d6:	2e00      	cmp	r6, #0
   d64d8:	d049      	beq.n	d656e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d64da:	f7ff fb4d 	bl	d5b78 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d64de:	b120      	cbz	r0, d64ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d64e0:	4629      	mov	r1, r5
   d64e2:	4630      	mov	r0, r6
   d64e4:	f7ff ff98 	bl	d6418 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d64e8:	e03a      	b.n	d6560 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d64ea:	4631      	mov	r1, r6
   d64ec:	a802      	add	r0, sp, #8
   d64ee:	f7ff ffb3 	bl	d6458 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d64f2:	68e0      	ldr	r0, [r4, #12]
   d64f4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d64f8:	b108      	cbz	r0, d64fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d64fa:	f001 fdb7 	bl	d806c <strdup>
   d64fe:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6500:	2010      	movs	r0, #16
   d6502:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6506:	f7fd fdc8 	bl	d409a <_Znwj>
   d650a:	4605      	mov	r5, r0
   d650c:	b1e8      	cbz	r0, d654a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d650e:	2700      	movs	r7, #0
   d6510:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6512:	2018      	movs	r0, #24
   d6514:	f7fd fdc1 	bl	d409a <_Znwj>
   d6518:	4604      	mov	r4, r0
   d651a:	b188      	cbz	r0, d6540 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d651c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d651e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6520:	a802      	add	r0, sp, #8
   d6522:	f7ff fe46 	bl	d61b2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6526:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6528:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d652a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d652c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d652e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6530:	a906      	add	r1, sp, #24
   d6532:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6534:	60e3      	str	r3, [r4, #12]
   d6536:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d653a:	9205      	str	r2, [sp, #20]
   d653c:	f7ff feef 	bl	d631e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6540:	4b0d      	ldr	r3, [pc, #52]	; (d6578 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6542:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6544:	4b0d      	ldr	r3, [pc, #52]	; (d657c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6546:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6548:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d654a:	a806      	add	r0, sp, #24
   d654c:	f7ff fef6 	bl	d633c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6550:	a802      	add	r0, sp, #8
   d6552:	f7ff fe1f 	bl	d6194 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6556:	2200      	movs	r2, #0
   d6558:	4629      	mov	r1, r5
   d655a:	4809      	ldr	r0, [pc, #36]	; (d6580 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d655c:	f7ff fb14 	bl	d5b88 <application_thread_invoke>
   d6560:	4630      	mov	r0, r6
   d6562:	f7ff fe17 	bl	d6194 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6566:	2110      	movs	r1, #16
   d6568:	4630      	mov	r0, r6
   d656a:	f000 fdc5 	bl	d70f8 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d656e:	4668      	mov	r0, sp
   d6570:	f7ff fee4 	bl	d633c <_ZN8particle5ErrorD1Ev>
    }
   d6574:	b009      	add	sp, #36	; 0x24
   d6576:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6578:	000d642b 	.word	0x000d642b
   d657c:	000d66a1 	.word	0x000d66a1
   d6580:	000d6b81 	.word	0x000d6b81

000d6584 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6588:	b08b      	sub	sp, #44	; 0x2c
   d658a:	4606      	mov	r6, r0
   d658c:	460f      	mov	r7, r1
   d658e:	4690      	mov	r8, r2
   d6590:	4699      	mov	r9, r3
   d6592:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6596:	f7ff fb6b 	bl	d5c70 <spark_cloud_flag_connected>
   d659a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d659c:	4683      	mov	fp, r0
   d659e:	bb30      	cbnz	r0, d65ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d65a0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d65a4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d65a6:	a905      	add	r1, sp, #20
   d65a8:	4628      	mov	r0, r5
   d65aa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d65ae:	f7ff feb6 	bl	d631e <_ZN8particle5ErrorC1EOS0_>
   d65b2:	2014      	movs	r0, #20
   d65b4:	f7fd fd71 	bl	d409a <_Znwj>
   d65b8:	4604      	mov	r4, r0
   d65ba:	b158      	cbz	r0, d65d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d65bc:	2302      	movs	r3, #2
   d65be:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d65c0:	2301      	movs	r3, #1
   d65c2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d65c4:	f8c0 b004 	str.w	fp, [r0, #4]
   d65c8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d65cc:	4629      	mov	r1, r5
   d65ce:	300c      	adds	r0, #12
   d65d0:	f7ff fea5 	bl	d631e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d65d4:	4630      	mov	r0, r6
   d65d6:	4621      	mov	r1, r4
   d65d8:	f840 4b04 	str.w	r4, [r0], #4
   d65dc:	f7ff ff08 	bl	d63f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d65e0:	4628      	mov	r0, r5
   d65e2:	f7ff feab 	bl	d633c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d65e6:	a805      	add	r0, sp, #20
   d65e8:	f7ff fea8 	bl	d633c <_ZN8particle5ErrorD1Ev>
   d65ec:	e052      	b.n	d6694 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d65ee:	2400      	movs	r4, #0
   d65f0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d65f2:	2014      	movs	r0, #20
   d65f4:	606c      	str	r4, [r5, #4]
   d65f6:	60ac      	str	r4, [r5, #8]
   d65f8:	9307      	str	r3, [sp, #28]
   d65fa:	f7fd fd4e 	bl	d409a <_Znwj>
   d65fe:	4601      	mov	r1, r0
   d6600:	b118      	cbz	r0, d660a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6602:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6604:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6606:	6044      	str	r4, [r0, #4]
   d6608:	6084      	str	r4, [r0, #8]
   d660a:	a804      	add	r0, sp, #16
   d660c:	9103      	str	r1, [sp, #12]
   d660e:	f7ff feef 	bl	d63f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6612:	4b22      	ldr	r3, [pc, #136]	; (d669c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6614:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6616:	2008      	movs	r0, #8
   d6618:	f7fd fd3f 	bl	d409a <_Znwj>
   d661c:	4604      	mov	r4, r0
   d661e:	b128      	cbz	r0, d662c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6620:	9b03      	ldr	r3, [sp, #12]
   d6622:	f840 3b04 	str.w	r3, [r0], #4
   d6626:	a904      	add	r1, sp, #16
   d6628:	f7ff fca0 	bl	d5f6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d662c:	9500      	str	r5, [sp, #0]
   d662e:	fa5f f38a 	uxtb.w	r3, sl
   d6632:	464a      	mov	r2, r9
   d6634:	4641      	mov	r1, r8
   d6636:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6638:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d663a:	f7ff fb21 	bl	d5c80 <spark_send_event>
   d663e:	b920      	cbnz	r0, d664a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6640:	9b03      	ldr	r3, [sp, #12]
   d6642:	785b      	ldrb	r3, [r3, #1]
   d6644:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6648:	b183      	cbz	r3, d666c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d664a:	9b03      	ldr	r3, [sp, #12]
   d664c:	9305      	str	r3, [sp, #20]
   d664e:	a904      	add	r1, sp, #16
   d6650:	a806      	add	r0, sp, #24
   d6652:	f7ff fc8b 	bl	d5f6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6656:	a905      	add	r1, sp, #20
   d6658:	4630      	mov	r0, r6
   d665a:	f7ff fe99 	bl	d6390 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d665e:	a806      	add	r0, sp, #24
   d6660:	f7ff fc8b 	bl	d5f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6664:	a804      	add	r0, sp, #16
   d6666:	f7ff fc88 	bl	d5f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d666a:	e013      	b.n	d6694 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d666c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6670:	a905      	add	r1, sp, #20
   d6672:	a803      	add	r0, sp, #12
   d6674:	9205      	str	r2, [sp, #20]
   d6676:	f8ad 3018 	strh.w	r3, [sp, #24]
   d667a:	f7ff fefd 	bl	d6478 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d667e:	a805      	add	r0, sp, #20
   d6680:	f7ff fe5c 	bl	d633c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6684:	a805      	add	r0, sp, #20
   d6686:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6688:	f7ff fe93 	bl	d63b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d668c:	a806      	add	r0, sp, #24
   d668e:	f7ff fc74 	bl	d5f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6692:	e7da      	b.n	d664a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6694:	4630      	mov	r0, r6
   d6696:	b00b      	add	sp, #44	; 0x2c
   d6698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d669c:	000d6811 	.word	0x000d6811

000d66a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d66a0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d66a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66a4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d66a6:	d006      	beq.n	d66b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d66a8:	2a03      	cmp	r2, #3
   d66aa:	d017      	beq.n	d66dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d66ac:	2a01      	cmp	r2, #1
   d66ae:	d122      	bne.n	d66f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d66b0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d66b2:	6003      	str	r3, [r0, #0]
	      break;
   d66b4:	e01f      	b.n	d66f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d66b6:	2018      	movs	r0, #24
   d66b8:	680e      	ldr	r6, [r1, #0]
   d66ba:	f7fd fcee 	bl	d409a <_Znwj>
   d66be:	4605      	mov	r5, r0
   d66c0:	b150      	cbz	r0, d66d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d66c2:	4631      	mov	r1, r6
   d66c4:	f7ff fec8 	bl	d6458 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d66c8:	6930      	ldr	r0, [r6, #16]
   d66ca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d66ce:	b108      	cbz	r0, d66d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d66d0:	f001 fccc 	bl	d806c <strdup>
   d66d4:	6128      	str	r0, [r5, #16]
   d66d6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d66d8:	6025      	str	r5, [r4, #0]
   d66da:	e00c      	b.n	d66f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d66dc:	6804      	ldr	r4, [r0, #0]
   d66de:	b154      	cbz	r4, d66f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d66e0:	f104 0010 	add.w	r0, r4, #16
   d66e4:	f7ff fe2a 	bl	d633c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d66e8:	4620      	mov	r0, r4
   d66ea:	f7ff fd53 	bl	d6194 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d66ee:	2118      	movs	r1, #24
   d66f0:	4620      	mov	r0, r4
   d66f2:	f000 fd01 	bl	d70f8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d66f6:	2000      	movs	r0, #0
   d66f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66fa <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d66fa:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d66fc:	2300      	movs	r3, #0
   d66fe:	6083      	str	r3, [r0, #8]
   d6700:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6702:	4604      	mov	r4, r0
   d6704:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6706:	b12b      	cbz	r3, d6714 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6708:	2202      	movs	r2, #2
   d670a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d670c:	68eb      	ldr	r3, [r5, #12]
   d670e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6710:	68ab      	ldr	r3, [r5, #8]
   d6712:	60a3      	str	r3, [r4, #8]
	}
    }
   d6714:	4620      	mov	r0, r4
   d6716:	bd38      	pop	{r3, r4, r5, pc}

000d6718 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6718:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d671a:	b570      	push	{r4, r5, r6, lr}
   d671c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d671e:	d006      	beq.n	d672e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6720:	2a03      	cmp	r2, #3
   d6722:	d011      	beq.n	d6748 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6724:	2a01      	cmp	r2, #1
   d6726:	d118      	bne.n	d675a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6728:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d672a:	6003      	str	r3, [r0, #0]
	      break;
   d672c:	e015      	b.n	d675a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d672e:	2014      	movs	r0, #20
   d6730:	680e      	ldr	r6, [r1, #0]
   d6732:	f7fd fcb2 	bl	d409a <_Znwj>
   d6736:	4605      	mov	r5, r0
   d6738:	b120      	cbz	r0, d6744 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d673a:	4631      	mov	r1, r6
   d673c:	f7ff ffdd 	bl	d66fa <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6740:	7c33      	ldrb	r3, [r6, #16]
   d6742:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6744:	6025      	str	r5, [r4, #0]
   d6746:	e008      	b.n	d675a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6748:	6804      	ldr	r4, [r0, #0]
   d674a:	b134      	cbz	r4, d675a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d674c:	4620      	mov	r0, r4
   d674e:	f7ff fd21 	bl	d6194 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6752:	2114      	movs	r1, #20
   d6754:	4620      	mov	r0, r4
   d6756:	f000 fccf 	bl	d70f8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d675a:	2000      	movs	r0, #0
   d675c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6760 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6760:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6762:	2300      	movs	r3, #0
   d6764:	b087      	sub	sp, #28
   d6766:	460c      	mov	r4, r1
   d6768:	f3bf 8f5f 	dmb	sy
   d676c:	e850 6f00 	ldrex	r6, [r0]
   d6770:	e840 3200 	strex	r2, r3, [r0]
   d6774:	2a00      	cmp	r2, #0
   d6776:	d1f9      	bne.n	d676c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6778:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d677c:	2e00      	cmp	r6, #0
   d677e:	d03f      	beq.n	d6800 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6780:	4618      	mov	r0, r3
   d6782:	f7ff f9f9 	bl	d5b78 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6786:	4607      	mov	r7, r0
   d6788:	b120      	cbz	r0, d6794 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d678a:	4621      	mov	r1, r4
   d678c:	4630      	mov	r0, r6
   d678e:	f7ff fe53 	bl	d6438 <_ZNKSt8functionIFvRKbEEclES1_>
   d6792:	e02e      	b.n	d67f2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6794:	4631      	mov	r1, r6
   d6796:	a801      	add	r0, sp, #4
   d6798:	f7ff ffaf 	bl	d66fa <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d679c:	7823      	ldrb	r3, [r4, #0]
   d679e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d67a2:	2010      	movs	r0, #16
   d67a4:	f7fd fc79 	bl	d409a <_Znwj>
   d67a8:	4605      	mov	r5, r0
   d67aa:	b1d0      	cbz	r0, d67e2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67ac:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d67ae:	2014      	movs	r0, #20
   d67b0:	f7fd fc73 	bl	d409a <_Znwj>
   d67b4:	4604      	mov	r4, r0
   d67b6:	b178      	cbz	r0, d67d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67b8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d67ba:	4601      	mov	r1, r0
   d67bc:	a801      	add	r0, sp, #4
   d67be:	f7ff fcf8 	bl	d61b2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67c2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d67c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d67c6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67c8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d67ca:	9203      	str	r2, [sp, #12]
   d67cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d67ce:	60e3      	str	r3, [r4, #12]
   d67d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d67d4:	9204      	str	r2, [sp, #16]
   d67d6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d67d8:	4b0a      	ldr	r3, [pc, #40]	; (d6804 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d67da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d67dc:	4b0a      	ldr	r3, [pc, #40]	; (d6808 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d67de:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d67e0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d67e2:	a801      	add	r0, sp, #4
   d67e4:	f7ff fcd6 	bl	d6194 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d67e8:	2200      	movs	r2, #0
   d67ea:	4629      	mov	r1, r5
   d67ec:	4807      	ldr	r0, [pc, #28]	; (d680c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d67ee:	f7ff f9cb 	bl	d5b88 <application_thread_invoke>
   d67f2:	4630      	mov	r0, r6
   d67f4:	f7ff fcce 	bl	d6194 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d67f8:	2110      	movs	r1, #16
   d67fa:	4630      	mov	r0, r6
   d67fc:	f000 fc7c 	bl	d70f8 <_ZdlPvj>
        }
    }
   d6800:	b007      	add	sp, #28
   d6802:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6804:	000d644b 	.word	0x000d644b
   d6808:	000d6719 	.word	0x000d6719
   d680c:	000d6b81 	.word	0x000d6b81

000d6810 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6810:	b530      	push	{r4, r5, lr}
   d6812:	b085      	sub	sp, #20
   d6814:	4604      	mov	r4, r0
   d6816:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6818:	4668      	mov	r0, sp
   d681a:	4611      	mov	r1, r2
   d681c:	f7ff fdc9 	bl	d63b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6820:	b17c      	cbz	r4, d6842 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6822:	b224      	sxth	r4, r4
   d6824:	4628      	mov	r0, r5
   d6826:	b10d      	cbz	r5, d682c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6828:	f001 fc20 	bl	d806c <strdup>
   d682c:	9002      	str	r0, [sp, #8]
   d682e:	a902      	add	r1, sp, #8
   d6830:	4668      	mov	r0, sp
   d6832:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6836:	f7ff fe1f 	bl	d6478 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d683a:	a802      	add	r0, sp, #8
   d683c:	f7ff fd7e 	bl	d633c <_ZN8particle5ErrorD1Ev>
   d6840:	e01d      	b.n	d687e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6842:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6844:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6848:	f04f 0201 	mov.w	r2, #1
   d684c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6850:	42a3      	cmp	r3, r4
   d6852:	d103      	bne.n	d685c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6854:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6858:	2900      	cmp	r1, #0
   d685a:	d1f7      	bne.n	d684c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d685c:	d002      	beq.n	d6864 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d685e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6862:	e00c      	b.n	d687e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6864:	f110 010c 	adds.w	r1, r0, #12
   d6868:	f04f 0301 	mov.w	r3, #1
   d686c:	bf18      	it	ne
   d686e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6870:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6874:	3004      	adds	r0, #4
   d6876:	f800 3c03 	strb.w	r3, [r0, #-3]
   d687a:	f7ff ff71 	bl	d6760 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d687e:	a801      	add	r0, sp, #4
   d6880:	f7ff fb7b 	bl	d5f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6884:	b005      	add	sp, #20
   d6886:	bd30      	pop	{r4, r5, pc}

000d6888 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6888:	4770      	bx	lr

000d688a <_ZN9IPAddressD0Ev>:
   d688a:	b510      	push	{r4, lr}
   d688c:	2118      	movs	r1, #24
   d688e:	4604      	mov	r4, r0
   d6890:	f000 fc32 	bl	d70f8 <_ZdlPvj>
   d6894:	4620      	mov	r0, r4
   d6896:	bd10      	pop	{r4, pc}

000d6898 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6898:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d689a:	7d03      	ldrb	r3, [r0, #20]
   d689c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d689e:	b08d      	sub	sp, #52	; 0x34
   d68a0:	460e      	mov	r6, r1
   d68a2:	f100 0704 	add.w	r7, r0, #4
   d68a6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d68aa:	d002      	beq.n	d68b2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d68ac:	f100 0508 	add.w	r5, r0, #8
   d68b0:	e018      	b.n	d68e4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d68b2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d68b4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d68b6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d68ba:	232f      	movs	r3, #47	; 0x2f
   d68bc:	462a      	mov	r2, r5
   d68be:	200a      	movs	r0, #10
   d68c0:	f7ff f892 	bl	d59e8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d68c4:	4628      	mov	r0, r5
   d68c6:	f001 fbec 	bl	d80a2 <strlen>
   d68ca:	6833      	ldr	r3, [r6, #0]
   d68cc:	4602      	mov	r2, r0
   d68ce:	68db      	ldr	r3, [r3, #12]
   d68d0:	4629      	mov	r1, r5
   d68d2:	4630      	mov	r0, r6
   d68d4:	4798      	blx	r3
   d68d6:	e00f      	b.n	d68f8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d68d8:	b124      	cbz	r4, d68e4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d68da:	212e      	movs	r1, #46	; 0x2e
   d68dc:	4630      	mov	r0, r6
   d68de:	f7ff fb87 	bl	d5ff0 <_ZN5Print5printEc>
   d68e2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d68e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d68e8:	220a      	movs	r2, #10
   d68ea:	4630      	mov	r0, r6
   d68ec:	f7ff fb99 	bl	d6022 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d68f0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d68f2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d68f4:	d1f0      	bne.n	d68d8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d68f6:	4620      	mov	r0, r4
    }
    return n;
}
   d68f8:	b00d      	add	sp, #52	; 0x34
   d68fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d68fc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d68fc:	b510      	push	{r4, lr}
   d68fe:	4b05      	ldr	r3, [pc, #20]	; (d6914 <_ZN9IPAddressC1Ev+0x18>)
   d6900:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6902:	2211      	movs	r2, #17
   d6904:	f840 3b04 	str.w	r3, [r0], #4
   d6908:	2100      	movs	r1, #0
   d690a:	f001 fb7e 	bl	d800a <memset>
{
    clear();
}
   d690e:	4620      	mov	r0, r4
   d6910:	bd10      	pop	{r4, pc}
   d6912:	bf00      	nop
   d6914:	000d83ec 	.word	0x000d83ec

000d6918 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6918:	4603      	mov	r3, r0
   d691a:	4a07      	ldr	r2, [pc, #28]	; (d6938 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d691c:	b510      	push	{r4, lr}
   d691e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6922:	f101 0210 	add.w	r2, r1, #16
   d6926:	f851 4b04 	ldr.w	r4, [r1], #4
   d692a:	f843 4b04 	str.w	r4, [r3], #4
   d692e:	4291      	cmp	r1, r2
   d6930:	d1f9      	bne.n	d6926 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6932:	780a      	ldrb	r2, [r1, #0]
   d6934:	701a      	strb	r2, [r3, #0]
}
   d6936:	bd10      	pop	{r4, pc}
   d6938:	000d83ec 	.word	0x000d83ec

000d693c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d693c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d693e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6942:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6946:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d694a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d694e:	2304      	movs	r3, #4
   d6950:	6041      	str	r1, [r0, #4]
   d6952:	7503      	strb	r3, [r0, #20]
   d6954:	bd10      	pop	{r4, pc}

000d6956 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6956:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6958:	780d      	ldrb	r5, [r1, #0]
   d695a:	788b      	ldrb	r3, [r1, #2]
   d695c:	784a      	ldrb	r2, [r1, #1]
   d695e:	78c9      	ldrb	r1, [r1, #3]
   d6960:	9100      	str	r1, [sp, #0]
   d6962:	4629      	mov	r1, r5
   d6964:	f7ff ffea 	bl	d693c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6968:	b003      	add	sp, #12
   d696a:	bd30      	pop	{r4, r5, pc}

000d696c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d696c:	7441      	strb	r1, [r0, #17]
   d696e:	4770      	bx	lr

000d6970 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6970:	4770      	bx	lr

000d6972 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6972:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6974:	2100      	movs	r1, #0
   d6976:	7c00      	ldrb	r0, [r0, #16]
   d6978:	f7ff f8d6 	bl	d5b28 <HAL_USB_USART_Receive_Data>
}
   d697c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6980:	bf28      	it	cs
   d6982:	f04f 30ff 	movcs.w	r0, #4294967295
   d6986:	bd08      	pop	{r3, pc}

000d6988 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6988:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d698a:	2101      	movs	r1, #1
   d698c:	7c00      	ldrb	r0, [r0, #16]
   d698e:	f7ff f8cb 	bl	d5b28 <HAL_USB_USART_Receive_Data>
}
   d6992:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6996:	bf28      	it	cs
   d6998:	f04f 30ff 	movcs.w	r0, #4294967295
   d699c:	bd08      	pop	{r3, pc}

000d699e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d699e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d69a0:	7c00      	ldrb	r0, [r0, #16]
   d69a2:	f7ff f8b9 	bl	d5b18 <HAL_USB_USART_Available_Data_For_Write>
}
   d69a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69aa:	bd08      	pop	{r3, pc}

000d69ac <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d69ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d69ae:	7c00      	ldrb	r0, [r0, #16]
   d69b0:	f7ff f8aa 	bl	d5b08 <HAL_USB_USART_Available_Data>
}
   d69b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69b8:	bd08      	pop	{r3, pc}

000d69ba <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d69ba:	7c00      	ldrb	r0, [r0, #16]
   d69bc:	f7ff b8c4 	b.w	d5b48 <HAL_USB_USART_Flush_Data>

000d69c0 <_ZN9USBSerialD0Ev>:
   d69c0:	b510      	push	{r4, lr}
   d69c2:	2114      	movs	r1, #20
   d69c4:	4604      	mov	r4, r0
   d69c6:	f000 fb97 	bl	d70f8 <_ZdlPvj>
   d69ca:	4620      	mov	r0, r4
   d69cc:	bd10      	pop	{r4, pc}

000d69ce <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d69ce:	b538      	push	{r3, r4, r5, lr}
   d69d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69d2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d69d4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69d6:	f7ff f89f 	bl	d5b18 <HAL_USB_USART_Available_Data_For_Write>
   d69da:	2800      	cmp	r0, #0
   d69dc:	dc01      	bgt.n	d69e2 <_ZN9USBSerial5writeEh+0x14>
   d69de:	7c60      	ldrb	r0, [r4, #17]
   d69e0:	b128      	cbz	r0, d69ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d69e2:	4629      	mov	r1, r5
   d69e4:	7c20      	ldrb	r0, [r4, #16]
   d69e6:	f7ff f8a7 	bl	d5b38 <HAL_USB_USART_Send_Data>
   d69ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d69ee:	bd38      	pop	{r3, r4, r5, pc}

000d69f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d69f0:	b510      	push	{r4, lr}
   d69f2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d69f4:	2300      	movs	r3, #0
   d69f6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d69f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d69fc:	60a3      	str	r3, [r4, #8]
   d69fe:	4b05      	ldr	r3, [pc, #20]	; (d6a14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6a00:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6a02:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a04:	4608      	mov	r0, r1
{
  _serial = serial;
   d6a06:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6a08:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6a0a:	4611      	mov	r1, r2
   d6a0c:	f7ff f86c 	bl	d5ae8 <HAL_USB_USART_Init>
}
   d6a10:	4620      	mov	r0, r4
   d6a12:	bd10      	pop	{r4, pc}
   d6a14:	000d8400 	.word	0x000d8400

000d6a18 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6a18:	2200      	movs	r2, #0
   d6a1a:	7c00      	ldrb	r0, [r0, #16]
   d6a1c:	f7ff b86c 	b.w	d5af8 <HAL_USB_USART_Begin>

000d6a20 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a20:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6a22:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a24:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6a26:	2100      	movs	r1, #0
   d6a28:	f001 faef 	bl	d800a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6a2c:	4620      	mov	r0, r4
   d6a2e:	bd10      	pop	{r4, pc}

000d6a30 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6a30:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a32:	4d0e      	ldr	r5, [pc, #56]	; (d6a6c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6a34:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6a36:	a801      	add	r0, sp, #4
   d6a38:	f7ff fff2 	bl	d6a20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a3c:	6829      	ldr	r1, [r5, #0]
   d6a3e:	f011 0401 	ands.w	r4, r1, #1
   d6a42:	d110      	bne.n	d6a66 <_Z16_fetch_usbserialv+0x36>
   d6a44:	4628      	mov	r0, r5
   d6a46:	f7fd fb2e 	bl	d40a6 <__cxa_guard_acquire>
   d6a4a:	b160      	cbz	r0, d6a66 <_Z16_fetch_usbserialv+0x36>
   d6a4c:	aa01      	add	r2, sp, #4
   d6a4e:	4621      	mov	r1, r4
   d6a50:	4807      	ldr	r0, [pc, #28]	; (d6a70 <_Z16_fetch_usbserialv+0x40>)
   d6a52:	f7ff ffcd 	bl	d69f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6a56:	4628      	mov	r0, r5
   d6a58:	f7fd fb2a 	bl	d40b0 <__cxa_guard_release>
   d6a5c:	4a05      	ldr	r2, [pc, #20]	; (d6a74 <_Z16_fetch_usbserialv+0x44>)
   d6a5e:	4906      	ldr	r1, [pc, #24]	; (d6a78 <_Z16_fetch_usbserialv+0x48>)
   d6a60:	4803      	ldr	r0, [pc, #12]	; (d6a70 <_Z16_fetch_usbserialv+0x40>)
   d6a62:	f000 fb3b 	bl	d70dc <__aeabi_atexit>
	return _usbserial;
}
   d6a66:	4802      	ldr	r0, [pc, #8]	; (d6a70 <_Z16_fetch_usbserialv+0x40>)
   d6a68:	b007      	add	sp, #28
   d6a6a:	bd30      	pop	{r4, r5, pc}
   d6a6c:	2003e414 	.word	0x2003e414
   d6a70:	2003e418 	.word	0x2003e418
   d6a74:	2003de98 	.word	0x2003de98
   d6a78:	000d6971 	.word	0x000d6971

000d6a7c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6a7c:	4770      	bx	lr

000d6a7e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6a7e:	7441      	strb	r1, [r0, #17]
   d6a80:	4770      	bx	lr

000d6a82 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6a82:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6a84:	7c00      	ldrb	r0, [r0, #16]
   d6a86:	f7fe ffef 	bl	d5a68 <HAL_USART_Available_Data_For_Write>
}
   d6a8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a8e:	bd08      	pop	{r3, pc}

000d6a90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6a90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6a92:	7c00      	ldrb	r0, [r0, #16]
   d6a94:	f7fe ffc0 	bl	d5a18 <HAL_USART_Available_Data>
}
   d6a98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a9c:	bd08      	pop	{r3, pc}

000d6a9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6a9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6aa0:	7c00      	ldrb	r0, [r0, #16]
   d6aa2:	f7fe ffc9 	bl	d5a38 <HAL_USART_Peek_Data>
}
   d6aa6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6aaa:	bf28      	it	cs
   d6aac:	f04f 30ff 	movcs.w	r0, #4294967295
   d6ab0:	bd08      	pop	{r3, pc}

000d6ab2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6ab2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6ab4:	7c00      	ldrb	r0, [r0, #16]
   d6ab6:	f7fe ffb7 	bl	d5a28 <HAL_USART_Read_Data>
}
   d6aba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6abe:	bf28      	it	cs
   d6ac0:	f04f 30ff 	movcs.w	r0, #4294967295
   d6ac4:	bd08      	pop	{r3, pc}

000d6ac6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6ac6:	7c00      	ldrb	r0, [r0, #16]
   d6ac8:	f7fe bfbe 	b.w	d5a48 <HAL_USART_Flush_Data>

000d6acc <_ZN11USARTSerialD0Ev>:
   d6acc:	b510      	push	{r4, lr}
   d6ace:	2114      	movs	r1, #20
   d6ad0:	4604      	mov	r4, r0
   d6ad2:	f000 fb11 	bl	d70f8 <_ZdlPvj>
   d6ad6:	4620      	mov	r0, r4
   d6ad8:	bd10      	pop	{r4, pc}

000d6ada <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6ada:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6adc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6ade:	4604      	mov	r4, r0
   d6ae0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6ae2:	b925      	cbnz	r5, d6aee <_ZN11USARTSerial5writeEh+0x14>
   d6ae4:	7c00      	ldrb	r0, [r0, #16]
   d6ae6:	f7fe ffbf 	bl	d5a68 <HAL_USART_Available_Data_For_Write>
   d6aea:	2800      	cmp	r0, #0
   d6aec:	dd05      	ble.n	d6afa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6aee:	4631      	mov	r1, r6
   d6af0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6af6:	f7fe bf87 	b.w	d5a08 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6afa:	4628      	mov	r0, r5
   d6afc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6b00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6b00:	b510      	push	{r4, lr}
   d6b02:	4604      	mov	r4, r0
   d6b04:	4608      	mov	r0, r1
   d6b06:	4611      	mov	r1, r2
   d6b08:	2200      	movs	r2, #0
   d6b0a:	6062      	str	r2, [r4, #4]
   d6b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b10:	60a2      	str	r2, [r4, #8]
   d6b12:	4a05      	ldr	r2, [pc, #20]	; (d6b28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6b14:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6b16:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6b18:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6b1a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6b1c:	461a      	mov	r2, r3
   d6b1e:	f7fe ff6b 	bl	d59f8 <HAL_USART_Init>
}
   d6b22:	4620      	mov	r0, r4
   d6b24:	bd10      	pop	{r4, pc}
   d6b26:	bf00      	nop
   d6b28:	000d8430 	.word	0x000d8430

000d6b2c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6b2c:	7c00      	ldrb	r0, [r0, #16]
   d6b2e:	f7fe bf93 	b.w	d5a58 <HAL_USART_Is_Enabled>
	...

000d6b34 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6b34:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6b36:	4d0c      	ldr	r5, [pc, #48]	; (d6b68 <_Z22__fetch_global_Serial1v+0x34>)
   d6b38:	6829      	ldr	r1, [r5, #0]
   d6b3a:	f011 0401 	ands.w	r4, r1, #1
   d6b3e:	d111      	bne.n	d6b64 <_Z22__fetch_global_Serial1v+0x30>
   d6b40:	4628      	mov	r0, r5
   d6b42:	f7fd fab0 	bl	d40a6 <__cxa_guard_acquire>
   d6b46:	b168      	cbz	r0, d6b64 <_Z22__fetch_global_Serial1v+0x30>
   d6b48:	4a08      	ldr	r2, [pc, #32]	; (d6b6c <_Z22__fetch_global_Serial1v+0x38>)
   d6b4a:	4b09      	ldr	r3, [pc, #36]	; (d6b70 <_Z22__fetch_global_Serial1v+0x3c>)
   d6b4c:	4809      	ldr	r0, [pc, #36]	; (d6b74 <_Z22__fetch_global_Serial1v+0x40>)
   d6b4e:	4621      	mov	r1, r4
   d6b50:	f7ff ffd6 	bl	d6b00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6b54:	4628      	mov	r0, r5
   d6b56:	f7fd faab 	bl	d40b0 <__cxa_guard_release>
   d6b5a:	4a07      	ldr	r2, [pc, #28]	; (d6b78 <_Z22__fetch_global_Serial1v+0x44>)
   d6b5c:	4907      	ldr	r1, [pc, #28]	; (d6b7c <_Z22__fetch_global_Serial1v+0x48>)
   d6b5e:	4805      	ldr	r0, [pc, #20]	; (d6b74 <_Z22__fetch_global_Serial1v+0x40>)
   d6b60:	f000 fabc 	bl	d70dc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6b64:	4803      	ldr	r0, [pc, #12]	; (d6b74 <_Z22__fetch_global_Serial1v+0x40>)
   d6b66:	bd38      	pop	{r3, r4, r5, pc}
   d6b68:	2003e4c4 	.word	0x2003e4c4
   d6b6c:	2003e4c8 	.word	0x2003e4c8
   d6b70:	2003e440 	.word	0x2003e440
   d6b74:	2003e42c 	.word	0x2003e42c
   d6b78:	2003de98 	.word	0x2003de98
   d6b7c:	000d6a7d 	.word	0x000d6a7d

000d6b80 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6b80:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6b82:	6883      	ldr	r3, [r0, #8]
   d6b84:	4604      	mov	r4, r0
   d6b86:	b90b      	cbnz	r3, d6b8c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6b88:	f000 fac9 	bl	d711e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b8c:	68c3      	ldr	r3, [r0, #12]
   d6b8e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6b90:	68a3      	ldr	r3, [r4, #8]
   d6b92:	b11b      	cbz	r3, d6b9c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b94:	2203      	movs	r2, #3
   d6b96:	4621      	mov	r1, r4
   d6b98:	4620      	mov	r0, r4
   d6b9a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6b9c:	4620      	mov	r0, r4
   d6b9e:	2110      	movs	r1, #16
}
   d6ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6ba4:	f000 baa8 	b.w	d70f8 <_ZdlPvj>

000d6ba8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6ba8:	4770      	bx	lr

000d6baa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bac:	4606      	mov	r6, r0
   d6bae:	4615      	mov	r5, r2
   d6bb0:	460c      	mov	r4, r1
   d6bb2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6bb4:	42bc      	cmp	r4, r7
   d6bb6:	d006      	beq.n	d6bc6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6bb8:	6833      	ldr	r3, [r6, #0]
   d6bba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6bbe:	689b      	ldr	r3, [r3, #8]
   d6bc0:	4630      	mov	r0, r6
   d6bc2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6bc4:	e7f6      	b.n	d6bb4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6bc6:	4628      	mov	r0, r5
   d6bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6bca <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6bca:	2200      	movs	r2, #0
   d6bcc:	7c00      	ldrb	r0, [r0, #16]
   d6bce:	f7fe bf53 	b.w	d5a78 <HAL_I2C_Write_Data>

000d6bd2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6bd2:	2100      	movs	r1, #0
   d6bd4:	7c00      	ldrb	r0, [r0, #16]
   d6bd6:	f7fe bf57 	b.w	d5a88 <HAL_I2C_Available_Data>

000d6bda <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6bda:	2100      	movs	r1, #0
   d6bdc:	7c00      	ldrb	r0, [r0, #16]
   d6bde:	f7fe bf5b 	b.w	d5a98 <HAL_I2C_Read_Data>

000d6be2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6be2:	2100      	movs	r1, #0
   d6be4:	7c00      	ldrb	r0, [r0, #16]
   d6be6:	f7fe bf5f 	b.w	d5aa8 <HAL_I2C_Peek_Data>

000d6bea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6bea:	2100      	movs	r1, #0
   d6bec:	7c00      	ldrb	r0, [r0, #16]
   d6bee:	f7fe bf63 	b.w	d5ab8 <HAL_I2C_Flush_Data>

000d6bf2 <_ZN7TwoWireD0Ev>:
   d6bf2:	b510      	push	{r4, lr}
   d6bf4:	2114      	movs	r1, #20
   d6bf6:	4604      	mov	r4, r0
   d6bf8:	f000 fa7e 	bl	d70f8 <_ZdlPvj>
   d6bfc:	4620      	mov	r0, r4
   d6bfe:	bd10      	pop	{r4, pc}

000d6c00 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6c00:	b510      	push	{r4, lr}
   d6c02:	4604      	mov	r4, r0
   d6c04:	2300      	movs	r3, #0
   d6c06:	6063      	str	r3, [r4, #4]
   d6c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c0c:	60a3      	str	r3, [r4, #8]
   d6c0e:	4b04      	ldr	r3, [pc, #16]	; (d6c20 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6c10:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6c12:	4608      	mov	r0, r1
   d6c14:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6c16:	4611      	mov	r1, r2
   d6c18:	f7fe ff5e 	bl	d5ad8 <HAL_I2C_Init>
}
   d6c1c:	4620      	mov	r0, r4
   d6c1e:	bd10      	pop	{r4, pc}
   d6c20:	000d8460 	.word	0x000d8460

000d6c24 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6c24:	2100      	movs	r1, #0
   d6c26:	7c00      	ldrb	r0, [r0, #16]
   d6c28:	f7fe bf4e 	b.w	d5ac8 <HAL_I2C_Is_Enabled>

000d6c2c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c2c:	2200      	movs	r2, #0
   d6c2e:	4611      	mov	r1, r2
   d6c30:	6840      	ldr	r0, [r0, #4]
   d6c32:	f7fe bffd 	b.w	d5c30 <network_listening>

000d6c36 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6c36:	2200      	movs	r2, #0
   d6c38:	4611      	mov	r1, r2
   d6c3a:	6840      	ldr	r0, [r0, #4]
   d6c3c:	f7ff b808 	b.w	d5c50 <network_get_listen_timeout>

000d6c40 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6c40:	2200      	movs	r2, #0
   d6c42:	6840      	ldr	r0, [r0, #4]
   d6c44:	f7fe bffc 	b.w	d5c40 <network_set_listen_timeout>

000d6c48 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6c48:	2200      	movs	r2, #0
   d6c4a:	f081 0101 	eor.w	r1, r1, #1
   d6c4e:	6840      	ldr	r0, [r0, #4]
   d6c50:	f7fe bfe6 	b.w	d5c20 <network_listen>

000d6c54 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6c54:	2300      	movs	r3, #0
   d6c56:	461a      	mov	r2, r3
   d6c58:	2101      	movs	r1, #1
   d6c5a:	6840      	ldr	r0, [r0, #4]
   d6c5c:	f7fe bfd8 	b.w	d5c10 <network_off>

000d6c60 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6c60:	2300      	movs	r3, #0
   d6c62:	461a      	mov	r2, r3
   d6c64:	4619      	mov	r1, r3
   d6c66:	6840      	ldr	r0, [r0, #4]
   d6c68:	f7fe bfca 	b.w	d5c00 <network_on>

000d6c6c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6c6c:	2200      	movs	r2, #0
   d6c6e:	4611      	mov	r1, r2
   d6c70:	6840      	ldr	r0, [r0, #4]
   d6c72:	f7fe bfbd 	b.w	d5bf0 <network_ready>

000d6c76 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6c76:	2200      	movs	r2, #0
   d6c78:	4611      	mov	r1, r2
   d6c7a:	6840      	ldr	r0, [r0, #4]
   d6c7c:	f7fe bfa8 	b.w	d5bd0 <network_connecting>

000d6c80 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6c80:	2200      	movs	r2, #0
   d6c82:	2102      	movs	r1, #2
   d6c84:	6840      	ldr	r0, [r0, #4]
   d6c86:	f7fe bfab 	b.w	d5be0 <network_disconnect>

000d6c8a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6c8a:	2300      	movs	r3, #0
   d6c8c:	461a      	mov	r2, r3
   d6c8e:	6840      	ldr	r0, [r0, #4]
   d6c90:	f7fe bf96 	b.w	d5bc0 <network_connect>

000d6c94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6c94:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6c96:	4605      	mov	r5, r0
   d6c98:	b188      	cbz	r0, d6cbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c9a:	6804      	ldr	r4, [r0, #0]
   d6c9c:	b14c      	cbz	r4, d6cb2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6c9e:	68a3      	ldr	r3, [r4, #8]
   d6ca0:	b11b      	cbz	r3, d6caa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6ca2:	2203      	movs	r2, #3
   d6ca4:	4621      	mov	r1, r4
   d6ca6:	4620      	mov	r0, r4
   d6ca8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6caa:	2110      	movs	r1, #16
   d6cac:	4620      	mov	r0, r4
   d6cae:	f000 fa23 	bl	d70f8 <_ZdlPvj>
   d6cb2:	4628      	mov	r0, r5
   d6cb4:	2114      	movs	r1, #20
      }
   d6cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6cba:	f000 ba1d 	b.w	d70f8 <_ZdlPvj>
   d6cbe:	bd38      	pop	{r3, r4, r5, pc}

000d6cc0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6cc0:	b110      	cbz	r0, d6cc8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6cc2:	6803      	ldr	r3, [r0, #0]
   d6cc4:	685b      	ldr	r3, [r3, #4]
   d6cc6:	4718      	bx	r3
   d6cc8:	4770      	bx	lr

000d6cca <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6cca:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6ccc:	6803      	ldr	r3, [r0, #0]
   d6cce:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6cd0:	b1bb      	cbz	r3, d6d02 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6cd2:	6858      	ldr	r0, [r3, #4]
   d6cd4:	f7fe fe60 	bl	d5998 <os_thread_is_current>
   d6cd8:	b978      	cbnz	r0, d6cfa <_ZN6ThreadD1Ev+0x30>
   d6cda:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6cdc:	7c5a      	ldrb	r2, [r3, #17]
   d6cde:	b912      	cbnz	r2, d6ce6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6ce0:	6858      	ldr	r0, [r3, #4]
   d6ce2:	f7fe fe61 	bl	d59a8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6ce6:	6823      	ldr	r3, [r4, #0]
   d6ce8:	6858      	ldr	r0, [r3, #4]
   d6cea:	f7fe fe65 	bl	d59b8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6cee:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6cf0:	2300      	movs	r3, #0
   d6cf2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6cf4:	b128      	cbz	r0, d6d02 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6cf6:	f7ff ffcd 	bl	d6c94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6cfa:	6820      	ldr	r0, [r4, #0]
   d6cfc:	b108      	cbz	r0, d6d02 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6cfe:	f7ff ffc9 	bl	d6c94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6d02:	4620      	mov	r0, r4
   d6d04:	bd10      	pop	{r4, pc}

000d6d06 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6d06:	b538      	push	{r3, r4, r5, lr}
   d6d08:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d0a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6d0e:	b108      	cbz	r0, d6d14 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6d10:	f7fd f9c7 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6d14:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6d18:	b108      	cbz	r0, d6d1e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6d1a:	f7fe fe5d 	bl	d59d8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d1e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6d22:	b135      	cbz	r5, d6d32 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d24:	4628      	mov	r0, r5
   d6d26:	f7ff ffd0 	bl	d6cca <_ZN6ThreadD1Ev>
   d6d2a:	2104      	movs	r1, #4
   d6d2c:	4628      	mov	r0, r5
   d6d2e:	f000 f9e3 	bl	d70f8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d32:	6820      	ldr	r0, [r4, #0]
   d6d34:	b108      	cbz	r0, d6d3a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6d36:	f7ff ffc3 	bl	d6cc0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6d3a:	4620      	mov	r0, r4
   d6d3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6d40 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6d40:	b510      	push	{r4, lr}
   d6d42:	4b04      	ldr	r3, [pc, #16]	; (d6d54 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6d44:	4604      	mov	r4, r0
   d6d46:	f840 3b08 	str.w	r3, [r0], #8
   d6d4a:	f7ff ffdc 	bl	d6d06 <_ZN5spark11MeshPublishD1Ev>
   d6d4e:	4620      	mov	r0, r4
   d6d50:	bd10      	pop	{r4, pc}
   d6d52:	bf00      	nop
   d6d54:	000d8488 	.word	0x000d8488

000d6d58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6d58:	b538      	push	{r3, r4, r5, lr}
   d6d5a:	4c0e      	ldr	r4, [pc, #56]	; (d6d94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6d5c:	4b0e      	ldr	r3, [pc, #56]	; (d6d98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6d5e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6d60:	2500      	movs	r5, #0
   d6d62:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6d64:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6d68:	6063      	str	r3, [r4, #4]
   d6d6a:	60a5      	str	r5, [r4, #8]
   d6d6c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6d70:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6d74:	f7fe fe28 	bl	d59c8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6d78:	4b08      	ldr	r3, [pc, #32]	; (d6d9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6d7a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6d7e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6d82:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6d84:	4620      	mov	r0, r4
   d6d86:	4a06      	ldr	r2, [pc, #24]	; (d6da0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6d88:	4906      	ldr	r1, [pc, #24]	; (d6da4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6d8e:	f000 b9a5 	b.w	d70dc <__aeabi_atexit>
   d6d92:	bf00      	nop
   d6d94:	2003e54c 	.word	0x2003e54c
   d6d98:	000d84f0 	.word	0x000d84f0
   d6d9c:	000d8488 	.word	0x000d8488
   d6da0:	2003de98 	.word	0x2003de98
   d6da4:	000d6d41 	.word	0x000d6d41

000d6da8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6da8:	2200      	movs	r2, #0
   d6daa:	4611      	mov	r1, r2
   d6dac:	6840      	ldr	r0, [r0, #4]
   d6dae:	f7fe bf1f 	b.w	d5bf0 <network_ready>

000d6db2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6db2:	2200      	movs	r2, #0
   d6db4:	4611      	mov	r1, r2
   d6db6:	6840      	ldr	r0, [r0, #4]
   d6db8:	f7fe bf3a 	b.w	d5c30 <network_listening>

000d6dbc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6dbc:	2200      	movs	r2, #0
   d6dbe:	4611      	mov	r1, r2
   d6dc0:	6840      	ldr	r0, [r0, #4]
   d6dc2:	f7fe bf45 	b.w	d5c50 <network_get_listen_timeout>

000d6dc6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6dc6:	2200      	movs	r2, #0
   d6dc8:	6840      	ldr	r0, [r0, #4]
   d6dca:	f7fe bf39 	b.w	d5c40 <network_set_listen_timeout>

000d6dce <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6dce:	2200      	movs	r2, #0
   d6dd0:	f081 0101 	eor.w	r1, r1, #1
   d6dd4:	6840      	ldr	r0, [r0, #4]
   d6dd6:	f7fe bf23 	b.w	d5c20 <network_listen>

000d6dda <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6dda:	2300      	movs	r3, #0
   d6ddc:	461a      	mov	r2, r3
   d6dde:	4619      	mov	r1, r3
   d6de0:	6840      	ldr	r0, [r0, #4]
   d6de2:	f7fe bf15 	b.w	d5c10 <network_off>

000d6de6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6de6:	2300      	movs	r3, #0
   d6de8:	461a      	mov	r2, r3
   d6dea:	4619      	mov	r1, r3
   d6dec:	6840      	ldr	r0, [r0, #4]
   d6dee:	f7fe bf07 	b.w	d5c00 <network_on>

000d6df2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6df2:	2200      	movs	r2, #0
   d6df4:	4611      	mov	r1, r2
   d6df6:	6840      	ldr	r0, [r0, #4]
   d6df8:	f7fe beea 	b.w	d5bd0 <network_connecting>

000d6dfc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6dfc:	2200      	movs	r2, #0
   d6dfe:	2102      	movs	r1, #2
   d6e00:	6840      	ldr	r0, [r0, #4]
   d6e02:	f7fe beed 	b.w	d5be0 <network_disconnect>

000d6e06 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e06:	2300      	movs	r3, #0
   d6e08:	461a      	mov	r2, r3
   d6e0a:	6840      	ldr	r0, [r0, #4]
   d6e0c:	f7fe bed8 	b.w	d5bc0 <network_connect>

000d6e10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6e10:	4b02      	ldr	r3, [pc, #8]	; (d6e1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6e12:	2204      	movs	r2, #4
   d6e14:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6e16:	4a02      	ldr	r2, [pc, #8]	; (d6e20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6e18:	601a      	str	r2, [r3, #0]
   d6e1a:	4770      	bx	lr
   d6e1c:	2003e720 	.word	0x2003e720
   d6e20:	000d84bc 	.word	0x000d84bc

000d6e24 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6e24:	2300      	movs	r3, #0
   d6e26:	461a      	mov	r2, r3
   d6e28:	6840      	ldr	r0, [r0, #4]
   d6e2a:	f7fe bec9 	b.w	d5bc0 <network_connect>

000d6e2e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6e2e:	2200      	movs	r2, #0
   d6e30:	2102      	movs	r1, #2
   d6e32:	6840      	ldr	r0, [r0, #4]
   d6e34:	f7fe bed4 	b.w	d5be0 <network_disconnect>

000d6e38 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6e38:	2200      	movs	r2, #0
   d6e3a:	4611      	mov	r1, r2
   d6e3c:	6840      	ldr	r0, [r0, #4]
   d6e3e:	f7fe bec7 	b.w	d5bd0 <network_connecting>

000d6e42 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6e42:	2200      	movs	r2, #0
   d6e44:	4611      	mov	r1, r2
   d6e46:	6840      	ldr	r0, [r0, #4]
   d6e48:	f7fe bed2 	b.w	d5bf0 <network_ready>

000d6e4c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6e4c:	2300      	movs	r3, #0
   d6e4e:	461a      	mov	r2, r3
   d6e50:	4619      	mov	r1, r3
   d6e52:	6840      	ldr	r0, [r0, #4]
   d6e54:	f7fe bed4 	b.w	d5c00 <network_on>

000d6e58 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6e58:	2300      	movs	r3, #0
   d6e5a:	461a      	mov	r2, r3
   d6e5c:	4619      	mov	r1, r3
   d6e5e:	6840      	ldr	r0, [r0, #4]
   d6e60:	f7fe bed6 	b.w	d5c10 <network_off>

000d6e64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6e64:	2200      	movs	r2, #0
   d6e66:	f081 0101 	eor.w	r1, r1, #1
   d6e6a:	6840      	ldr	r0, [r0, #4]
   d6e6c:	f7fe bed8 	b.w	d5c20 <network_listen>

000d6e70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6e70:	2200      	movs	r2, #0
   d6e72:	6840      	ldr	r0, [r0, #4]
   d6e74:	f7fe bee4 	b.w	d5c40 <network_set_listen_timeout>

000d6e78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6e78:	2200      	movs	r2, #0
   d6e7a:	4611      	mov	r1, r2
   d6e7c:	6840      	ldr	r0, [r0, #4]
   d6e7e:	f7fe bee7 	b.w	d5c50 <network_get_listen_timeout>

000d6e82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6e82:	2200      	movs	r2, #0
   d6e84:	4611      	mov	r1, r2
   d6e86:	6840      	ldr	r0, [r0, #4]
   d6e88:	f7fe bed2 	b.w	d5c30 <network_listening>

000d6e8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6e90:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6e92:	b095      	sub	sp, #84	; 0x54
   d6e94:	4616      	mov	r6, r2
   d6e96:	460d      	mov	r5, r1
   d6e98:	4607      	mov	r7, r0
    IPAddress addr;
   d6e9a:	f7ff fd2f 	bl	d68fc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6e9e:	4621      	mov	r1, r4
   d6ea0:	2220      	movs	r2, #32
   d6ea2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ea4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6ea6:	f001 f8b0 	bl	d800a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6eaa:	2340      	movs	r3, #64	; 0x40
   d6eac:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6eae:	4621      	mov	r1, r4
   d6eb0:	466b      	mov	r3, sp
   d6eb2:	aa0c      	add	r2, sp, #48	; 0x30
   d6eb4:	4630      	mov	r0, r6
   d6eb6:	f7fe fccf 	bl	d5858 <netdb_getaddrinfo>
    if (!r) {
   d6eba:	4604      	mov	r4, r0
   d6ebc:	2800      	cmp	r0, #0
   d6ebe:	d144      	bne.n	d6f4a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6ec0:	4602      	mov	r2, r0
   d6ec2:	2101      	movs	r1, #1
   d6ec4:	6868      	ldr	r0, [r5, #4]
   d6ec6:	f7fe fe93 	bl	d5bf0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6eca:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6ecc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6ece:	4622      	mov	r2, r4
   d6ed0:	6868      	ldr	r0, [r5, #4]
   d6ed2:	f7fe fe8d 	bl	d5bf0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6ed6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6ed8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6eda:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6edc:	2e00      	cmp	r6, #0
   d6ede:	d034      	beq.n	d6f4a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6ee0:	2900      	cmp	r1, #0
   d6ee2:	d132      	bne.n	d6f4a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6ee4:	6873      	ldr	r3, [r6, #4]
   d6ee6:	2b02      	cmp	r3, #2
   d6ee8:	d002      	beq.n	d6ef0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6eea:	2b0a      	cmp	r3, #10
   d6eec:	d009      	beq.n	d6f02 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6eee:	e02a      	b.n	d6f46 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6ef0:	f1b8 0f00 	cmp.w	r8, #0
   d6ef4:	d027      	beq.n	d6f46 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6ef6:	6971      	ldr	r1, [r6, #20]
   d6ef8:	4638      	mov	r0, r7
   d6efa:	3104      	adds	r1, #4
   d6efc:	f7ff fd2b 	bl	d6956 <_ZN9IPAddressaSEPKh>
   d6f00:	e020      	b.n	d6f44 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6f02:	f1b9 0f00 	cmp.w	r9, #0
   d6f06:	d01e      	beq.n	d6f46 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6f08:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6f0a:	2211      	movs	r2, #17
   d6f0c:	a801      	add	r0, sp, #4
   d6f0e:	f001 f87c 	bl	d800a <memset>
                    a.v = 6;
   d6f12:	2306      	movs	r3, #6
   d6f14:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6f18:	ad01      	add	r5, sp, #4
   d6f1a:	f104 0308 	add.w	r3, r4, #8
   d6f1e:	3418      	adds	r4, #24
   d6f20:	6818      	ldr	r0, [r3, #0]
   d6f22:	6859      	ldr	r1, [r3, #4]
   d6f24:	462a      	mov	r2, r5
   d6f26:	c203      	stmia	r2!, {r0, r1}
   d6f28:	3308      	adds	r3, #8
   d6f2a:	42a3      	cmp	r3, r4
   d6f2c:	4615      	mov	r5, r2
   d6f2e:	d1f7      	bne.n	d6f20 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6f30:	a901      	add	r1, sp, #4
   d6f32:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6f34:	ad07      	add	r5, sp, #28
   d6f36:	f7ff fcef 	bl	d6918 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f3c:	1d3c      	adds	r4, r7, #4
   d6f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f40:	682b      	ldr	r3, [r5, #0]
   d6f42:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6f44:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6f46:	69f6      	ldr	r6, [r6, #28]
   d6f48:	e7c8      	b.n	d6edc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6f4a:	9800      	ldr	r0, [sp, #0]
   d6f4c:	f7fe fc7c 	bl	d5848 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6f50:	4638      	mov	r0, r7
   d6f52:	b015      	add	sp, #84	; 0x54
   d6f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6f58 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6f58:	4b02      	ldr	r3, [pc, #8]	; (d6f64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6f5a:	4a03      	ldr	r2, [pc, #12]	; (d6f68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6f5c:	601a      	str	r2, [r3, #0]
   d6f5e:	2200      	movs	r2, #0
   d6f60:	605a      	str	r2, [r3, #4]
   d6f62:	4770      	bx	lr
   d6f64:	2003e728 	.word	0x2003e728
   d6f68:	000d84f0 	.word	0x000d84f0

000d6f6c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6f6c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6f6e:	4e18      	ldr	r6, [pc, #96]	; (d6fd0 <pinAvailable+0x64>)
   d6f70:	6831      	ldr	r1, [r6, #0]
   d6f72:	f011 0501 	ands.w	r5, r1, #1
   d6f76:	4604      	mov	r4, r0
   d6f78:	d10a      	bne.n	d6f90 <pinAvailable+0x24>
   d6f7a:	4630      	mov	r0, r6
   d6f7c:	f7fd f893 	bl	d40a6 <__cxa_guard_acquire>
   d6f80:	b130      	cbz	r0, d6f90 <pinAvailable+0x24>
   d6f82:	4629      	mov	r1, r5
   d6f84:	4813      	ldr	r0, [pc, #76]	; (d6fd4 <pinAvailable+0x68>)
   d6f86:	f7fe feff 	bl	d5d88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6f8a:	4630      	mov	r0, r6
   d6f8c:	f7fd f890 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6f90:	4810      	ldr	r0, [pc, #64]	; (d6fd4 <pinAvailable+0x68>)
   d6f92:	f7fe ffa6 	bl	d5ee2 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6f96:	b128      	cbz	r0, d6fa4 <pinAvailable+0x38>
   d6f98:	f1a4 030b 	sub.w	r3, r4, #11
   d6f9c:	2b02      	cmp	r3, #2
   d6f9e:	d801      	bhi.n	d6fa4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6fa0:	2000      	movs	r0, #0
   d6fa2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6fa4:	f000 f874 	bl	d7090 <_Z19__fetch_global_Wirev>
   d6fa8:	f7ff fe3c 	bl	d6c24 <_ZN7TwoWire9isEnabledEv>
   d6fac:	b108      	cbz	r0, d6fb2 <pinAvailable+0x46>
   d6fae:	2c01      	cmp	r4, #1
   d6fb0:	d9f6      	bls.n	d6fa0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6fb2:	f7ff fdbf 	bl	d6b34 <_Z22__fetch_global_Serial1v>
   d6fb6:	f7ff fdb9 	bl	d6b2c <_ZN11USARTSerial9isEnabledEv>
   d6fba:	b118      	cbz	r0, d6fc4 <pinAvailable+0x58>
   d6fbc:	f1a4 0309 	sub.w	r3, r4, #9
   d6fc0:	2b01      	cmp	r3, #1
   d6fc2:	d9ed      	bls.n	d6fa0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6fc4:	2c23      	cmp	r4, #35	; 0x23
   d6fc6:	bf8c      	ite	hi
   d6fc8:	2000      	movhi	r0, #0
   d6fca:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6fcc:	bd70      	pop	{r4, r5, r6, pc}
   d6fce:	bf00      	nop
   d6fd0:	2003de9c 	.word	0x2003de9c
   d6fd4:	2003dea0 	.word	0x2003dea0

000d6fd8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6fd8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6fda:	b538      	push	{r3, r4, r5, lr}
   d6fdc:	4604      	mov	r4, r0
   d6fde:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6fe0:	d80a      	bhi.n	d6ff8 <pinMode+0x20>
   d6fe2:	29ff      	cmp	r1, #255	; 0xff
   d6fe4:	d008      	beq.n	d6ff8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6fe6:	f7ff ffc1 	bl	d6f6c <pinAvailable>
   d6fea:	b128      	cbz	r0, d6ff8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6fec:	4629      	mov	r1, r5
   d6fee:	4620      	mov	r0, r4
}
   d6ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6ff4:	f7fe bc48 	b.w	d5888 <HAL_Pin_Mode>
   d6ff8:	bd38      	pop	{r3, r4, r5, pc}

000d6ffa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6ffa:	b538      	push	{r3, r4, r5, lr}
   d6ffc:	4604      	mov	r4, r0
   d6ffe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7000:	f7fe fc4a 	bl	d5898 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7004:	28ff      	cmp	r0, #255	; 0xff
   d7006:	d010      	beq.n	d702a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7008:	2806      	cmp	r0, #6
   d700a:	d804      	bhi.n	d7016 <digitalWrite+0x1c>
   d700c:	234d      	movs	r3, #77	; 0x4d
   d700e:	fa23 f000 	lsr.w	r0, r3, r0
   d7012:	07c3      	lsls	r3, r0, #31
   d7014:	d409      	bmi.n	d702a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7016:	4620      	mov	r0, r4
   d7018:	f7ff ffa8 	bl	d6f6c <pinAvailable>
   d701c:	b128      	cbz	r0, d702a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d701e:	4629      	mov	r1, r5
   d7020:	4620      	mov	r0, r4
}
   d7022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7026:	f7fe bc3f 	b.w	d58a8 <HAL_GPIO_Write>
   d702a:	bd38      	pop	{r3, r4, r5, pc}

000d702c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d702c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d702e:	b510      	push	{r4, lr}
   d7030:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7032:	bf9c      	itt	ls
   d7034:	340e      	addls	r4, #14
   d7036:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7038:	4620      	mov	r0, r4
   d703a:	f7ff ff97 	bl	d6f6c <pinAvailable>
   d703e:	b150      	cbz	r0, d7056 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7040:	2103      	movs	r1, #3
   d7042:	4620      	mov	r0, r4
   d7044:	f7fe fc18 	bl	d5878 <HAL_Validate_Pin_Function>
   d7048:	2803      	cmp	r0, #3
   d704a:	d104      	bne.n	d7056 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d704c:	4620      	mov	r0, r4
}
   d704e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7052:	f7fe bc31 	b.w	d58b8 <HAL_ADC_Read>
}
   d7056:	2000      	movs	r0, #0
   d7058:	bd10      	pop	{r4, pc}
	...

000d705c <_Z17acquireWireBufferv>:
   d705c:	b570      	push	{r4, r5, r6, lr}
   d705e:	4604      	mov	r4, r0
   d7060:	2514      	movs	r5, #20
   d7062:	462a      	mov	r2, r5
   d7064:	4e09      	ldr	r6, [pc, #36]	; (d708c <_Z17acquireWireBufferv+0x30>)
   d7066:	2100      	movs	r1, #0
   d7068:	f000 ffcf 	bl	d800a <memset>
   d706c:	8025      	strh	r5, [r4, #0]
   d706e:	2520      	movs	r5, #32
   d7070:	4631      	mov	r1, r6
   d7072:	60a5      	str	r5, [r4, #8]
   d7074:	6125      	str	r5, [r4, #16]
   d7076:	4628      	mov	r0, r5
   d7078:	f000 f840 	bl	d70fc <_ZnajRKSt9nothrow_t>
   d707c:	4631      	mov	r1, r6
   d707e:	6060      	str	r0, [r4, #4]
   d7080:	4628      	mov	r0, r5
   d7082:	f000 f83b 	bl	d70fc <_ZnajRKSt9nothrow_t>
   d7086:	60e0      	str	r0, [r4, #12]
   d7088:	4620      	mov	r0, r4
   d708a:	bd70      	pop	{r4, r5, r6, pc}
   d708c:	000d851c 	.word	0x000d851c

000d7090 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7090:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7092:	4d0e      	ldr	r5, [pc, #56]	; (d70cc <_Z19__fetch_global_Wirev+0x3c>)
   d7094:	6829      	ldr	r1, [r5, #0]
   d7096:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d709a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d709c:	d113      	bne.n	d70c6 <_Z19__fetch_global_Wirev+0x36>
   d709e:	4628      	mov	r0, r5
   d70a0:	f7fd f801 	bl	d40a6 <__cxa_guard_acquire>
   d70a4:	b178      	cbz	r0, d70c6 <_Z19__fetch_global_Wirev+0x36>
   d70a6:	a801      	add	r0, sp, #4
   d70a8:	f7ff ffd8 	bl	d705c <_Z17acquireWireBufferv>
   d70ac:	aa01      	add	r2, sp, #4
   d70ae:	4621      	mov	r1, r4
   d70b0:	4807      	ldr	r0, [pc, #28]	; (d70d0 <_Z19__fetch_global_Wirev+0x40>)
   d70b2:	f7ff fda5 	bl	d6c00 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d70b6:	4628      	mov	r0, r5
   d70b8:	f7fc fffa 	bl	d40b0 <__cxa_guard_release>
   d70bc:	4a05      	ldr	r2, [pc, #20]	; (d70d4 <_Z19__fetch_global_Wirev+0x44>)
   d70be:	4906      	ldr	r1, [pc, #24]	; (d70d8 <_Z19__fetch_global_Wirev+0x48>)
   d70c0:	4803      	ldr	r0, [pc, #12]	; (d70d0 <_Z19__fetch_global_Wirev+0x40>)
   d70c2:	f000 f80b 	bl	d70dc <__aeabi_atexit>
	return wire;
}
   d70c6:	4802      	ldr	r0, [pc, #8]	; (d70d0 <_Z19__fetch_global_Wirev+0x40>)
   d70c8:	b007      	add	sp, #28
   d70ca:	bd30      	pop	{r4, r5, pc}
   d70cc:	2003e734 	.word	0x2003e734
   d70d0:	2003e738 	.word	0x2003e738
   d70d4:	2003de98 	.word	0x2003de98
   d70d8:	000d6ba9 	.word	0x000d6ba9

000d70dc <__aeabi_atexit>:
   d70dc:	460b      	mov	r3, r1
   d70de:	4601      	mov	r1, r0
   d70e0:	4618      	mov	r0, r3
   d70e2:	f000 bf79 	b.w	d7fd8 <__cxa_atexit>
	...

000d70e8 <_ZSt15get_new_handlerv>:
   d70e8:	4b02      	ldr	r3, [pc, #8]	; (d70f4 <_ZSt15get_new_handlerv+0xc>)
   d70ea:	6818      	ldr	r0, [r3, #0]
   d70ec:	f3bf 8f5f 	dmb	sy
   d70f0:	4770      	bx	lr
   d70f2:	bf00      	nop
   d70f4:	2003e74c 	.word	0x2003e74c

000d70f8 <_ZdlPvj>:
   d70f8:	f7fc bfd1 	b.w	d409e <_ZdlPv>

000d70fc <_ZnajRKSt9nothrow_t>:
   d70fc:	f000 b800 	b.w	d7100 <_ZnwjRKSt9nothrow_t>

000d7100 <_ZnwjRKSt9nothrow_t>:
   d7100:	b510      	push	{r4, lr}
   d7102:	2800      	cmp	r0, #0
   d7104:	bf14      	ite	ne
   d7106:	4604      	movne	r4, r0
   d7108:	2401      	moveq	r4, #1
   d710a:	4620      	mov	r0, r4
   d710c:	f7fe fdc8 	bl	d5ca0 <malloc>
   d7110:	b920      	cbnz	r0, d711c <_ZnwjRKSt9nothrow_t+0x1c>
   d7112:	f7ff ffe9 	bl	d70e8 <_ZSt15get_new_handlerv>
   d7116:	b108      	cbz	r0, d711c <_ZnwjRKSt9nothrow_t+0x1c>
   d7118:	4780      	blx	r0
   d711a:	e7f6      	b.n	d710a <_ZnwjRKSt9nothrow_t+0xa>
   d711c:	bd10      	pop	{r4, pc}

000d711e <_ZSt25__throw_bad_function_callv>:
   d711e:	b508      	push	{r3, lr}
   d7120:	f7fe fdd6 	bl	d5cd0 <abort>

000d7124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7124:	4b18      	ldr	r3, [pc, #96]	; (d7188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7126:	681a      	ldr	r2, [r3, #0]
   d7128:	07d1      	lsls	r1, r2, #31
   d712a:	bf5c      	itt	pl
   d712c:	2201      	movpl	r2, #1
   d712e:	601a      	strpl	r2, [r3, #0]
   d7130:	4b16      	ldr	r3, [pc, #88]	; (d718c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7132:	681a      	ldr	r2, [r3, #0]
   d7134:	07d2      	lsls	r2, r2, #31
   d7136:	bf5c      	itt	pl
   d7138:	2201      	movpl	r2, #1
   d713a:	601a      	strpl	r2, [r3, #0]
   d713c:	4b14      	ldr	r3, [pc, #80]	; (d7190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d713e:	681a      	ldr	r2, [r3, #0]
   d7140:	07d0      	lsls	r0, r2, #31
   d7142:	bf5c      	itt	pl
   d7144:	2201      	movpl	r2, #1
   d7146:	601a      	strpl	r2, [r3, #0]
   d7148:	4b12      	ldr	r3, [pc, #72]	; (d7194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d714a:	681a      	ldr	r2, [r3, #0]
   d714c:	07d1      	lsls	r1, r2, #31
   d714e:	bf5c      	itt	pl
   d7150:	2201      	movpl	r2, #1
   d7152:	601a      	strpl	r2, [r3, #0]
   d7154:	4b10      	ldr	r3, [pc, #64]	; (d7198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7156:	681a      	ldr	r2, [r3, #0]
   d7158:	07d2      	lsls	r2, r2, #31
   d715a:	bf5c      	itt	pl
   d715c:	2201      	movpl	r2, #1
   d715e:	601a      	strpl	r2, [r3, #0]
   d7160:	4b0e      	ldr	r3, [pc, #56]	; (d719c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7162:	681a      	ldr	r2, [r3, #0]
   d7164:	07d0      	lsls	r0, r2, #31
   d7166:	bf5c      	itt	pl
   d7168:	2201      	movpl	r2, #1
   d716a:	601a      	strpl	r2, [r3, #0]
   d716c:	4b0c      	ldr	r3, [pc, #48]	; (d71a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d716e:	681a      	ldr	r2, [r3, #0]
   d7170:	07d1      	lsls	r1, r2, #31
   d7172:	bf5c      	itt	pl
   d7174:	2201      	movpl	r2, #1
   d7176:	601a      	strpl	r2, [r3, #0]
   d7178:	4b0a      	ldr	r3, [pc, #40]	; (d71a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d717a:	681a      	ldr	r2, [r3, #0]
   d717c:	07d2      	lsls	r2, r2, #31
   d717e:	bf5c      	itt	pl
   d7180:	2201      	movpl	r2, #1
   d7182:	601a      	strpl	r2, [r3, #0]
   d7184:	4770      	bx	lr
   d7186:	bf00      	nop
   d7188:	2003e76c 	.word	0x2003e76c
   d718c:	2003e768 	.word	0x2003e768
   d7190:	2003e764 	.word	0x2003e764
   d7194:	2003e760 	.word	0x2003e760
   d7198:	2003e75c 	.word	0x2003e75c
   d719c:	2003e758 	.word	0x2003e758
   d71a0:	2003e754 	.word	0x2003e754
   d71a4:	2003e750 	.word	0x2003e750

000d71a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d71a8:	4b24      	ldr	r3, [pc, #144]	; (d723c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d71aa:	681a      	ldr	r2, [r3, #0]
   d71ac:	07d0      	lsls	r0, r2, #31
   d71ae:	bf5c      	itt	pl
   d71b0:	2201      	movpl	r2, #1
   d71b2:	601a      	strpl	r2, [r3, #0]
   d71b4:	4b22      	ldr	r3, [pc, #136]	; (d7240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d71b6:	681a      	ldr	r2, [r3, #0]
   d71b8:	07d1      	lsls	r1, r2, #31
   d71ba:	bf5c      	itt	pl
   d71bc:	2201      	movpl	r2, #1
   d71be:	601a      	strpl	r2, [r3, #0]
   d71c0:	4b20      	ldr	r3, [pc, #128]	; (d7244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d71c2:	681a      	ldr	r2, [r3, #0]
   d71c4:	07d2      	lsls	r2, r2, #31
   d71c6:	bf5c      	itt	pl
   d71c8:	2201      	movpl	r2, #1
   d71ca:	601a      	strpl	r2, [r3, #0]
   d71cc:	4b1e      	ldr	r3, [pc, #120]	; (d7248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d71ce:	681a      	ldr	r2, [r3, #0]
   d71d0:	07d0      	lsls	r0, r2, #31
   d71d2:	bf5c      	itt	pl
   d71d4:	2201      	movpl	r2, #1
   d71d6:	601a      	strpl	r2, [r3, #0]
   d71d8:	4b1c      	ldr	r3, [pc, #112]	; (d724c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d71da:	681a      	ldr	r2, [r3, #0]
   d71dc:	07d1      	lsls	r1, r2, #31
   d71de:	bf5c      	itt	pl
   d71e0:	2201      	movpl	r2, #1
   d71e2:	601a      	strpl	r2, [r3, #0]
   d71e4:	4b1a      	ldr	r3, [pc, #104]	; (d7250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d71e6:	681a      	ldr	r2, [r3, #0]
   d71e8:	07d2      	lsls	r2, r2, #31
   d71ea:	bf5c      	itt	pl
   d71ec:	2201      	movpl	r2, #1
   d71ee:	601a      	strpl	r2, [r3, #0]
   d71f0:	4b18      	ldr	r3, [pc, #96]	; (d7254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d71f2:	681a      	ldr	r2, [r3, #0]
   d71f4:	07d0      	lsls	r0, r2, #31
   d71f6:	bf5c      	itt	pl
   d71f8:	2201      	movpl	r2, #1
   d71fa:	601a      	strpl	r2, [r3, #0]
   d71fc:	4b16      	ldr	r3, [pc, #88]	; (d7258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d71fe:	681a      	ldr	r2, [r3, #0]
   d7200:	07d1      	lsls	r1, r2, #31
   d7202:	bf5c      	itt	pl
   d7204:	2201      	movpl	r2, #1
   d7206:	601a      	strpl	r2, [r3, #0]
   d7208:	4b14      	ldr	r3, [pc, #80]	; (d725c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d720a:	681a      	ldr	r2, [r3, #0]
   d720c:	07d2      	lsls	r2, r2, #31
   d720e:	bf5c      	itt	pl
   d7210:	2201      	movpl	r2, #1
   d7212:	601a      	strpl	r2, [r3, #0]
   d7214:	4b12      	ldr	r3, [pc, #72]	; (d7260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7216:	681a      	ldr	r2, [r3, #0]
   d7218:	07d0      	lsls	r0, r2, #31
   d721a:	bf5c      	itt	pl
   d721c:	2201      	movpl	r2, #1
   d721e:	601a      	strpl	r2, [r3, #0]
   d7220:	4b10      	ldr	r3, [pc, #64]	; (d7264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7222:	681a      	ldr	r2, [r3, #0]
   d7224:	07d1      	lsls	r1, r2, #31
   d7226:	bf5c      	itt	pl
   d7228:	2201      	movpl	r2, #1
   d722a:	601a      	strpl	r2, [r3, #0]
   d722c:	4b0e      	ldr	r3, [pc, #56]	; (d7268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d722e:	681a      	ldr	r2, [r3, #0]
   d7230:	07d2      	lsls	r2, r2, #31
   d7232:	bf5c      	itt	pl
   d7234:	2201      	movpl	r2, #1
   d7236:	601a      	strpl	r2, [r3, #0]
   d7238:	4770      	bx	lr
   d723a:	bf00      	nop
   d723c:	2003e79c 	.word	0x2003e79c
   d7240:	2003e798 	.word	0x2003e798
   d7244:	2003e794 	.word	0x2003e794
   d7248:	2003e790 	.word	0x2003e790
   d724c:	2003e78c 	.word	0x2003e78c
   d7250:	2003e788 	.word	0x2003e788
   d7254:	2003e784 	.word	0x2003e784
   d7258:	2003e780 	.word	0x2003e780
   d725c:	2003e77c 	.word	0x2003e77c
   d7260:	2003e778 	.word	0x2003e778
   d7264:	2003e774 	.word	0x2003e774
   d7268:	2003e770 	.word	0x2003e770

000d726c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d726c:	4b24      	ldr	r3, [pc, #144]	; (d7300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d726e:	681a      	ldr	r2, [r3, #0]
   d7270:	07d0      	lsls	r0, r2, #31
   d7272:	bf5c      	itt	pl
   d7274:	2201      	movpl	r2, #1
   d7276:	601a      	strpl	r2, [r3, #0]
   d7278:	4b22      	ldr	r3, [pc, #136]	; (d7304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d727a:	681a      	ldr	r2, [r3, #0]
   d727c:	07d1      	lsls	r1, r2, #31
   d727e:	bf5c      	itt	pl
   d7280:	2201      	movpl	r2, #1
   d7282:	601a      	strpl	r2, [r3, #0]
   d7284:	4b20      	ldr	r3, [pc, #128]	; (d7308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7286:	681a      	ldr	r2, [r3, #0]
   d7288:	07d2      	lsls	r2, r2, #31
   d728a:	bf5c      	itt	pl
   d728c:	2201      	movpl	r2, #1
   d728e:	601a      	strpl	r2, [r3, #0]
   d7290:	4b1e      	ldr	r3, [pc, #120]	; (d730c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7292:	681a      	ldr	r2, [r3, #0]
   d7294:	07d0      	lsls	r0, r2, #31
   d7296:	bf5c      	itt	pl
   d7298:	2201      	movpl	r2, #1
   d729a:	601a      	strpl	r2, [r3, #0]
   d729c:	4b1c      	ldr	r3, [pc, #112]	; (d7310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d729e:	681a      	ldr	r2, [r3, #0]
   d72a0:	07d1      	lsls	r1, r2, #31
   d72a2:	bf5c      	itt	pl
   d72a4:	2201      	movpl	r2, #1
   d72a6:	601a      	strpl	r2, [r3, #0]
   d72a8:	4b1a      	ldr	r3, [pc, #104]	; (d7314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d72aa:	681a      	ldr	r2, [r3, #0]
   d72ac:	07d2      	lsls	r2, r2, #31
   d72ae:	bf5c      	itt	pl
   d72b0:	2201      	movpl	r2, #1
   d72b2:	601a      	strpl	r2, [r3, #0]
   d72b4:	4b18      	ldr	r3, [pc, #96]	; (d7318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d72b6:	681a      	ldr	r2, [r3, #0]
   d72b8:	07d0      	lsls	r0, r2, #31
   d72ba:	bf5c      	itt	pl
   d72bc:	2201      	movpl	r2, #1
   d72be:	601a      	strpl	r2, [r3, #0]
   d72c0:	4b16      	ldr	r3, [pc, #88]	; (d731c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d72c2:	681a      	ldr	r2, [r3, #0]
   d72c4:	07d1      	lsls	r1, r2, #31
   d72c6:	bf5c      	itt	pl
   d72c8:	2201      	movpl	r2, #1
   d72ca:	601a      	strpl	r2, [r3, #0]
   d72cc:	4b14      	ldr	r3, [pc, #80]	; (d7320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d72ce:	681a      	ldr	r2, [r3, #0]
   d72d0:	07d2      	lsls	r2, r2, #31
   d72d2:	bf5c      	itt	pl
   d72d4:	2201      	movpl	r2, #1
   d72d6:	601a      	strpl	r2, [r3, #0]
   d72d8:	4b12      	ldr	r3, [pc, #72]	; (d7324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d72da:	681a      	ldr	r2, [r3, #0]
   d72dc:	07d0      	lsls	r0, r2, #31
   d72de:	bf5c      	itt	pl
   d72e0:	2201      	movpl	r2, #1
   d72e2:	601a      	strpl	r2, [r3, #0]
   d72e4:	4b10      	ldr	r3, [pc, #64]	; (d7328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d72e6:	681a      	ldr	r2, [r3, #0]
   d72e8:	07d1      	lsls	r1, r2, #31
   d72ea:	bf5c      	itt	pl
   d72ec:	2201      	movpl	r2, #1
   d72ee:	601a      	strpl	r2, [r3, #0]
   d72f0:	4b0e      	ldr	r3, [pc, #56]	; (d732c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d72f2:	681a      	ldr	r2, [r3, #0]
   d72f4:	07d2      	lsls	r2, r2, #31
   d72f6:	bf5c      	itt	pl
   d72f8:	2201      	movpl	r2, #1
   d72fa:	601a      	strpl	r2, [r3, #0]
   d72fc:	4770      	bx	lr
   d72fe:	bf00      	nop
   d7300:	2003e7cc 	.word	0x2003e7cc
   d7304:	2003e7c8 	.word	0x2003e7c8
   d7308:	2003e7c4 	.word	0x2003e7c4
   d730c:	2003e7c0 	.word	0x2003e7c0
   d7310:	2003e7bc 	.word	0x2003e7bc
   d7314:	2003e7b8 	.word	0x2003e7b8
   d7318:	2003e7b4 	.word	0x2003e7b4
   d731c:	2003e7b0 	.word	0x2003e7b0
   d7320:	2003e7ac 	.word	0x2003e7ac
   d7324:	2003e7a8 	.word	0x2003e7a8
   d7328:	2003e7a4 	.word	0x2003e7a4
   d732c:	2003e7a0 	.word	0x2003e7a0

000d7330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7330:	4b18      	ldr	r3, [pc, #96]	; (d7394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7332:	681a      	ldr	r2, [r3, #0]
   d7334:	07d1      	lsls	r1, r2, #31
   d7336:	bf5c      	itt	pl
   d7338:	2201      	movpl	r2, #1
   d733a:	601a      	strpl	r2, [r3, #0]
   d733c:	4b16      	ldr	r3, [pc, #88]	; (d7398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d733e:	681a      	ldr	r2, [r3, #0]
   d7340:	07d2      	lsls	r2, r2, #31
   d7342:	bf5c      	itt	pl
   d7344:	2201      	movpl	r2, #1
   d7346:	601a      	strpl	r2, [r3, #0]
   d7348:	4b14      	ldr	r3, [pc, #80]	; (d739c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d734a:	681a      	ldr	r2, [r3, #0]
   d734c:	07d0      	lsls	r0, r2, #31
   d734e:	bf5c      	itt	pl
   d7350:	2201      	movpl	r2, #1
   d7352:	601a      	strpl	r2, [r3, #0]
   d7354:	4b12      	ldr	r3, [pc, #72]	; (d73a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7356:	681a      	ldr	r2, [r3, #0]
   d7358:	07d1      	lsls	r1, r2, #31
   d735a:	bf5c      	itt	pl
   d735c:	2201      	movpl	r2, #1
   d735e:	601a      	strpl	r2, [r3, #0]
   d7360:	4b10      	ldr	r3, [pc, #64]	; (d73a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7362:	681a      	ldr	r2, [r3, #0]
   d7364:	07d2      	lsls	r2, r2, #31
   d7366:	bf5c      	itt	pl
   d7368:	2201      	movpl	r2, #1
   d736a:	601a      	strpl	r2, [r3, #0]
   d736c:	4b0e      	ldr	r3, [pc, #56]	; (d73a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d736e:	681a      	ldr	r2, [r3, #0]
   d7370:	07d0      	lsls	r0, r2, #31
   d7372:	bf5c      	itt	pl
   d7374:	2201      	movpl	r2, #1
   d7376:	601a      	strpl	r2, [r3, #0]
   d7378:	4b0c      	ldr	r3, [pc, #48]	; (d73ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d737a:	681a      	ldr	r2, [r3, #0]
   d737c:	07d1      	lsls	r1, r2, #31
   d737e:	bf5c      	itt	pl
   d7380:	2201      	movpl	r2, #1
   d7382:	601a      	strpl	r2, [r3, #0]
   d7384:	4b0a      	ldr	r3, [pc, #40]	; (d73b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7386:	681a      	ldr	r2, [r3, #0]
   d7388:	07d2      	lsls	r2, r2, #31
   d738a:	bf5c      	itt	pl
   d738c:	2201      	movpl	r2, #1
   d738e:	601a      	strpl	r2, [r3, #0]
   d7390:	4770      	bx	lr
   d7392:	bf00      	nop
   d7394:	2003e7ec 	.word	0x2003e7ec
   d7398:	2003e7e8 	.word	0x2003e7e8
   d739c:	2003e7e4 	.word	0x2003e7e4
   d73a0:	2003e7e0 	.word	0x2003e7e0
   d73a4:	2003e7dc 	.word	0x2003e7dc
   d73a8:	2003e7d8 	.word	0x2003e7d8
   d73ac:	2003e7d4 	.word	0x2003e7d4
   d73b0:	2003e7d0 	.word	0x2003e7d0

000d73b4 <sqrt>:
   d73b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d73b8:	ed2d 8b02 	vpush	{d8}
   d73bc:	b08b      	sub	sp, #44	; 0x2c
   d73be:	ec55 4b10 	vmov	r4, r5, d0
   d73c2:	f000 f857 	bl	d7474 <__ieee754_sqrt>
   d73c6:	4b29      	ldr	r3, [pc, #164]	; (d746c <sqrt+0xb8>)
   d73c8:	eeb0 8a40 	vmov.f32	s16, s0
   d73cc:	eef0 8a60 	vmov.f32	s17, s1
   d73d0:	f993 6000 	ldrsb.w	r6, [r3]
   d73d4:	1c73      	adds	r3, r6, #1
   d73d6:	d012      	beq.n	d73fe <sqrt+0x4a>
   d73d8:	4622      	mov	r2, r4
   d73da:	462b      	mov	r3, r5
   d73dc:	4620      	mov	r0, r4
   d73de:	4629      	mov	r1, r5
   d73e0:	f000 fd6c 	bl	d7ebc <__aeabi_dcmpun>
   d73e4:	4607      	mov	r7, r0
   d73e6:	b950      	cbnz	r0, d73fe <sqrt+0x4a>
   d73e8:	f04f 0800 	mov.w	r8, #0
   d73ec:	f04f 0900 	mov.w	r9, #0
   d73f0:	4620      	mov	r0, r4
   d73f2:	4629      	mov	r1, r5
   d73f4:	4642      	mov	r2, r8
   d73f6:	464b      	mov	r3, r9
   d73f8:	f000 fd38 	bl	d7e6c <__aeabi_dcmplt>
   d73fc:	b940      	cbnz	r0, d7410 <sqrt+0x5c>
   d73fe:	eeb0 0a48 	vmov.f32	s0, s16
   d7402:	eef0 0a68 	vmov.f32	s1, s17
   d7406:	b00b      	add	sp, #44	; 0x2c
   d7408:	ecbd 8b02 	vpop	{d8}
   d740c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7410:	4b17      	ldr	r3, [pc, #92]	; (d7470 <sqrt+0xbc>)
   d7412:	9708      	str	r7, [sp, #32]
   d7414:	2201      	movs	r2, #1
   d7416:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d741a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d741e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d7422:	b1b6      	cbz	r6, d7452 <sqrt+0x9e>
   d7424:	4642      	mov	r2, r8
   d7426:	464b      	mov	r3, r9
   d7428:	4640      	mov	r0, r8
   d742a:	4649      	mov	r1, r9
   d742c:	f000 fbd6 	bl	d7bdc <__aeabi_ddiv>
   d7430:	2e02      	cmp	r6, #2
   d7432:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7436:	d10e      	bne.n	d7456 <sqrt+0xa2>
   d7438:	f7fe fc5a 	bl	d5cf0 <__errno>
   d743c:	2321      	movs	r3, #33	; 0x21
   d743e:	6003      	str	r3, [r0, #0]
   d7440:	9b08      	ldr	r3, [sp, #32]
   d7442:	b973      	cbnz	r3, d7462 <sqrt+0xae>
   d7444:	ed9d 0b06 	vldr	d0, [sp, #24]
   d7448:	b00b      	add	sp, #44	; 0x2c
   d744a:	ecbd 8b02 	vpop	{d8}
   d744e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7452:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7456:	4668      	mov	r0, sp
   d7458:	f000 f8dc 	bl	d7614 <matherr>
   d745c:	2800      	cmp	r0, #0
   d745e:	d1ef      	bne.n	d7440 <sqrt+0x8c>
   d7460:	e7ea      	b.n	d7438 <sqrt+0x84>
   d7462:	f7fe fc45 	bl	d5cf0 <__errno>
   d7466:	9b08      	ldr	r3, [sp, #32]
   d7468:	6003      	str	r3, [r0, #0]
   d746a:	e7eb      	b.n	d7444 <sqrt+0x90>
   d746c:	2003de30 	.word	0x2003de30
   d7470:	000d8520 	.word	0x000d8520

000d7474 <__ieee754_sqrt>:
   d7474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7478:	4965      	ldr	r1, [pc, #404]	; (d7610 <__ieee754_sqrt+0x19c>)
   d747a:	ec55 4b10 	vmov	r4, r5, d0
   d747e:	460e      	mov	r6, r1
   d7480:	4029      	ands	r1, r5
   d7482:	42b1      	cmp	r1, r6
   d7484:	f000 8097 	beq.w	d75b6 <__ieee754_sqrt+0x142>
   d7488:	2d00      	cmp	r5, #0
   d748a:	462b      	mov	r3, r5
   d748c:	ee10 2a10 	vmov	r2, s0
   d7490:	dd74      	ble.n	d757c <__ieee754_sqrt+0x108>
   d7492:	152f      	asrs	r7, r5, #20
   d7494:	d07f      	beq.n	d7596 <__ieee754_sqrt+0x122>
   d7496:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d749a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d749e:	07f9      	lsls	r1, r7, #31
   d74a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d74a4:	d465      	bmi.n	d7572 <__ieee754_sqrt+0xfe>
   d74a6:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d74aa:	2600      	movs	r6, #0
   d74ac:	440b      	add	r3, r1
   d74ae:	107f      	asrs	r7, r7, #1
   d74b0:	0052      	lsls	r2, r2, #1
   d74b2:	46b6      	mov	lr, r6
   d74b4:	2016      	movs	r0, #22
   d74b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d74ba:	eb0e 0401 	add.w	r4, lr, r1
   d74be:	429c      	cmp	r4, r3
   d74c0:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d74c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d74c8:	dc03      	bgt.n	d74d2 <__ieee754_sqrt+0x5e>
   d74ca:	1b1b      	subs	r3, r3, r4
   d74cc:	eb04 0e01 	add.w	lr, r4, r1
   d74d0:	440e      	add	r6, r1
   d74d2:	3801      	subs	r0, #1
   d74d4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d74d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d74dc:	d1ed      	bne.n	d74ba <__ieee754_sqrt+0x46>
   d74de:	4684      	mov	ip, r0
   d74e0:	2420      	movs	r4, #32
   d74e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d74e6:	e009      	b.n	d74fc <__ieee754_sqrt+0x88>
   d74e8:	d020      	beq.n	d752c <__ieee754_sqrt+0xb8>
   d74ea:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d74ee:	3c01      	subs	r4, #1
   d74f0:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d74f4:	442b      	add	r3, r5
   d74f6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d74fa:	d020      	beq.n	d753e <__ieee754_sqrt+0xca>
   d74fc:	459e      	cmp	lr, r3
   d74fe:	eb01 050c 	add.w	r5, r1, ip
   d7502:	daf1      	bge.n	d74e8 <__ieee754_sqrt+0x74>
   d7504:	2d00      	cmp	r5, #0
   d7506:	eb05 0c01 	add.w	ip, r5, r1
   d750a:	db09      	blt.n	d7520 <__ieee754_sqrt+0xac>
   d750c:	46f0      	mov	r8, lr
   d750e:	4295      	cmp	r5, r2
   d7510:	ebce 0303 	rsb	r3, lr, r3
   d7514:	d900      	bls.n	d7518 <__ieee754_sqrt+0xa4>
   d7516:	3b01      	subs	r3, #1
   d7518:	1b52      	subs	r2, r2, r5
   d751a:	4408      	add	r0, r1
   d751c:	46c6      	mov	lr, r8
   d751e:	e7e4      	b.n	d74ea <__ieee754_sqrt+0x76>
   d7520:	f1bc 0f00 	cmp.w	ip, #0
   d7524:	dbf2      	blt.n	d750c <__ieee754_sqrt+0x98>
   d7526:	f10e 0801 	add.w	r8, lr, #1
   d752a:	e7f0      	b.n	d750e <__ieee754_sqrt+0x9a>
   d752c:	4295      	cmp	r5, r2
   d752e:	d81e      	bhi.n	d756e <__ieee754_sqrt+0xfa>
   d7530:	2d00      	cmp	r5, #0
   d7532:	eb05 0c01 	add.w	ip, r5, r1
   d7536:	db50      	blt.n	d75da <__ieee754_sqrt+0x166>
   d7538:	4698      	mov	r8, r3
   d753a:	2300      	movs	r3, #0
   d753c:	e7ec      	b.n	d7518 <__ieee754_sqrt+0xa4>
   d753e:	4313      	orrs	r3, r2
   d7540:	d004      	beq.n	d754c <__ieee754_sqrt+0xd8>
   d7542:	1c42      	adds	r2, r0, #1
   d7544:	d04d      	beq.n	d75e2 <__ieee754_sqrt+0x16e>
   d7546:	f000 0301 	and.w	r3, r0, #1
   d754a:	4418      	add	r0, r3
   d754c:	0840      	lsrs	r0, r0, #1
   d754e:	1071      	asrs	r1, r6, #1
   d7550:	07f3      	lsls	r3, r6, #31
   d7552:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d7556:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d755a:	bf48      	it	mi
   d755c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d7560:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d7564:	4602      	mov	r2, r0
   d7566:	ec43 2b10 	vmov	d0, r2, r3
   d756a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d756e:	4673      	mov	r3, lr
   d7570:	e7bb      	b.n	d74ea <__ieee754_sqrt+0x76>
   d7572:	005b      	lsls	r3, r3, #1
   d7574:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d7578:	0052      	lsls	r2, r2, #1
   d757a:	e794      	b.n	d74a6 <__ieee754_sqrt+0x32>
   d757c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d7580:	4321      	orrs	r1, r4
   d7582:	d028      	beq.n	d75d6 <__ieee754_sqrt+0x162>
   d7584:	bbad      	cbnz	r5, d75f2 <__ieee754_sqrt+0x17e>
   d7586:	462f      	mov	r7, r5
   d7588:	0ad3      	lsrs	r3, r2, #11
   d758a:	3f15      	subs	r7, #21
   d758c:	0552      	lsls	r2, r2, #21
   d758e:	2b00      	cmp	r3, #0
   d7590:	d0fa      	beq.n	d7588 <__ieee754_sqrt+0x114>
   d7592:	02dd      	lsls	r5, r3, #11
   d7594:	d428      	bmi.n	d75e8 <__ieee754_sqrt+0x174>
   d7596:	2100      	movs	r1, #0
   d7598:	e000      	b.n	d759c <__ieee754_sqrt+0x128>
   d759a:	4601      	mov	r1, r0
   d759c:	005b      	lsls	r3, r3, #1
   d759e:	02dc      	lsls	r4, r3, #11
   d75a0:	f101 0001 	add.w	r0, r1, #1
   d75a4:	d5f9      	bpl.n	d759a <__ieee754_sqrt+0x126>
   d75a6:	f1c0 0420 	rsb	r4, r0, #32
   d75aa:	fa22 f404 	lsr.w	r4, r2, r4
   d75ae:	4323      	orrs	r3, r4
   d75b0:	1a7f      	subs	r7, r7, r1
   d75b2:	4082      	lsls	r2, r0
   d75b4:	e76f      	b.n	d7496 <__ieee754_sqrt+0x22>
   d75b6:	ee10 2a10 	vmov	r2, s0
   d75ba:	462b      	mov	r3, r5
   d75bc:	ee10 0a10 	vmov	r0, s0
   d75c0:	4629      	mov	r1, r5
   d75c2:	f000 f9e1 	bl	d7988 <__aeabi_dmul>
   d75c6:	4622      	mov	r2, r4
   d75c8:	462b      	mov	r3, r5
   d75ca:	f000 f82b 	bl	d7624 <__adddf3>
   d75ce:	ec41 0b10 	vmov	d0, r0, r1
   d75d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d75d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d75da:	f1bc 0f00 	cmp.w	ip, #0
   d75de:	daa2      	bge.n	d7526 <__ieee754_sqrt+0xb2>
   d75e0:	e7aa      	b.n	d7538 <__ieee754_sqrt+0xc4>
   d75e2:	3601      	adds	r6, #1
   d75e4:	4620      	mov	r0, r4
   d75e6:	e7b2      	b.n	d754e <__ieee754_sqrt+0xda>
   d75e8:	2420      	movs	r4, #32
   d75ea:	f04f 31ff 	mov.w	r1, #4294967295
   d75ee:	2000      	movs	r0, #0
   d75f0:	e7db      	b.n	d75aa <__ieee754_sqrt+0x136>
   d75f2:	ee10 2a10 	vmov	r2, s0
   d75f6:	462b      	mov	r3, r5
   d75f8:	4620      	mov	r0, r4
   d75fa:	4629      	mov	r1, r5
   d75fc:	f000 f810 	bl	d7620 <__aeabi_dsub>
   d7600:	4602      	mov	r2, r0
   d7602:	460b      	mov	r3, r1
   d7604:	f000 faea 	bl	d7bdc <__aeabi_ddiv>
   d7608:	ec41 0b10 	vmov	d0, r0, r1
   d760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7610:	7ff00000 	.word	0x7ff00000

000d7614 <matherr>:
   d7614:	2000      	movs	r0, #0
   d7616:	4770      	bx	lr

000d7618 <__aeabi_drsub>:
   d7618:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d761c:	e002      	b.n	d7624 <__adddf3>
   d761e:	bf00      	nop

000d7620 <__aeabi_dsub>:
   d7620:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7624 <__adddf3>:
   d7624:	b530      	push	{r4, r5, lr}
   d7626:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d762a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d762e:	ea94 0f05 	teq	r4, r5
   d7632:	bf08      	it	eq
   d7634:	ea90 0f02 	teqeq	r0, r2
   d7638:	bf1f      	itttt	ne
   d763a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d763e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7642:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7646:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d764a:	f000 80e2 	beq.w	d7812 <__adddf3+0x1ee>
   d764e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7652:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7656:	bfb8      	it	lt
   d7658:	426d      	neglt	r5, r5
   d765a:	dd0c      	ble.n	d7676 <__adddf3+0x52>
   d765c:	442c      	add	r4, r5
   d765e:	ea80 0202 	eor.w	r2, r0, r2
   d7662:	ea81 0303 	eor.w	r3, r1, r3
   d7666:	ea82 0000 	eor.w	r0, r2, r0
   d766a:	ea83 0101 	eor.w	r1, r3, r1
   d766e:	ea80 0202 	eor.w	r2, r0, r2
   d7672:	ea81 0303 	eor.w	r3, r1, r3
   d7676:	2d36      	cmp	r5, #54	; 0x36
   d7678:	bf88      	it	hi
   d767a:	bd30      	pophi	{r4, r5, pc}
   d767c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7680:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7684:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7688:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d768c:	d002      	beq.n	d7694 <__adddf3+0x70>
   d768e:	4240      	negs	r0, r0
   d7690:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7694:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7698:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d769c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d76a0:	d002      	beq.n	d76a8 <__adddf3+0x84>
   d76a2:	4252      	negs	r2, r2
   d76a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d76a8:	ea94 0f05 	teq	r4, r5
   d76ac:	f000 80a7 	beq.w	d77fe <__adddf3+0x1da>
   d76b0:	f1a4 0401 	sub.w	r4, r4, #1
   d76b4:	f1d5 0e20 	rsbs	lr, r5, #32
   d76b8:	db0d      	blt.n	d76d6 <__adddf3+0xb2>
   d76ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   d76be:	fa22 f205 	lsr.w	r2, r2, r5
   d76c2:	1880      	adds	r0, r0, r2
   d76c4:	f141 0100 	adc.w	r1, r1, #0
   d76c8:	fa03 f20e 	lsl.w	r2, r3, lr
   d76cc:	1880      	adds	r0, r0, r2
   d76ce:	fa43 f305 	asr.w	r3, r3, r5
   d76d2:	4159      	adcs	r1, r3
   d76d4:	e00e      	b.n	d76f4 <__adddf3+0xd0>
   d76d6:	f1a5 0520 	sub.w	r5, r5, #32
   d76da:	f10e 0e20 	add.w	lr, lr, #32
   d76de:	2a01      	cmp	r2, #1
   d76e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d76e4:	bf28      	it	cs
   d76e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d76ea:	fa43 f305 	asr.w	r3, r3, r5
   d76ee:	18c0      	adds	r0, r0, r3
   d76f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d76f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d76f8:	d507      	bpl.n	d770a <__adddf3+0xe6>
   d76fa:	f04f 0e00 	mov.w	lr, #0
   d76fe:	f1dc 0c00 	rsbs	ip, ip, #0
   d7702:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7706:	eb6e 0101 	sbc.w	r1, lr, r1
   d770a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d770e:	d31b      	bcc.n	d7748 <__adddf3+0x124>
   d7710:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7714:	d30c      	bcc.n	d7730 <__adddf3+0x10c>
   d7716:	0849      	lsrs	r1, r1, #1
   d7718:	ea5f 0030 	movs.w	r0, r0, rrx
   d771c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7720:	f104 0401 	add.w	r4, r4, #1
   d7724:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7728:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d772c:	f080 809a 	bcs.w	d7864 <__adddf3+0x240>
   d7730:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7734:	bf08      	it	eq
   d7736:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d773a:	f150 0000 	adcs.w	r0, r0, #0
   d773e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7742:	ea41 0105 	orr.w	r1, r1, r5
   d7746:	bd30      	pop	{r4, r5, pc}
   d7748:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d774c:	4140      	adcs	r0, r0
   d774e:	eb41 0101 	adc.w	r1, r1, r1
   d7752:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7756:	f1a4 0401 	sub.w	r4, r4, #1
   d775a:	d1e9      	bne.n	d7730 <__adddf3+0x10c>
   d775c:	f091 0f00 	teq	r1, #0
   d7760:	bf04      	itt	eq
   d7762:	4601      	moveq	r1, r0
   d7764:	2000      	moveq	r0, #0
   d7766:	fab1 f381 	clz	r3, r1
   d776a:	bf08      	it	eq
   d776c:	3320      	addeq	r3, #32
   d776e:	f1a3 030b 	sub.w	r3, r3, #11
   d7772:	f1b3 0220 	subs.w	r2, r3, #32
   d7776:	da0c      	bge.n	d7792 <__adddf3+0x16e>
   d7778:	320c      	adds	r2, #12
   d777a:	dd08      	ble.n	d778e <__adddf3+0x16a>
   d777c:	f102 0c14 	add.w	ip, r2, #20
   d7780:	f1c2 020c 	rsb	r2, r2, #12
   d7784:	fa01 f00c 	lsl.w	r0, r1, ip
   d7788:	fa21 f102 	lsr.w	r1, r1, r2
   d778c:	e00c      	b.n	d77a8 <__adddf3+0x184>
   d778e:	f102 0214 	add.w	r2, r2, #20
   d7792:	bfd8      	it	le
   d7794:	f1c2 0c20 	rsble	ip, r2, #32
   d7798:	fa01 f102 	lsl.w	r1, r1, r2
   d779c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d77a0:	bfdc      	itt	le
   d77a2:	ea41 010c 	orrle.w	r1, r1, ip
   d77a6:	4090      	lslle	r0, r2
   d77a8:	1ae4      	subs	r4, r4, r3
   d77aa:	bfa2      	ittt	ge
   d77ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d77b0:	4329      	orrge	r1, r5
   d77b2:	bd30      	popge	{r4, r5, pc}
   d77b4:	ea6f 0404 	mvn.w	r4, r4
   d77b8:	3c1f      	subs	r4, #31
   d77ba:	da1c      	bge.n	d77f6 <__adddf3+0x1d2>
   d77bc:	340c      	adds	r4, #12
   d77be:	dc0e      	bgt.n	d77de <__adddf3+0x1ba>
   d77c0:	f104 0414 	add.w	r4, r4, #20
   d77c4:	f1c4 0220 	rsb	r2, r4, #32
   d77c8:	fa20 f004 	lsr.w	r0, r0, r4
   d77cc:	fa01 f302 	lsl.w	r3, r1, r2
   d77d0:	ea40 0003 	orr.w	r0, r0, r3
   d77d4:	fa21 f304 	lsr.w	r3, r1, r4
   d77d8:	ea45 0103 	orr.w	r1, r5, r3
   d77dc:	bd30      	pop	{r4, r5, pc}
   d77de:	f1c4 040c 	rsb	r4, r4, #12
   d77e2:	f1c4 0220 	rsb	r2, r4, #32
   d77e6:	fa20 f002 	lsr.w	r0, r0, r2
   d77ea:	fa01 f304 	lsl.w	r3, r1, r4
   d77ee:	ea40 0003 	orr.w	r0, r0, r3
   d77f2:	4629      	mov	r1, r5
   d77f4:	bd30      	pop	{r4, r5, pc}
   d77f6:	fa21 f004 	lsr.w	r0, r1, r4
   d77fa:	4629      	mov	r1, r5
   d77fc:	bd30      	pop	{r4, r5, pc}
   d77fe:	f094 0f00 	teq	r4, #0
   d7802:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7806:	bf06      	itte	eq
   d7808:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d780c:	3401      	addeq	r4, #1
   d780e:	3d01      	subne	r5, #1
   d7810:	e74e      	b.n	d76b0 <__adddf3+0x8c>
   d7812:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7816:	bf18      	it	ne
   d7818:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d781c:	d029      	beq.n	d7872 <__adddf3+0x24e>
   d781e:	ea94 0f05 	teq	r4, r5
   d7822:	bf08      	it	eq
   d7824:	ea90 0f02 	teqeq	r0, r2
   d7828:	d005      	beq.n	d7836 <__adddf3+0x212>
   d782a:	ea54 0c00 	orrs.w	ip, r4, r0
   d782e:	bf04      	itt	eq
   d7830:	4619      	moveq	r1, r3
   d7832:	4610      	moveq	r0, r2
   d7834:	bd30      	pop	{r4, r5, pc}
   d7836:	ea91 0f03 	teq	r1, r3
   d783a:	bf1e      	ittt	ne
   d783c:	2100      	movne	r1, #0
   d783e:	2000      	movne	r0, #0
   d7840:	bd30      	popne	{r4, r5, pc}
   d7842:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7846:	d105      	bne.n	d7854 <__adddf3+0x230>
   d7848:	0040      	lsls	r0, r0, #1
   d784a:	4149      	adcs	r1, r1
   d784c:	bf28      	it	cs
   d784e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7852:	bd30      	pop	{r4, r5, pc}
   d7854:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7858:	bf3c      	itt	cc
   d785a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d785e:	bd30      	popcc	{r4, r5, pc}
   d7860:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7864:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d786c:	f04f 0000 	mov.w	r0, #0
   d7870:	bd30      	pop	{r4, r5, pc}
   d7872:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7876:	bf1a      	itte	ne
   d7878:	4619      	movne	r1, r3
   d787a:	4610      	movne	r0, r2
   d787c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7880:	bf1c      	itt	ne
   d7882:	460b      	movne	r3, r1
   d7884:	4602      	movne	r2, r0
   d7886:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d788a:	bf06      	itte	eq
   d788c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7890:	ea91 0f03 	teqeq	r1, r3
   d7894:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7898:	bd30      	pop	{r4, r5, pc}
   d789a:	bf00      	nop

000d789c <__aeabi_ui2d>:
   d789c:	f090 0f00 	teq	r0, #0
   d78a0:	bf04      	itt	eq
   d78a2:	2100      	moveq	r1, #0
   d78a4:	4770      	bxeq	lr
   d78a6:	b530      	push	{r4, r5, lr}
   d78a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d78ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d78b0:	f04f 0500 	mov.w	r5, #0
   d78b4:	f04f 0100 	mov.w	r1, #0
   d78b8:	e750      	b.n	d775c <__adddf3+0x138>
   d78ba:	bf00      	nop

000d78bc <__aeabi_i2d>:
   d78bc:	f090 0f00 	teq	r0, #0
   d78c0:	bf04      	itt	eq
   d78c2:	2100      	moveq	r1, #0
   d78c4:	4770      	bxeq	lr
   d78c6:	b530      	push	{r4, r5, lr}
   d78c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d78cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d78d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d78d4:	bf48      	it	mi
   d78d6:	4240      	negmi	r0, r0
   d78d8:	f04f 0100 	mov.w	r1, #0
   d78dc:	e73e      	b.n	d775c <__adddf3+0x138>
   d78de:	bf00      	nop

000d78e0 <__aeabi_f2d>:
   d78e0:	0042      	lsls	r2, r0, #1
   d78e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d78e6:	ea4f 0131 	mov.w	r1, r1, rrx
   d78ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d78ee:	bf1f      	itttt	ne
   d78f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d78f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d78f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d78fc:	4770      	bxne	lr
   d78fe:	f092 0f00 	teq	r2, #0
   d7902:	bf14      	ite	ne
   d7904:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7908:	4770      	bxeq	lr
   d790a:	b530      	push	{r4, r5, lr}
   d790c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7910:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7914:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7918:	e720      	b.n	d775c <__adddf3+0x138>
   d791a:	bf00      	nop

000d791c <__aeabi_ul2d>:
   d791c:	ea50 0201 	orrs.w	r2, r0, r1
   d7920:	bf08      	it	eq
   d7922:	4770      	bxeq	lr
   d7924:	b530      	push	{r4, r5, lr}
   d7926:	f04f 0500 	mov.w	r5, #0
   d792a:	e00a      	b.n	d7942 <__aeabi_l2d+0x16>

000d792c <__aeabi_l2d>:
   d792c:	ea50 0201 	orrs.w	r2, r0, r1
   d7930:	bf08      	it	eq
   d7932:	4770      	bxeq	lr
   d7934:	b530      	push	{r4, r5, lr}
   d7936:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d793a:	d502      	bpl.n	d7942 <__aeabi_l2d+0x16>
   d793c:	4240      	negs	r0, r0
   d793e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7942:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7946:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d794a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d794e:	f43f aedc 	beq.w	d770a <__adddf3+0xe6>
   d7952:	f04f 0203 	mov.w	r2, #3
   d7956:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d795a:	bf18      	it	ne
   d795c:	3203      	addne	r2, #3
   d795e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7962:	bf18      	it	ne
   d7964:	3203      	addne	r2, #3
   d7966:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d796a:	f1c2 0320 	rsb	r3, r2, #32
   d796e:	fa00 fc03 	lsl.w	ip, r0, r3
   d7972:	fa20 f002 	lsr.w	r0, r0, r2
   d7976:	fa01 fe03 	lsl.w	lr, r1, r3
   d797a:	ea40 000e 	orr.w	r0, r0, lr
   d797e:	fa21 f102 	lsr.w	r1, r1, r2
   d7982:	4414      	add	r4, r2
   d7984:	e6c1      	b.n	d770a <__adddf3+0xe6>
   d7986:	bf00      	nop

000d7988 <__aeabi_dmul>:
   d7988:	b570      	push	{r4, r5, r6, lr}
   d798a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d798e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7992:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7996:	bf1d      	ittte	ne
   d7998:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d799c:	ea94 0f0c 	teqne	r4, ip
   d79a0:	ea95 0f0c 	teqne	r5, ip
   d79a4:	f000 f8de 	bleq	d7b64 <__aeabi_dmul+0x1dc>
   d79a8:	442c      	add	r4, r5
   d79aa:	ea81 0603 	eor.w	r6, r1, r3
   d79ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d79b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d79b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d79ba:	bf18      	it	ne
   d79bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d79c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d79c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d79c8:	d038      	beq.n	d7a3c <__aeabi_dmul+0xb4>
   d79ca:	fba0 ce02 	umull	ip, lr, r0, r2
   d79ce:	f04f 0500 	mov.w	r5, #0
   d79d2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d79d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d79da:	fbe0 e503 	umlal	lr, r5, r0, r3
   d79de:	f04f 0600 	mov.w	r6, #0
   d79e2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d79e6:	f09c 0f00 	teq	ip, #0
   d79ea:	bf18      	it	ne
   d79ec:	f04e 0e01 	orrne.w	lr, lr, #1
   d79f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d79f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d79f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d79fc:	d204      	bcs.n	d7a08 <__aeabi_dmul+0x80>
   d79fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7a02:	416d      	adcs	r5, r5
   d7a04:	eb46 0606 	adc.w	r6, r6, r6
   d7a08:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7a0c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7a10:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7a14:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7a18:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7a1c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7a20:	bf88      	it	hi
   d7a22:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7a26:	d81e      	bhi.n	d7a66 <__aeabi_dmul+0xde>
   d7a28:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7a2c:	bf08      	it	eq
   d7a2e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7a32:	f150 0000 	adcs.w	r0, r0, #0
   d7a36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7a3a:	bd70      	pop	{r4, r5, r6, pc}
   d7a3c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7a40:	ea46 0101 	orr.w	r1, r6, r1
   d7a44:	ea40 0002 	orr.w	r0, r0, r2
   d7a48:	ea81 0103 	eor.w	r1, r1, r3
   d7a4c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7a50:	bfc2      	ittt	gt
   d7a52:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7a56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7a5a:	bd70      	popgt	{r4, r5, r6, pc}
   d7a5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7a60:	f04f 0e00 	mov.w	lr, #0
   d7a64:	3c01      	subs	r4, #1
   d7a66:	f300 80ab 	bgt.w	d7bc0 <__aeabi_dmul+0x238>
   d7a6a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7a6e:	bfde      	ittt	le
   d7a70:	2000      	movle	r0, #0
   d7a72:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7a76:	bd70      	pople	{r4, r5, r6, pc}
   d7a78:	f1c4 0400 	rsb	r4, r4, #0
   d7a7c:	3c20      	subs	r4, #32
   d7a7e:	da35      	bge.n	d7aec <__aeabi_dmul+0x164>
   d7a80:	340c      	adds	r4, #12
   d7a82:	dc1b      	bgt.n	d7abc <__aeabi_dmul+0x134>
   d7a84:	f104 0414 	add.w	r4, r4, #20
   d7a88:	f1c4 0520 	rsb	r5, r4, #32
   d7a8c:	fa00 f305 	lsl.w	r3, r0, r5
   d7a90:	fa20 f004 	lsr.w	r0, r0, r4
   d7a94:	fa01 f205 	lsl.w	r2, r1, r5
   d7a98:	ea40 0002 	orr.w	r0, r0, r2
   d7a9c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7aa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7aa4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7aa8:	fa21 f604 	lsr.w	r6, r1, r4
   d7aac:	eb42 0106 	adc.w	r1, r2, r6
   d7ab0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ab4:	bf08      	it	eq
   d7ab6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7aba:	bd70      	pop	{r4, r5, r6, pc}
   d7abc:	f1c4 040c 	rsb	r4, r4, #12
   d7ac0:	f1c4 0520 	rsb	r5, r4, #32
   d7ac4:	fa00 f304 	lsl.w	r3, r0, r4
   d7ac8:	fa20 f005 	lsr.w	r0, r0, r5
   d7acc:	fa01 f204 	lsl.w	r2, r1, r4
   d7ad0:	ea40 0002 	orr.w	r0, r0, r2
   d7ad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ad8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7adc:	f141 0100 	adc.w	r1, r1, #0
   d7ae0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ae4:	bf08      	it	eq
   d7ae6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7aea:	bd70      	pop	{r4, r5, r6, pc}
   d7aec:	f1c4 0520 	rsb	r5, r4, #32
   d7af0:	fa00 f205 	lsl.w	r2, r0, r5
   d7af4:	ea4e 0e02 	orr.w	lr, lr, r2
   d7af8:	fa20 f304 	lsr.w	r3, r0, r4
   d7afc:	fa01 f205 	lsl.w	r2, r1, r5
   d7b00:	ea43 0302 	orr.w	r3, r3, r2
   d7b04:	fa21 f004 	lsr.w	r0, r1, r4
   d7b08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7b0c:	fa21 f204 	lsr.w	r2, r1, r4
   d7b10:	ea20 0002 	bic.w	r0, r0, r2
   d7b14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7b18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7b1c:	bf08      	it	eq
   d7b1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7b22:	bd70      	pop	{r4, r5, r6, pc}
   d7b24:	f094 0f00 	teq	r4, #0
   d7b28:	d10f      	bne.n	d7b4a <__aeabi_dmul+0x1c2>
   d7b2a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7b2e:	0040      	lsls	r0, r0, #1
   d7b30:	eb41 0101 	adc.w	r1, r1, r1
   d7b34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7b38:	bf08      	it	eq
   d7b3a:	3c01      	subeq	r4, #1
   d7b3c:	d0f7      	beq.n	d7b2e <__aeabi_dmul+0x1a6>
   d7b3e:	ea41 0106 	orr.w	r1, r1, r6
   d7b42:	f095 0f00 	teq	r5, #0
   d7b46:	bf18      	it	ne
   d7b48:	4770      	bxne	lr
   d7b4a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7b4e:	0052      	lsls	r2, r2, #1
   d7b50:	eb43 0303 	adc.w	r3, r3, r3
   d7b54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7b58:	bf08      	it	eq
   d7b5a:	3d01      	subeq	r5, #1
   d7b5c:	d0f7      	beq.n	d7b4e <__aeabi_dmul+0x1c6>
   d7b5e:	ea43 0306 	orr.w	r3, r3, r6
   d7b62:	4770      	bx	lr
   d7b64:	ea94 0f0c 	teq	r4, ip
   d7b68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7b6c:	bf18      	it	ne
   d7b6e:	ea95 0f0c 	teqne	r5, ip
   d7b72:	d00c      	beq.n	d7b8e <__aeabi_dmul+0x206>
   d7b74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7b78:	bf18      	it	ne
   d7b7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7b7e:	d1d1      	bne.n	d7b24 <__aeabi_dmul+0x19c>
   d7b80:	ea81 0103 	eor.w	r1, r1, r3
   d7b84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7b88:	f04f 0000 	mov.w	r0, #0
   d7b8c:	bd70      	pop	{r4, r5, r6, pc}
   d7b8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7b92:	bf06      	itte	eq
   d7b94:	4610      	moveq	r0, r2
   d7b96:	4619      	moveq	r1, r3
   d7b98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7b9c:	d019      	beq.n	d7bd2 <__aeabi_dmul+0x24a>
   d7b9e:	ea94 0f0c 	teq	r4, ip
   d7ba2:	d102      	bne.n	d7baa <__aeabi_dmul+0x222>
   d7ba4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7ba8:	d113      	bne.n	d7bd2 <__aeabi_dmul+0x24a>
   d7baa:	ea95 0f0c 	teq	r5, ip
   d7bae:	d105      	bne.n	d7bbc <__aeabi_dmul+0x234>
   d7bb0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7bb4:	bf1c      	itt	ne
   d7bb6:	4610      	movne	r0, r2
   d7bb8:	4619      	movne	r1, r3
   d7bba:	d10a      	bne.n	d7bd2 <__aeabi_dmul+0x24a>
   d7bbc:	ea81 0103 	eor.w	r1, r1, r3
   d7bc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7bc4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7bc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7bcc:	f04f 0000 	mov.w	r0, #0
   d7bd0:	bd70      	pop	{r4, r5, r6, pc}
   d7bd2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7bd6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7bda:	bd70      	pop	{r4, r5, r6, pc}

000d7bdc <__aeabi_ddiv>:
   d7bdc:	b570      	push	{r4, r5, r6, lr}
   d7bde:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7be2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7be6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7bea:	bf1d      	ittte	ne
   d7bec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7bf0:	ea94 0f0c 	teqne	r4, ip
   d7bf4:	ea95 0f0c 	teqne	r5, ip
   d7bf8:	f000 f8a7 	bleq	d7d4a <__aeabi_ddiv+0x16e>
   d7bfc:	eba4 0405 	sub.w	r4, r4, r5
   d7c00:	ea81 0e03 	eor.w	lr, r1, r3
   d7c04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7c08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7c0c:	f000 8088 	beq.w	d7d20 <__aeabi_ddiv+0x144>
   d7c10:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7c14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7c18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7c1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7c20:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7c24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7c28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7c2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7c30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7c34:	429d      	cmp	r5, r3
   d7c36:	bf08      	it	eq
   d7c38:	4296      	cmpeq	r6, r2
   d7c3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7c3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7c42:	d202      	bcs.n	d7c4a <__aeabi_ddiv+0x6e>
   d7c44:	085b      	lsrs	r3, r3, #1
   d7c46:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c4a:	1ab6      	subs	r6, r6, r2
   d7c4c:	eb65 0503 	sbc.w	r5, r5, r3
   d7c50:	085b      	lsrs	r3, r3, #1
   d7c52:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7c5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7c5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c66:	bf22      	ittt	cs
   d7c68:	1ab6      	subcs	r6, r6, r2
   d7c6a:	4675      	movcs	r5, lr
   d7c6c:	ea40 000c 	orrcs.w	r0, r0, ip
   d7c70:	085b      	lsrs	r3, r3, #1
   d7c72:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c76:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c7e:	bf22      	ittt	cs
   d7c80:	1ab6      	subcs	r6, r6, r2
   d7c82:	4675      	movcs	r5, lr
   d7c84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7c88:	085b      	lsrs	r3, r3, #1
   d7c8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c96:	bf22      	ittt	cs
   d7c98:	1ab6      	subcs	r6, r6, r2
   d7c9a:	4675      	movcs	r5, lr
   d7c9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7ca0:	085b      	lsrs	r3, r3, #1
   d7ca2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ca6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7caa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7cae:	bf22      	ittt	cs
   d7cb0:	1ab6      	subcs	r6, r6, r2
   d7cb2:	4675      	movcs	r5, lr
   d7cb4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7cb8:	ea55 0e06 	orrs.w	lr, r5, r6
   d7cbc:	d018      	beq.n	d7cf0 <__aeabi_ddiv+0x114>
   d7cbe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7cc2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7cc6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7cca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7cce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7cd2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7cd6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7cda:	d1c0      	bne.n	d7c5e <__aeabi_ddiv+0x82>
   d7cdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ce0:	d10b      	bne.n	d7cfa <__aeabi_ddiv+0x11e>
   d7ce2:	ea41 0100 	orr.w	r1, r1, r0
   d7ce6:	f04f 0000 	mov.w	r0, #0
   d7cea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7cee:	e7b6      	b.n	d7c5e <__aeabi_ddiv+0x82>
   d7cf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7cf4:	bf04      	itt	eq
   d7cf6:	4301      	orreq	r1, r0
   d7cf8:	2000      	moveq	r0, #0
   d7cfa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7cfe:	bf88      	it	hi
   d7d00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7d04:	f63f aeaf 	bhi.w	d7a66 <__aeabi_dmul+0xde>
   d7d08:	ebb5 0c03 	subs.w	ip, r5, r3
   d7d0c:	bf04      	itt	eq
   d7d0e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7d12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7d16:	f150 0000 	adcs.w	r0, r0, #0
   d7d1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7d1e:	bd70      	pop	{r4, r5, r6, pc}
   d7d20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7d24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7d28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7d2c:	bfc2      	ittt	gt
   d7d2e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7d32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7d36:	bd70      	popgt	{r4, r5, r6, pc}
   d7d38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d3c:	f04f 0e00 	mov.w	lr, #0
   d7d40:	3c01      	subs	r4, #1
   d7d42:	e690      	b.n	d7a66 <__aeabi_dmul+0xde>
   d7d44:	ea45 0e06 	orr.w	lr, r5, r6
   d7d48:	e68d      	b.n	d7a66 <__aeabi_dmul+0xde>
   d7d4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7d4e:	ea94 0f0c 	teq	r4, ip
   d7d52:	bf08      	it	eq
   d7d54:	ea95 0f0c 	teqeq	r5, ip
   d7d58:	f43f af3b 	beq.w	d7bd2 <__aeabi_dmul+0x24a>
   d7d5c:	ea94 0f0c 	teq	r4, ip
   d7d60:	d10a      	bne.n	d7d78 <__aeabi_ddiv+0x19c>
   d7d62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7d66:	f47f af34 	bne.w	d7bd2 <__aeabi_dmul+0x24a>
   d7d6a:	ea95 0f0c 	teq	r5, ip
   d7d6e:	f47f af25 	bne.w	d7bbc <__aeabi_dmul+0x234>
   d7d72:	4610      	mov	r0, r2
   d7d74:	4619      	mov	r1, r3
   d7d76:	e72c      	b.n	d7bd2 <__aeabi_dmul+0x24a>
   d7d78:	ea95 0f0c 	teq	r5, ip
   d7d7c:	d106      	bne.n	d7d8c <__aeabi_ddiv+0x1b0>
   d7d7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7d82:	f43f aefd 	beq.w	d7b80 <__aeabi_dmul+0x1f8>
   d7d86:	4610      	mov	r0, r2
   d7d88:	4619      	mov	r1, r3
   d7d8a:	e722      	b.n	d7bd2 <__aeabi_dmul+0x24a>
   d7d8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7d90:	bf18      	it	ne
   d7d92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7d96:	f47f aec5 	bne.w	d7b24 <__aeabi_dmul+0x19c>
   d7d9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7d9e:	f47f af0d 	bne.w	d7bbc <__aeabi_dmul+0x234>
   d7da2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7da6:	f47f aeeb 	bne.w	d7b80 <__aeabi_dmul+0x1f8>
   d7daa:	e712      	b.n	d7bd2 <__aeabi_dmul+0x24a>

000d7dac <__gedf2>:
   d7dac:	f04f 3cff 	mov.w	ip, #4294967295
   d7db0:	e006      	b.n	d7dc0 <__cmpdf2+0x4>
   d7db2:	bf00      	nop

000d7db4 <__ledf2>:
   d7db4:	f04f 0c01 	mov.w	ip, #1
   d7db8:	e002      	b.n	d7dc0 <__cmpdf2+0x4>
   d7dba:	bf00      	nop

000d7dbc <__cmpdf2>:
   d7dbc:	f04f 0c01 	mov.w	ip, #1
   d7dc0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7dc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7dc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7dcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7dd0:	bf18      	it	ne
   d7dd2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7dd6:	d01b      	beq.n	d7e10 <__cmpdf2+0x54>
   d7dd8:	b001      	add	sp, #4
   d7dda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7dde:	bf0c      	ite	eq
   d7de0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7de4:	ea91 0f03 	teqne	r1, r3
   d7de8:	bf02      	ittt	eq
   d7dea:	ea90 0f02 	teqeq	r0, r2
   d7dee:	2000      	moveq	r0, #0
   d7df0:	4770      	bxeq	lr
   d7df2:	f110 0f00 	cmn.w	r0, #0
   d7df6:	ea91 0f03 	teq	r1, r3
   d7dfa:	bf58      	it	pl
   d7dfc:	4299      	cmppl	r1, r3
   d7dfe:	bf08      	it	eq
   d7e00:	4290      	cmpeq	r0, r2
   d7e02:	bf2c      	ite	cs
   d7e04:	17d8      	asrcs	r0, r3, #31
   d7e06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7e0a:	f040 0001 	orr.w	r0, r0, #1
   d7e0e:	4770      	bx	lr
   d7e10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7e14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7e18:	d102      	bne.n	d7e20 <__cmpdf2+0x64>
   d7e1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7e1e:	d107      	bne.n	d7e30 <__cmpdf2+0x74>
   d7e20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7e24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7e28:	d1d6      	bne.n	d7dd8 <__cmpdf2+0x1c>
   d7e2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7e2e:	d0d3      	beq.n	d7dd8 <__cmpdf2+0x1c>
   d7e30:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7e34:	4770      	bx	lr
   d7e36:	bf00      	nop

000d7e38 <__aeabi_cdrcmple>:
   d7e38:	4684      	mov	ip, r0
   d7e3a:	4610      	mov	r0, r2
   d7e3c:	4662      	mov	r2, ip
   d7e3e:	468c      	mov	ip, r1
   d7e40:	4619      	mov	r1, r3
   d7e42:	4663      	mov	r3, ip
   d7e44:	e000      	b.n	d7e48 <__aeabi_cdcmpeq>
   d7e46:	bf00      	nop

000d7e48 <__aeabi_cdcmpeq>:
   d7e48:	b501      	push	{r0, lr}
   d7e4a:	f7ff ffb7 	bl	d7dbc <__cmpdf2>
   d7e4e:	2800      	cmp	r0, #0
   d7e50:	bf48      	it	mi
   d7e52:	f110 0f00 	cmnmi.w	r0, #0
   d7e56:	bd01      	pop	{r0, pc}

000d7e58 <__aeabi_dcmpeq>:
   d7e58:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7e5c:	f7ff fff4 	bl	d7e48 <__aeabi_cdcmpeq>
   d7e60:	bf0c      	ite	eq
   d7e62:	2001      	moveq	r0, #1
   d7e64:	2000      	movne	r0, #0
   d7e66:	f85d fb08 	ldr.w	pc, [sp], #8
   d7e6a:	bf00      	nop

000d7e6c <__aeabi_dcmplt>:
   d7e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7e70:	f7ff ffea 	bl	d7e48 <__aeabi_cdcmpeq>
   d7e74:	bf34      	ite	cc
   d7e76:	2001      	movcc	r0, #1
   d7e78:	2000      	movcs	r0, #0
   d7e7a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7e7e:	bf00      	nop

000d7e80 <__aeabi_dcmple>:
   d7e80:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7e84:	f7ff ffe0 	bl	d7e48 <__aeabi_cdcmpeq>
   d7e88:	bf94      	ite	ls
   d7e8a:	2001      	movls	r0, #1
   d7e8c:	2000      	movhi	r0, #0
   d7e8e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7e92:	bf00      	nop

000d7e94 <__aeabi_dcmpge>:
   d7e94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7e98:	f7ff ffce 	bl	d7e38 <__aeabi_cdrcmple>
   d7e9c:	bf94      	ite	ls
   d7e9e:	2001      	movls	r0, #1
   d7ea0:	2000      	movhi	r0, #0
   d7ea2:	f85d fb08 	ldr.w	pc, [sp], #8
   d7ea6:	bf00      	nop

000d7ea8 <__aeabi_dcmpgt>:
   d7ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7eac:	f7ff ffc4 	bl	d7e38 <__aeabi_cdrcmple>
   d7eb0:	bf34      	ite	cc
   d7eb2:	2001      	movcc	r0, #1
   d7eb4:	2000      	movcs	r0, #0
   d7eb6:	f85d fb08 	ldr.w	pc, [sp], #8
   d7eba:	bf00      	nop

000d7ebc <__aeabi_dcmpun>:
   d7ebc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7ec0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7ec4:	d102      	bne.n	d7ecc <__aeabi_dcmpun+0x10>
   d7ec6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7eca:	d10a      	bne.n	d7ee2 <__aeabi_dcmpun+0x26>
   d7ecc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7ed4:	d102      	bne.n	d7edc <__aeabi_dcmpun+0x20>
   d7ed6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7eda:	d102      	bne.n	d7ee2 <__aeabi_dcmpun+0x26>
   d7edc:	f04f 0000 	mov.w	r0, #0
   d7ee0:	4770      	bx	lr
   d7ee2:	f04f 0001 	mov.w	r0, #1
   d7ee6:	4770      	bx	lr

000d7ee8 <__aeabi_d2iz>:
   d7ee8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7eec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7ef0:	d215      	bcs.n	d7f1e <__aeabi_d2iz+0x36>
   d7ef2:	d511      	bpl.n	d7f18 <__aeabi_d2iz+0x30>
   d7ef4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7ef8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7efc:	d912      	bls.n	d7f24 <__aeabi_d2iz+0x3c>
   d7efe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7f02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7f06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7f0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7f0e:	fa23 f002 	lsr.w	r0, r3, r2
   d7f12:	bf18      	it	ne
   d7f14:	4240      	negne	r0, r0
   d7f16:	4770      	bx	lr
   d7f18:	f04f 0000 	mov.w	r0, #0
   d7f1c:	4770      	bx	lr
   d7f1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7f22:	d105      	bne.n	d7f30 <__aeabi_d2iz+0x48>
   d7f24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7f28:	bf08      	it	eq
   d7f2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7f2e:	4770      	bx	lr
   d7f30:	f04f 0000 	mov.w	r0, #0
   d7f34:	4770      	bx	lr
   d7f36:	bf00      	nop

000d7f38 <__aeabi_d2f>:
   d7f38:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7f3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7f40:	bf24      	itt	cs
   d7f42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7f46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7f4a:	d90d      	bls.n	d7f68 <__aeabi_d2f+0x30>
   d7f4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7f50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7f54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7f58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7f5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7f60:	bf08      	it	eq
   d7f62:	f020 0001 	biceq.w	r0, r0, #1
   d7f66:	4770      	bx	lr
   d7f68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7f6c:	d121      	bne.n	d7fb2 <__aeabi_d2f+0x7a>
   d7f6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7f72:	bfbc      	itt	lt
   d7f74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7f78:	4770      	bxlt	lr
   d7f7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7f82:	f1c2 0218 	rsb	r2, r2, #24
   d7f86:	f1c2 0c20 	rsb	ip, r2, #32
   d7f8a:	fa10 f30c 	lsls.w	r3, r0, ip
   d7f8e:	fa20 f002 	lsr.w	r0, r0, r2
   d7f92:	bf18      	it	ne
   d7f94:	f040 0001 	orrne.w	r0, r0, #1
   d7f98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7f9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7fa0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7fa4:	ea40 000c 	orr.w	r0, r0, ip
   d7fa8:	fa23 f302 	lsr.w	r3, r3, r2
   d7fac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7fb0:	e7cc      	b.n	d7f4c <__aeabi_d2f+0x14>
   d7fb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7fb6:	d107      	bne.n	d7fc8 <__aeabi_d2f+0x90>
   d7fb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7fbc:	bf1e      	ittt	ne
   d7fbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7fc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7fc6:	4770      	bxne	lr
   d7fc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7fcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7fd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7fd4:	4770      	bx	lr
   d7fd6:	bf00      	nop

000d7fd8 <__cxa_atexit>:
   d7fd8:	b510      	push	{r4, lr}
   d7fda:	4c05      	ldr	r4, [pc, #20]	; (d7ff0 <__cxa_atexit+0x18>)
   d7fdc:	4613      	mov	r3, r2
   d7fde:	b12c      	cbz	r4, d7fec <__cxa_atexit+0x14>
   d7fe0:	460a      	mov	r2, r1
   d7fe2:	4601      	mov	r1, r0
   d7fe4:	2002      	movs	r0, #2
   d7fe6:	f3af 8000 	nop.w
   d7fea:	bd10      	pop	{r4, pc}
   d7fec:	4620      	mov	r0, r4
   d7fee:	bd10      	pop	{r4, pc}
   d7ff0:	00000000 	.word	0x00000000

000d7ff4 <memcpy>:
   d7ff4:	b510      	push	{r4, lr}
   d7ff6:	1e43      	subs	r3, r0, #1
   d7ff8:	440a      	add	r2, r1
   d7ffa:	4291      	cmp	r1, r2
   d7ffc:	d004      	beq.n	d8008 <memcpy+0x14>
   d7ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8002:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8006:	e7f8      	b.n	d7ffa <memcpy+0x6>
   d8008:	bd10      	pop	{r4, pc}

000d800a <memset>:
   d800a:	4402      	add	r2, r0
   d800c:	4603      	mov	r3, r0
   d800e:	4293      	cmp	r3, r2
   d8010:	d002      	beq.n	d8018 <memset+0xe>
   d8012:	f803 1b01 	strb.w	r1, [r3], #1
   d8016:	e7fa      	b.n	d800e <memset+0x4>
   d8018:	4770      	bx	lr
	...

000d801c <srand>:
   d801c:	b538      	push	{r3, r4, r5, lr}
   d801e:	4b12      	ldr	r3, [pc, #72]	; (d8068 <srand+0x4c>)
   d8020:	681c      	ldr	r4, [r3, #0]
   d8022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8024:	4605      	mov	r5, r0
   d8026:	b9d3      	cbnz	r3, d805e <srand+0x42>
   d8028:	2018      	movs	r0, #24
   d802a:	f7fd fe39 	bl	d5ca0 <malloc>
   d802e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8032:	63a0      	str	r0, [r4, #56]	; 0x38
   d8034:	8003      	strh	r3, [r0, #0]
   d8036:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d803a:	8043      	strh	r3, [r0, #2]
   d803c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8040:	8083      	strh	r3, [r0, #4]
   d8042:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8046:	80c3      	strh	r3, [r0, #6]
   d8048:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d804c:	8103      	strh	r3, [r0, #8]
   d804e:	2305      	movs	r3, #5
   d8050:	8143      	strh	r3, [r0, #10]
   d8052:	230b      	movs	r3, #11
   d8054:	8183      	strh	r3, [r0, #12]
   d8056:	2201      	movs	r2, #1
   d8058:	2300      	movs	r3, #0
   d805a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d805e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8060:	2200      	movs	r2, #0
   d8062:	611d      	str	r5, [r3, #16]
   d8064:	615a      	str	r2, [r3, #20]
   d8066:	bd38      	pop	{r3, r4, r5, pc}
   d8068:	2003de94 	.word	0x2003de94

000d806c <strdup>:
   d806c:	4b02      	ldr	r3, [pc, #8]	; (d8078 <strdup+0xc>)
   d806e:	4601      	mov	r1, r0
   d8070:	6818      	ldr	r0, [r3, #0]
   d8072:	f000 b803 	b.w	d807c <_strdup_r>
   d8076:	bf00      	nop
   d8078:	2003de94 	.word	0x2003de94

000d807c <_strdup_r>:
   d807c:	b570      	push	{r4, r5, r6, lr}
   d807e:	4606      	mov	r6, r0
   d8080:	4608      	mov	r0, r1
   d8082:	460c      	mov	r4, r1
   d8084:	f000 f80d 	bl	d80a2 <strlen>
   d8088:	1c45      	adds	r5, r0, #1
   d808a:	4629      	mov	r1, r5
   d808c:	4630      	mov	r0, r6
   d808e:	f7fd fe27 	bl	d5ce0 <_malloc_r>
   d8092:	4606      	mov	r6, r0
   d8094:	b118      	cbz	r0, d809e <_strdup_r+0x22>
   d8096:	462a      	mov	r2, r5
   d8098:	4621      	mov	r1, r4
   d809a:	f7ff ffab 	bl	d7ff4 <memcpy>
   d809e:	4630      	mov	r0, r6
   d80a0:	bd70      	pop	{r4, r5, r6, pc}

000d80a2 <strlen>:
   d80a2:	4603      	mov	r3, r0
   d80a4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d80a8:	2a00      	cmp	r2, #0
   d80aa:	d1fb      	bne.n	d80a4 <strlen+0x2>
   d80ac:	1a18      	subs	r0, r3, r0
   d80ae:	3801      	subs	r0, #1
   d80b0:	4770      	bx	lr

000d80b2 <link_code_end>:
	...

000d80b4 <dynalib_user>:
   d80b4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d80c4:	0000 0000                                   ....

000d80c8 <_ZTVN8particle13__SPISettingsE>:
	...
   d80d0:	4111 000d                                   .A..

000d80d4 <_ZTV6SdFile>:
	...
   d80dc:	40b7 000d 40b9 000d 40f9 000d 40f3 000d     .@...@...@...@..

000d80ec <_ZTV16JsonWriterStaticILj256EE>:
	...
   d80f4:	40c9 000d 40dd 000d 6564 6166 6c75 2074     .@...@..default 
   d8104:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   d8114:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   d8124:	5053 5349 7465 6974 676e 2073 7325 6c25     SPISettings %s%l
   d8134:	2075 7325 4d20 444f 2545 3e64 6d00 6369     u %s MODE%d>.mic
   d8144:	2031 203d 6925 7c20 6d20 6369 2032 203d     1 = %i | mic2 = 
   d8154:	6925 7c20 6d20 6369 2033 203d 6925 7c20     %i | mic3 = %i |
   d8164:	5420 6d69 2065 203d 6925 000a 6177 7469      Time = %i..wait
   d8174:	6e69 2067 6f66 2072 6f73 6e75 0064 3154     ing for sound.T1
   d8184:	3d20 2520 2069 207c 3254 3d20 2520 2069      = %i | T2 = %i 
   d8194:	207c 3354 3d20 2520 0a69 4100 3d20 2520     | T3 = %i..A = %
   d81a4:	2e30 6636 7c20 4220 3d20 2520 2e30 6636     0.6f | B = %0.6f
   d81b4:	000a 2054 203d 3025 322e 0a66 5800 3d20     ..T = %0.2f..X =
   d81c4:	2520 2e30 6632 7c20 5920 3d20 2520 2e30      %0.2f | Y = %0.
   d81d4:	6632 000a 2061 203d 3025 322e 2066 207c     2f..a = %0.2f | 
   d81e4:	2062 203d 3025 322e 2066 207c 2063 203d     b = %0.2f | c = 
   d81f4:	3025 322e 0a66 4c00 6e6f 6967 7574 0064     %0.2f..Longitud.
   d8204:	614c 6974 7574 6564 4e00 696f 6573 0000     Latitude.Noise..
   d8214:	c000 4001 1000 4002 2000 4002               ...@...@. .@

000d8220 <CSWTCH.65>:
   d8220:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d8230:	0050 0000                                   P...

000d8234 <_ZTV10JsonBuffer>:
	...
   d823c:	5579 000d 5595 000d                         yU...U..

000d8244 <_ZTV10JsonWriter>:
	...
   d824c:	55a9 000d 55bd 000d 6425 2500 756c 2500     .U...U..%d.%lu.%
   d825c:	3430 0078 755c 3025 5834 7400 7572 0065     04x.\u%04X.true.
   d826c:	6166 736c 0065 2e25 662a 2500 0066 2e25     false.%.*f.%f.%.
   d827c:	6c2a 0066 6c25 0066                         *lf.%lf.

000d8284 <_ZTVN5spark13EthernetClassE>:
	...
   d828c:	5d5f 000d 5d55 000d 5d4b 000d 5d41 000d     _]..U]..K]..A]..
   d829c:	5d35 000d 5d29 000d 5d1d 000d 5d15 000d     5]..)]...]...]..
   d82ac:	5d0b 000d 5d01 000d 6e8d 000d               .]...]...n..

000d82b8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d82b8:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d82c8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d82d8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d82e8:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d82f8:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d8308:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d8318:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d8328:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d8338:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d8348:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d8358:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d8368:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d8378:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d8388:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d8398:	6c61 006c 005a 2b25 3330 3a64 3025 7532     all.Z.%+03d:%02u
   d83a8:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d83b8:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d83c8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d83d0:	6301 000d 6307 000d 634b 000d 6315 000d     .c...c..Kc...c..
   d83e0:	6303 000d                                   .c..

000d83e4 <_ZTV9IPAddress>:
	...
   d83ec:	6899 000d 6889 000d 688b 000d               .h...h...h..

000d83f8 <_ZTV9USBSerial>:
	...
   d8400:	6971 000d 69c1 000d 69cf 000d 5fbd 000d     qi...i...i..._..
   d8410:	69ad 000d 6973 000d 6989 000d 69bb 000d     .i..si...i...i..
   d8420:	699f 000d 696d 000d                         .i..mi..

000d8428 <_ZTV11USARTSerial>:
	...
   d8430:	6a7d 000d 6acd 000d 6adb 000d 5fbd 000d     }j...j...j..._..
   d8440:	6a91 000d 6ab3 000d 6a9f 000d 6ac7 000d     .j...j...j...j..
   d8450:	6a7f 000d 6a83 000d                         .j...j..

000d8458 <_ZTV7TwoWire>:
	...
   d8460:	6ba9 000d 6bf3 000d 6bcb 000d 6bab 000d     .k...k...k...k..
   d8470:	6bd3 000d 6bdb 000d 6be3 000d 6beb 000d     .k...k...k...k..

000d8480 <_ZTVN5spark9MeshClassE>:
	...
   d8488:	6c8b 000d 6c81 000d 6c77 000d 6c6d 000d     .l...l..wl..ml..
   d8498:	6c61 000d 6c55 000d 6c49 000d 6c41 000d     al..Ul..Il..Al..
   d84a8:	6c37 000d 6c2d 000d 6e8d 000d               7l..-l...n..

000d84b4 <_ZTVN5spark9WiFiClassE>:
	...
   d84bc:	6e07 000d 6dfd 000d 6df3 000d 6da9 000d     .n...m...m...m..
   d84cc:	6de7 000d 6ddb 000d 6dcf 000d 6dc7 000d     .m...m...m...m..
   d84dc:	6dbd 000d 6db3 000d 6e8d 000d               .m...m...n..

000d84e8 <_ZTVN5spark12NetworkClassE>:
	...
   d84f0:	6e25 000d 6e2f 000d 6e39 000d 6e43 000d     %n../n..9n..Cn..
   d8500:	6e4d 000d 6e59 000d 6e65 000d 6e71 000d     Mn..Yn..en..qn..
   d8510:	6e79 000d 6e83 000d 6e8d 000d               yn...n...n..

000d851c <_ZSt7nothrow>:
   d851c:	0000 0000 7173 7472 0000 0000               ....sqrt....

000d8528 <__sf_fake_stdin>:
	...

000d8548 <__sf_fake_stdout>:
	...

000d8568 <__sf_fake_stderr>:
	...
   d8588:	0043                                        C.

000d858a <link_const_variable_data_end>:
	...

000d858c <link_constructors_location>:
   d858c:	000d4745 	.word	0x000d4745
   d8590:	000d4c95 	.word	0x000d4c95
   d8594:	000d4ca9 	.word	0x000d4ca9
   d8598:	000d4cad 	.word	0x000d4cad
   d859c:	000d4ccb 	.word	0x000d4ccb
   d85a0:	000d4ccf 	.word	0x000d4ccf
   d85a4:	000d4cd3 	.word	0x000d4cd3
   d85a8:	000d4cd7 	.word	0x000d4cd7
   d85ac:	000d4fa5 	.word	0x000d4fa5
   d85b0:	000d4fc9 	.word	0x000d4fc9
   d85b4:	000d4fcd 	.word	0x000d4fcd
   d85b8:	000d51b3 	.word	0x000d51b3
   d85bc:	000d51b7 	.word	0x000d51b7
   d85c0:	000d51bb 	.word	0x000d51bb
   d85c4:	000d54e9 	.word	0x000d54e9
   d85c8:	000d54ed 	.word	0x000d54ed
   d85cc:	000d54f1 	.word	0x000d54f1
   d85d0:	000d5575 	.word	0x000d5575
   d85d4:	000d5845 	.word	0x000d5845
   d85d8:	000d5d69 	.word	0x000d5d69
   d85dc:	000d5f09 	.word	0x000d5f09
   d85e0:	000d5f95 	.word	0x000d5f95
   d85e4:	000d60d9 	.word	0x000d60d9
   d85e8:	000d60e9 	.word	0x000d60e9
   d85ec:	000d61d5 	.word	0x000d61d5
   d85f0:	000d6d59 	.word	0x000d6d59
   d85f4:	000d6e11 	.word	0x000d6e11
   d85f8:	000d6f59 	.word	0x000d6f59
   d85fc:	000d7125 	.word	0x000d7125
   d8600:	000d71a9 	.word	0x000d71a9
   d8604:	000d726d 	.word	0x000d726d
   d8608:	000d7331 	.word	0x000d7331

000d860c <link_constructors_end>:
   d860c:	00000000 	.word	0x00000000
