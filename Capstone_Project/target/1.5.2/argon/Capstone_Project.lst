
c:/Users/User/Documents/IoT/Capstone-Project/Capstone_Project/target/1.5.2/argon/Capstone_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005830  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9850  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003bdf8  000d9854  0001bdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000296c  2003be84  2003be84  0002be84  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d98e0  000d98e0  000298e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9908  000d9908  00029908  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0019f5a5  00000000  00000000  0002990c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001f9ee  00000000  00000000  001c8eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002c80e  00000000  00000000  001e889f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e70  00000000  00000000  002150ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005c08  00000000  00000000  00217f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004dbdd  00000000  00000000  0021db25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00054851  00000000  00000000  0026b702  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001117cd  00000000  00000000  002bff53  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000edd4  00000000  00000000  003d1720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f852 	bl	d90da <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f857 	bl	d90f0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003bdf8 	.word	0x2003bdf8
   d404c:	000d9854 	.word	0x000d9854
   d4050:	2003be84 	.word	0x2003be84
   d4054:	2003be84 	.word	0x2003be84
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 f9af 	bl	d73c0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9844 	.word	0x000d9844
   d4084:	000d97c4 	.word	0x000d97c4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b944 	b.w	d4314 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fd17 	bl	d4ac0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 b955 	b.w	d7344 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 be77 	b.w	d6d8c <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 be7d 	b.w	d6d9c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 be7b 	b.w	d6d9c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40b6:	4770      	bx	lr

000d40b8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40ba:	4602      	mov	r2, r0
   d40bc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40be:	7913      	ldrb	r3, [r2, #4]
   d40c0:	6895      	ldr	r5, [r2, #8]
   d40c2:	b133      	cbz	r3, d40d2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40c4:	b93d      	cbnz	r5, d40d6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40c6:	490c      	ldr	r1, [pc, #48]	; (d40f8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40c8:	b004      	add	sp, #16
   d40ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40ce:	f003 b811 	b.w	d70f4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40d2:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40d4:	e000      	b.n	d40d8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40d6:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40d8:	7b16      	ldrb	r6, [r2, #12]
   d40da:	4c0a      	ldr	r4, [pc, #40]	; (d4104 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40dc:	490a      	ldr	r1, [pc, #40]	; (d4108 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40de:	7b52      	ldrb	r2, [r2, #13]
   d40e0:	9202      	str	r2, [sp, #8]
   d40e2:	2e01      	cmp	r6, #1
   d40e4:	bf08      	it	eq
   d40e6:	4621      	moveq	r1, r4
   d40e8:	9101      	str	r1, [sp, #4]
   d40ea:	9500      	str	r5, [sp, #0]
   d40ec:	4a07      	ldr	r2, [pc, #28]	; (d410c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d40ee:	2100      	movs	r1, #0
   d40f0:	f003 f843 	bl	d717a <_ZN5Print11printf_implEbPKcz>
  }
   d40f4:	b004      	add	sp, #16
   d40f6:	bd70      	pop	{r4, r5, r6, pc}
   d40f8:	000d91f1 	.word	0x000d91f1
   d40fc:	000d959c 	.word	0x000d959c
   d4100:	000d91e0 	.word	0x000d91e0
   d4104:	000d91e9 	.word	0x000d91e9
   d4108:	000d91ed 	.word	0x000d91ed
   d410c:	000d9207 	.word	0x000d9207

000d4110 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4110:	3008      	adds	r0, #8
   d4112:	f001 bd2b 	b.w	d5b6c <_ZN7FatFile5writeEPKvj>

000d4116 <_ZN6SdFileD0Ev>:
   d4116:	b510      	push	{r4, lr}
   d4118:	212c      	movs	r1, #44	; 0x2c
   d411a:	4604      	mov	r4, r0
   d411c:	f004 f878 	bl	d8210 <_ZdlPvj>
   d4120:	4620      	mov	r0, r4
   d4122:	bd10      	pop	{r4, pc}

000d4124 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d4124:	b510      	push	{r4, lr}
   d4126:	4b03      	ldr	r3, [pc, #12]	; (d4134 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d4128:	6003      	str	r3, [r0, #0]
   d412a:	4604      	mov	r4, r0
   d412c:	f002 faa2 	bl	d6674 <_ZN10JsonWriterD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}
   d4134:	000d91d8 	.word	0x000d91d8

000d4138 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d4138:	b510      	push	{r4, lr}
   d413a:	4604      	mov	r4, r0
   d413c:	f7ff fff2 	bl	d4124 <_ZN16JsonWriterStaticILj256EED1Ev>
   d4140:	4620      	mov	r0, r4
   d4142:	f44f 7198 	mov.w	r1, #304	; 0x130
   d4146:	f004 f863 	bl	d8210 <_ZdlPvj>
   d414a:	4620      	mov	r0, r4
   d414c:	bd10      	pop	{r4, pc}

000d414e <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d414e:	b507      	push	{r0, r1, r2, lr}
   d4150:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4152:	2201      	movs	r2, #1
   d4154:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4158:	3008      	adds	r0, #8
   d415a:	4619      	mov	r1, r3
   d415c:	f001 fd06 	bl	d5b6c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4160:	b003      	add	sp, #12
   d4162:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4168 <_Z19getMicrophoneValuesv>:
  }
  Serial.printf("T1 = %i | T2 = %i | T3 = %i\n",T1, T2, T3);
}

void getMicrophoneValues()
{
   d4168:	b508      	push	{r3, lr}
  val1 = analogRead(micro1);
   d416a:	4b09      	ldr	r3, [pc, #36]	; (d4190 <_Z19getMicrophoneValuesv+0x28>)
   d416c:	8818      	ldrh	r0, [r3, #0]
   d416e:	f003 ffe9 	bl	d8144 <analogRead>
   d4172:	4b08      	ldr	r3, [pc, #32]	; (d4194 <_Z19getMicrophoneValuesv+0x2c>)
   d4174:	6018      	str	r0, [r3, #0]
  val2 = analogRead(micro2);
   d4176:	4b08      	ldr	r3, [pc, #32]	; (d4198 <_Z19getMicrophoneValuesv+0x30>)
   d4178:	8818      	ldrh	r0, [r3, #0]
   d417a:	f003 ffe3 	bl	d8144 <analogRead>
   d417e:	4b07      	ldr	r3, [pc, #28]	; (d419c <_Z19getMicrophoneValuesv+0x34>)
   d4180:	6018      	str	r0, [r3, #0]
  val3 = analogRead(micro3);
   d4182:	4b07      	ldr	r3, [pc, #28]	; (d41a0 <_Z19getMicrophoneValuesv+0x38>)
   d4184:	8818      	ldrh	r0, [r3, #0]
   d4186:	f003 ffdd 	bl	d8144 <analogRead>
   d418a:	4b06      	ldr	r3, [pc, #24]	; (d41a4 <_Z19getMicrophoneValuesv+0x3c>)
   d418c:	6018      	str	r0, [r3, #0]
   d418e:	bd08      	pop	{r3, pc}
   d4190:	2003be08 	.word	0x2003be08
   d4194:	2003be94 	.word	0x2003be94
   d4198:	2003be0c 	.word	0x2003be0c
   d419c:	2003bec4 	.word	0x2003bec4
   d41a0:	2003be10 	.word	0x2003be10
   d41a4:	2003becc 	.word	0x2003becc

000d41a8 <_Z16getTimingOfSoundv>:
     Serial.printf("mic1 = %i | mic2 = %i | mic3 = %i | Time = %i\n",val1,val2,val3);
   }
}

void getTimingOfSound()
{
   d41a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  delay(2000);
   d41ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  T1 = 0;
   d41b0:	4c27      	ldr	r4, [pc, #156]	; (d4250 <_Z16getTimingOfSoundv+0xa8>)
  T2 = 0;
   d41b2:	4d28      	ldr	r5, [pc, #160]	; (d4254 <_Z16getTimingOfSoundv+0xac>)
  T3 = 0;
   d41b4:	4e28      	ldr	r6, [pc, #160]	; (d4258 <_Z16getTimingOfSoundv+0xb0>)
   }
}

void getTimingOfSound()
{
  delay(2000);
   d41b6:	f003 f876 	bl	d72a6 <delay>
  T1 = 0;
   d41ba:	2300      	movs	r3, #0
   d41bc:	6023      	str	r3, [r4, #0]
  T2 = 0;
   d41be:	602b      	str	r3, [r5, #0]
  T3 = 0;
   d41c0:	6033      	str	r3, [r6, #0]
  Serial.println("waiting for sound");
   d41c2:	f003 fcc1 	bl	d7b48 <_Z16_fetch_usbserialv>
   d41c6:	4925      	ldr	r1, [pc, #148]	; (d425c <_Z16getTimingOfSoundv+0xb4>)
   d41c8:	f002 ffab 	bl	d7122 <_ZN5Print7printlnEPKc>
  while((T1 == 0) || (T2 == 0) || (T3 == 0))
   d41cc:	46a0      	mov	r8, r4
   d41ce:	46a9      	mov	r9, r5
   d41d0:	4637      	mov	r7, r6
   d41d2:	6823      	ldr	r3, [r4, #0]
   d41d4:	b11b      	cbz	r3, d41de <_Z16getTimingOfSoundv+0x36>
   d41d6:	682b      	ldr	r3, [r5, #0]
   d41d8:	b10b      	cbz	r3, d41de <_Z16getTimingOfSoundv+0x36>
   d41da:	6833      	ldr	r3, [r6, #0]
   d41dc:	bb33      	cbnz	r3, d422c <_Z16getTimingOfSoundv+0x84>
  {
    getMicrophoneValues();
   d41de:	f7ff ffc3 	bl	d4168 <_Z19getMicrophoneValuesv>
    if((T1 == 0) && (val1 > threshold))
   d41e2:	6823      	ldr	r3, [r4, #0]
   d41e4:	b94b      	cbnz	r3, d41fa <_Z16getTimingOfSoundv+0x52>
   d41e6:	4b1e      	ldr	r3, [pc, #120]	; (d4260 <_Z16getTimingOfSoundv+0xb8>)
   d41e8:	681a      	ldr	r2, [r3, #0]
   d41ea:	4b1e      	ldr	r3, [pc, #120]	; (d4264 <_Z16getTimingOfSoundv+0xbc>)
   d41ec:	681b      	ldr	r3, [r3, #0]
   d41ee:	429a      	cmp	r2, r3
   d41f0:	dd03      	ble.n	d41fa <_Z16getTimingOfSoundv+0x52>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d41f2:	f002 fc2f 	bl	d6a54 <HAL_Timer_Get_Micro_Seconds>
    {
      T1 = micros();
   d41f6:	f8c8 0000 	str.w	r0, [r8]
    }
    if((T2 == 0) && (val2 > threshold))
   d41fa:	682b      	ldr	r3, [r5, #0]
   d41fc:	b94b      	cbnz	r3, d4212 <_Z16getTimingOfSoundv+0x6a>
   d41fe:	4b1a      	ldr	r3, [pc, #104]	; (d4268 <_Z16getTimingOfSoundv+0xc0>)
   d4200:	681a      	ldr	r2, [r3, #0]
   d4202:	4b18      	ldr	r3, [pc, #96]	; (d4264 <_Z16getTimingOfSoundv+0xbc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	429a      	cmp	r2, r3
   d4208:	dd03      	ble.n	d4212 <_Z16getTimingOfSoundv+0x6a>
   d420a:	f002 fc23 	bl	d6a54 <HAL_Timer_Get_Micro_Seconds>
    {
      T2 = micros();
   d420e:	f8c9 0000 	str.w	r0, [r9]
    }
    if((T3 == 0) && (val3 > threshold))
   d4212:	6833      	ldr	r3, [r6, #0]
   d4214:	2b00      	cmp	r3, #0
   d4216:	d1dc      	bne.n	d41d2 <_Z16getTimingOfSoundv+0x2a>
   d4218:	4b14      	ldr	r3, [pc, #80]	; (d426c <_Z16getTimingOfSoundv+0xc4>)
   d421a:	681a      	ldr	r2, [r3, #0]
   d421c:	4b11      	ldr	r3, [pc, #68]	; (d4264 <_Z16getTimingOfSoundv+0xbc>)
   d421e:	681b      	ldr	r3, [r3, #0]
   d4220:	429a      	cmp	r2, r3
   d4222:	ddd6      	ble.n	d41d2 <_Z16getTimingOfSoundv+0x2a>
   d4224:	f002 fc16 	bl	d6a54 <HAL_Timer_Get_Micro_Seconds>
    {
      T3 = micros();
   d4228:	6038      	str	r0, [r7, #0]
   d422a:	e7d2      	b.n	d41d2 <_Z16getTimingOfSoundv+0x2a>
    }
  }
  Serial.printf("T1 = %i | T2 = %i | T3 = %i\n",T1, T2, T3);
   d422c:	f003 fc8c 	bl	d7b48 <_Z16_fetch_usbserialv>
   d4230:	4b09      	ldr	r3, [pc, #36]	; (d4258 <_Z16getTimingOfSoundv+0xb0>)
   d4232:	4a0f      	ldr	r2, [pc, #60]	; (d4270 <_Z16getTimingOfSoundv+0xc8>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	9301      	str	r3, [sp, #4]
   d4238:	4b06      	ldr	r3, [pc, #24]	; (d4254 <_Z16getTimingOfSoundv+0xac>)
   d423a:	681b      	ldr	r3, [r3, #0]
   d423c:	9300      	str	r3, [sp, #0]
   d423e:	4b04      	ldr	r3, [pc, #16]	; (d4250 <_Z16getTimingOfSoundv+0xa8>)
   d4240:	2100      	movs	r1, #0
   d4242:	681b      	ldr	r3, [r3, #0]
   d4244:	f002 ff99 	bl	d717a <_ZN5Print11printf_implEbPKcz>
}
   d4248:	b003      	add	sp, #12
   d424a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d424e:	bf00      	nop
   d4250:	2003be98 	.word	0x2003be98
   d4254:	2003be9c 	.word	0x2003be9c
   d4258:	2003bea0 	.word	0x2003bea0
   d425c:	000d9254 	.word	0x000d9254
   d4260:	2003be94 	.word	0x2003be94
   d4264:	2003be14 	.word	0x2003be14
   d4268:	2003bec4 	.word	0x2003bec4
   d426c:	2003becc 	.word	0x2003becc
   d4270:	000d9266 	.word	0x000d9266

000d4274 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>:
    pr->print(F("error: "));
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
   d4274:	b508      	push	{r3, lr}
   d4276:	4604      	mov	r4, r0
    initErrorHalt(&Serial);
   d4278:	f003 fc66 	bl	d7b48 <_Z16_fetch_usbserialv>
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d427c:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
    initErrorHalt(&Serial);
   d4280:	4605      	mov	r5, r0
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d4282:	b32b      	cbz	r3, d42d0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5c>
      pr->println(F("Can't access SD card. Do not reformat."));
   d4284:	491c      	ldr	r1, [pc, #112]	; (d42f8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x84>)
   d4286:	f002 ff56 	bl	d7136 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
   d428a:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d428e:	2b20      	cmp	r3, #32
   d4290:	d103      	bne.n	d429a <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x26>
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
   d4292:	491a      	ldr	r1, [pc, #104]	; (d42fc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x88>)
   d4294:	4628      	mov	r0, r5
   d4296:	f002 ff4e 	bl	d7136 <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  /** %Print any SD error code.
   * \param[in] pr Print device.
   */
  void errorPrint(Print* pr) {
    if (!cardErrorCode()) {
   d429a:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d429e:	b33b      	cbz	r3, d42f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>
      return;
    }
    pr->print(F("SD errorCode: 0X"));
   d42a0:	4917      	ldr	r1, [pc, #92]	; (d4300 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x8c>)
   d42a2:	4628      	mov	r0, r5
   d42a4:	f002 ff2d 	bl	d7102 <_ZN5Print5printEPK19__FlashStringHelper>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d42a8:	2210      	movs	r2, #16
   d42aa:	f894 1460 	ldrb.w	r1, [r4, #1120]	; 0x460
   d42ae:	4628      	mov	r0, r5
   d42b0:	f002 ff43 	bl	d713a <_ZN5Print11printNumberEmh>
    pr->print(cardErrorCode(), HEX);
    pr->print(F(",0X"));
   d42b4:	4913      	ldr	r1, [pc, #76]	; (d4304 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x90>)
   d42b6:	4628      	mov	r0, r5
   d42b8:	f002 ff23 	bl	d7102 <_ZN5Print5printEPK19__FlashStringHelper>
   d42bc:	2210      	movs	r2, #16
   d42be:	f894 1469 	ldrb.w	r1, [r4, #1129]	; 0x469
   d42c2:	4628      	mov	r0, r5
   d42c4:	f002 ff39 	bl	d713a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d42c8:	4628      	mov	r0, r5
   d42ca:	f002 ff1e 	bl	d710a <_ZN5Print7printlnEv>
   d42ce:	e00f      	b.n	d42f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>
      pr->println(F("Can't access SD card. Do not reformat."));
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
      }
      errorPrint(pr);
    } else if (vol()->fatType() == 0) {
   d42d0:	79e3      	ldrb	r3, [r4, #7]
   d42d2:	b91b      	cbnz	r3, d42dc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x68>
      pr->println(F("Invalid format, reformat SD."));
   d42d4:	490c      	ldr	r1, [pc, #48]	; (d4308 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x94>)
   d42d6:	f002 ff2e 	bl	d7136 <_ZN5Print7printlnEPK19__FlashStringHelper>
   d42da:	e009      	b.n	d42f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>
    } else if (!vwd()->isOpen()) {
   d42dc:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d42e0:	b91b      	cbnz	r3, d42ea <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x76>
      pr->println(F("Can't open root directory."));
   d42e2:	490a      	ldr	r1, [pc, #40]	; (d430c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x98>)
   d42e4:	f002 ff27 	bl	d7136 <_ZN5Print7printlnEPK19__FlashStringHelper>
   d42e8:	e002      	b.n	d42f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>
    } else {
      pr->println(F("No error found."));
   d42ea:	4909      	ldr	r1, [pc, #36]	; (d4310 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x9c>)
   d42ec:	f002 ff23 	bl	d7136 <_ZN5Print7printlnEPK19__FlashStringHelper>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d42f0:	f002 fbc8 	bl	d6a84 <os_thread_yield>
   d42f4:	e7fc      	b.n	d42f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>
   d42f6:	bf00      	nop
   d42f8:	000d9283 	.word	0x000d9283
   d42fc:	000d92aa 	.word	0x000d92aa
   d4300:	000d92da 	.word	0x000d92da
   d4304:	000d92eb 	.word	0x000d92eb
   d4308:	000d92ef 	.word	0x000d92ef
   d430c:	000d930c 	.word	0x000d930c
   d4310:	000d9327 	.word	0x000d9327

000d4314 <setup>:
float locationX, locationY;                   //Utilizing map-function to displah location using neopixels like on a quadrant
float pointX, pointY;
float longitude, latitude;

// setup() runs once, when the device is first turned on.
void setup() {
   d4314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d4316:	f003 fc17 	bl	d7b48 <_Z16_fetch_usbserialv>
   d431a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d431e:	f003 fc07 	bl	d7b30 <_ZN9USBSerial5beginEl>

  pixelX.begin();
   d4322:	482c      	ldr	r0, [pc, #176]	; (d43d4 <setup+0xc0>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4324:	4c2c      	ldr	r4, [pc, #176]	; (d43d8 <setup+0xc4>)
   d4326:	f000 fc68 	bl	d4bfa <_ZN17Adafruit_NeoPixel5beginEv>
  pixelY.begin();
   d432a:	482c      	ldr	r0, [pc, #176]	; (d43dc <setup+0xc8>)
   d432c:	f000 fc65 	bl	d4bfa <_ZN17Adafruit_NeoPixel5beginEv>
  pixelX.clear();
   d4330:	4828      	ldr	r0, [pc, #160]	; (d43d4 <setup+0xc0>)
   d4332:	f000 fe6a 	bl	d500a <_ZN17Adafruit_NeoPixel5clearEv>
  pixelY.clear();
   d4336:	4829      	ldr	r0, [pc, #164]	; (d43dc <setup+0xc8>)
   d4338:	f000 fe67 	bl	d500a <_ZN17Adafruit_NeoPixel5clearEv>

  pinMode(micro1, INPUT);
   d433c:	4b28      	ldr	r3, [pc, #160]	; (d43e0 <setup+0xcc>)
   d433e:	2100      	movs	r1, #0
   d4340:	8818      	ldrh	r0, [r3, #0]
   d4342:	f003 fed5 	bl	d80f0 <pinMode>
  pinMode(micro2, INPUT);
   d4346:	4b27      	ldr	r3, [pc, #156]	; (d43e4 <setup+0xd0>)
   d4348:	2100      	movs	r1, #0
   d434a:	8818      	ldrh	r0, [r3, #0]
   d434c:	f003 fed0 	bl	d80f0 <pinMode>
  pinMode(micro3, INPUT);
   d4350:	4b25      	ldr	r3, [pc, #148]	; (d43e8 <setup+0xd4>)
   d4352:	2100      	movs	r1, #0
   d4354:	8818      	ldrh	r0, [r3, #0]
   d4356:	f003 fecb 	bl	d80f0 <pinMode>
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d435a:	4b24      	ldr	r3, [pc, #144]	; (d43ec <setup+0xd8>)
   d435c:	4a24      	ldr	r2, [pc, #144]	; (d43f0 <setup+0xdc>)
   d435e:	9300      	str	r3, [sp, #0]
   d4360:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d4364:	2300      	movs	r3, #0
   d4366:	f88d 3004 	strb.w	r3, [sp, #4]
   d436a:	9202      	str	r2, [sp, #8]
   d436c:	2501      	movs	r5, #1
   d436e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4372:	220e      	movs	r2, #14
   d4374:	466b      	mov	r3, sp
   d4376:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d437a:	4630      	mov	r0, r6
   d437c:	f88d 500c 	strb.w	r5, [sp, #12]
   d4380:	f001 ff3c 	bl	d61fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4384:	b310      	cbz	r0, d43cc <setup+0xb8>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d4386:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d438a:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d438c:	f001 fb98 	bl	d5ac0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4390:	4629      	mov	r1, r5
   d4392:	4620      	mov	r0, r4
   d4394:	f001 fddb 	bl	d5f4e <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4398:	4601      	mov	r1, r0
   d439a:	b140      	cbz	r0, d43ae <setup+0x9a>
   d439c:	4c0e      	ldr	r4, [pc, #56]	; (d43d8 <setup+0xc4>)
   d439e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d43a2:	4621      	mov	r1, r4
   d43a4:	4628      	mov	r0, r5
   d43a6:	f001 f9b6 	bl	d5716 <_ZN7FatFile8openRootEP9FatVolume>
   d43aa:	b178      	cbz	r0, d43cc <setup+0xb8>
   d43ac:	e005      	b.n	d43ba <setup+0xa6>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d43ae:	4620      	mov	r0, r4
   d43b0:	f001 fdcd 	bl	d5f4e <_ZN9FatVolume4initEh>
   d43b4:	2800      	cmp	r0, #0
   d43b6:	d1f1      	bne.n	d439c <setup+0x88>
   d43b8:	e008      	b.n	d43cc <setup+0xb8>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d43ba:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d43be:	f013 0f70 	tst.w	r3, #112	; 0x70
   d43c2:	d003      	beq.n	d43cc <setup+0xb8>
      return false;
    }
    m_cwd = dir;
   d43c4:	4b0b      	ldr	r3, [pc, #44]	; (d43f4 <setup+0xe0>)
   d43c6:	601d      	str	r5, [r3, #0]
  if (BASE_NAME_SIZE > 6) 
  {
    Serial.println("FILE_BASE_NAME too long");
    while(1);
  }
}
   d43c8:	b004      	add	sp, #16
   d43ca:	bd70      	pop	{r4, r5, r6, pc}
  pinMode(micro2, INPUT);
  pinMode(micro3, INPUT);

  if (!sd.begin(chipSelect, SD_SCK_MHZ(50))) 
  {
    sd.initErrorHalt();  
   d43cc:	4802      	ldr	r0, [pc, #8]	; (d43d8 <setup+0xc4>)
   d43ce:	f7ff ff51 	bl	d4274 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>
   d43d2:	bf00      	nop
   d43d4:	2003bed0 	.word	0x2003bed0
   d43d8:	2003bf24 	.word	0x2003bf24
   d43dc:	2003bea8 	.word	0x2003bea8
   d43e0:	2003be08 	.word	0x2003be08
   d43e4:	2003be0c 	.word	0x2003be0c
   d43e8:	2003be10 	.word	0x2003be10
   d43ec:	000d91b4 	.word	0x000d91b4
   d43f0:	02faf080 	.word	0x02faf080
   d43f4:	2003e3cc 	.word	0x2003e3cc

000d43f8 <_ZN5Print6printfIIffEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d43f8:	b530      	push	{r4, r5, lr}
   d43fa:	4604      	mov	r4, r0
   d43fc:	b087      	sub	sp, #28
    {
        return this->printf_impl(false, format, args...);
   d43fe:	ee10 0a90 	vmov	r0, s1
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4402:	460d      	mov	r5, r1
   d4404:	ed8d 0a05 	vstr	s0, [sp, #20]
    {
        return this->printf_impl(false, format, args...);
   d4408:	f004 faf6 	bl	d89f8 <__aeabi_f2d>
   d440c:	ed9d 0a05 	vldr	s0, [sp, #20]
   d4410:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4414:	ee10 0a10 	vmov	r0, s0
   d4418:	f004 faee 	bl	d89f8 <__aeabi_f2d>
   d441c:	462a      	mov	r2, r5
   d441e:	e9cd 0100 	strd	r0, r1, [sp]
   d4422:	2100      	movs	r1, #0
   d4424:	4620      	mov	r0, r4
   d4426:	f002 fea8 	bl	d717a <_ZN5Print11printf_implEbPKcz>
    }
   d442a:	b007      	add	sp, #28
   d442c:	bd30      	pop	{r4, r5, pc}
	...

000d4430 <_Z23getTriangulationOfSoundv>:
  val3 = analogRead(micro3);
  //Serial.printf("Microphone 1 = %i | Microphone 2 = %i | Microphone 3 = %i\n", val1, val2, val3);
}

void getTriangulationOfSound()
{
   d4430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4434:	ed2d 8b04 	vpush	{d8-d9}
   d4438:	b089      	sub	sp, #36	; 0x24
  getTimingOfSound();
   d443a:	f7ff feb5 	bl	d41a8 <_Z16getTimingOfSoundv>
  A = ((T2 - T1)/1000000.0)*343;               
   d443e:	4b78      	ldr	r3, [pc, #480]	; (d4620 <_Z23getTriangulationOfSoundv+0x1f0>)
   d4440:	4d78      	ldr	r5, [pc, #480]	; (d4624 <_Z23getTriangulationOfSoundv+0x1f4>)
   d4442:	681c      	ldr	r4, [r3, #0]
   d4444:	4b78      	ldr	r3, [pc, #480]	; (d4628 <_Z23getTriangulationOfSoundv+0x1f8>)
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d4446:	f8df a204 	ldr.w	sl, [pc, #516]	; d464c <_Z23getTriangulationOfSoundv+0x21c>
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
   d444a:	6818      	ldr	r0, [r3, #0]
  B = ((T3 - T1)/1000000.0)*343; 
   d444c:	4e77      	ldr	r6, [pc, #476]	; (d462c <_Z23getTriangulationOfSoundv+0x1fc>)
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d444e:	4f78      	ldr	r7, [pc, #480]	; (d4630 <_Z23getTriangulationOfSoundv+0x200>)
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d4450:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d4650 <_Z23getTriangulationOfSoundv+0x220>
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
   d4454:	1b00      	subs	r0, r0, r4
   d4456:	f004 fabd 	bl	d89d4 <__aeabi_i2d>
   d445a:	a36d      	add	r3, pc, #436	; (adr r3, d4610 <_Z23getTriangulationOfSoundv+0x1e0>)
   d445c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4460:	f004 fc48 	bl	d8cf4 <__aeabi_ddiv>
   d4464:	a36c      	add	r3, pc, #432	; (adr r3, d4618 <_Z23getTriangulationOfSoundv+0x1e8>)
   d4466:	e9d3 2300 	ldrd	r2, r3, [r3]
   d446a:	f004 fb19 	bl	d8aa0 <__aeabi_dmul>
   d446e:	f004 fdc7 	bl	d9000 <__aeabi_d2f>
  B = ((T3 - T1)/1000000.0)*343; 
   d4472:	4b70      	ldr	r3, [pc, #448]	; (d4634 <_Z23getTriangulationOfSoundv+0x204>)
}

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
   d4474:	6028      	str	r0, [r5, #0]
   d4476:	ee09 0a10 	vmov	s18, r0
  B = ((T3 - T1)/1000000.0)*343; 
   d447a:	6818      	ldr	r0, [r3, #0]
   d447c:	1b00      	subs	r0, r0, r4
   d447e:	f004 faa9 	bl	d89d4 <__aeabi_i2d>
   d4482:	a363      	add	r3, pc, #396	; (adr r3, d4610 <_Z23getTriangulationOfSoundv+0x1e0>)
   d4484:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4488:	f004 fc34 	bl	d8cf4 <__aeabi_ddiv>
   d448c:	a362      	add	r3, pc, #392	; (adr r3, d4618 <_Z23getTriangulationOfSoundv+0x1e8>)
   d448e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4492:	f004 fb05 	bl	d8aa0 <__aeabi_dmul>
   d4496:	f004 fdb3 	bl	d9000 <__aeabi_d2f>
   d449a:	ee08 0a90 	vmov	s17, r0
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d449e:	ee28 7aa8 	vmul.f32	s14, s17, s17
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44a2:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d44a6:	eef0 6a47 	vmov.f32	s13, s14
   d44aa:	eee9 6a09 	vfma.f32	s13, s18, s18
   d44ae:	4c62      	ldr	r4, [pc, #392]	; (d4638 <_Z23getTriangulationOfSoundv+0x208>)

void getTriangulationOfSound()
{
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
   d44b0:	6030      	str	r0, [r6, #0]
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d44b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44b6:	eeb0 6a48 	vmov.f32	s12, s16
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d44ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44be:	eea9 6a09 	vfma.f32	s12, s18, s18
   d44c2:	ee77 7a67 	vsub.f32	s15, s14, s15
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d44c6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44ca:	ee68 8aa7 	vmul.f32	s17, s17, s15
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d44ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44d2:	eee9 8a06 	vfma.f32	s17, s18, s12
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d44d6:	ee67 7a87 	vmul.f32	s15, s15, s14
   d44da:	ee26 6a06 	vmul.f32	s12, s12, s12
  getTimingOfSound();
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
   d44de:	edc4 6a00 	vstr	s13, [r4]
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d44e2:	eee6 7a07 	vfma.f32	s15, s12, s14
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d44e6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   d44ea:	ee66 6a87 	vmul.f32	s13, s13, s14
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
  c = (sq(sq(A)-1)/4) + (sq(sq(B)-1)/4);  
   d44ee:	edca 7a00 	vstr	s15, [sl]
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d44f2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
  A = ((T2 - T1)/1000000.0)*343;               
  B = ((T3 - T1)/1000000.0)*343; 
  //A = -0.196;
  //B = 0.473;              
  a = (sq(A) + sq(B)-1);            
  b = (((sq(A)-1)*A) + ((sq(B)-1)*B));      
   d44f6:	edc7 8a00 	vstr	s17, [r7]
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d44fa:	eee8 7aa8 	vfma.f32	s15, s17, s17
   d44fe:	ee17 0a90 	vmov	r0, s15
   d4502:	f004 fa79 	bl	d89f8 <__aeabi_f2d>
   d4506:	ec41 0b10 	vmov	d0, r0, r1
   d450a:	f003 ffdf 	bl	d84cc <sqrt>
   d450e:	eef1 7a68 	vneg.f32	s15, s17
   d4512:	ec53 2b10 	vmov	r2, r3, d0
   d4516:	ee17 0a90 	vmov	r0, s15
   d451a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d451e:	f004 fa6b 	bl	d89f8 <__aeabi_f2d>
   d4522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d4526:	f004 f907 	bl	d8738 <__aeabi_dsub>
   d452a:	edd4 7a00 	vldr	s15, [r4]
   d452e:	ee77 7aa7 	vadd.f32	s15, s15, s15
   d4532:	4680      	mov	r8, r0
   d4534:	ee17 0a90 	vmov	r0, s15
   d4538:	4689      	mov	r9, r1
   d453a:	f004 fa5d 	bl	d89f8 <__aeabi_f2d>
   d453e:	460b      	mov	r3, r1
   d4540:	4602      	mov	r2, r0
   d4542:	4649      	mov	r1, r9
   d4544:	4640      	mov	r0, r8
   d4546:	f004 fbd5 	bl	d8cf4 <__aeabi_ddiv>
   d454a:	f004 fd59 	bl	d9000 <__aeabi_d2f>
  X = -((A*T) + ((sq(A)-1)/2));
   d454e:	edd5 6a00 	vldr	s13, [r5]
   d4552:	f8df 8100 	ldr.w	r8, [pc, #256]	; d4654 <_Z23getTriangulationOfSoundv+0x224>
  Y = -((B*T) + ((sq(B)-1)/2));
   d4556:	f8df 9100 	ldr.w	r9, [pc, #256]	; d4658 <_Z23getTriangulationOfSoundv+0x228>
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d455a:	f8cb 0000 	str.w	r0, [fp]
  X = -((A*T) + ((sq(A)-1)/2));
   d455e:	eef0 7a48 	vmov.f32	s15, s16
   d4562:	eee6 7aa6 	vfma.f32	s15, s13, s13
   d4566:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  //A = -0.196;
  //B = 0.473;
  //a = -0.737;
 // b = -0.178;
  //c = 0.381;
  T = ((-b-sqrt(sq(b)-(4*a*c)))/(2*a)); 
   d456a:	ee07 0a10 	vmov	s14, r0
  X = -((A*T) + ((sq(A)-1)/2));
   d456e:	ee67 7a86 	vmul.f32	s15, s15, s12
   d4572:	eee7 7a26 	vfma.f32	s15, s14, s13
   d4576:	eef1 7a67 	vneg.f32	s15, s15
   d457a:	edc8 7a00 	vstr	s15, [r8]
  Y = -((B*T) + ((sq(B)-1)/2));
   d457e:	edd6 7a00 	vldr	s15, [r6]
   d4582:	eea7 8aa7 	vfma.f32	s16, s15, s15
   d4586:	ee28 8a06 	vmul.f32	s16, s16, s12
   d458a:	eea7 8a27 	vfma.f32	s16, s14, s15
   d458e:	eeb1 8a48 	vneg.f32	s16, s16
   d4592:	ed89 8a00 	vstr	s16, [r9]
  Serial.printf("A = %0.6f | B = %0.6f\n", A, B);
   d4596:	f003 fad7 	bl	d7b48 <_Z16_fetch_usbserialv>
   d459a:	edd6 0a00 	vldr	s1, [r6]
   d459e:	ed95 0a00 	vldr	s0, [r5]
   d45a2:	4926      	ldr	r1, [pc, #152]	; (d463c <_Z23getTriangulationOfSoundv+0x20c>)
   d45a4:	f7ff ff28 	bl	d43f8 <_ZN5Print6printfIIffEEEjPKcDpT_>
  Serial.printf("T = %0.2f\n", T);
   d45a8:	f003 face 	bl	d7b48 <_Z16_fetch_usbserialv>
   d45ac:	4605      	mov	r5, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45ae:	f8db 0000 	ldr.w	r0, [fp]
   d45b2:	f004 fa21 	bl	d89f8 <__aeabi_f2d>
   d45b6:	4a22      	ldr	r2, [pc, #136]	; (d4640 <_Z23getTriangulationOfSoundv+0x210>)
   d45b8:	e9cd 0100 	strd	r0, r1, [sp]
   d45bc:	2100      	movs	r1, #0
   d45be:	4628      	mov	r0, r5
   d45c0:	f002 fddb 	bl	d717a <_ZN5Print11printf_implEbPKcz>
  Serial.printf("X = %0.2f | Y = %0.2f\n", X, Y);
   d45c4:	f003 fac0 	bl	d7b48 <_Z16_fetch_usbserialv>
   d45c8:	edd9 0a00 	vldr	s1, [r9]
   d45cc:	ed98 0a00 	vldr	s0, [r8]
   d45d0:	491c      	ldr	r1, [pc, #112]	; (d4644 <_Z23getTriangulationOfSoundv+0x214>)
   d45d2:	f7ff ff11 	bl	d43f8 <_ZN5Print6printfIIffEEEjPKcDpT_>
  Serial.printf("a = %0.2f | b = %0.2f | c = %0.2f\n",a,b,c);
   d45d6:	f003 fab7 	bl	d7b48 <_Z16_fetch_usbserialv>
   d45da:	4605      	mov	r5, r0
   d45dc:	f8da 0000 	ldr.w	r0, [sl]
   d45e0:	f004 fa0a 	bl	d89f8 <__aeabi_f2d>
   d45e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d45e8:	6838      	ldr	r0, [r7, #0]
   d45ea:	f004 fa05 	bl	d89f8 <__aeabi_f2d>
   d45ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d45f2:	6820      	ldr	r0, [r4, #0]
   d45f4:	f004 fa00 	bl	d89f8 <__aeabi_f2d>
   d45f8:	4a13      	ldr	r2, [pc, #76]	; (d4648 <_Z23getTriangulationOfSoundv+0x218>)
   d45fa:	e9cd 0100 	strd	r0, r1, [sp]
   d45fe:	2100      	movs	r1, #0
   d4600:	4628      	mov	r0, r5
   d4602:	f002 fdba 	bl	d717a <_ZN5Print11printf_implEbPKcz>
}
   d4606:	b009      	add	sp, #36	; 0x24
   d4608:	ecbd 8b04 	vpop	{d8-d9}
   d460c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4610:	00000000 	.word	0x00000000
   d4614:	412e8480 	.word	0x412e8480
   d4618:	00000000 	.word	0x00000000
   d461c:	40757000 	.word	0x40757000
   d4620:	2003be98 	.word	0x2003be98
   d4624:	2003e3c0 	.word	0x2003e3c0
   d4628:	2003be9c 	.word	0x2003be9c
   d462c:	2003e3c4 	.word	0x2003e3c4
   d4630:	2003bee8 	.word	0x2003bee8
   d4634:	2003bea0 	.word	0x2003bea0
   d4638:	2003bee4 	.word	0x2003bee4
   d463c:	000d9337 	.word	0x000d9337
   d4640:	000d934e 	.word	0x000d934e
   d4644:	000d9359 	.word	0x000d9359
   d4648:	000d9370 	.word	0x000d9370
   d464c:	2003bebc 	.word	0x2003bebc
   d4650:	2003bec0 	.word	0x2003bec0
   d4654:	2003c3b4 	.word	0x2003c3b4
   d4658:	2003bec8 	.word	0x2003bec8
   d465c:	00000000 	.word	0x00000000

000d4660 <_Z6SDCardv>:
    }
  }
}

void SDCard()
{
   d4660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4664:	b08b      	sub	sp, #44	; 0x2c
  Serial.printf("Starting Data Logging \n");
   d4666:	f003 fa6f 	bl	d7b48 <_Z16_fetch_usbserialv>
   d466a:	4a53      	ldr	r2, [pc, #332]	; (d47b8 <_Z6SDCardv+0x158>)
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d466c:	4c53      	ldr	r4, [pc, #332]	; (d47bc <_Z6SDCardv+0x15c>)
   d466e:	2100      	movs	r1, #0
   d4670:	f002 fd83 	bl	d717a <_ZN5Print11printf_implEbPKcz>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4674:	2500      	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4676:	2300      	movs	r3, #0
   d4678:	4a50      	ldr	r2, [pc, #320]	; (d47bc <_Z6SDCardv+0x15c>)
   d467a:	4951      	ldr	r1, [pc, #324]	; (d47c0 <_Z6SDCardv+0x160>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d467c:	f88d 5004 	strb.w	r5, [sp, #4]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4680:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4682:	f88d 5005 	strb.w	r5, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4686:	f001 fa22 	bl	d5ace <_ZN7FatFile4openEPS_PKci>

  while (sd.exists(fileName)) 
   d468a:	b198      	cbz	r0, d46b4 <_Z6SDCardv+0x54>
  {
    if (fileName[BASE_NAME_SIZE + 1] != '9') 
   d468c:	7963      	ldrb	r3, [r4, #5]
   d468e:	2b39      	cmp	r3, #57	; 0x39
   d4690:	d002      	beq.n	d4698 <_Z6SDCardv+0x38>
    {
      fileName[BASE_NAME_SIZE + 1]++;
   d4692:	3301      	adds	r3, #1
   d4694:	7163      	strb	r3, [r4, #5]
   d4696:	e7ee      	b.n	d4676 <_Z6SDCardv+0x16>
    } 
    else if (fileName[BASE_NAME_SIZE] != '9') 
   d4698:	7923      	ldrb	r3, [r4, #4]
   d469a:	2b39      	cmp	r3, #57	; 0x39
   d469c:	d004      	beq.n	d46a8 <_Z6SDCardv+0x48>
    {
      fileName[BASE_NAME_SIZE + 1] = '0';
   d469e:	2230      	movs	r2, #48	; 0x30
      fileName[BASE_NAME_SIZE]++;
   d46a0:	3301      	adds	r3, #1
    {
      fileName[BASE_NAME_SIZE + 1]++;
    } 
    else if (fileName[BASE_NAME_SIZE] != '9') 
    {
      fileName[BASE_NAME_SIZE + 1] = '0';
   d46a2:	7162      	strb	r2, [r4, #5]
      fileName[BASE_NAME_SIZE]++;
   d46a4:	7123      	strb	r3, [r4, #4]
   d46a6:	e7e6      	b.n	d4676 <_Z6SDCardv+0x16>
    } 
    else 
    {
      Serial.println("Can't create file name");
   d46a8:	f003 fa4e 	bl	d7b48 <_Z16_fetch_usbserialv>
   d46ac:	4945      	ldr	r1, [pc, #276]	; (d47c4 <_Z6SDCardv+0x164>)
   d46ae:	f002 fd38 	bl	d7122 <_ZN5Print7printlnEPKc>
   d46b2:	e7fe      	b.n	d46b2 <_Z6SDCardv+0x52>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d46b4:	4944      	ldr	r1, [pc, #272]	; (d47c8 <_Z6SDCardv+0x168>)
   d46b6:	4a41      	ldr	r2, [pc, #260]	; (d47bc <_Z6SDCardv+0x15c>)
   d46b8:	6809      	ldr	r1, [r1, #0]
   d46ba:	4844      	ldr	r0, [pc, #272]	; (d47cc <_Z6SDCardv+0x16c>)
   d46bc:	f640 2301 	movw	r3, #2561	; 0xa01
   d46c0:	f001 fa05 	bl	d5ace <_ZN7FatFile4openEPS_PKci>
      while(1);
    }
  }

  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) 
   d46c4:	b920      	cbnz	r0, d46d0 <_Z6SDCardv+0x70>
  {
    Serial.println("file.open");
   d46c6:	f003 fa3f 	bl	d7b48 <_Z16_fetch_usbserialv>
   d46ca:	4941      	ldr	r1, [pc, #260]	; (d47d0 <_Z6SDCardv+0x170>)
   d46cc:	f002 fd29 	bl	d7122 <_ZN5Print7printlnEPKc>
  }
  Serial.printf("Logging to: %s \n",fileName);
   d46d0:	f003 fa3a 	bl	d7b48 <_Z16_fetch_usbserialv>
   d46d4:	4b39      	ldr	r3, [pc, #228]	; (d47bc <_Z6SDCardv+0x15c>)
   d46d6:	4a3f      	ldr	r2, [pc, #252]	; (d47d4 <_Z6SDCardv+0x174>)

  //For Loop here for array capturing sound
  if(val1 > threshold)
   d46d8:	4e3f      	ldr	r6, [pc, #252]	; (d47d8 <_Z6SDCardv+0x178>)
   d46da:	4c40      	ldr	r4, [pc, #256]	; (d47dc <_Z6SDCardv+0x17c>)
   d46dc:	2100      	movs	r1, #0
   d46de:	f002 fd4c 	bl	d717a <_ZN5Print11printf_implEbPKcz>
   d46e2:	4b3f      	ldr	r3, [pc, #252]	; (d47e0 <_Z6SDCardv+0x180>)
   d46e4:	6832      	ldr	r2, [r6, #0]
   d46e6:	681b      	ldr	r3, [r3, #0]
   d46e8:	429a      	cmp	r2, r3
   d46ea:	dd32      	ble.n	d4752 <_Z6SDCardv+0xf2>
  {
    for(i = 0 ; i < arraySize ; i++)
    {
      while(micros()-lastTime < 500)
   d46ec:	4f3d      	ldr	r7, [pc, #244]	; (d47e4 <_Z6SDCardv+0x184>)
  Serial.printf("Logging to: %s \n",fileName);

  //For Loop here for array capturing sound
  if(val1 > threshold)
  {
    for(i = 0 ; i < arraySize ; i++)
   d46ee:	2300      	movs	r3, #0
   d46f0:	6023      	str	r3, [r4, #0]
    {
      while(micros()-lastTime < 500)
   d46f2:	46b8      	mov	r8, r7
  Serial.printf("Logging to: %s \n",fileName);

  //For Loop here for array capturing sound
  if(val1 > threshold)
  {
    for(i = 0 ; i < arraySize ; i++)
   d46f4:	6823      	ldr	r3, [r4, #0]
   d46f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   d46fa:	da2a      	bge.n	d4752 <_Z6SDCardv+0xf2>
   d46fc:	f002 f9aa 	bl	d6a54 <HAL_Timer_Get_Micro_Seconds>
    {
      while(micros()-lastTime < 500)
   d4700:	683b      	ldr	r3, [r7, #0]
   d4702:	1ac0      	subs	r0, r0, r3
   d4704:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4708:	d3f8      	bcc.n	d46fc <_Z6SDCardv+0x9c>
   d470a:	f002 f9a3 	bl	d6a54 <HAL_Timer_Get_Micro_Seconds>
      {
        //do nothing
      }
      lastTime = micros();
   d470e:	f8c8 0000 	str.w	r0, [r8]
      getMicrophoneValues();
   d4712:	f7ff fd29 	bl	d4168 <_Z19getMicrophoneValuesv>
      soundWaveArray[i][0] = micros()/1000000.0;
   d4716:	f8d4 9000 	ldr.w	r9, [r4]
   d471a:	4d33      	ldr	r5, [pc, #204]	; (d47e8 <_Z6SDCardv+0x188>)
   d471c:	f002 f99a 	bl	d6a54 <HAL_Timer_Get_Micro_Seconds>
   d4720:	f004 f948 	bl	d89b4 <__aeabi_ui2d>
   d4724:	a322      	add	r3, pc, #136	; (adr r3, d47b0 <_Z6SDCardv+0x150>)
   d4726:	e9d3 2300 	ldrd	r2, r3, [r3]
   d472a:	f004 fae3 	bl	d8cf4 <__aeabi_ddiv>
   d472e:	f004 fc67 	bl	d9000 <__aeabi_d2f>
      soundWaveArray[i][1] = val1;
   d4732:	edd6 7a00 	vldr	s15, [r6]
   d4736:	6823      	ldr	r3, [r4, #0]
      {
        //do nothing
      }
      lastTime = micros();
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
   d4738:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
      soundWaveArray[i][1] = val1;
   d473c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4740:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
  Serial.printf("Logging to: %s \n",fileName);

  //For Loop here for array capturing sound
  if(val1 > threshold)
  {
    for(i = 0 ; i < arraySize ; i++)
   d4744:	3301      	adds	r3, #1
      {
        //do nothing
      }
      lastTime = micros();
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
   d4746:	f8c9 0000 	str.w	r0, [r9]
  Serial.printf("Logging to: %s \n",fileName);

  //For Loop here for array capturing sound
  if(val1 > threshold)
  {
    for(i = 0 ; i < arraySize ; i++)
   d474a:	6023      	str	r3, [r4, #0]
        //do nothing
      }
      lastTime = micros();
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
      soundWaveArray[i][1] = val1;
   d474c:	edc5 7a01 	vstr	s15, [r5, #4]
  Serial.printf("Logging to: %s \n",fileName);

  //For Loop here for array capturing sound
  if(val1 > threshold)
  {
    for(i = 0 ; i < arraySize ; i++)
   d4750:	e7d0      	b.n	d46f4 <_Z6SDCardv+0x94>
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
      soundWaveArray[i][1] = val1;
    }
  }
  for(i = 0; i < arraySize; i++)
   d4752:	2300      	movs	r3, #0
   d4754:	4d21      	ldr	r5, [pc, #132]	; (d47dc <_Z6SDCardv+0x17c>)
  {
    file.printf("%0.8f , %0.2f\n",soundWaveArray[i][0], soundWaveArray[i][1]);
   d4756:	4e24      	ldr	r6, [pc, #144]	; (d47e8 <_Z6SDCardv+0x188>)
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
      soundWaveArray[i][1] = val1;
    }
  }
  for(i = 0; i < arraySize; i++)
   d4758:	6023      	str	r3, [r4, #0]
   d475a:	6823      	ldr	r3, [r4, #0]
   d475c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   d4760:	da0d      	bge.n	d477e <_Z6SDCardv+0x11e>
  {
    file.printf("%0.8f , %0.2f\n",soundWaveArray[i][0], soundWaveArray[i][1]);
   d4762:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   d4766:	edd3 0a01 	vldr	s1, [r3, #4]
   d476a:	ed93 0a00 	vldr	s0, [r3]
   d476e:	491f      	ldr	r1, [pc, #124]	; (d47ec <_Z6SDCardv+0x18c>)
   d4770:	481f      	ldr	r0, [pc, #124]	; (d47f0 <_Z6SDCardv+0x190>)
   d4772:	f7ff fe41 	bl	d43f8 <_ZN5Print6printfIIffEEEjPKcDpT_>
      getMicrophoneValues();
      soundWaveArray[i][0] = micros()/1000000.0;
      soundWaveArray[i][1] = val1;
    }
  }
  for(i = 0; i < arraySize; i++)
   d4776:	682b      	ldr	r3, [r5, #0]
   d4778:	3301      	adds	r3, #1
   d477a:	602b      	str	r3, [r5, #0]
   d477c:	e7ed      	b.n	d475a <_Z6SDCardv+0xfa>
  {
    file.printf("%0.8f , %0.2f\n",soundWaveArray[i][0], soundWaveArray[i][1]);
  }
  file.close();
   d477e:	4813      	ldr	r0, [pc, #76]	; (d47cc <_Z6SDCardv+0x16c>)
   d4780:	f001 f99e 	bl	d5ac0 <_ZN7FatFile5closeEv>
  Serial.printf("Done \n");
   d4784:	f003 f9e0 	bl	d7b48 <_Z16_fetch_usbserialv>
   d4788:	4a1a      	ldr	r2, [pc, #104]	; (d47f4 <_Z6SDCardv+0x194>)
   d478a:	2100      	movs	r1, #0
   d478c:	f002 fcf5 	bl	d717a <_ZN5Print11printf_implEbPKcz>
  delay(2000);
   d4790:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4794:	f002 fd87 	bl	d72a6 <delay>
  Serial.printf("Ready for next data log \n");
   d4798:	f003 f9d6 	bl	d7b48 <_Z16_fetch_usbserialv>
   d479c:	4a16      	ldr	r2, [pc, #88]	; (d47f8 <_Z6SDCardv+0x198>)
   d479e:	2100      	movs	r1, #0
   d47a0:	f002 fceb 	bl	d717a <_ZN5Print11printf_implEbPKcz>
}
   d47a4:	b00b      	add	sp, #44	; 0x2c
   d47a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d47aa:	bf00      	nop
   d47ac:	f3af 8000 	nop.w
   d47b0:	00000000 	.word	0x00000000
   d47b4:	412e8480 	.word	0x412e8480
   d47b8:	000d9393 	.word	0x000d9393
   d47bc:	2003bdf8 	.word	0x2003bdf8
   d47c0:	2003c360 	.word	0x2003c360
   d47c4:	000d93ab 	.word	0x000d93ab
   d47c8:	2003e3cc 	.word	0x2003e3cc
   d47cc:	2003bef8 	.word	0x2003bef8
   d47d0:	000d93c2 	.word	0x000d93c2
   d47d4:	000d93cc 	.word	0x000d93cc
   d47d8:	2003be94 	.word	0x2003be94
   d47dc:	2003beec 	.word	0x2003beec
   d47e0:	2003be14 	.word	0x2003be14
   d47e4:	2003c3a8 	.word	0x2003c3a8
   d47e8:	2003c3b8 	.word	0x2003c3b8
   d47ec:	000d93dd 	.word	0x000d93dd
   d47f0:	2003bef0 	.word	0x2003bef0
   d47f4:	000d93ec 	.word	0x000d93ec
   d47f8:	000d93f3 	.word	0x000d93f3

000d47fc <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d47fc:	b538      	push	{r3, r4, r5, lr}
   d47fe:	4604      	mov	r4, r0
   d4800:	ed2d 8b02 	vpush	{d8}
   d4804:	460d      	mov	r5, r1
   d4806:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d480a:	f002 f83b 	bl	d6884 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d480e:	4629      	mov	r1, r5
   d4810:	4620      	mov	r0, r4
   d4812:	2201      	movs	r2, #1
   d4814:	f001 ffaa 	bl	d676c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4818:	4620      	mov	r0, r4
   d481a:	213a      	movs	r1, #58	; 0x3a
   d481c:	f001 ff5a 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4820:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d4824:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4828:	4620      	mov	r0, r4
	}
   d482a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d482e:	f002 b84d 	b.w	d68cc <_ZN10JsonWriter11insertValueEf>
	...

000d4834 <_Z27recordLongitudeLatitudeDataff>:
  pixelY.setPixelColor(locationY,0,0,255);
  pixelY.show();
}

void recordLongitudeLatitudeData(float longitude, float latitude)
{
   d4834:	b510      	push	{r4, lr}
   d4836:	ed2d 8b02 	vpush	{d8}
   d483a:	b0d2      	sub	sp, #328	; 0x148
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d483c:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4840:	a912      	add	r1, sp, #72	; 0x48
   d4842:	a806      	add	r0, sp, #24
   d4844:	eef0 8a60 	vmov.f32	s17, s1
   d4848:	eeb0 8a40 	vmov.f32	s16, s0
   d484c:	f001 ff30 	bl	d66b0 <_ZN10JsonWriterC1EPcj>
   d4850:	4b21      	ldr	r3, [pc, #132]	; (d48d8 <_Z27recordLongitudeLatitudeDataff+0xa4>)
   d4852:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4854:	227d      	movs	r2, #125	; 0x7d
   d4856:	217b      	movs	r1, #123	; 0x7b
   d4858:	a806      	add	r0, sp, #24
   d485a:	f002 f81e 	bl	d689a <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Longitude", longitude);
   d485e:	eeb0 0a48 	vmov.f32	s0, s16
   d4862:	491e      	ldr	r1, [pc, #120]	; (d48dc <_Z27recordLongitudeLatitudeDataff+0xa8>)
   d4864:	a806      	add	r0, sp, #24
   d4866:	f7ff ffc9 	bl	d47fc <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Latitude", latitude);
   d486a:	eeb0 0a68 	vmov.f32	s0, s17
   d486e:	491c      	ldr	r1, [pc, #112]	; (d48e0 <_Z27recordLongitudeLatitudeDataff+0xac>)
   d4870:	a806      	add	r0, sp, #24
   d4872:	f7ff ffc3 	bl	d47fc <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4876:	a806      	add	r0, sp, #24
   d4878:	f001 ff3a 	bl	d66f0 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d487c:	9b07      	ldr	r3, [sp, #28]
   d487e:	9303      	str	r3, [sp, #12]
   d4880:	4b18      	ldr	r3, [pc, #96]	; (d48e4 <_Z27recordLongitudeLatitudeDataff+0xb0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4882:	9a03      	ldr	r2, [sp, #12]
   d4884:	781b      	ldrb	r3, [r3, #0]
   d4886:	f88d 3000 	strb.w	r3, [sp]
   d488a:	4917      	ldr	r1, [pc, #92]	; (d48e8 <_Z27recordLongitudeLatitudeDataff+0xb4>)
   d488c:	233c      	movs	r3, #60	; 0x3c
   d488e:	a804      	add	r0, sp, #16
   d4890:	f002 ff04 	bl	d769c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4894:	9c05      	ldr	r4, [sp, #20]
   d4896:	b17c      	cbz	r4, d48b8 <_Z27recordLongitudeLatitudeDataff+0x84>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4898:	6863      	ldr	r3, [r4, #4]
   d489a:	3b01      	subs	r3, #1
   d489c:	6063      	str	r3, [r4, #4]
   d489e:	b95b      	cbnz	r3, d48b8 <_Z27recordLongitudeLatitudeDataff+0x84>
        {
          _M_dispose();
   d48a0:	6823      	ldr	r3, [r4, #0]
   d48a2:	4620      	mov	r0, r4
   d48a4:	689b      	ldr	r3, [r3, #8]
   d48a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d48a8:	68a3      	ldr	r3, [r4, #8]
   d48aa:	3b01      	subs	r3, #1
   d48ac:	60a3      	str	r3, [r4, #8]
   d48ae:	b91b      	cbnz	r3, d48b8 <_Z27recordLongitudeLatitudeDataff+0x84>
            _M_destroy();
   d48b0:	6823      	ldr	r3, [r4, #0]
   d48b2:	4620      	mov	r0, r4
   d48b4:	68db      	ldr	r3, [r3, #12]
   d48b6:	4798      	blx	r3
  }
  Particle.publish("Noise",jw.getBuffer(), PRIVATE);
  Serial.printf("Longitude: %0.7f| Latitude: %0.7f\n", longitude, latitude);
   d48b8:	f003 f946 	bl	d7b48 <_Z16_fetch_usbserialv>
   d48bc:	eef0 0a68 	vmov.f32	s1, s17
   d48c0:	eeb0 0a48 	vmov.f32	s0, s16
   d48c4:	4909      	ldr	r1, [pc, #36]	; (d48ec <_Z27recordLongitudeLatitudeDataff+0xb8>)
   d48c6:	f7ff fd97 	bl	d43f8 <_ZN5Print6printfIIffEEEjPKcDpT_>
  pixelY.show();
}

void recordLongitudeLatitudeData(float longitude, float latitude)
{
  JsonWriterStatic<256> jw;
   d48ca:	a806      	add	r0, sp, #24
   d48cc:	f7ff fc2a 	bl	d4124 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Longitude", longitude);
    jw.insertKeyValue("Latitude", latitude);
  }
  Particle.publish("Noise",jw.getBuffer(), PRIVATE);
  Serial.printf("Longitude: %0.7f| Latitude: %0.7f\n", longitude, latitude);
}
   d48d0:	b052      	add	sp, #328	; 0x148
   d48d2:	ecbd 8b02 	vpop	{d8}
   d48d6:	bd10      	pop	{r4, pc}
   d48d8:	000d91d8 	.word	0x000d91d8
   d48dc:	000d940d 	.word	0x000d940d
   d48e0:	000d9417 	.word	0x000d9417
   d48e4:	2003e3bc 	.word	0x2003e3bc
   d48e8:	000d9420 	.word	0x000d9420
   d48ec:	000d9426 	.word	0x000d9426

000d48f0 <_Z25showLocationWithNeopixelsv>:
  Serial.printf("X = %0.2f | Y = %0.2f\n", X, Y);
  Serial.printf("a = %0.2f | b = %0.2f | c = %0.2f\n",a,b,c);
}

void showLocationWithNeopixels()
{
   d48f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d48f2:	ed2d 8b06 	vpush	{d8-d10}
  recordLongitudeLatitudeData(longitude, latitude);
   d48f6:	4f68      	ldr	r7, [pc, #416]	; (d4a98 <_Z25showLocationWithNeopixelsv+0x1a8>)
   d48f8:	4e68      	ldr	r6, [pc, #416]	; (d4a9c <_Z25showLocationWithNeopixelsv+0x1ac>)
   d48fa:	edd7 0a00 	vldr	s1, [r7]
   d48fe:	ed96 0a00 	vldr	s0, [r6]
  getTriangulationOfSound();
  SDCard();
  pointX = X;
   d4902:	4c67      	ldr	r4, [pc, #412]	; (d4aa0 <_Z25showLocationWithNeopixelsv+0x1b0>)
  locationX = map(pointX, 0.0, 1.0, 0.0, 31.0);
   d4904:	4d67      	ldr	r5, [pc, #412]	; (d4aa4 <_Z25showLocationWithNeopixelsv+0x1b4>)
  Serial.printf("X = %0.2f | Y = %0.2f\n", X, Y);
  Serial.printf("a = %0.2f | b = %0.2f | c = %0.2f\n",a,b,c);
}

void showLocationWithNeopixels()
{
   d4906:	b085      	sub	sp, #20
  recordLongitudeLatitudeData(longitude, latitude);
   d4908:	f7ff ff94 	bl	d4834 <_Z27recordLongitudeLatitudeDataff>
  getTriangulationOfSound();
   d490c:	f7ff fd90 	bl	d4430 <_Z23getTriangulationOfSoundv>
  SDCard();
   d4910:	f7ff fea6 	bl	d4660 <_Z6SDCardv>
  pointX = X;
   d4914:	4b64      	ldr	r3, [pc, #400]	; (d4aa8 <_Z25showLocationWithNeopixelsv+0x1b8>)
   d4916:	6818      	ldr	r0, [r3, #0]
   d4918:	6020      	str	r0, [r4, #0]
  locationX = map(pointX, 0.0, 1.0, 0.0, 31.0);
   d491a:	f004 f86d 	bl	d89f8 <__aeabi_f2d>
   d491e:	ed9f 8b50 	vldr	d8, [pc, #320]	; d4a60 <_Z25showLocationWithNeopixelsv+0x170>
   d4922:	ed9f 9b51 	vldr	d9, [pc, #324]	; d4a68 <_Z25showLocationWithNeopixelsv+0x178>
   d4926:	eeb0 3a48 	vmov.f32	s6, s16
   d492a:	eef0 3a68 	vmov.f32	s7, s17
   d492e:	eeb0 1a48 	vmov.f32	s2, s16
   d4932:	eef0 1a68 	vmov.f32	s3, s17
   d4936:	ed9f ab4e 	vldr	d10, [pc, #312]	; d4a70 <_Z25showLocationWithNeopixelsv+0x180>
   d493a:	eeb0 2a49 	vmov.f32	s4, s18
   d493e:	eef0 2a69 	vmov.f32	s5, s19
   d4942:	eeb0 4a4a 	vmov.f32	s8, s20
   d4946:	eef0 4a6a 	vmov.f32	s9, s21
   d494a:	ec41 0b10 	vmov	d0, r0, r1
   d494e:	f002 fc61 	bl	d7214 <_Z3mapddddd>
   d4952:	ec51 0b10 	vmov	r0, r1, d0
   d4956:	f004 fb53 	bl	d9000 <__aeabi_d2f>
   d495a:	6028      	str	r0, [r5, #0]
  longitude = map(pointX, 0.0, 1.0, -106.65136, -106.6496);
   d495c:	6820      	ldr	r0, [r4, #0]
   d495e:	f004 f84b 	bl	d89f8 <__aeabi_f2d>
   d4962:	eeb0 2a49 	vmov.f32	s4, s18
   d4966:	eef0 2a69 	vmov.f32	s5, s19
   d496a:	eeb0 1a48 	vmov.f32	s2, s16
   d496e:	eef0 1a68 	vmov.f32	s3, s17
   d4972:	ed9f 4b41 	vldr	d4, [pc, #260]	; d4a78 <_Z25showLocationWithNeopixelsv+0x188>
   d4976:	ed9f 3b42 	vldr	d3, [pc, #264]	; d4a80 <_Z25showLocationWithNeopixelsv+0x190>
   d497a:	ec41 0b10 	vmov	d0, r0, r1
   d497e:	f002 fc49 	bl	d7214 <_Z3mapddddd>
   d4982:	ec51 0b10 	vmov	r0, r1, d0
   d4986:	f004 fb3b 	bl	d9000 <__aeabi_d2f>
   d498a:	6030      	str	r0, [r6, #0]
  pixelX.clear();
   d498c:	4e47      	ldr	r6, [pc, #284]	; (d4aac <_Z25showLocationWithNeopixelsv+0x1bc>)
   d498e:	4630      	mov	r0, r6
   d4990:	f000 fb3b 	bl	d500a <_ZN17Adafruit_NeoPixel5clearEv>
  pixelX.setPixelColor(locationX,255,0,0);
   d4994:	edd5 7a00 	vldr	s15, [r5]
   d4998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d499c:	2500      	movs	r5, #0
   d499e:	edcd 7a03 	vstr	s15, [sp, #12]
   d49a2:	22ff      	movs	r2, #255	; 0xff
   d49a4:	462b      	mov	r3, r5
   d49a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d49aa:	9500      	str	r5, [sp, #0]
   d49ac:	4630      	mov	r0, r6
   d49ae:	f000 fafd 	bl	d4fac <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  pixelX.show();
   d49b2:	4630      	mov	r0, r6
   d49b4:	f000 f958 	bl	d4c68 <_ZN17Adafruit_NeoPixel4showEv>

  pointY = Y;
   d49b8:	4b3d      	ldr	r3, [pc, #244]	; (d4ab0 <_Z25showLocationWithNeopixelsv+0x1c0>)
  locationY = map(pointY, 0.0, 1.0, 0.0, 31.0);
   d49ba:	4e3e      	ldr	r6, [pc, #248]	; (d4ab4 <_Z25showLocationWithNeopixelsv+0x1c4>)
  longitude = map(pointX, 0.0, 1.0, -106.65136, -106.6496);
  pixelX.clear();
  pixelX.setPixelColor(locationX,255,0,0);
  pixelX.show();

  pointY = Y;
   d49bc:	6818      	ldr	r0, [r3, #0]
   d49be:	4b3e      	ldr	r3, [pc, #248]	; (d4ab8 <_Z25showLocationWithNeopixelsv+0x1c8>)
   d49c0:	6018      	str	r0, [r3, #0]
  locationY = map(pointY, 0.0, 1.0, 0.0, 31.0);
   d49c2:	f004 f819 	bl	d89f8 <__aeabi_f2d>
   d49c6:	eeb0 4a4a 	vmov.f32	s8, s20
   d49ca:	eef0 4a6a 	vmov.f32	s9, s21
   d49ce:	eeb0 3a48 	vmov.f32	s6, s16
   d49d2:	eef0 3a68 	vmov.f32	s7, s17
   d49d6:	eeb0 2a49 	vmov.f32	s4, s18
   d49da:	eef0 2a69 	vmov.f32	s5, s19
   d49de:	eeb0 1a48 	vmov.f32	s2, s16
   d49e2:	eef0 1a68 	vmov.f32	s3, s17
   d49e6:	ec41 0b10 	vmov	d0, r0, r1
   d49ea:	f002 fc13 	bl	d7214 <_Z3mapddddd>
   d49ee:	ec51 0b10 	vmov	r0, r1, d0
   d49f2:	f004 fb05 	bl	d9000 <__aeabi_d2f>
   d49f6:	6030      	str	r0, [r6, #0]
  latitude = map(pointX, 0.0, 1.0, 35.0866796, 35.088413);
   d49f8:	6820      	ldr	r0, [r4, #0]
  pixelY.clear();
   d49fa:	4c30      	ldr	r4, [pc, #192]	; (d4abc <_Z25showLocationWithNeopixelsv+0x1cc>)
  pixelX.setPixelColor(locationX,255,0,0);
  pixelX.show();

  pointY = Y;
  locationY = map(pointY, 0.0, 1.0, 0.0, 31.0);
  latitude = map(pointX, 0.0, 1.0, 35.0866796, 35.088413);
   d49fc:	f003 fffc 	bl	d89f8 <__aeabi_f2d>
   d4a00:	eeb0 2a49 	vmov.f32	s4, s18
   d4a04:	eef0 2a69 	vmov.f32	s5, s19
   d4a08:	eeb0 1a48 	vmov.f32	s2, s16
   d4a0c:	eef0 1a68 	vmov.f32	s3, s17
   d4a10:	ed9f 4b1d 	vldr	d4, [pc, #116]	; d4a88 <_Z25showLocationWithNeopixelsv+0x198>
   d4a14:	ed9f 3b1e 	vldr	d3, [pc, #120]	; d4a90 <_Z25showLocationWithNeopixelsv+0x1a0>
   d4a18:	ec41 0b10 	vmov	d0, r0, r1
   d4a1c:	f002 fbfa 	bl	d7214 <_Z3mapddddd>
   d4a20:	ec51 0b10 	vmov	r0, r1, d0
   d4a24:	f004 faec 	bl	d9000 <__aeabi_d2f>
   d4a28:	6038      	str	r0, [r7, #0]
  pixelY.clear();
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	f000 faed 	bl	d500a <_ZN17Adafruit_NeoPixel5clearEv>
  pixelY.setPixelColor(locationY,0,0,255);
   d4a30:	edd6 7a00 	vldr	s15, [r6]
   d4a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d4a38:	23ff      	movs	r3, #255	; 0xff
   d4a3a:	edcd 7a03 	vstr	s15, [sp, #12]
   d4a3e:	9300      	str	r3, [sp, #0]
   d4a40:	4620      	mov	r0, r4
   d4a42:	462b      	mov	r3, r5
   d4a44:	462a      	mov	r2, r5
   d4a46:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4a4a:	f000 faaf 	bl	d4fac <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  pixelY.show();
   d4a4e:	4620      	mov	r0, r4
}
   d4a50:	b005      	add	sp, #20
   d4a52:	ecbd 8b06 	vpop	{d8-d10}
   d4a56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  pointY = Y;
  locationY = map(pointY, 0.0, 1.0, 0.0, 31.0);
  latitude = map(pointX, 0.0, 1.0, 35.0866796, 35.088413);
  pixelY.clear();
  pixelY.setPixelColor(locationY,0,0,255);
  pixelY.show();
   d4a5a:	f000 b905 	b.w	d4c68 <_ZN17Adafruit_NeoPixel4showEv>
   d4a5e:	bf00      	nop
	...
   d4a6c:	3ff00000 	.word	0x3ff00000
   d4a70:	00000000 	.word	0x00000000
   d4a74:	403f0000 	.word	0x403f0000
   d4a78:	0be0ded3 	.word	0x0be0ded3
   d4a7c:	c05aa993 	.word	0xc05aa993
   d4a80:	e1da7b0b 	.word	0xe1da7b0b
   d4a84:	c05aa9af 	.word	0xc05aa9af
   d4a88:	1dffc548 	.word	0x1dffc548
   d4a8c:	40418b51 	.word	0x40418b51
   d4a90:	512f9d7c 	.word	0x512f9d7c
   d4a94:	40418b18 	.word	0x40418b18
   d4a98:	2003c3b0 	.word	0x2003c3b0
   d4a9c:	2003bea4 	.word	0x2003bea4
   d4aa0:	2003e3b8 	.word	0x2003e3b8
   d4aa4:	2003bf1c 	.word	0x2003bf1c
   d4aa8:	2003c3b4 	.word	0x2003c3b4
   d4aac:	2003bed0 	.word	0x2003bed0
   d4ab0:	2003bec8 	.word	0x2003bec8
   d4ab4:	2003bf20 	.word	0x2003bf20
   d4ab8:	2003c3ac 	.word	0x2003c3ac
   d4abc:	2003bea8 	.word	0x2003bea8

000d4ac0 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  showLocationWithNeopixels();
   d4ac0:	f7ff bf16 	b.w	d48f0 <_Z25showLocationWithNeopixelsv>

000d4ac4 <_GLOBAL__sub_I_pixelX>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4ac4:	4b29      	ldr	r3, [pc, #164]	; (d4b6c <_GLOBAL__sub_I_pixelX+0xa8>)
  }
  file.close();
  Serial.printf("Done \n");
  delay(2000);
  Serial.printf("Ready for next data log \n");
}
   d4ac6:	b570      	push	{r4, r5, r6, lr}
   d4ac8:	2401      	movs	r4, #1
   d4aca:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4acc:	f001 ff32 	bl	d6934 <HAL_Pin_Map>

#define PIXEL_PIN A4
#define PIXEL_PIN2 A3
#define PIXEL_COUNT 31
#define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixelX(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4ad0:	2302      	movs	r3, #2
   d4ad2:	220f      	movs	r2, #15
   d4ad4:	211f      	movs	r1, #31
   d4ad6:	4826      	ldr	r0, [pc, #152]	; (d4b70 <_GLOBAL__sub_I_pixelX+0xac>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4ad8:	4e26      	ldr	r6, [pc, #152]	; (d4b74 <_GLOBAL__sub_I_pixelX+0xb0>)
   d4ada:	f000 f8b3 	bl	d4c44 <_ZN17Adafruit_NeoPixelC1Ethh>
   d4ade:	4a26      	ldr	r2, [pc, #152]	; (d4b78 <_GLOBAL__sub_I_pixelX+0xb4>)
   d4ae0:	4926      	ldr	r1, [pc, #152]	; (d4b7c <_GLOBAL__sub_I_pixelX+0xb8>)
   d4ae2:	4823      	ldr	r0, [pc, #140]	; (d4b70 <_GLOBAL__sub_I_pixelX+0xac>)
   d4ae4:	f003 fb86 	bl	d81f4 <__aeabi_atexit>
Adafruit_NeoPixel pixelY(PIXEL_COUNT, PIXEL_PIN2, PIXEL_TYPE);
   d4ae8:	2302      	movs	r3, #2
   d4aea:	2210      	movs	r2, #16
   d4aec:	211f      	movs	r1, #31
   d4aee:	4824      	ldr	r0, [pc, #144]	; (d4b80 <_GLOBAL__sub_I_pixelX+0xbc>)
   d4af0:	f000 f8a8 	bl	d4c44 <_ZN17Adafruit_NeoPixelC1Ethh>
   d4af4:	4a20      	ldr	r2, [pc, #128]	; (d4b78 <_GLOBAL__sub_I_pixelX+0xb4>)
   d4af6:	4921      	ldr	r1, [pc, #132]	; (d4b7c <_GLOBAL__sub_I_pixelX+0xb8>)
   d4af8:	4821      	ldr	r0, [pc, #132]	; (d4b80 <_GLOBAL__sub_I_pixelX+0xbc>)
   d4afa:	f003 fb7b 	bl	d81f4 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4afe:	4b21      	ldr	r3, [pc, #132]	; (d4b84 <_GLOBAL__sub_I_pixelX+0xc0>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4b00:	2164      	movs	r1, #100	; 0x64
   d4b02:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4b06:	4920      	ldr	r1, [pc, #128]	; (d4b88 <_GLOBAL__sub_I_pixelX+0xc4>)
   d4b08:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4b0c:	6831      	ldr	r1, [r6, #0]
   d4b0e:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
   d4b12:	2200      	movs	r2, #0
   d4b14:	ea11 0504 	ands.w	r5, r1, r4
   d4b18:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4b1a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4b1e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4b22:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4b26:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4b2a:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4b2e:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4b32:	461c      	mov	r4, r3
   d4b34:	d10a      	bne.n	d4b4c <_GLOBAL__sub_I_pixelX+0x88>
   d4b36:	4630      	mov	r0, r6
   d4b38:	f7ff fab5 	bl	d40a6 <__cxa_guard_acquire>
   d4b3c:	b130      	cbz	r0, d4b4c <_GLOBAL__sub_I_pixelX+0x88>
   d4b3e:	4629      	mov	r1, r5
   d4b40:	4812      	ldr	r0, [pc, #72]	; (d4b8c <_GLOBAL__sub_I_pixelX+0xc8>)
   d4b42:	f002 f997 	bl	d6e74 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4b46:	4630      	mov	r0, r6
   d4b48:	f7ff fab2 	bl	d40b0 <__cxa_guard_release>
   d4b4c:	4810      	ldr	r0, [pc, #64]	; (d4b90 <_GLOBAL__sub_I_pixelX+0xcc>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4b4e:	4b0f      	ldr	r3, [pc, #60]	; (d4b8c <_GLOBAL__sub_I_pixelX+0xc8>)
   d4b50:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d4b54:	2300      	movs	r3, #0
   d4b56:	7203      	strb	r3, [r0, #8]
   d4b58:	7243      	strb	r3, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4b5a:	6043      	str	r3, [r0, #4]
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d4b5c:	4b0d      	ldr	r3, [pc, #52]	; (d4b94 <_GLOBAL__sub_I_pixelX+0xd0>)
   d4b5e:	6003      	str	r3, [r0, #0]
const int chipSelect = SS;

#define FILE_BASE_NAME "Data"

SdFat sd;
SdFile file;
   d4b60:	4a05      	ldr	r2, [pc, #20]	; (d4b78 <_GLOBAL__sub_I_pixelX+0xb4>)
   d4b62:	490d      	ldr	r1, [pc, #52]	; (d4b98 <_GLOBAL__sub_I_pixelX+0xd4>)
  }
  file.close();
  Serial.printf("Done \n");
  delay(2000);
  Serial.printf("Ready for next data log \n");
}
   d4b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
const int chipSelect = SS;

#define FILE_BASE_NAME "Data"

SdFat sd;
SdFile file;
   d4b68:	f003 bb44 	b.w	d81f4 <__aeabi_atexit>
   d4b6c:	2003e3bc 	.word	0x2003e3bc
   d4b70:	2003bed0 	.word	0x2003bed0
   d4b74:	2003be88 	.word	0x2003be88
   d4b78:	2003be84 	.word	0x2003be84
   d4b7c:	000d4ba5 	.word	0x000d4ba5
   d4b80:	2003bea8 	.word	0x2003bea8
   d4b84:	2003bf24 	.word	0x2003bf24
   d4b88:	000d91b4 	.word	0x000d91b4
   d4b8c:	2003be8c 	.word	0x2003be8c
   d4b90:	2003bef0 	.word	0x2003bef0
   d4b94:	000d91c0 	.word	0x000d91c0
   d4b98:	000d40b7 	.word	0x000d40b7

000d4b9c <micros>:
   d4b9c:	f001 bf5a 	b.w	d6a54 <HAL_Timer_Get_Micro_Seconds>

000d4ba0 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4ba0:	f001 bf50 	b.w	d6a44 <HAL_Delay_Microseconds>

000d4ba4 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4ba4:	b510      	push	{r4, lr}
   d4ba6:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4ba8:	68c0      	ldr	r0, [r0, #12]
   d4baa:	b108      	cbz	r0, d4bb0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4bac:	f002 f8f6 	bl	d6d9c <free>
  if (begun) pinMode(pin, INPUT);
   d4bb0:	7823      	ldrb	r3, [r4, #0]
   d4bb2:	b11b      	cbz	r3, d4bbc <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4bb4:	2100      	movs	r1, #0
   d4bb6:	79e0      	ldrb	r0, [r4, #7]
   d4bb8:	f003 fa9a 	bl	d80f0 <pinMode>
}
   d4bbc:	4620      	mov	r0, r4
   d4bbe:	bd10      	pop	{r4, pc}

000d4bc0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4bc0:	b538      	push	{r3, r4, r5, lr}
   d4bc2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4bc4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4bc6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4bc8:	b108      	cbz	r0, d4bce <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4bca:	f002 f8e7 	bl	d6d9c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4bce:	79a3      	ldrb	r3, [r4, #6]
   d4bd0:	2b06      	cmp	r3, #6
   d4bd2:	bf0c      	ite	eq
   d4bd4:	2004      	moveq	r0, #4
   d4bd6:	2003      	movne	r0, #3
   d4bd8:	fb10 f005 	smulbb	r0, r0, r5
   d4bdc:	b280      	uxth	r0, r0
   d4bde:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4be0:	f002 f8d4 	bl	d6d8c <malloc>
   d4be4:	60e0      	str	r0, [r4, #12]
   d4be6:	b128      	cbz	r0, d4bf4 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4be8:	88a2      	ldrh	r2, [r4, #4]
   d4bea:	2100      	movs	r1, #0
   d4bec:	f004 fa80 	bl	d90f0 <memset>
    numLEDs = n;
   d4bf0:	8065      	strh	r5, [r4, #2]
   d4bf2:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4bf4:	80a0      	strh	r0, [r4, #4]
   d4bf6:	8060      	strh	r0, [r4, #2]
   d4bf8:	bd38      	pop	{r3, r4, r5, pc}

000d4bfa <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d4bfa:	b510      	push	{r4, lr}
   d4bfc:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4bfe:	2101      	movs	r1, #1
   d4c00:	79c0      	ldrb	r0, [r0, #7]
   d4c02:	f003 fa75 	bl	d80f0 <pinMode>
  digitalWrite(pin, LOW);
   d4c06:	2100      	movs	r1, #0
   d4c08:	79e0      	ldrb	r0, [r4, #7]
   d4c0a:	f003 fa82 	bl	d8112 <digitalWrite>
  begun = true;
   d4c0e:	2301      	movs	r3, #1
   d4c10:	7023      	strb	r3, [r4, #0]
   d4c12:	bd10      	pop	{r4, pc}

000d4c14 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4c14:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d4c16:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4c18:	4605      	mov	r5, r0
   d4c1a:	460c      	mov	r4, r1
    if (begun) {
   d4c1c:	b11b      	cbz	r3, d4c26 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4c1e:	2100      	movs	r1, #0
   d4c20:	79c0      	ldrb	r0, [r0, #7]
   d4c22:	f003 fa65 	bl	d80f0 <pinMode>
    }
    pin = p;
    if (begun) {
   d4c26:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d4c28:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4c2a:	b153      	cbz	r3, d4c42 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d4c2c:	b2a4      	uxth	r4, r4
   d4c2e:	4620      	mov	r0, r4
   d4c30:	2101      	movs	r1, #1
   d4c32:	f003 fa5d 	bl	d80f0 <pinMode>
        digitalWrite(p, LOW);
   d4c36:	4620      	mov	r0, r4
   d4c38:	2100      	movs	r1, #0
    }
}
   d4c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4c3e:	f003 ba68 	b.w	d8112 <digitalWrite>
   d4c42:	bd38      	pop	{r3, r4, r5, pc}

000d4c44 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4c44:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4c46:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4c48:	4604      	mov	r4, r0
   d4c4a:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4c4c:	7183      	strb	r3, [r0, #6]
   d4c4e:	7005      	strb	r5, [r0, #0]
   d4c50:	7205      	strb	r5, [r0, #8]
   d4c52:	60c5      	str	r5, [r0, #12]
   d4c54:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d4c56:	f7ff ffb3 	bl	d4bc0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	4631      	mov	r1, r6
   d4c5e:	f7ff ffd9 	bl	d4c14 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4c62:	4620      	mov	r0, r4
   d4c64:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4c68 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4c68:	68c3      	ldr	r3, [r0, #12]
   d4c6a:	2b00      	cmp	r3, #0
   d4c6c:	f000 818b 	beq.w	d4f86 <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d4c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c74:	7983      	ldrb	r3, [r0, #6]
   d4c76:	3b02      	subs	r3, #2
   d4c78:	b2db      	uxtb	r3, r3
   d4c7a:	2b04      	cmp	r3, #4
   d4c7c:	bf9c      	itt	ls
   d4c7e:	4ac4      	ldrls	r2, [pc, #784]	; (d4f90 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4c80:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4c84:	b087      	sub	sp, #28
   d4c86:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4c88:	bf88      	it	hi
   d4c8a:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4c8c:	f7ff ff86 	bl	d4b9c <micros>
   d4c90:	692b      	ldr	r3, [r5, #16]
   d4c92:	1ac0      	subs	r0, r0, r3
   d4c94:	42a0      	cmp	r0, r4
   d4c96:	d3f9      	bcc.n	d4c8c <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4c98:	4abe      	ldr	r2, [pc, #760]	; (d4f94 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4c9a:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4c9c:	ca07      	ldmia	r2, {r0, r1, r2}
   d4c9e:	ac06      	add	r4, sp, #24
   d4ca0:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4ca4:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4ca6:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4ca8:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4cac:	3304      	adds	r3, #4
   d4cae:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cb0:	b922      	cbnz	r2, d4cbc <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cb2:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4cb6:	2b00      	cmp	r3, #0
   d4cb8:	f2c0 8155 	blt.w	d4f66 <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4cbc:	9c04      	ldr	r4, [sp, #16]
   d4cbe:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cc2:	b923      	cbnz	r3, d4cce <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cc4:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4cc8:	2b00      	cmp	r3, #0
   d4cca:	f2c0 813c 	blt.w	d4f46 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d4cce:	9c05      	ldr	r4, [sp, #20]
   d4cd0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cd4:	b91b      	cbnz	r3, d4cde <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cd6:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4cda:	2b00      	cmp	r3, #0
   d4cdc:	db6e      	blt.n	d4dbc <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4cde:	4bae      	ldr	r3, [pc, #696]	; (d4f98 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d4ce0:	79ea      	ldrb	r2, [r5, #7]
   d4ce2:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4ce4:	4cad      	ldr	r4, [pc, #692]	; (d4f9c <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4ce6:	49ae      	ldr	r1, [pc, #696]	; (d4fa0 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4ce8:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4cea:	0112      	lsls	r2, r2, #4
   d4cec:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4cee:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4cf2:	785b      	ldrb	r3, [r3, #1]
   d4cf4:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4cf6:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4cf8:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4cfa:	f003 031f 	and.w	r3, r3, #31
   d4cfe:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4d02:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4d04:	433a      	orrs	r2, r7
   d4d06:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d4d08:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4d0a:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4d0c:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4d10:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d14:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4d16:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4d18:	2800      	cmp	r0, #0
   d4d1a:	d044      	beq.n	d4da6 <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d4d1c:	46cc      	mov	ip, r9
   d4d1e:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4d20:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d4d24:	f81c eb01 	ldrb.w	lr, [ip], #1
   d4d28:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4d2a:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4d2c:	6863      	ldr	r3, [r4, #4]
   d4d2e:	1a9b      	subs	r3, r3, r2
   d4d30:	2b46      	cmp	r3, #70	; 0x46
   d4d32:	d9fb      	bls.n	d4d2c <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d4d34:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d4d38:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4d3c:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4d40:	ea43 0307 	orr.w	r3, r3, r7
   d4d44:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4d48:	d02f      	beq.n	d4daa <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4d4a:	6863      	ldr	r3, [r4, #4]
   d4d4c:	1a9b      	subs	r3, r3, r2
   d4d4e:	2b28      	cmp	r3, #40	; 0x28
   d4d50:	d9fb      	bls.n	d4d4a <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4d52:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4d56:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4d58:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4d5c:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4d60:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4d64:	d1e2      	bne.n	d4d2c <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4d66:	ebc9 030c 	rsb	r3, r9, ip
   d4d6a:	88a8      	ldrh	r0, [r5, #4]
   d4d6c:	b29b      	uxth	r3, r3
   d4d6e:	4298      	cmp	r0, r3
   d4d70:	d8d8      	bhi.n	d4d24 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d4d72:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d4d76:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4d7a:	6863      	ldr	r3, [r4, #4]
   d4d7c:	1a9b      	subs	r3, r3, r2
   d4d7e:	2b46      	cmp	r3, #70	; 0x46
   d4d80:	d9fb      	bls.n	d4d7a <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4d82:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4d86:	ebca 0a03 	rsb	sl, sl, r3
   d4d8a:	4582      	cmp	sl, r0
   d4d8c:	f0c0 80d5 	bcc.w	d4f3a <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4d90:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4d94:	f7ff ff04 	bl	d4ba0 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4d98:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4d9a:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4d9e:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4da2:	2800      	cmp	r0, #0
   d4da4:	d1ba      	bne.n	d4d1c <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4da6:	4602      	mov	r2, r0
   d4da8:	e7e7      	b.n	d4d7a <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4daa:	6863      	ldr	r3, [r4, #4]
   d4dac:	1a9b      	subs	r3, r3, r2
   d4dae:	2b11      	cmp	r3, #17
   d4db0:	d8cf      	bhi.n	d4d52 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4db2:	6863      	ldr	r3, [r4, #4]
   d4db4:	1a9b      	subs	r3, r3, r2
   d4db6:	2b11      	cmp	r3, #17
   d4db8:	d9f7      	bls.n	d4daa <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4dba:	e7ca      	b.n	d4d52 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dbc:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dc0:	2b00      	cmp	r3, #0
   d4dc2:	da8c      	bge.n	d4cde <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dc4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dc8:	2b00      	cmp	r3, #0
   d4dca:	da88      	bge.n	d4cde <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4dcc:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dd0:	2b00      	cmp	r3, #0
   d4dd2:	da84      	bge.n	d4cde <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4dd4:	9801      	ldr	r0, [sp, #4]
   d4dd6:	f001 ffd9 	bl	d6d8c <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4dda:	2800      	cmp	r0, #0
   d4ddc:	f43f af7f 	beq.w	d4cde <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4de0:	88ab      	ldrh	r3, [r5, #4]
   d4de2:	2b00      	cmp	r3, #0
   d4de4:	f000 80d0 	beq.w	d4f88 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4de8:	2700      	movs	r7, #0
   d4dea:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4dec:	4e6d      	ldr	r6, [pc, #436]	; (d4fa4 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d4dee:	496e      	ldr	r1, [pc, #440]	; (d4fa8 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4df0:	e000      	b.n	d4df4 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4df2:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4df4:	68ea      	ldr	r2, [r5, #12]
   d4df6:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4df8:	f103 0e01 	add.w	lr, r3, #1
   d4dfc:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4e00:	bf14      	ite	ne
   d4e02:	46b0      	movne	r8, r6
   d4e04:	4688      	moveq	r8, r1
   d4e06:	fa1f fe8e 	uxth.w	lr, lr
   d4e0a:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4e0e:	bf14      	ite	ne
   d4e10:	46b1      	movne	r9, r6
   d4e12:	4689      	moveq	r9, r1
   d4e14:	f012 0f20 	tst.w	r2, #32
   d4e18:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4e1c:	bf18      	it	ne
   d4e1e:	46b2      	movne	sl, r6
   d4e20:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4e24:	bf08      	it	eq
   d4e26:	468a      	moveq	sl, r1
   d4e28:	f103 0802 	add.w	r8, r3, #2
   d4e2c:	f012 0f10 	tst.w	r2, #16
   d4e30:	f103 0e03 	add.w	lr, r3, #3
   d4e34:	bf14      	ite	ne
   d4e36:	46b4      	movne	ip, r6
   d4e38:	468c      	moveq	ip, r1
   d4e3a:	fa1f f888 	uxth.w	r8, r8
   d4e3e:	f012 0f08 	tst.w	r2, #8
   d4e42:	fa1f fe8e 	uxth.w	lr, lr
   d4e46:	f103 0904 	add.w	r9, r3, #4
   d4e4a:	fa1f f989 	uxth.w	r9, r9
   d4e4e:	bf14      	ite	ne
   d4e50:	46b3      	movne	fp, r6
   d4e52:	468b      	moveq	fp, r1
   d4e54:	f012 0f04 	tst.w	r2, #4
   d4e58:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4e5c:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4e60:	bf14      	ite	ne
   d4e62:	46b2      	movne	sl, r6
   d4e64:	468a      	moveq	sl, r1
   d4e66:	f103 0805 	add.w	r8, r3, #5
   d4e6a:	f012 0f02 	tst.w	r2, #2
   d4e6e:	f103 0c06 	add.w	ip, r3, #6
   d4e72:	f103 0e07 	add.w	lr, r3, #7
   d4e76:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d4e7a:	fa1f fe8e 	uxth.w	lr, lr
   d4e7e:	bf14      	ite	ne
   d4e80:	46b1      	movne	r9, r6
   d4e82:	4689      	moveq	r9, r1
   d4e84:	fa1f f888 	uxth.w	r8, r8
   d4e88:	f012 0f01 	tst.w	r2, #1
   d4e8c:	fa1f fc8c 	uxth.w	ip, ip
   d4e90:	bf14      	ite	ne
   d4e92:	4632      	movne	r2, r6
   d4e94:	460a      	moveq	r2, r1
   d4e96:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4e9a:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d4e9e:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4ea2:	3701      	adds	r7, #1
   d4ea4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4ea8:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4eaa:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4eae:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4eb0:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4eb2:	d89e      	bhi.n	d4df2 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4eb4:	f103 0209 	add.w	r2, r3, #9
   d4eb8:	330a      	adds	r3, #10
   d4eba:	b292      	uxth	r2, r2
   d4ebc:	b29b      	uxth	r3, r3
   d4ebe:	0052      	lsls	r2, r2, #1
   d4ec0:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4ec2:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4ec4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4ec8:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4eca:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4ecc:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4ece:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4ed0:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4ed2:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4ed6:	4e30      	ldr	r6, [pc, #192]	; (d4f98 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4ed8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4edc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4ee0:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4ee4:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4ee8:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4eec:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4ef0:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4ef4:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4ef8:	79eb      	ldrb	r3, [r5, #7]
   d4efa:	6831      	ldr	r1, [r6, #0]
   d4efc:	011b      	lsls	r3, r3, #4
   d4efe:	18ce      	adds	r6, r1, r3
   d4f00:	5cc9      	ldrb	r1, [r1, r3]
   d4f02:	7873      	ldrb	r3, [r6, #1]
   d4f04:	f003 031f 	and.w	r3, r3, #31
   d4f08:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4f0c:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4f0e:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4f12:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4f16:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4f1a:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4f1c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4f20:	2b00      	cmp	r3, #0
   d4f22:	d0fb      	beq.n	d4f1c <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4f24:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4f26:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4f2a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4f2e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4f32:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d4f36:	f001 ff31 	bl	d6d9c <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4f3a:	f7ff fe2f 	bl	d4b9c <micros>
   d4f3e:	6128      	str	r0, [r5, #16]
}
   d4f40:	b007      	add	sp, #28
   d4f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f46:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f4a:	2b00      	cmp	r3, #0
   d4f4c:	f6bf aebf 	bge.w	d4cce <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f50:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f54:	2b00      	cmp	r3, #0
   d4f56:	f6bf aeba 	bge.w	d4cce <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4f5a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f5e:	2b00      	cmp	r3, #0
   d4f60:	f6bf aeb5 	bge.w	d4cce <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d4f64:	e736      	b.n	d4dd4 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f66:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f6a:	2b00      	cmp	r3, #0
   d4f6c:	f6bf aea6 	bge.w	d4cbc <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f70:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f74:	2b00      	cmp	r3, #0
   d4f76:	f6bf aea1 	bge.w	d4cbc <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4f7a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f7e:	2b00      	cmp	r3, #0
   d4f80:	f6bf ae9c 	bge.w	d4cbc <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4f84:	e726      	b.n	d4dd4 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4f86:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4f88:	2304      	movs	r3, #4
   d4f8a:	2202      	movs	r2, #2
   d4f8c:	e799      	b.n	d4ec2 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4f8e:	bf00      	nop
   d4f90:	000d9458 	.word	0x000d9458
   d4f94:	000d944c 	.word	0x000d944c
   d4f98:	2003e3c8 	.word	0x2003e3c8
   d4f9c:	e000edf0 	.word	0xe000edf0
   d4fa0:	e0001000 	.word	0xe0001000
   d4fa4:	ffff800d 	.word	0xffff800d
   d4fa8:	ffff8006 	.word	0xffff8006

000d4fac <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4fae:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4fb0:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
   d4fb4:	428c      	cmp	r4, r1
   d4fb6:	d927      	bls.n	d5008 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
   d4fb8:	7a04      	ldrb	r4, [r0, #8]
   d4fba:	b144      	cbz	r4, d4fce <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   d4fbc:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   d4fc0:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   d4fc4:	fb14 f405 	smulbb	r4, r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d4fc8:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   d4fca:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   d4fcc:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
   d4fce:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
   d4fd0:	68c6      	ldr	r6, [r0, #12]
   d4fd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d4fd6:	2f08      	cmp	r7, #8
   d4fd8:	eb06 0401 	add.w	r4, r6, r1
   d4fdc:	d811      	bhi.n	d5002 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
   d4fde:	2001      	movs	r0, #1
   d4fe0:	40b8      	lsls	r0, r7
   d4fe2:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
   d4fe6:	d108      	bne.n	d4ffa <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
   d4fe8:	06c0      	lsls	r0, r0, #27
   d4fea:	d50a      	bpl.n	d5002 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d4fec:	2aff      	cmp	r2, #255	; 0xff
   d4fee:	bf08      	it	eq
   d4ff0:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
   d4ff2:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   d4ff4:	7065      	strb	r5, [r4, #1]
          *p = g;
   d4ff6:	70a3      	strb	r3, [r4, #2]
   d4ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4ffa:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   d4ffc:	7062      	strb	r2, [r4, #1]
          *p = b;
   d4ffe:	70a5      	strb	r5, [r4, #2]
   d5000:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d5002:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   d5004:	7063      	strb	r3, [r4, #1]
          *p = b;
   d5006:	70a5      	strb	r5, [r4, #2]
   d5008:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d500a <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d500a:	8882      	ldrh	r2, [r0, #4]
   d500c:	68c0      	ldr	r0, [r0, #12]
   d500e:	2100      	movs	r1, #0
   d5010:	f004 b86e 	b.w	d90f0 <memset>

000d5014 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d5014:	b508      	push	{r3, lr}
   d5016:	f001 fc8d 	bl	d6934 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d501a:	f001 fc8b 	bl	d6934 <HAL_Pin_Map>
   d501e:	4b01      	ldr	r3, [pc, #4]	; (d5024 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d5020:	6018      	str	r0, [r3, #0]
   d5022:	bd08      	pop	{r3, pc}
   d5024:	2003e3c8 	.word	0x2003e3c8

000d5028 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5028:	f001 bc84 	b.w	d6934 <HAL_Pin_Map>

000d502c <_GLOBAL__sub_I__ZN7istream3getEv>:
   d502c:	f001 bc82 	b.w	d6934 <HAL_Pin_Map>

000d5030 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5030:	b510      	push	{r4, lr}
   d5032:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5034:	3024      	adds	r0, #36	; 0x24
   d5036:	f000 fe7b 	bl	d5d30 <_ZN8FatCache4syncEv>
   d503a:	b128      	cbz	r0, d5048 <_ZN9FatVolume9cacheSyncEv+0x18>
   d503c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5044:	f000 be74 	b.w	d5d30 <_ZN8FatCache4syncEv>
  }
   d5048:	bd10      	pop	{r4, pc}

000d504a <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d504a:	1e41      	subs	r1, r0, #1
   d504c:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d5050:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5052:	0843      	lsrs	r3, r0, #1
   d5054:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d5058:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d505c:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5060:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5062:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5064:	d1f5      	bne.n	d5052 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d5066:	4770      	bx	lr

000d5068 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d5068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d506c:	7803      	ldrb	r3, [r0, #0]
   d506e:	2b20      	cmp	r3, #32
   d5070:	f100 0401 	add.w	r4, r0, #1
   d5074:	d101      	bne.n	d507a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d5076:	4620      	mov	r0, r4
   d5078:	e7f8      	b.n	d506c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d507a:	4f70      	ldr	r7, [pc, #448]	; (d523c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d507c:	6088      	str	r0, [r1, #8]
   d507e:	4605      	mov	r5, r0
   d5080:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d5082:	462e      	mov	r6, r5
   d5084:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d5088:	b30b      	cbz	r3, d50ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d508a:	2b2f      	cmp	r3, #47	; 0x2f
   d508c:	d101      	bne.n	d5092 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d508e:	1903      	adds	r3, r0, r4
   d5090:	e017      	b.n	d50c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5092:	2b5c      	cmp	r3, #92	; 0x5c
   d5094:	d102      	bne.n	d509c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d5096:	2000      	movs	r0, #0
   d5098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d509c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d50a0:	b2e4      	uxtb	r4, r4
   d50a2:	2c1d      	cmp	r4, #29
   d50a4:	d803      	bhi.n	d50ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d50a6:	fa27 f404 	lsr.w	r4, r7, r4
   d50aa:	07e4      	lsls	r4, r4, #31
   d50ac:	d4f3      	bmi.n	d5096 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d50ae:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d50b2:	2c3c      	cmp	r4, #60	; 0x3c
   d50b4:	d0ef      	beq.n	d5096 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d50b6:	3b20      	subs	r3, #32
   d50b8:	2b5e      	cmp	r3, #94	; 0x5e
   d50ba:	d9e1      	bls.n	d5080 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d50bc:	e7eb      	b.n	d5096 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d50be:	2d2f      	cmp	r5, #47	; 0x2f
   d50c0:	d105      	bne.n	d50ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d50c2:	461e      	mov	r6, r3
   d50c4:	f813 5b01 	ldrb.w	r5, [r3], #1
   d50c8:	2d20      	cmp	r5, #32
   d50ca:	d1f8      	bne.n	d50be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d50cc:	e7f9      	b.n	d50c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d50ce:	6016      	str	r6, [r2, #0]
   d50d0:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d50d2:	4298      	cmp	r0, r3
   d50d4:	ebc0 0803 	rsb	r8, r0, r3
   d50d8:	d009      	beq.n	d50ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d50da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d50de:	2a2e      	cmp	r2, #46	; 0x2e
   d50e0:	d0f7      	beq.n	d50d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d50e2:	2a20      	cmp	r2, #32
   d50e4:	d0f5      	beq.n	d50d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d50e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d50ea:	dcd4      	bgt.n	d5096 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d50ec:	e001      	b.n	d50f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d50ee:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d50f2:	f8c1 8004 	str.w	r8, [r1, #4]
   d50f6:	f101 030c 	add.w	r3, r1, #12
   d50fa:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d50fe:	2420      	movs	r4, #32
   d5100:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d5104:	4293      	cmp	r3, r2
   d5106:	d1fb      	bne.n	d5100 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d5108:	4603      	mov	r3, r0
   d510a:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d510c:	f813 4b01 	ldrb.w	r4, [r3], #1
   d5110:	2c2e      	cmp	r4, #46	; 0x2e
   d5112:	d0fa      	beq.n	d510a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d5114:	2c20      	cmp	r4, #32
   d5116:	d0f8      	beq.n	d510a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d5118:	fab2 f482 	clz	r4, r2
   d511c:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d511e:	f108 36ff 	add.w	r6, r8, #4294967295
   d5122:	1c73      	adds	r3, r6, #1
   d5124:	d107      	bne.n	d5136 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d5126:	2700      	movs	r7, #0
   d5128:	f04f 0e07 	mov.w	lr, #7
   d512c:	463d      	mov	r5, r7
   d512e:	46ba      	mov	sl, r7
   d5130:	f04f 0908 	mov.w	r9, #8
   d5134:	e009      	b.n	d514a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d5136:	5d83      	ldrb	r3, [r0, r6]
   d5138:	2b2e      	cmp	r3, #46	; 0x2e
   d513a:	d0f4      	beq.n	d5126 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d513c:	3e01      	subs	r6, #1
   d513e:	e7f0      	b.n	d5122 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d5140:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d5142:	2b20      	cmp	r3, #32
   d5144:	d104      	bne.n	d5150 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d5146:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d5148:	3201      	adds	r2, #1
   d514a:	4542      	cmp	r2, r8
   d514c:	dbf8      	blt.n	d5140 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d514e:	e04b      	b.n	d51e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d5150:	2b2e      	cmp	r3, #46	; 0x2e
   d5152:	d102      	bne.n	d515a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d5154:	42b2      	cmp	r2, r6
   d5156:	d1f6      	bne.n	d5146 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d5158:	e003      	b.n	d5162 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d515a:	2b22      	cmp	r3, #34	; 0x22
   d515c:	d017      	beq.n	d518e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d515e:	2b7c      	cmp	r3, #124	; 0x7c
   d5160:	d015      	beq.n	d518e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d5162:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d5166:	f1bc 0f05 	cmp.w	ip, #5
   d516a:	d801      	bhi.n	d5170 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d516c:	2b2d      	cmp	r3, #45	; 0x2d
   d516e:	d10e      	bne.n	d518e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d5170:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d5174:	f1bc 0f05 	cmp.w	ip, #5
   d5178:	d909      	bls.n	d518e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d517a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d517e:	f1bc 0f02 	cmp.w	ip, #2
   d5182:	d904      	bls.n	d518e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d5184:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d5188:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d518c:	d902      	bls.n	d5194 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d518e:	42b2      	cmp	r2, r6
   d5190:	d10e      	bne.n	d51b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d5192:	e049      	b.n	d5228 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5194:	42b2      	cmp	r2, r6
   d5196:	d047      	beq.n	d5228 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d5198:	4575      	cmp	r5, lr
   d519a:	d821      	bhi.n	d51e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d519c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d51a0:	f1bc 0f19 	cmp.w	ip, #25
   d51a4:	d808      	bhi.n	d51b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d51a6:	3b20      	subs	r3, #32
   d51a8:	b2db      	uxtb	r3, r3
        lc |= bit;
   d51aa:	ea49 0707 	orr.w	r7, r9, r7
   d51ae:	e00a      	b.n	d51c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d51b0:	4575      	cmp	r5, lr
   d51b2:	d815      	bhi.n	d51e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d51b4:	2400      	movs	r4, #0
      c = '_';
   d51b6:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d51b8:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d51bc:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d51c0:	bf98      	it	ls
   d51c2:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d51c6:	f105 0c01 	add.w	ip, r5, #1
   d51ca:	fa5f fc8c 	uxtb.w	ip, ip
   d51ce:	440d      	add	r5, r1
      if (i < 7) {
   d51d0:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d51d4:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d51d6:	d801      	bhi.n	d51dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d51d8:	f881 c00c 	strb.w	ip, [r1, #12]
   d51dc:	4665      	mov	r5, ip
   d51de:	e7b3      	b.n	d5148 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d51e0:	f1be 0f0a 	cmp.w	lr, #10
   d51e4:	d117      	bne.n	d5216 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d51e6:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d51e8:	7b4b      	ldrb	r3, [r1, #13]
   d51ea:	2b20      	cmp	r3, #32
   d51ec:	f43f af53 	beq.w	d5096 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d51f0:	b13c      	cbz	r4, d5202 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d51f2:	ea1a 0f07 	tst.w	sl, r7
   d51f6:	bf18      	it	ne
   d51f8:	2702      	movne	r7, #2
   d51fa:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d51fc:	2001      	movs	r0, #1
   d51fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d5202:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d5204:	2001      	movs	r0, #1
   d5206:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d5208:	4419      	add	r1, r3
   d520a:	237e      	movs	r3, #126	; 0x7e
   d520c:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d520e:	2331      	movs	r3, #49	; 0x31
   d5210:	738b      	strb	r3, [r1, #14]
   d5212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d5216:	42b2      	cmp	r2, r6
   d5218:	dce5      	bgt.n	d51e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d521a:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d521c:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5220:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5222:	f04f 0910 	mov.w	r9, #16
   d5226:	e78e      	b.n	d5146 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5228:	f1be 0f0a 	cmp.w	lr, #10
   d522c:	d0db      	beq.n	d51e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d522e:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5230:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5234:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5236:	f04f 0910 	mov.w	r9, #16
   d523a:	e785      	b.n	d5148 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d523c:	31000101 	.word	0x31000101

000d5240 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5244:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5248:	4606      	mov	r6, r0
   d524a:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d524c:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d524e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5250:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d5254:	6869      	ldr	r1, [r5, #4]
   d5256:	68aa      	ldr	r2, [r5, #8]
   d5258:	1863      	adds	r3, r4, r1
   d525a:	b29b      	uxth	r3, r3
   d525c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d525e:	4291      	cmp	r1, r2
   d5260:	d006      	beq.n	d5270 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d5262:	f812 0b01 	ldrb.w	r0, [r2], #1
   d5266:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d526a:	4043      	eors	r3, r0
   d526c:	b29b      	uxth	r3, r3
   d526e:	e7f6      	b.n	d525e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d5270:	f1b9 0f03 	cmp.w	r9, #3
   d5274:	bf28      	it	cs
   d5276:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d527a:	f109 0204 	add.w	r2, r9, #4
   d527e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d5280:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5284:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5286:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5288:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d528a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d528c:	bf94      	ite	ls
   d528e:	3130      	addls	r1, #48	; 0x30
   d5290:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5292:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5294:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d5296:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d529a:	d3f1      	bcc.n	d5280 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d529c:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d52a0:	2100      	movs	r1, #0
   d52a2:	735f      	strb	r7, [r3, #13]
   d52a4:	4630      	mov	r0, r6
   d52a6:	f000 fb1e 	bl	d58e6 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d52aa:	2101      	movs	r1, #1
   d52ac:	4630      	mov	r0, r6
   d52ae:	f000 fafd 	bl	d58ac <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d52b2:	4601      	mov	r1, r0
   d52b4:	b928      	cbnz	r0, d52c2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d52b6:	7870      	ldrb	r0, [r6, #1]
   d52b8:	fab0 f080 	clz	r0, r0
   d52bc:	0940      	lsrs	r0, r0, #5
   d52be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d52c2:	7803      	ldrb	r3, [r0, #0]
   d52c4:	b14b      	cbz	r3, d52da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d52c6:	7ac3      	ldrb	r3, [r0, #11]
   d52c8:	071b      	lsls	r3, r3, #28
   d52ca:	d4ee      	bmi.n	d52aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d52cc:	220b      	movs	r2, #11
   d52ce:	4640      	mov	r0, r8
   d52d0:	f003 fef4 	bl	d90bc <memcmp>
   d52d4:	2800      	cmp	r0, #0
   d52d6:	d1e8      	bne.n	d52aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d52d8:	e002      	b.n	d52e0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d52da:	2001      	movs	r0, #1
   d52dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d52e0:	3401      	adds	r4, #1
   d52e2:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d52e4:	2c64      	cmp	r4, #100	; 0x64
   d52e6:	d1b5      	bne.n	d5254 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d52e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d52ec <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d52ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d52f0:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d52f2:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d52f4:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d52f6:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d52fa:	9005      	str	r0, [sp, #20]
   d52fc:	460e      	mov	r6, r1
   d52fe:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5300:	d101      	bne.n	d5306 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d5302:	2000      	movs	r0, #0
   d5304:	e1a0      	b.n	d5648 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5306:	9b05      	ldr	r3, [sp, #20]
   d5308:	781b      	ldrb	r3, [r3, #0]
   d530a:	2b00      	cmp	r3, #0
   d530c:	d1f9      	bne.n	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d530e:	6853      	ldr	r3, [r2, #4]
   d5310:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5312:	7813      	ldrb	r3, [r2, #0]
   d5314:	079b      	lsls	r3, r3, #30
   d5316:	f000 818d 	beq.w	d5634 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d531a:	9b02      	ldr	r3, [sp, #8]
   d531c:	270d      	movs	r7, #13
   d531e:	330c      	adds	r3, #12
   d5320:	fbb3 f7f7 	udiv	r7, r3, r7
   d5324:	3701      	adds	r7, #1
   d5326:	b2ff      	uxtb	r7, r7
   d5328:	2100      	movs	r1, #0
   d532a:	4630      	mov	r0, r6
   d532c:	f000 fadb 	bl	d58e6 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d5330:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5334:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5338:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d533c:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d533e:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d5340:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d5342:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5346:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5348:	6972      	ldr	r2, [r6, #20]
   d534a:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d534c:	2101      	movs	r1, #1
   d534e:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5350:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d5354:	f000 faaa 	bl	d58ac <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5358:	9b07      	ldr	r3, [sp, #28]
   d535a:	b920      	cbnz	r0, d5366 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d535c:	7873      	ldrb	r3, [r6, #1]
   d535e:	2b00      	cmp	r3, #0
   d5360:	f000 8090 	beq.w	d5484 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d5364:	e7cd      	b.n	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d5366:	7802      	ldrb	r2, [r0, #0]
   d5368:	2ae5      	cmp	r2, #229	; 0xe5
   d536a:	d000      	beq.n	d536e <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d536c:	b942      	cbnz	r2, d5380 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d536e:	2c00      	cmp	r4, #0
   d5370:	bf08      	it	eq
   d5372:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d5374:	42bc      	cmp	r4, r7
        freeFound++;
   d5376:	bf3c      	itt	cc
   d5378:	3401      	addcc	r4, #1
   d537a:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d537c:	b922      	cbnz	r2, d5388 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d537e:	e081      	b.n	d5484 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d5380:	42bc      	cmp	r4, r7
   d5382:	bf38      	it	cc
   d5384:	2400      	movcc	r4, #0
   d5386:	e003      	b.n	d5390 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5388:	2ae5      	cmp	r2, #229	; 0xe5
   d538a:	d101      	bne.n	d5390 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d538c:	2500      	movs	r5, #0
   d538e:	e7db      	b.n	d5348 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5390:	2a2e      	cmp	r2, #46	; 0x2e
   d5392:	d0fb      	beq.n	d538c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5394:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5396:	290f      	cmp	r1, #15
   d5398:	d152      	bne.n	d5440 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d539a:	b93d      	cbnz	r5, d53ac <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d539c:	0651      	lsls	r1, r2, #25
   d539e:	d5d3      	bpl.n	d5348 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d53a0:	7b43      	ldrb	r3, [r0, #13]
   d53a2:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d53a4:	f002 051f 	and.w	r5, r2, #31
   d53a8:	462b      	mov	r3, r5
   d53aa:	e007      	b.n	d53bc <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d53ac:	3b01      	subs	r3, #1
   d53ae:	b2db      	uxtb	r3, r3
   d53b0:	429a      	cmp	r2, r3
   d53b2:	d1eb      	bne.n	d538c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d53b4:	7b42      	ldrb	r2, [r0, #13]
   d53b6:	9903      	ldr	r1, [sp, #12]
   d53b8:	4291      	cmp	r1, r2
   d53ba:	d1e7      	bne.n	d538c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d53bc:	1e5a      	subs	r2, r3, #1
   d53be:	f04f 0c0d 	mov.w	ip, #13
   d53c2:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d53c6:	9a02      	ldr	r2, [sp, #8]
   d53c8:	4562      	cmp	r2, ip
   d53ca:	d9df      	bls.n	d538c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d53cc:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d53d0:	f1be 0f04 	cmp.w	lr, #4
   d53d4:	fa5f f28e 	uxtb.w	r2, lr
   d53d8:	d804      	bhi.n	d53e4 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d53da:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d53de:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d53e2:	e00c      	b.n	d53fe <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d53e4:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d53e6:	bf95      	itete	ls
   d53e8:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d53ec:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d53f0:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d53f4:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d53f8:	bf94      	ite	ls
   d53fa:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d53fc:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d53fe:	9902      	ldr	r1, [sp, #8]
   d5400:	4561      	cmp	r1, ip
   d5402:	d103      	bne.n	d540c <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d5404:	2a00      	cmp	r2, #0
   d5406:	bf18      	it	ne
   d5408:	2500      	movne	r5, #0
   d540a:	e79d      	b.n	d5348 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d540c:	2aff      	cmp	r2, #255	; 0xff
   d540e:	d8bd      	bhi.n	d538c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5410:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5412:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d5416:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5418:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d541c:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5420:	bf98      	it	ls
   d5422:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5424:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5428:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d542c:	bf98      	it	ls
   d542e:	b2d2      	uxtbls	r2, r2
   d5430:	f1bc 0f19 	cmp.w	ip, #25
   d5434:	bf9c      	itt	ls
   d5436:	3120      	addls	r1, #32
   d5438:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d543a:	4291      	cmp	r1, r2
   d543c:	d1a6      	bne.n	d538c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d543e:	e0fb      	b.n	d5638 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5440:	0709      	lsls	r1, r1, #28
   d5442:	d4a3      	bmi.n	d538c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d5444:	b14d      	cbz	r5, d545a <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d5446:	2b01      	cmp	r3, #1
   d5448:	f47f af5b 	bne.w	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d544c:	f7ff fdfd 	bl	d504a <_ZN7FatFile11lfnChecksumEPh>
   d5450:	9b03      	ldr	r3, [sp, #12]
   d5452:	4283      	cmp	r3, r0
   d5454:	f47f af55 	bne.w	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5458:	e00f      	b.n	d547a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d545a:	220b      	movs	r2, #11
   d545c:	9906      	ldr	r1, [sp, #24]
   d545e:	9307      	str	r3, [sp, #28]
   d5460:	f003 fe2c 	bl	d90bc <memcmp>
   d5464:	9b07      	ldr	r3, [sp, #28]
   d5466:	2800      	cmp	r0, #0
   d5468:	f47f af6e 	bne.w	d5348 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d546c:	f899 2000 	ldrb.w	r2, [r9]
   d5470:	07d2      	lsls	r2, r2, #31
   d5472:	d502      	bpl.n	d547a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d5474:	2201      	movs	r2, #1
   d5476:	9204      	str	r2, [sp, #16]
   d5478:	e766      	b.n	d5348 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d547a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d547e:	f000 80d1 	beq.w	d5624 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d5482:	e73e      	b.n	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d5484:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5488:	f43f af3b 	beq.w	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d548c:	f00b 0303 	and.w	r3, fp, #3
   d5490:	3b01      	subs	r3, #1
   d5492:	2b01      	cmp	r3, #1
   d5494:	f63f af35 	bhi.w	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d5498:	2c00      	cmp	r4, #0
   d549a:	bf08      	it	eq
   d549c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d549e:	42bc      	cmp	r4, r7
   d54a0:	d302      	bcc.n	d54a8 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d54a2:	9b04      	ldr	r3, [sp, #16]
   d54a4:	b9cb      	cbnz	r3, d54da <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d54a6:	e01f      	b.n	d54e8 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d54a8:	2100      	movs	r1, #0
   d54aa:	4630      	mov	r0, r6
   d54ac:	f000 f9fe 	bl	d58ac <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d54b0:	b910      	cbnz	r0, d54b8 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d54b2:	7873      	ldrb	r3, [r6, #1]
   d54b4:	b15b      	cbz	r3, d54ce <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d54b6:	e724      	b.n	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d54b8:	3401      	adds	r4, #1
   d54ba:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d54bc:	e7ef      	b.n	d549e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d54be:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d54c0:	791b      	ldrb	r3, [r3, #4]
   d54c2:	2b01      	cmp	r3, #1
   d54c4:	d8ed      	bhi.n	d54a2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d54c6:	3410      	adds	r4, #16
   d54c8:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d54ca:	42a7      	cmp	r7, r4
   d54cc:	d9e9      	bls.n	d54a2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d54ce:	4630      	mov	r0, r6
   d54d0:	f000 f8d2 	bl	d5678 <_ZN7FatFile13addDirClusterEv>
   d54d4:	2800      	cmp	r0, #0
   d54d6:	d1f2      	bne.n	d54be <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d54d8:	e713      	b.n	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d54da:	4649      	mov	r1, r9
   d54dc:	4630      	mov	r0, r6
   d54de:	f7ff feaf 	bl	d5240 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d54e2:	2800      	cmp	r0, #0
   d54e4:	f43f af0d 	beq.w	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d54e8:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d54ec:	4630      	mov	r0, r6
   d54ee:	f000 f9fa 	bl	d58e6 <_ZN7FatFile7seekSetEm>
   d54f2:	2800      	cmp	r0, #0
   d54f4:	f43f af05 	beq.w	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d54f8:	1e7d      	subs	r5, r7, #1
   d54fa:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d54fc:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d54fe:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d5502:	f04f 080f 	mov.w	r8, #15
   d5506:	e041      	b.n	d558c <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5508:	2100      	movs	r1, #0
   d550a:	4630      	mov	r0, r6
   d550c:	f000 f9ce 	bl	d58ac <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5510:	4607      	mov	r7, r0
   d5512:	2800      	cmp	r0, #0
   d5514:	f43f aef5 	beq.w	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5518:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d551a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d551e:	42ac      	cmp	r4, r5
   d5520:	f043 0301 	orr.w	r3, r3, #1
   d5524:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5528:	bf0c      	ite	eq
   d552a:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d552e:	4622      	movne	r2, r4
   d5530:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d5532:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d5536:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d553a:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d553e:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5540:	f7ff fd83 	bl	d504a <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5544:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5546:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5548:	f887 a01a 	strb.w	sl, [r7, #26]
   d554c:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5550:	f002 021f 	and.w	r2, r2, #31
   d5554:	230d      	movs	r3, #13
   d5556:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5558:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d555c:	435a      	muls	r2, r3
   d555e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5560:	9902      	ldr	r1, [sp, #8]
   d5562:	4291      	cmp	r1, r2
   d5564:	d915      	bls.n	d5592 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5566:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d556a:	2b04      	cmp	r3, #4
   d556c:	fa5f fc83 	uxtb.w	ip, r3
   d5570:	f103 0001 	add.w	r0, r3, #1
   d5574:	d813      	bhi.n	d559e <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5576:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d557a:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d557e:	280d      	cmp	r0, #13
   d5580:	f102 0201 	add.w	r2, r2, #1
   d5584:	4603      	mov	r3, r0
   d5586:	d1eb      	bne.n	d5560 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5588:	3c01      	subs	r4, #1
   d558a:	b2e4      	uxtb	r4, r4
   d558c:	2c00      	cmp	r4, #0
   d558e:	d1bb      	bne.n	d5508 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d5590:	e00e      	b.n	d55b0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5592:	bf14      	ite	ne
   d5594:	f04f 31ff 	movne.w	r1, #4294967295
   d5598:	2100      	moveq	r1, #0
   d559a:	b289      	uxth	r1, r1
   d559c:	e7e5      	b.n	d556a <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d559e:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d55a2:	bf94      	ite	ls
   d55a4:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d55a8:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d55ac:	8099      	strh	r1, [r3, #4]
   d55ae:	e7e6      	b.n	d557e <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d55b0:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d55b2:	4621      	mov	r1, r4
   d55b4:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d55b6:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d55ba:	f000 f977 	bl	d58ac <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d55be:	4607      	mov	r7, r0
   d55c0:	2800      	cmp	r0, #0
   d55c2:	f43f ae9e 	beq.w	d5302 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d55c6:	2220      	movs	r2, #32
   d55c8:	4621      	mov	r1, r4
   d55ca:	f003 fd91 	bl	d90f0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d55ce:	464b      	mov	r3, r9
   d55d0:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d55d4:	603a      	str	r2, [r7, #0]
   d55d6:	685a      	ldr	r2, [r3, #4]
   d55d8:	607a      	str	r2, [r7, #4]
   d55da:	891a      	ldrh	r2, [r3, #8]
   d55dc:	813a      	strh	r2, [r7, #8]
   d55de:	7a9b      	ldrb	r3, [r3, #10]
   d55e0:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d55e2:	f899 3000 	ldrb.w	r3, [r9]
   d55e6:	f003 0318 	and.w	r3, r3, #24
   d55ea:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d55ec:	4b18      	ldr	r3, [pc, #96]	; (d5650 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d55ee:	681b      	ldr	r3, [r3, #0]
   d55f0:	b12b      	cbz	r3, d55fe <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d55f2:	f107 010e 	add.w	r1, r7, #14
   d55f6:	f107 0010 	add.w	r0, r7, #16
   d55fa:	4798      	blx	r3
   d55fc:	e006      	b.n	d560c <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d55fe:	2321      	movs	r3, #33	; 0x21
   d5600:	743b      	strb	r3, [r7, #16]
   d5602:	2328      	movs	r3, #40	; 0x28
   d5604:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d5606:	2308      	movs	r3, #8
   d5608:	73bc      	strb	r4, [r7, #14]
   d560a:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d560c:	8a3b      	ldrh	r3, [r7, #16]
   d560e:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5610:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5612:	89fb      	ldrh	r3, [r7, #14]
   d5614:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5616:	68b2      	ldr	r2, [r6, #8]
   d5618:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d561c:	f043 0301 	orr.w	r3, r3, #1
   d5620:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5624:	9500      	str	r5, [sp, #0]
   d5626:	465b      	mov	r3, fp
   d5628:	4652      	mov	r2, sl
   d562a:	4631      	mov	r1, r6
   d562c:	9805      	ldr	r0, [sp, #20]
   d562e:	f000 f9a3 	bl	d5978 <_ZN7FatFile15openCachedEntryEPS_tih>
   d5632:	e009      	b.n	d5648 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5634:	2701      	movs	r7, #1
   d5636:	e677      	b.n	d5328 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5638:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d563c:	f1be 0f0d 	cmp.w	lr, #13
   d5640:	f43f ae82 	beq.w	d5348 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5644:	46d4      	mov	ip, sl
   d5646:	e6c3      	b.n	d53d0 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5648:	b009      	add	sp, #36	; 0x24
   d564a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d564e:	bf00      	nop
   d5650:	2003e3d0 	.word	0x2003e3d0

000d5654 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5654:	f001 b96e 	b.w	d6934 <HAL_Pin_Map>

000d5658 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5658:	f001 b96c 	b.w	d6934 <HAL_Pin_Map>

000d565c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d565c:	f001 b96a 	b.w	d6934 <HAL_Pin_Map>

000d5660 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5660:	f001 b968 	b.w	d6934 <HAL_Pin_Map>

000d5664 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5664:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5666:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5668:	f043 0304 	orr.w	r3, r3, #4
   d566c:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d566e:	f100 0210 	add.w	r2, r0, #16
   d5672:	6880      	ldr	r0, [r0, #8]
   d5674:	f000 bc12 	b.w	d5e9c <_ZN9FatVolume15allocateClusterEmPm>

000d5678 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d567c:	7803      	ldrb	r3, [r0, #0]
   d567e:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5682:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5684:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5688:	b10b      	cbz	r3, d568e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d568a:	2600      	movs	r6, #0
   d568c:	e02e      	b.n	d56ec <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d568e:	6942      	ldr	r2, [r0, #20]
   d5690:	4b18      	ldr	r3, [pc, #96]	; (d56f4 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d5692:	429a      	cmp	r2, r3
   d5694:	d8f9      	bhi.n	d568a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5696:	f7ff ffe5 	bl	d5664 <_ZN7FatFile10addClusterEv>
   d569a:	4606      	mov	r6, r0
   d569c:	2800      	cmp	r0, #0
   d569e:	d0f4      	beq.n	d568a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d56a0:	6921      	ldr	r1, [r4, #16]
   d56a2:	68a0      	ldr	r0, [r4, #8]
   d56a4:	f000 fb8f 	bl	d5dc6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d56a8:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d56aa:	68a0      	ldr	r0, [r4, #8]
   d56ac:	2205      	movs	r2, #5
   d56ae:	4639      	mov	r1, r7
   d56b0:	3024      	adds	r0, #36	; 0x24
   d56b2:	f000 fb64 	bl	d5d7e <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d56b6:	4680      	mov	r8, r0
   d56b8:	2800      	cmp	r0, #0
   d56ba:	d0e6      	beq.n	d568a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d56bc:	4629      	mov	r1, r5
   d56be:	f44f 7200 	mov.w	r2, #512	; 0x200
   d56c2:	f003 fd15 	bl	d90f0 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d56c6:	2501      	movs	r5, #1
   d56c8:	68a3      	ldr	r3, [r4, #8]
   d56ca:	791a      	ldrb	r2, [r3, #4]
   d56cc:	42aa      	cmp	r2, r5
   d56ce:	d909      	bls.n	d56e4 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d56d0:	4642      	mov	r2, r8
   d56d2:	19e9      	adds	r1, r5, r7
   d56d4:	6818      	ldr	r0, [r3, #0]
   d56d6:	f000 fecf 	bl	d6478 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d56da:	2800      	cmp	r0, #0
   d56dc:	d0d5      	beq.n	d568a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d56de:	3501      	adds	r5, #1
   d56e0:	b2ed      	uxtb	r5, r5
   d56e2:	e7f1      	b.n	d56c8 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d56e4:	6963      	ldr	r3, [r4, #20]
   d56e6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d56ea:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d56ec:	4630      	mov	r0, r6
   d56ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d56f2:	bf00      	nop
   d56f4:	001ffdff 	.word	0x001ffdff

000d56f8 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d56f8:	b510      	push	{r4, lr}
   d56fa:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d56fc:	6880      	ldr	r0, [r0, #8]
   d56fe:	460a      	mov	r2, r1
   d5700:	3024      	adds	r0, #36	; 0x24
   d5702:	69a1      	ldr	r1, [r4, #24]
   d5704:	f000 fb3b 	bl	d5d7e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5708:	b120      	cbz	r0, d5714 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d570a:	88a3      	ldrh	r3, [r4, #4]
   d570c:	f003 030f 	and.w	r3, r3, #15
   d5710:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5714:	bd10      	pop	{r4, pc}

000d5716 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5716:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5718:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d571a:	4605      	mov	r5, r0
   d571c:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d571e:	b984      	cbnz	r4, d5742 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5720:	2224      	movs	r2, #36	; 0x24
   d5722:	4621      	mov	r1, r4
   d5724:	f003 fce4 	bl	d90f0 <memset>

  m_vol = vol;
   d5728:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d572a:	79f3      	ldrb	r3, [r6, #7]
   d572c:	2b10      	cmp	r3, #16
   d572e:	d003      	beq.n	d5738 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5730:	2b20      	cmp	r3, #32
   d5732:	d106      	bne.n	d5742 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5734:	2340      	movs	r3, #64	; 0x40
   d5736:	e000      	b.n	d573a <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5738:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d573a:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d573c:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d573e:	70a8      	strb	r0, [r5, #2]
   d5740:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5742:	2000      	movs	r0, #0
   d5744:	bd70      	pop	{r4, r5, r6, pc}

000d5746 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5746:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d574a:	7803      	ldrb	r3, [r0, #0]
   d574c:	4604      	mov	r4, r0
   d574e:	4689      	mov	r9, r1
   d5750:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5752:	b14b      	cbz	r3, d5768 <_ZN7FatFile4readEPvj+0x22>
   d5754:	7882      	ldrb	r2, [r0, #2]
   d5756:	07d1      	lsls	r1, r2, #31
   d5758:	d506      	bpl.n	d5768 <_ZN7FatFile4readEPvj+0x22>
   d575a:	e00c      	b.n	d5776 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d575c:	465a      	mov	r2, fp
   d575e:	6921      	ldr	r1, [r4, #16]
   d5760:	f000 fb37 	bl	d5dd2 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5764:	2800      	cmp	r0, #0
   d5766:	da3d      	bge.n	d57e4 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5768:	7863      	ldrb	r3, [r4, #1]
   d576a:	f043 0302 	orr.w	r3, r3, #2
   d576e:	7063      	strb	r3, [r4, #1]
  return -1;
   d5770:	f04f 30ff 	mov.w	r0, #4294967295
   d5774:	e097      	b.n	d58a6 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5776:	071a      	lsls	r2, r3, #28
   d5778:	d503      	bpl.n	d5782 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d577a:	69e3      	ldr	r3, [r4, #28]
   d577c:	6962      	ldr	r2, [r4, #20]
   d577e:	1a9b      	subs	r3, r3, r2
   d5780:	e007      	b.n	d5792 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5782:	069a      	lsls	r2, r3, #26
   d5784:	d508      	bpl.n	d5798 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5786:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5788:	891a      	ldrh	r2, [r3, #8]
   d578a:	6963      	ldr	r3, [r4, #20]
   d578c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5790:	b29b      	uxth	r3, r3
   d5792:	429d      	cmp	r5, r3
   d5794:	bf28      	it	cs
   d5796:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5798:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d579a:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d579e:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d57a2:	2e00      	cmp	r6, #0
   d57a4:	d035      	beq.n	d5812 <_ZN7FatFile4readEPvj+0xcc>
   d57a6:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d57a8:	6963      	ldr	r3, [r4, #20]
   d57aa:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d57ac:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d57b0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d57b4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d57b8:	d002      	beq.n	d57c0 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d57ba:	6a03      	ldr	r3, [r0, #32]
   d57bc:	4419      	add	r1, r3
   d57be:	e01d      	b.n	d57fc <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d57c0:	f890 8005 	ldrb.w	r8, [r0, #5]
   d57c4:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d57c8:	f1ba 0f00 	cmp.w	sl, #0
   d57cc:	d110      	bne.n	d57f0 <_ZN7FatFile4readEPvj+0xaa>
   d57ce:	f1b8 0f00 	cmp.w	r8, #0
   d57d2:	d10d      	bne.n	d57f0 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d57d4:	2b00      	cmp	r3, #0
   d57d6:	d1c1      	bne.n	d575c <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d57d8:	0653      	lsls	r3, r2, #25
   d57da:	bf4c      	ite	mi
   d57dc:	6a03      	ldrmi	r3, [r0, #32]
   d57de:	6a23      	ldrpl	r3, [r4, #32]
   d57e0:	6123      	str	r3, [r4, #16]
   d57e2:	e005      	b.n	d57f0 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d57e4:	d104      	bne.n	d57f0 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d57e6:	7823      	ldrb	r3, [r4, #0]
   d57e8:	f013 0f70 	tst.w	r3, #112	; 0x70
   d57ec:	d111      	bne.n	d5812 <_ZN7FatFile4readEPvj+0xcc>
   d57ee:	e7bb      	b.n	d5768 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d57f0:	6921      	ldr	r1, [r4, #16]
   d57f2:	68a0      	ldr	r0, [r4, #8]
   d57f4:	f000 fae7 	bl	d5dc6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d57f8:	eb08 0100 	add.w	r1, r8, r0
   d57fc:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d57fe:	f1ba 0f00 	cmp.w	sl, #0
   d5802:	d135      	bne.n	d5870 <_ZN7FatFile4readEPvj+0x12a>
   d5804:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5808:	d332      	bcc.n	d5870 <_ZN7FatFile4readEPvj+0x12a>
   d580a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d580c:	4299      	cmp	r1, r3
   d580e:	d102      	bne.n	d5816 <_ZN7FatFile4readEPvj+0xd0>
   d5810:	e02e      	b.n	d5870 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5812:	1ba8      	subs	r0, r5, r6
   d5814:	e047      	b.n	d58a6 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5816:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d581a:	d31b      	bcc.n	d5854 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d581c:	7822      	ldrb	r2, [r4, #0]
   d581e:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5820:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5824:	d406      	bmi.n	d5834 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5826:	7902      	ldrb	r2, [r0, #4]
   d5828:	ebc8 0202 	rsb	r2, r8, r2
   d582c:	b2d2      	uxtb	r2, r2
   d582e:	4592      	cmp	sl, r2
   d5830:	bf28      	it	cs
   d5832:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5834:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5836:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d583a:	d207      	bcs.n	d584c <_ZN7FatFile4readEPvj+0x106>
   d583c:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d583e:	4653      	mov	r3, sl
   d5840:	464a      	mov	r2, r9
   d5842:	6800      	ldr	r0, [r0, #0]
   d5844:	f000 fdd6 	bl	d63f4 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5848:	b960      	cbnz	r0, d5864 <_ZN7FatFile4readEPvj+0x11e>
   d584a:	e78d      	b.n	d5768 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d584c:	4453      	add	r3, sl
   d584e:	4299      	cmp	r1, r3
   d5850:	d321      	bcc.n	d5896 <_ZN7FatFile4readEPvj+0x150>
   d5852:	e7f3      	b.n	d583c <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5854:	464a      	mov	r2, r9
   d5856:	6800      	ldr	r0, [r0, #0]
   d5858:	f000 fd84 	bl	d6364 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d585c:	2800      	cmp	r0, #0
   d585e:	d083      	beq.n	d5768 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5860:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5864:	6963      	ldr	r3, [r4, #20]
   d5866:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5868:	44b9      	add	r9, r7
    m_curPosition += n;
   d586a:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d586c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d586e:	e798      	b.n	d57a2 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5870:	2200      	movs	r2, #0
   d5872:	3024      	adds	r0, #36	; 0x24
   d5874:	f000 fa83 	bl	d5d7e <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5878:	2800      	cmp	r0, #0
   d587a:	f43f af75 	beq.w	d5768 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d587e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5882:	42b7      	cmp	r7, r6
   d5884:	bf28      	it	cs
   d5886:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5888:	eb00 010a 	add.w	r1, r0, sl
   d588c:	463a      	mov	r2, r7
   d588e:	4648      	mov	r0, r9
   d5890:	f003 fc23 	bl	d90da <memcpy>
   d5894:	e7e6      	b.n	d5864 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5896:	3024      	adds	r0, #36	; 0x24
   d5898:	9101      	str	r1, [sp, #4]
   d589a:	f000 fa49 	bl	d5d30 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d589e:	9901      	ldr	r1, [sp, #4]
   d58a0:	2800      	cmp	r0, #0
   d58a2:	d1cb      	bne.n	d583c <_ZN7FatFile4readEPvj+0xf6>
   d58a4:	e760      	b.n	d5768 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d58a6:	b003      	add	sp, #12
   d58a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d58ac <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d58ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d58ae:	6943      	ldr	r3, [r0, #20]
   d58b0:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d58b4:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d58b6:	b105      	cbz	r5, d58ba <_ZN7FatFile12readDirCacheEb+0xe>
   d58b8:	b969      	cbnz	r1, d58d6 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d58ba:	2201      	movs	r2, #1
   d58bc:	f10d 0107 	add.w	r1, sp, #7
   d58c0:	4620      	mov	r0, r4
   d58c2:	f7ff ff40 	bl	d5746 <_ZN7FatFile4readEPvj>
   d58c6:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d58c8:	2801      	cmp	r0, #1
   d58ca:	d001      	beq.n	d58d0 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d58cc:	2000      	movs	r0, #0
   d58ce:	e008      	b.n	d58e2 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d58d0:	6963      	ldr	r3, [r4, #20]
   d58d2:	331f      	adds	r3, #31
   d58d4:	e000      	b.n	d58d8 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d58d6:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d58d8:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d58da:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d58dc:	3030      	adds	r0, #48	; 0x30
   d58de:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d58e2:	b003      	add	sp, #12
   d58e4:	bd30      	pop	{r4, r5, pc}

000d58e6 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d58e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d58ea:	460e      	mov	r6, r1
   d58ec:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d58ee:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d58f0:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d58f2:	2900      	cmp	r1, #0
   d58f4:	d039      	beq.n	d596a <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d58f6:	6945      	ldr	r5, [r0, #20]
   d58f8:	42b5      	cmp	r5, r6
   d58fa:	d03a      	beq.n	d5972 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d58fc:	b90e      	cbnz	r6, d5902 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d58fe:	6106      	str	r6, [r0, #16]
    goto done;
   d5900:	e031      	b.n	d5966 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5902:	070b      	lsls	r3, r1, #28
   d5904:	d503      	bpl.n	d590e <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5906:	69c3      	ldr	r3, [r0, #28]
   d5908:	429e      	cmp	r6, r3
   d590a:	d82e      	bhi.n	d596a <_ZN7FatFile7seekSetEm+0x84>
   d590c:	e007      	b.n	d591e <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d590e:	0688      	lsls	r0, r1, #26
   d5910:	d505      	bpl.n	d591e <_ZN7FatFile7seekSetEm+0x38>
   d5912:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5914:	891b      	ldrh	r3, [r3, #8]
   d5916:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d591a:	d826      	bhi.n	d596a <_ZN7FatFile7seekSetEm+0x84>
   d591c:	e023      	b.n	d5966 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d591e:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5922:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5926:	1e6a      	subs	r2, r5, #1
   d5928:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d592c:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d592e:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5930:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5932:	429a      	cmp	r2, r3
   d5934:	d800      	bhi.n	d5938 <_ZN7FatFile7seekSetEm+0x52>
   d5936:	b94d      	cbnz	r5, d594c <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5938:	064a      	lsls	r2, r1, #25
   d593a:	bf4c      	ite	mi
   d593c:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5940:	6a22      	ldrpl	r2, [r4, #32]
   d5942:	6122      	str	r2, [r4, #16]
   d5944:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5946:	f104 0810 	add.w	r8, r4, #16
   d594a:	e00a      	b.n	d5962 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d594c:	1a9b      	subs	r3, r3, r2
   d594e:	e7f9      	b.n	d5944 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5950:	4642      	mov	r2, r8
   d5952:	6921      	ldr	r1, [r4, #16]
   d5954:	68a0      	ldr	r0, [r4, #8]
   d5956:	f000 fa3c 	bl	d5dd2 <_ZN9FatVolume6fatGetEmPm>
   d595a:	2800      	cmp	r0, #0
   d595c:	f105 35ff 	add.w	r5, r5, #4294967295
   d5960:	dd03      	ble.n	d596a <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5962:	2d00      	cmp	r5, #0
   d5964:	d1f4      	bne.n	d5950 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5966:	6166      	str	r6, [r4, #20]
   d5968:	e003      	b.n	d5972 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d596a:	6127      	str	r7, [r4, #16]
  return false;
   d596c:	2000      	movs	r0, #0
   d596e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5972:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5978 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d597a:	460f      	mov	r7, r1
   d597c:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d597e:	2100      	movs	r1, #0
   d5980:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5982:	4604      	mov	r4, r0
   d5984:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5986:	f003 fbb3 	bl	d90f0 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d598a:	68b8      	ldr	r0, [r7, #8]
   d598c:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d598e:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5992:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5994:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5998:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d599a:	6a3b      	ldr	r3, [r7, #32]
   d599c:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d599e:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d59a0:	7acb      	ldrb	r3, [r1, #11]
   d59a2:	071d      	lsls	r5, r3, #28
   d59a4:	d44c      	bmi.n	d5a40 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d59a6:	1883      	adds	r3, r0, r2
   d59a8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d59ac:	f003 0317 	and.w	r3, r3, #23
   d59b0:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d59b2:	7ac9      	ldrb	r1, [r1, #11]
   d59b4:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d59b8:	bf04      	itt	eq
   d59ba:	f043 0308 	orreq.w	r3, r3, #8
   d59be:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d59c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d59c4:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d59c6:	f006 0303 	and.w	r3, r6, #3
   d59ca:	2b01      	cmp	r3, #1
   d59cc:	d009      	beq.n	d59e2 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d59ce:	2b02      	cmp	r3, #2
   d59d0:	d005      	beq.n	d59de <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d59d2:	2b00      	cmp	r3, #0
   d59d4:	d134      	bne.n	d5a40 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d59d6:	0571      	lsls	r1, r6, #21
   d59d8:	d432      	bmi.n	d5a40 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d59da:	2301      	movs	r3, #1
   d59dc:	e002      	b.n	d59e4 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d59de:	2303      	movs	r3, #3
   d59e0:	e000      	b.n	d59e4 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d59e2:	2302      	movs	r3, #2
   d59e4:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d59e6:	78a1      	ldrb	r1, [r4, #2]
   d59e8:	078b      	lsls	r3, r1, #30
   d59ea:	d503      	bpl.n	d59f4 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d59ec:	7823      	ldrb	r3, [r4, #0]
   d59ee:	f013 0f11 	tst.w	r3, #17
   d59f2:	d125      	bne.n	d5a40 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d59f4:	b24b      	sxtb	r3, r1
   d59f6:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d59fa:	f006 0108 	and.w	r1, r6, #8
   d59fe:	bf14      	ite	ne
   d5a00:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5a04:	2700      	moveq	r7, #0
   d5a06:	4319      	orrs	r1, r3
   d5a08:	4339      	orrs	r1, r7
   d5a0a:	70a1      	strb	r1, [r4, #2]
   d5a0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5a0e:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5a10:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5a12:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5a14:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5a18:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5a1c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5a20:	d504      	bpl.n	d5a2c <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5a22:	b181      	cbz	r1, d5a46 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5a24:	f000 fa75 	bl	d5f12 <_ZN9FatVolume9freeChainEm>
   d5a28:	b968      	cbnz	r0, d5a46 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5a2a:	e009      	b.n	d5a40 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5a2c:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5a2e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5a30:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5a32:	0473      	lsls	r3, r6, #17
   d5a34:	d50c      	bpl.n	d5a50 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5a36:	69e1      	ldr	r1, [r4, #28]
   d5a38:	4620      	mov	r0, r4
   d5a3a:	f7ff ff54 	bl	d58e6 <_ZN7FatFile7seekSetEm>
   d5a3e:	b938      	cbnz	r0, d5a50 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5a40:	2000      	movs	r0, #0
   d5a42:	7020      	strb	r0, [r4, #0]
  return false;
   d5a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5a46:	78a3      	ldrb	r3, [r4, #2]
   d5a48:	f043 0304 	orr.w	r3, r3, #4
   d5a4c:	70a3      	strb	r3, [r4, #2]
   d5a4e:	e7f0      	b.n	d5a32 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5a50:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a54 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5a54:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5a56:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5a58:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5a5a:	b90b      	cbnz	r3, d5a60 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5a5c:	2001      	movs	r0, #1
   d5a5e:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5a60:	7883      	ldrb	r3, [r0, #2]
   d5a62:	075a      	lsls	r2, r3, #29
   d5a64:	d523      	bpl.n	d5aae <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5a66:	2101      	movs	r1, #1
   d5a68:	f7ff fe46 	bl	d56f8 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5a6c:	4605      	mov	r5, r0
   d5a6e:	b928      	cbnz	r0, d5a7c <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5a70:	7863      	ldrb	r3, [r4, #1]
   d5a72:	f043 0301 	orr.w	r3, r3, #1
   d5a76:	7063      	strb	r3, [r4, #1]
  return false;
   d5a78:	2000      	movs	r0, #0
   d5a7a:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5a7c:	7803      	ldrb	r3, [r0, #0]
   d5a7e:	2be5      	cmp	r3, #229	; 0xe5
   d5a80:	d0f6      	beq.n	d5a70 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5a82:	7823      	ldrb	r3, [r4, #0]
   d5a84:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5a86:	bf44      	itt	mi
   d5a88:	69e3      	ldrmi	r3, [r4, #28]
   d5a8a:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5a8c:	8c23      	ldrh	r3, [r4, #32]
   d5a8e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5a90:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5a92:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5a94:	4b09      	ldr	r3, [pc, #36]	; (d5abc <_ZN7FatFile4syncEv+0x68>)
   d5a96:	681b      	ldr	r3, [r3, #0]
   d5a98:	b12b      	cbz	r3, d5aa6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5a9a:	f100 0116 	add.w	r1, r0, #22
   d5a9e:	3018      	adds	r0, #24
   d5aa0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5aa2:	8b2b      	ldrh	r3, [r5, #24]
   d5aa4:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5aa6:	78a3      	ldrb	r3, [r4, #2]
   d5aa8:	f023 0304 	bic.w	r3, r3, #4
   d5aac:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5aae:	68a0      	ldr	r0, [r4, #8]
   d5ab0:	f7ff fabe 	bl	d5030 <_ZN9FatVolume9cacheSyncEv>
   d5ab4:	2800      	cmp	r0, #0
   d5ab6:	d0db      	beq.n	d5a70 <_ZN7FatFile4syncEv+0x1c>
   d5ab8:	e7d0      	b.n	d5a5c <_ZN7FatFile4syncEv+0x8>
   d5aba:	bf00      	nop
   d5abc:	2003e3d0 	.word	0x2003e3d0

000d5ac0 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5ac0:	b510      	push	{r4, lr}
   d5ac2:	4604      	mov	r4, r0
  bool rtn = sync();
   d5ac4:	f7ff ffc6 	bl	d5a54 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5ac8:	2300      	movs	r3, #0
   d5aca:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5acc:	bd10      	pop	{r4, pc}

000d5ace <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5ace:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ad0:	b093      	sub	sp, #76	; 0x4c
   d5ad2:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5ad4:	2300      	movs	r3, #0
   d5ad6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5ada:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5ade:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5ae0:	9201      	str	r2, [sp, #4]
   d5ae2:	4606      	mov	r6, r0
   d5ae4:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5ae6:	b10b      	cbz	r3, d5aec <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5ae8:	2000      	movs	r0, #0
   d5aea:	e03d      	b.n	d5b68 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5aec:	780b      	ldrb	r3, [r1, #0]
   d5aee:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5af2:	d0f9      	beq.n	d5ae8 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5af4:	7813      	ldrb	r3, [r2, #0]
   d5af6:	2b2f      	cmp	r3, #47	; 0x2f
   d5af8:	d112      	bne.n	d5b20 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5afa:	9b01      	ldr	r3, [sp, #4]
   d5afc:	781a      	ldrb	r2, [r3, #0]
   d5afe:	2a2f      	cmp	r2, #47	; 0x2f
   d5b00:	d102      	bne.n	d5b08 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5b02:	3301      	adds	r3, #1
   d5b04:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5b06:	e7f8      	b.n	d5afa <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5b08:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5b0a:	b91a      	cbnz	r2, d5b14 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5b0c:	4630      	mov	r0, r6
   d5b0e:	f7ff fe02 	bl	d5716 <_ZN7FatFile8openRootEP9FatVolume>
   d5b12:	e029      	b.n	d5b68 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5b14:	a809      	add	r0, sp, #36	; 0x24
   d5b16:	f7ff fdfe 	bl	d5716 <_ZN7FatFile8openRootEP9FatVolume>
   d5b1a:	2800      	cmp	r0, #0
   d5b1c:	d0e4      	beq.n	d5ae8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5b1e:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5b20:	aa01      	add	r2, sp, #4
   d5b22:	a903      	add	r1, sp, #12
   d5b24:	9801      	ldr	r0, [sp, #4]
   d5b26:	f7ff fa9f 	bl	d5068 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5b2a:	2800      	cmp	r0, #0
   d5b2c:	d0dc      	beq.n	d5ae8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5b2e:	9b01      	ldr	r3, [sp, #4]
   d5b30:	781b      	ldrb	r3, [r3, #0]
   d5b32:	b19b      	cbz	r3, d5b5c <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5b34:	2300      	movs	r3, #0
   d5b36:	aa03      	add	r2, sp, #12
   d5b38:	4621      	mov	r1, r4
   d5b3a:	4630      	mov	r0, r6
   d5b3c:	f7ff fbd6 	bl	d52ec <_ZN7FatFile4openEPS_P7fname_ti>
   d5b40:	2800      	cmp	r0, #0
   d5b42:	d0d1      	beq.n	d5ae8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5b44:	4635      	mov	r5, r6
   d5b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b48:	ac09      	add	r4, sp, #36	; 0x24
   d5b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b50:	682b      	ldr	r3, [r5, #0]
   d5b52:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5b54:	4630      	mov	r0, r6
   d5b56:	f7ff ffb3 	bl	d5ac0 <_ZN7FatFile5closeEv>
   d5b5a:	e7e0      	b.n	d5b1e <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5b5c:	463b      	mov	r3, r7
   d5b5e:	aa03      	add	r2, sp, #12
   d5b60:	4621      	mov	r1, r4
   d5b62:	4630      	mov	r0, r6
   d5b64:	f7ff fbc2 	bl	d52ec <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d5b68:	b013      	add	sp, #76	; 0x4c
   d5b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b6c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5b70:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5b72:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5b74:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5b76:	4604      	mov	r4, r0
   d5b78:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5b7a:	d508      	bpl.n	d5b8e <_ZN7FatFile5writeEPKvj+0x22>
   d5b7c:	7883      	ldrb	r3, [r0, #2]
   d5b7e:	079a      	lsls	r2, r3, #30
   d5b80:	d505      	bpl.n	d5b8e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5b82:	071b      	lsls	r3, r3, #28
   d5b84:	d50b      	bpl.n	d5b9e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5b86:	69e1      	ldr	r1, [r4, #28]
   d5b88:	f7ff fead 	bl	d58e6 <_ZN7FatFile7seekSetEm>
   d5b8c:	b938      	cbnz	r0, d5b9e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5b8e:	7863      	ldrb	r3, [r4, #1]
   d5b90:	f043 0301 	orr.w	r3, r3, #1
   d5b94:	7063      	strb	r3, [r4, #1]
  return -1;
   d5b96:	f04f 30ff 	mov.w	r0, #4294967295
   d5b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5b9e:	6963      	ldr	r3, [r4, #20]
   d5ba0:	43db      	mvns	r3, r3
   d5ba2:	4598      	cmp	r8, r3
   d5ba4:	d8f3      	bhi.n	d5b8e <_ZN7FatFile5writeEPKvj+0x22>
   d5ba6:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5ba8:	f04f 0a00 	mov.w	sl, #0
   d5bac:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5bae:	2e00      	cmp	r6, #0
   d5bb0:	f000 8081 	beq.w	d5cb6 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5bb4:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5bb6:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5bb8:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5bbc:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5bc0:	d11c      	bne.n	d5bfc <_ZN7FatFile5writeEPKvj+0x90>
   d5bc2:	b9df      	cbnz	r7, d5bfc <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5bc4:	6921      	ldr	r1, [r4, #16]
   d5bc6:	b171      	cbz	r1, d5be6 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5bc8:	f104 0210 	add.w	r2, r4, #16
   d5bcc:	f000 f901 	bl	d5dd2 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5bd0:	2800      	cmp	r0, #0
   d5bd2:	dbdc      	blt.n	d5b8e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5bd4:	f040 808e 	bne.w	d5cf4 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5bd8:	4620      	mov	r0, r4
   d5bda:	f7ff fd43 	bl	d5664 <_ZN7FatFile10addClusterEv>
   d5bde:	2800      	cmp	r0, #0
   d5be0:	f040 8088 	bne.w	d5cf4 <_ZN7FatFile5writeEPKvj+0x188>
   d5be4:	e7d3      	b.n	d5b8e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5be6:	6a23      	ldr	r3, [r4, #32]
   d5be8:	b93b      	cbnz	r3, d5bfa <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5bea:	4620      	mov	r0, r4
   d5bec:	f7ff fd3a 	bl	d5664 <_ZN7FatFile10addClusterEv>
   d5bf0:	2800      	cmp	r0, #0
   d5bf2:	d0cc      	beq.n	d5b8e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5bf4:	6923      	ldr	r3, [r4, #16]
   d5bf6:	6223      	str	r3, [r4, #32]
   d5bf8:	e000      	b.n	d5bfc <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5bfa:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5bfc:	6921      	ldr	r1, [r4, #16]
   d5bfe:	68a0      	ldr	r0, [r4, #8]
   d5c00:	f000 f8e1 	bl	d5dc6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5c04:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5c06:	b917      	cbnz	r7, d5c0e <_ZN7FatFile5writeEPKvj+0xa2>
   d5c08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5c0c:	d221      	bcs.n	d5c52 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5c0e:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5c12:	42b5      	cmp	r5, r6
   d5c14:	bf28      	it	cs
   d5c16:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5c18:	b937      	cbnz	r7, d5c28 <_ZN7FatFile5writeEPKvj+0xbc>
   d5c1a:	6963      	ldr	r3, [r4, #20]
   d5c1c:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5c1e:	4293      	cmp	r3, r2
   d5c20:	bf34      	ite	cc
   d5c22:	2201      	movcc	r2, #1
   d5c24:	2205      	movcs	r2, #5
   d5c26:	e000      	b.n	d5c2a <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5c28:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5c2a:	68a0      	ldr	r0, [r4, #8]
   d5c2c:	3024      	adds	r0, #36	; 0x24
   d5c2e:	f000 f8a6 	bl	d5d7e <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5c32:	2800      	cmp	r0, #0
   d5c34:	d0ab      	beq.n	d5b8e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5c36:	4438      	add	r0, r7
   d5c38:	462a      	mov	r2, r5
   d5c3a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5c3c:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5c3e:	f003 fa4c 	bl	d90da <memcpy>
      if (512 == (n + blockOffset)) {
   d5c42:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5c46:	d130      	bne.n	d5caa <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5c48:	68a0      	ldr	r0, [r4, #8]
   d5c4a:	3024      	adds	r0, #36	; 0x24
   d5c4c:	f000 f870 	bl	d5d30 <_ZN8FatCache4syncEv>
   d5c50:	e017      	b.n	d5c82 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5c52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5c56:	68a0      	ldr	r0, [r4, #8]
   d5c58:	d315      	bcc.n	d5c86 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5c5a:	7902      	ldrb	r2, [r0, #4]
   d5c5c:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5c5e:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5c60:	b2d2      	uxtb	r2, r2
   d5c62:	4293      	cmp	r3, r2
   d5c64:	bf28      	it	cs
   d5c66:	4613      	movcs	r3, r2
   d5c68:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5c6a:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5c6c:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5c70:	d302      	bcc.n	d5c78 <_ZN7FatFile5writeEPKvj+0x10c>
   d5c72:	441a      	add	r2, r3
   d5c74:	4291      	cmp	r1, r2
   d5c76:	d337      	bcc.n	d5ce8 <_ZN7FatFile5writeEPKvj+0x17c>
   d5c78:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5c7a:	464a      	mov	r2, r9
   d5c7c:	6838      	ldr	r0, [r7, #0]
   d5c7e:	f000 fc6d 	bl	d655c <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5c82:	b990      	cbnz	r0, d5caa <_ZN7FatFile5writeEPKvj+0x13e>
   d5c84:	e783      	b.n	d5b8e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5c86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5c88:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5c8a:	bf02      	ittt	eq
   d5c8c:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5c90:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5c94:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5c96:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5c98:	464a      	mov	r2, r9
   d5c9a:	6818      	ldr	r0, [r3, #0]
   d5c9c:	f000 fbec 	bl	d6478 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5ca0:	2800      	cmp	r0, #0
   d5ca2:	f43f af74 	beq.w	d5b8e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5ca6:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5caa:	6963      	ldr	r3, [r4, #20]
   d5cac:	442b      	add	r3, r5
   d5cae:	6163      	str	r3, [r4, #20]
    src += n;
   d5cb0:	44a9      	add	r9, r5
    nToWrite -= n;
   d5cb2:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5cb4:	e77a      	b.n	d5bac <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5cb6:	69e2      	ldr	r2, [r4, #28]
   d5cb8:	4293      	cmp	r3, r2
   d5cba:	d901      	bls.n	d5cc0 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5cbc:	61e3      	str	r3, [r4, #28]
   d5cbe:	e002      	b.n	d5cc6 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5cc0:	4b0f      	ldr	r3, [pc, #60]	; (d5d00 <_ZN7FatFile5writeEPKvj+0x194>)
   d5cc2:	681b      	ldr	r3, [r3, #0]
   d5cc4:	b11b      	cbz	r3, d5cce <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5cc6:	78a3      	ldrb	r3, [r4, #2]
   d5cc8:	f043 0304 	orr.w	r3, r3, #4
   d5ccc:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5cce:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5cd2:	2b00      	cmp	r3, #0
   d5cd4:	db02      	blt.n	d5cdc <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5cd6:	4640      	mov	r0, r8
   d5cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5cdc:	4620      	mov	r0, r4
   d5cde:	f7ff feb9 	bl	d5a54 <_ZN7FatFile4syncEv>
   d5ce2:	2800      	cmp	r0, #0
   d5ce4:	d1f7      	bne.n	d5cd6 <_ZN7FatFile5writeEPKvj+0x16a>
   d5ce6:	e752      	b.n	d5b8e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5ce8:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5cec:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5cf0:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5cf2:	e7c1      	b.n	d5c78 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5cf4:	6921      	ldr	r1, [r4, #16]
   d5cf6:	68a0      	ldr	r0, [r4, #8]
   d5cf8:	f000 f865 	bl	d5dc6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5cfc:	4601      	mov	r1, r0
   d5cfe:	e783      	b.n	d5c08 <_ZN7FatFile5writeEPKvj+0x9c>
   d5d00:	2003e3d0 	.word	0x2003e3d0

000d5d04 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5d04:	f000 be16 	b.w	d6934 <HAL_Pin_Map>

000d5d08 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5d08:	b570      	push	{r4, r5, r6, lr}
   d5d0a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5d0c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5d0e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5d10:	b149      	cbz	r1, d5d26 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5d12:	f003 fa38 	bl	d9186 <strlen>
   d5d16:	682b      	ldr	r3, [r5, #0]
   d5d18:	4602      	mov	r2, r0
   d5d1a:	4621      	mov	r1, r4
   d5d1c:	4628      	mov	r0, r5
   d5d1e:	68db      	ldr	r3, [r3, #12]
    }
   d5d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5d24:	4718      	bx	r3
    }
   d5d26:	bd70      	pop	{r4, r5, r6, pc}

000d5d28 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5d28:	f000 be04 	b.w	d6934 <HAL_Pin_Map>

000d5d2c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5d2c:	f000 be02 	b.w	d6934 <HAL_Pin_Map>

000d5d30 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5d30:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5d32:	7803      	ldrb	r3, [r0, #0]
   d5d34:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5d36:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5d38:	d51e      	bpl.n	d5d78 <_ZN8FatCache4syncEv+0x48>
   d5d3a:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5d3c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5d3e:	f100 060c 	add.w	r6, r0, #12
   d5d42:	4632      	mov	r2, r6
   d5d44:	6818      	ldr	r0, [r3, #0]
   d5d46:	f000 fb97 	bl	d6478 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5d4a:	4605      	mov	r5, r0
   d5d4c:	b908      	cbnz	r0, d5d52 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5d4e:	2500      	movs	r5, #0
   d5d50:	e013      	b.n	d5d7a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5d52:	7823      	ldrb	r3, [r4, #0]
   d5d54:	079b      	lsls	r3, r3, #30
   d5d56:	d404      	bmi.n	d5d62 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5d58:	7823      	ldrb	r3, [r4, #0]
   d5d5a:	f023 0301 	bic.w	r3, r3, #1
   d5d5e:	7023      	strb	r3, [r4, #0]
   d5d60:	e00b      	b.n	d5d7a <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5d62:	6863      	ldr	r3, [r4, #4]
   d5d64:	68a0      	ldr	r0, [r4, #8]
   d5d66:	6919      	ldr	r1, [r3, #16]
   d5d68:	4632      	mov	r2, r6
   d5d6a:	4401      	add	r1, r0
   d5d6c:	6818      	ldr	r0, [r3, #0]
   d5d6e:	f000 fb83 	bl	d6478 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5d72:	2800      	cmp	r0, #0
   d5d74:	d1f0      	bne.n	d5d58 <_ZN8FatCache4syncEv+0x28>
   d5d76:	e7ea      	b.n	d5d4e <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5d78:	2501      	movs	r5, #1

fail:
  return false;
}
   d5d7a:	4628      	mov	r0, r5
   d5d7c:	bd70      	pop	{r4, r5, r6, pc}

000d5d7e <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5d7e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5d80:	6883      	ldr	r3, [r0, #8]
   d5d82:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5d84:	4604      	mov	r4, r0
   d5d86:	460e      	mov	r6, r1
   d5d88:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5d8a:	d014      	beq.n	d5db6 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5d8c:	f7ff ffd0 	bl	d5d30 <_ZN8FatCache4syncEv>
   d5d90:	b908      	cbnz	r0, d5d96 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5d92:	2000      	movs	r0, #0
   d5d94:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5d96:	076b      	lsls	r3, r5, #29
   d5d98:	d503      	bpl.n	d5da2 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5d9a:	2300      	movs	r3, #0
   d5d9c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5d9e:	60a6      	str	r6, [r4, #8]
   d5da0:	e009      	b.n	d5db6 <_ZN8FatCache4readEmh+0x38>
   d5da2:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5da4:	f104 020c 	add.w	r2, r4, #12
   d5da8:	4631      	mov	r1, r6
   d5daa:	6818      	ldr	r0, [r3, #0]
   d5dac:	f000 fada 	bl	d6364 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5db0:	2800      	cmp	r0, #0
   d5db2:	d1f2      	bne.n	d5d9a <_ZN8FatCache4readEmh+0x1c>
   d5db4:	e7ed      	b.n	d5d92 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5db6:	7823      	ldrb	r3, [r4, #0]
   d5db8:	4620      	mov	r0, r4
   d5dba:	f005 0503 	and.w	r5, r5, #3
   d5dbe:	431d      	orrs	r5, r3
   d5dc0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5dc4:	bd70      	pop	{r4, r5, r6, pc}

000d5dc6 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5dc6:	7983      	ldrb	r3, [r0, #6]
   d5dc8:	6940      	ldr	r0, [r0, #20]
   d5dca:	3902      	subs	r1, #2
   d5dcc:	4099      	lsls	r1, r3
}
   d5dce:	4408      	add	r0, r1
   d5dd0:	4770      	bx	lr

000d5dd2 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5dd2:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5dd4:	b570      	push	{r4, r5, r6, lr}
   d5dd6:	4605      	mov	r5, r0
   d5dd8:	460c      	mov	r4, r1
   d5dda:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5ddc:	d802      	bhi.n	d5de4 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5dde:	f04f 30ff 	mov.w	r0, #4294967295
   d5de2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5de4:	69c3      	ldr	r3, [r0, #28]
   d5de6:	4299      	cmp	r1, r3
   d5de8:	d8f9      	bhi.n	d5dde <_ZN9FatVolume6fatGetEmPm+0xc>
   d5dea:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5dec:	2b20      	cmp	r3, #32
   d5dee:	d110      	bne.n	d5e12 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5df0:	6981      	ldr	r1, [r0, #24]
   d5df2:	2202      	movs	r2, #2
   d5df4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5df8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5dfc:	f7ff ffbf 	bl	d5d7e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5e00:	2800      	cmp	r0, #0
   d5e02:	d0ec      	beq.n	d5dde <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5e04:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5e08:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5e0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5e10:	e00f      	b.n	d5e32 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5e12:	2b10      	cmp	r3, #16
   d5e14:	d1e3      	bne.n	d5dde <_ZN9FatVolume6fatGetEmPm+0xc>
   d5e16:	6983      	ldr	r3, [r0, #24]
   d5e18:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5e1c:	2202      	movs	r2, #2
   d5e1e:	4419      	add	r1, r3
   d5e20:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5e24:	f7ff ffab 	bl	d5d7e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5e28:	2800      	cmp	r0, #0
   d5e2a:	d0d8      	beq.n	d5dde <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5e2c:	b2e4      	uxtb	r4, r4
   d5e2e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5e32:	69ea      	ldr	r2, [r5, #28]
   d5e34:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5e36:	bf9a      	itte	ls
   d5e38:	6033      	strls	r3, [r6, #0]
  return 1;
   d5e3a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5e3c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5e3e:	bd70      	pop	{r4, r5, r6, pc}

000d5e40 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5e40:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d5e42:	b538      	push	{r3, r4, r5, lr}
   d5e44:	460c      	mov	r4, r1
   d5e46:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5e48:	d801      	bhi.n	d5e4e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5e4a:	2000      	movs	r0, #0
   d5e4c:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5e4e:	69c3      	ldr	r3, [r0, #28]
   d5e50:	4299      	cmp	r1, r3
   d5e52:	d8fa      	bhi.n	d5e4a <_ZN9FatVolume6fatPutEmm+0xa>
   d5e54:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5e56:	2b20      	cmp	r3, #32
   d5e58:	d10e      	bne.n	d5e78 <_ZN9FatVolume6fatPutEmm+0x38>
   d5e5a:	6981      	ldr	r1, [r0, #24]
   d5e5c:	2203      	movs	r2, #3
   d5e5e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5e62:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5e66:	f7ff ff8a 	bl	d5d7e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5e6a:	2800      	cmp	r0, #0
   d5e6c:	d0ed      	beq.n	d5e4a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d5e6e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5e72:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5e76:	e00f      	b.n	d5e98 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5e78:	2b10      	cmp	r3, #16
   d5e7a:	d1e6      	bne.n	d5e4a <_ZN9FatVolume6fatPutEmm+0xa>
   d5e7c:	6983      	ldr	r3, [r0, #24]
   d5e7e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5e82:	2203      	movs	r2, #3
   d5e84:	4419      	add	r1, r3
   d5e86:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5e8a:	f7ff ff78 	bl	d5d7e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5e8e:	2800      	cmp	r0, #0
   d5e90:	d0db      	beq.n	d5e4a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5e92:	b2e4      	uxtb	r4, r4
   d5e94:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5e98:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d5e9a:	bd38      	pop	{r3, r4, r5, pc}

000d5e9c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5e9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5ea0:	68c4      	ldr	r4, [r0, #12]
   d5ea2:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5ea4:	4605      	mov	r5, r0
   d5ea6:	460e      	mov	r6, r1
   d5ea8:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5eaa:	d207      	bcs.n	d5ebc <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d5eac:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d5eae:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5eb0:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5eb2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5eb4:	429c      	cmp	r4, r3
   d5eb6:	d903      	bls.n	d5ec0 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5eb8:	b9cf      	cbnz	r7, d5eee <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d5eba:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5ebc:	2701      	movs	r7, #1
   d5ebe:	e7f7      	b.n	d5eb0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5ec0:	42a6      	cmp	r6, r4
   d5ec2:	d014      	beq.n	d5eee <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5ec4:	aa01      	add	r2, sp, #4
   d5ec6:	4621      	mov	r1, r4
   d5ec8:	4628      	mov	r0, r5
   d5eca:	f7ff ff82 	bl	d5dd2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5ece:	2800      	cmp	r0, #0
   d5ed0:	db0d      	blt.n	d5eee <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5ed2:	d0ed      	beq.n	d5eb0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5ed4:	9b01      	ldr	r3, [sp, #4]
   d5ed6:	2b00      	cmp	r3, #0
   d5ed8:	d1ea      	bne.n	d5eb0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d5eda:	b107      	cbz	r7, d5ede <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5edc:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5ede:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5ee2:	4621      	mov	r1, r4
   d5ee4:	4628      	mov	r0, r5
   d5ee6:	f7ff ffab 	bl	d5e40 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d5eea:	4607      	mov	r7, r0
   d5eec:	b908      	cbnz	r0, d5ef2 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5eee:	2700      	movs	r7, #0
   d5ef0:	e00b      	b.n	d5f0a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5ef2:	b916      	cbnz	r6, d5efa <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5ef4:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5ef8:	e007      	b.n	d5f0a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5efa:	4622      	mov	r2, r4
   d5efc:	4631      	mov	r1, r6
   d5efe:	4628      	mov	r0, r5
   d5f00:	f7ff ff9e 	bl	d5e40 <_ZN9FatVolume6fatPutEmm>
   d5f04:	2800      	cmp	r0, #0
   d5f06:	d1f5      	bne.n	d5ef4 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5f08:	e7f1      	b.n	d5eee <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5f0a:	4638      	mov	r0, r7
   d5f0c:	b002      	add	sp, #8
   d5f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5f12 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5f14:	4605      	mov	r5, r0
   d5f16:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5f18:	aa01      	add	r2, sp, #4
   d5f1a:	4621      	mov	r1, r4
   d5f1c:	4628      	mov	r0, r5
   d5f1e:	f7ff ff58 	bl	d5dd2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5f22:	1e06      	subs	r6, r0, #0
   d5f24:	da01      	bge.n	d5f2a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d5f26:	2000      	movs	r0, #0
   d5f28:	e00f      	b.n	d5f4a <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d5f2a:	2200      	movs	r2, #0
   d5f2c:	4621      	mov	r1, r4
   d5f2e:	4628      	mov	r0, r5
   d5f30:	f7ff ff86 	bl	d5e40 <_ZN9FatVolume6fatPutEmm>
   d5f34:	2800      	cmp	r0, #0
   d5f36:	d0f6      	beq.n	d5f26 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d5f38:	68eb      	ldr	r3, [r5, #12]
   d5f3a:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5f3c:	bf9c      	itt	ls
   d5f3e:	f104 34ff 	addls.w	r4, r4, #4294967295
   d5f42:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d5f44:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d5f46:	2e00      	cmp	r6, #0
   d5f48:	d1e6      	bne.n	d5f18 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5f4a:	b002      	add	sp, #8
   d5f4c:	bd70      	pop	{r4, r5, r6, pc}

000d5f4e <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5f4e:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d5f50:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5f52:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5f54:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d5f56:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5f58:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5f5c:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d5f5e:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5f60:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5f62:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5f66:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5f68:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5f6c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d5f70:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d5f74:	b1a1      	cbz	r1, d5fa0 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d5f76:	2904      	cmp	r1, #4
   d5f78:	d85d      	bhi.n	d6036 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5f7a:	4611      	mov	r1, r2
   d5f7c:	3024      	adds	r0, #36	; 0x24
   d5f7e:	f7ff fefe 	bl	d5d7e <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5f82:	2800      	cmp	r0, #0
   d5f84:	d057      	beq.n	d6036 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d5f86:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d5f8a:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d5f8e:	065b      	lsls	r3, r3, #25
   d5f90:	d151      	bne.n	d6036 <_ZN9FatVolume4initEh+0xe8>
   d5f92:	351b      	adds	r5, #27
   d5f94:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d5f98:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d5f9c:	2d00      	cmp	r5, #0
   d5f9e:	d04a      	beq.n	d6036 <_ZN9FatVolume4initEh+0xe8>
   d5fa0:	2200      	movs	r2, #0
   d5fa2:	4629      	mov	r1, r5
   d5fa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5fa8:	f7ff fee9 	bl	d5d7e <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d5fac:	2800      	cmp	r0, #0
   d5fae:	d042      	beq.n	d6036 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d5fb0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d5fb8:	d13d      	bne.n	d6036 <_ZN9FatVolume4initEh+0xe8>
   d5fba:	7c03      	ldrb	r3, [r0, #16]
   d5fbc:	2b02      	cmp	r3, #2
   d5fbe:	d13a      	bne.n	d6036 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5fc0:	89c3      	ldrh	r3, [r0, #14]
   d5fc2:	2b00      	cmp	r3, #0
   d5fc4:	d037      	beq.n	d6036 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d5fc6:	7b41      	ldrb	r1, [r0, #13]
   d5fc8:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d5fca:	1e4b      	subs	r3, r1, #1
   d5fcc:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d5fce:	2300      	movs	r3, #0
   d5fd0:	71a3      	strb	r3, [r4, #6]
   d5fd2:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5fd4:	2301      	movs	r3, #1
   d5fd6:	428b      	cmp	r3, r1
   d5fd8:	d007      	beq.n	d5fea <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d5fda:	3e01      	subs	r6, #1
   d5fdc:	d02b      	beq.n	d6036 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5fde:	79a2      	ldrb	r2, [r4, #6]
   d5fe0:	005b      	lsls	r3, r3, #1
   d5fe2:	3201      	adds	r2, #1
   d5fe4:	b2db      	uxtb	r3, r3
   d5fe6:	71a2      	strb	r2, [r4, #6]
   d5fe8:	e7f5      	b.n	d5fd6 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d5fea:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d5fec:	b902      	cbnz	r2, d5ff0 <_ZN9FatVolume4initEh+0xa2>
   d5fee:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d5ff0:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d5ff2:	89c6      	ldrh	r6, [r0, #14]
   d5ff4:	442e      	add	r6, r5
   d5ff6:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d5ff8:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d5ffc:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d5ffe:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d6002:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d6004:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d6008:	0152      	lsls	r2, r2, #5
   d600a:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d600e:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d6012:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d6014:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d6018:	b903      	cbnz	r3, d601c <_ZN9FatVolume4initEh+0xce>
   d601a:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d601c:	1aad      	subs	r5, r5, r2
   d601e:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d6020:	79a5      	ldrb	r5, [r4, #6]
   d6022:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d6026:	1c6b      	adds	r3, r5, #1
   d6028:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d602a:	f640 73f4 	movw	r3, #4084	; 0xff4
   d602e:	429d      	cmp	r5, r3
   d6030:	d803      	bhi.n	d603a <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d6032:	230c      	movs	r3, #12
   d6034:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d6036:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d6038:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d603a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d603e:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d6040:	bf85      	ittet	hi
   d6042:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6044:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d6046:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d6048:	2320      	movhi	r3, #32
   d604a:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d604c:	2001      	movs	r0, #1

fail:
  return false;
}
   d604e:	bd70      	pop	{r4, r5, r6, pc}

000d6050 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d6050:	f000 bc70 	b.w	d6934 <HAL_Pin_Map>

000d6054 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d6054:	f000 bc6e 	b.w	d6934 <HAL_Pin_Map>

000d6058 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6058:	f000 bc6c 	b.w	d6934 <HAL_Pin_Map>

000d605c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d605c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d605e:	4c0e      	ldr	r4, [pc, #56]	; (d6098 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6060:	460e      	mov	r6, r1
   d6062:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6064:	f000 fcf6 	bl	d6a54 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6068:	6823      	ldr	r3, [r4, #0]
   d606a:	1ac0      	subs	r0, r0, r3
   d606c:	4b0b      	ldr	r3, [pc, #44]	; (d609c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d606e:	4298      	cmp	r0, r3
   d6070:	d908      	bls.n	d6084 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6072:	f000 fcf7 	bl	d6a64 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6076:	4b0a      	ldr	r3, [pc, #40]	; (d60a0 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6078:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d607a:	f000 fe67 	bl	d6d4c <spark_process>
   d607e:	f000 fce9 	bl	d6a54 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d6082:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6084:	f000 fcee 	bl	d6a64 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6088:	b280      	uxth	r0, r0
   d608a:	1b80      	subs	r0, r0, r6
}
   d608c:	42a8      	cmp	r0, r5
   d608e:	bfd4      	ite	le
   d6090:	2000      	movle	r0, #0
   d6092:	2001      	movgt	r0, #1
   d6094:	bd70      	pop	{r4, r5, r6, pc}
   d6096:	bf00      	nop
   d6098:	2003e3d4 	.word	0x2003e3d4
   d609c:	000186a0 	.word	0x000186a0
   d60a0:	2003e730 	.word	0x2003e730

000d60a4 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d60a4:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d60a6:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d60a8:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d60aa:	b94d      	cbnz	r5, d60c0 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d60ac:	6840      	ldr	r0, [r0, #4]
   d60ae:	f000 fa7d 	bl	d65ac <_ZN14SdSpiAltDriver8activateEv>
   d60b2:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d60b4:	4629      	mov	r1, r5
   d60b6:	7d18      	ldrb	r0, [r3, #20]
   d60b8:	f002 f82b 	bl	d8112 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d60bc:	2301      	movs	r3, #1
   d60be:	7223      	strb	r3, [r4, #8]
   d60c0:	bd38      	pop	{r3, r4, r5, pc}

000d60c2 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d60c2:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d60c4:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d60c6:	4604      	mov	r4, r0
  if (m_spiActive) {
   d60c8:	b16b      	cbz	r3, d60e6 <_ZN9SdSpiCard7spiStopEv+0x24>
   d60ca:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d60cc:	2101      	movs	r1, #1
   d60ce:	7d18      	ldrb	r0, [r3, #20]
   d60d0:	f002 f81f 	bl	d8112 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d60d4:	21ff      	movs	r1, #255	; 0xff
   d60d6:	6860      	ldr	r0, [r4, #4]
   d60d8:	f000 fa9a 	bl	d6610 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d60dc:	6860      	ldr	r0, [r4, #4]
   d60de:	f000 fa79 	bl	d65d4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d60e2:	2300      	movs	r3, #0
   d60e4:	7223      	strb	r3, [r4, #8]
   d60e6:	bd10      	pop	{r4, pc}

000d60e8 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d60e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60ea:	4604      	mov	r4, r0
   d60ec:	460d      	mov	r5, r1
   d60ee:	4616      	mov	r6, r2
   d60f0:	f000 fcb8 	bl	d6a64 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d60f4:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d60f6:	6860      	ldr	r0, [r4, #4]
   d60f8:	f000 fa6f 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d60fc:	28ff      	cmp	r0, #255	; 0xff
   d60fe:	7260      	strb	r0, [r4, #9]
   d6100:	d109      	bne.n	d6116 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d6102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6106:	4639      	mov	r1, r7
   d6108:	4620      	mov	r0, r4
   d610a:	f7ff ffa7 	bl	d605c <_ZN9SdSpiCard10isTimedOutEtt>
   d610e:	2800      	cmp	r0, #0
   d6110:	d0f1      	beq.n	d60f6 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6112:	2355      	movs	r3, #85	; 0x55
   d6114:	e00b      	b.n	d612e <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d6116:	28fe      	cmp	r0, #254	; 0xfe
   d6118:	d001      	beq.n	d611e <_ZN9SdSpiCard8readDataEPhj+0x36>
   d611a:	2350      	movs	r3, #80	; 0x50
   d611c:	e007      	b.n	d612e <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d611e:	4632      	mov	r2, r6
   d6120:	4629      	mov	r1, r5
   d6122:	6860      	ldr	r0, [r4, #4]
   d6124:	f000 fa5e 	bl	d65e4 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d6128:	7260      	strb	r0, [r4, #9]
   d612a:	b130      	cbz	r0, d613a <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d612c:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d612e:	4620      	mov	r0, r4
   d6130:	7023      	strb	r3, [r4, #0]
   d6132:	f7ff ffc6 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6136:	2000      	movs	r0, #0
}
   d6138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d613a:	6860      	ldr	r0, [r4, #4]
   d613c:	f000 fa4d 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
   d6140:	6860      	ldr	r0, [r4, #4]
   d6142:	f000 fa4a 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
   d6146:	2001      	movs	r0, #1
   d6148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d614a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d614a:	b570      	push	{r4, r5, r6, lr}
   d614c:	4604      	mov	r4, r0
   d614e:	460e      	mov	r6, r1
   d6150:	f000 fc88 	bl	d6a64 <HAL_Timer_Get_Milli_Seconds>
   d6154:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6156:	4632      	mov	r2, r6
   d6158:	4629      	mov	r1, r5
   d615a:	4620      	mov	r0, r4
   d615c:	f7ff ff7e 	bl	d605c <_ZN9SdSpiCard10isTimedOutEtt>
   d6160:	b930      	cbnz	r0, d6170 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d6162:	6860      	ldr	r0, [r4, #4]
   d6164:	f000 fa39 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6168:	28ff      	cmp	r0, #255	; 0xff
   d616a:	d1f4      	bne.n	d6156 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d616c:	2001      	movs	r0, #1
   d616e:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d6170:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d6172:	bd70      	pop	{r4, r5, r6, pc}

000d6174 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d6176:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6178:	9201      	str	r2, [sp, #4]
   d617a:	4604      	mov	r4, r0
   d617c:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d617e:	b90b      	cbnz	r3, d6184 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6180:	f7ff ff90 	bl	d60a4 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6184:	b125      	cbz	r5, d6190 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d6186:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d618a:	4620      	mov	r0, r4
   d618c:	f7ff ffdd 	bl	d614a <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6190:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6194:	6860      	ldr	r0, [r4, #4]
   d6196:	f000 fa3b 	bl	d6610 <_ZN14SdSpiAltDriver4sendEh>
   d619a:	f10d 0607 	add.w	r6, sp, #7
   d619e:	f10d 0703 	add.w	r7, sp, #3
   d61a2:	f816 1901 	ldrb.w	r1, [r6], #-1
   d61a6:	6860      	ldr	r0, [r4, #4]
   d61a8:	f000 fa32 	bl	d6610 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d61ac:	42be      	cmp	r6, r7
   d61ae:	d1f8      	bne.n	d61a2 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d61b0:	2d00      	cmp	r5, #0
   d61b2:	bf0c      	ite	eq
   d61b4:	2195      	moveq	r1, #149	; 0x95
   d61b6:	2187      	movne	r1, #135	; 0x87
   d61b8:	6860      	ldr	r0, [r4, #4]
   d61ba:	f000 fa29 	bl	d6610 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d61be:	6860      	ldr	r0, [r4, #4]
   d61c0:	f000 fa0b 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
   d61c4:	250b      	movs	r5, #11
   d61c6:	6860      	ldr	r0, [r4, #4]
   d61c8:	f000 fa07 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d61cc:	0603      	lsls	r3, r0, #24
   d61ce:	7260      	strb	r0, [r4, #9]
   d61d0:	d503      	bpl.n	d61da <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d61d2:	3d01      	subs	r5, #1
   d61d4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d61d8:	d1f5      	bne.n	d61c6 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d61da:	b003      	add	sp, #12
   d61dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d61de <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d61de:	b570      	push	{r4, r5, r6, lr}
   d61e0:	4604      	mov	r4, r0
   d61e2:	460d      	mov	r5, r1
   d61e4:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d61e6:	2137      	movs	r1, #55	; 0x37
   d61e8:	2200      	movs	r2, #0
   d61ea:	f7ff ffc3 	bl	d6174 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d61ee:	4632      	mov	r2, r6
   d61f0:	4629      	mov	r1, r5
   d61f2:	4620      	mov	r0, r4
  }
   d61f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d61f8:	f7ff bfbc 	b.w	d6174 <_ZN9SdSpiCard11cardCommandEhm>

000d61fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d61fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6200:	2500      	movs	r5, #0
   d6202:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d6204:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d6206:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6208:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d620a:	4604      	mov	r4, r0
   d620c:	4690      	mov	r8, r2
   d620e:	461e      	mov	r6, r3
   d6210:	f000 fc28 	bl	d6a64 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d6214:	4641      	mov	r1, r8
   d6216:	4607      	mov	r7, r0
   d6218:	6860      	ldr	r0, [r4, #4]
   d621a:	f000 f9cb 	bl	d65b4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d621e:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d6220:	4a4f      	ldr	r2, [pc, #316]	; (d6360 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d6222:	721d      	strb	r5, [r3, #8]
   d6224:	f04f 0801 	mov.w	r8, #1
   d6228:	60da      	str	r2, [r3, #12]
   d622a:	745d      	strb	r5, [r3, #17]
   d622c:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d6230:	4620      	mov	r0, r4
   d6232:	f7ff ff37 	bl	d60a4 <_ZN9SdSpiCard8spiStartEv>
   d6236:	6863      	ldr	r3, [r4, #4]
   d6238:	4641      	mov	r1, r8
   d623a:	7d18      	ldrb	r0, [r3, #20]
   d623c:	f001 ff69 	bl	d8112 <digitalWrite>
   d6240:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6242:	21ff      	movs	r1, #255	; 0xff
   d6244:	6860      	ldr	r0, [r4, #4]
   d6246:	3d01      	subs	r5, #1
   d6248:	f000 f9e2 	bl	d6610 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d624c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6250:	d1f7      	bne.n	d6242 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d6252:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6254:	4629      	mov	r1, r5
   d6256:	7d18      	ldrb	r0, [r3, #20]
   d6258:	f001 ff5b 	bl	d8112 <digitalWrite>
   d625c:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d625e:	2200      	movs	r2, #0
   d6260:	4611      	mov	r1, r2
   d6262:	4620      	mov	r0, r4
   d6264:	f7ff ff86 	bl	d6174 <_ZN9SdSpiCard11cardCommandEhm>
   d6268:	2801      	cmp	r0, #1
   d626a:	4680      	mov	r8, r0
   d626c:	d012      	beq.n	d6294 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d626e:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d6270:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6274:	d101      	bne.n	d627a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6276:	2320      	movs	r3, #32
   d6278:	e057      	b.n	d632a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d627a:	21fd      	movs	r1, #253	; 0xfd
   d627c:	6860      	ldr	r0, [r4, #4]
   d627e:	f000 f9c7 	bl	d6610 <_ZN14SdSpiAltDriver4sendEh>
   d6282:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6286:	6860      	ldr	r0, [r4, #4]
   d6288:	f000 f9a7 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d628c:	f1b8 0801 	subs.w	r8, r8, #1
   d6290:	d1f9      	bne.n	d6286 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d6292:	e7e4      	b.n	d625e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6294:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6298:	2108      	movs	r1, #8
   d629a:	4620      	mov	r0, r4
   d629c:	f7ff ff6a 	bl	d6174 <_ZN9SdSpiCard11cardCommandEhm>
   d62a0:	2805      	cmp	r0, #5
   d62a2:	d102      	bne.n	d62aa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d62a4:	f884 800a 	strb.w	r8, [r4, #10]
   d62a8:	e00f      	b.n	d62ca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d62aa:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d62ac:	6860      	ldr	r0, [r4, #4]
   d62ae:	f000 f994 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
   d62b2:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d62b4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d62b8:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d62ba:	d1f7      	bne.n	d62ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d62bc:	28aa      	cmp	r0, #170	; 0xaa
   d62be:	d102      	bne.n	d62c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d62c0:	2302      	movs	r3, #2
   d62c2:	72a3      	strb	r3, [r4, #10]
   d62c4:	e001      	b.n	d62ca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d62c6:	2325      	movs	r3, #37	; 0x25
   d62c8:	e02f      	b.n	d632a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d62ca:	7aa3      	ldrb	r3, [r4, #10]
   d62cc:	2b02      	cmp	r3, #2
   d62ce:	bf0c      	ite	eq
   d62d0:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d62d4:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d62d6:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d62d8:	462a      	mov	r2, r5
   d62da:	2129      	movs	r1, #41	; 0x29
   d62dc:	4620      	mov	r0, r4
   d62de:	f7ff ff7e 	bl	d61de <_ZN9SdSpiCard8cardAcmdEhm>
   d62e2:	4602      	mov	r2, r0
   d62e4:	b148      	cbz	r0, d62fa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d62e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d62ea:	4639      	mov	r1, r7
   d62ec:	4620      	mov	r0, r4
   d62ee:	f7ff feb5 	bl	d605c <_ZN9SdSpiCard10isTimedOutEtt>
   d62f2:	2800      	cmp	r0, #0
   d62f4:	d0f0      	beq.n	d62d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d62f6:	2343      	movs	r3, #67	; 0x43
   d62f8:	e017      	b.n	d632a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d62fa:	7aa3      	ldrb	r3, [r4, #10]
   d62fc:	2b02      	cmp	r3, #2
   d62fe:	d00e      	beq.n	d631e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d6300:	4620      	mov	r0, r4
   d6302:	f7ff fede 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d6306:	6863      	ldr	r3, [r4, #4]
   d6308:	68b0      	ldr	r0, [r6, #8]
   d630a:	7934      	ldrb	r4, [r6, #4]
   d630c:	7b31      	ldrb	r1, [r6, #12]
   d630e:	7b72      	ldrb	r2, [r6, #13]
   d6310:	745a      	strb	r2, [r3, #17]
   d6312:	60d8      	str	r0, [r3, #12]
   d6314:	721c      	strb	r4, [r3, #8]
   d6316:	7419      	strb	r1, [r3, #16]
  return true;
   d6318:	2001      	movs	r0, #1
   d631a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d631e:	213a      	movs	r1, #58	; 0x3a
   d6320:	4620      	mov	r0, r4
   d6322:	f7ff ff27 	bl	d6174 <_ZN9SdSpiCard11cardCommandEhm>
   d6326:	b138      	cbz	r0, d6338 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d6328:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d632a:	4620      	mov	r0, r4
   d632c:	7023      	strb	r3, [r4, #0]
   d632e:	f7ff fec8 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6332:	2000      	movs	r0, #0
}
   d6334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6338:	6860      	ldr	r0, [r4, #4]
   d633a:	f000 f94e 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d633e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d6342:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6344:	bf04      	itt	eq
   d6346:	2303      	moveq	r3, #3
   d6348:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d634a:	6860      	ldr	r0, [r4, #4]
   d634c:	f000 f945 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
   d6350:	6860      	ldr	r0, [r4, #4]
   d6352:	f000 f942 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
   d6356:	6860      	ldr	r0, [r4, #4]
   d6358:	f000 f93f 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
   d635c:	e7d0      	b.n	d6300 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d635e:	bf00      	nop
   d6360:	0003d090 	.word	0x0003d090

000d6364 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6364:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6366:	7a83      	ldrb	r3, [r0, #10]
   d6368:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d636a:	bf18      	it	ne
   d636c:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d636e:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6370:	460a      	mov	r2, r1
   d6372:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6374:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6376:	f7ff fefd 	bl	d6174 <_ZN9SdSpiCard11cardCommandEhm>
   d637a:	b110      	cbz	r0, d6382 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d637c:	2330      	movs	r3, #48	; 0x30
   d637e:	7023      	strb	r3, [r4, #0]
   d6380:	e00b      	b.n	d639a <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6382:	4629      	mov	r1, r5
   d6384:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6388:	4620      	mov	r0, r4
   d638a:	f7ff fead 	bl	d60e8 <_ZN9SdSpiCard8readDataEPhj>
   d638e:	4605      	mov	r5, r0
   d6390:	b118      	cbz	r0, d639a <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d6392:	4620      	mov	r0, r4
   d6394:	f7ff fe95 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6398:	e003      	b.n	d63a2 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d639a:	4620      	mov	r0, r4
   d639c:	f7ff fe91 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63a0:	2500      	movs	r5, #0
}
   d63a2:	4628      	mov	r0, r5
   d63a4:	bd38      	pop	{r3, r4, r5, pc}

000d63a6 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d63a6:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d63a8:	7a83      	ldrb	r3, [r0, #10]
   d63aa:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d63ac:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d63ae:	bf18      	it	ne
   d63b0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d63b2:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d63b4:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d63b6:	f7ff fedd 	bl	d6174 <_ZN9SdSpiCard11cardCommandEhm>
   d63ba:	b130      	cbz	r0, d63ca <_ZN9SdSpiCard9readStartEm+0x24>
   d63bc:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d63be:	4620      	mov	r0, r4
   d63c0:	7023      	strb	r3, [r4, #0]
   d63c2:	f7ff fe7e 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63c6:	2000      	movs	r0, #0
   d63c8:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d63ca:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d63cc:	bd10      	pop	{r4, pc}

000d63ce <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d63ce:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d63d0:	2200      	movs	r2, #0
   d63d2:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d63d4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d63d6:	f7ff fecd 	bl	d6174 <_ZN9SdSpiCard11cardCommandEhm>
   d63da:	b130      	cbz	r0, d63ea <_ZN9SdSpiCard8readStopEv+0x1c>
   d63dc:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d63de:	4620      	mov	r0, r4
   d63e0:	7023      	strb	r3, [r4, #0]
   d63e2:	f7ff fe6e 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63e6:	2000      	movs	r0, #0
   d63e8:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d63ea:	4620      	mov	r0, r4
   d63ec:	f7ff fe69 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d63f0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d63f2:	bd10      	pop	{r4, pc}

000d63f4 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d63f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63f6:	4605      	mov	r5, r0
   d63f8:	4616      	mov	r6, r2
   d63fa:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d63fc:	f7ff ffd3 	bl	d63a6 <_ZN9SdSpiCard9readStartEm>
   d6400:	b198      	cbz	r0, d642a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d6402:	2400      	movs	r4, #0
   d6404:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d6406:	429f      	cmp	r7, r3
   d6408:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d640c:	d908      	bls.n	d6420 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d640e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6412:	4628      	mov	r0, r5
   d6414:	f7ff fe68 	bl	d60e8 <_ZN9SdSpiCard8readDataEPhj>
   d6418:	3401      	adds	r4, #1
   d641a:	2800      	cmp	r0, #0
   d641c:	d1f2      	bne.n	d6404 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d641e:	e004      	b.n	d642a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6420:	4628      	mov	r0, r5
}
   d6422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d6426:	f7ff bfd2 	b.w	d63ce <_ZN9SdSpiCard8readStopEv>
}
   d642a:	2000      	movs	r0, #0
   d642c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d642e <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d642e:	b538      	push	{r3, r4, r5, lr}
   d6430:	4604      	mov	r4, r0
   d6432:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6434:	6840      	ldr	r0, [r0, #4]
   d6436:	f000 f8eb 	bl	d6610 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d643a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d643e:	4629      	mov	r1, r5
   d6440:	6860      	ldr	r0, [r4, #4]
   d6442:	f000 f8e9 	bl	d6618 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6446:	21ff      	movs	r1, #255	; 0xff
   d6448:	6860      	ldr	r0, [r4, #4]
   d644a:	f000 f8e1 	bl	d6610 <_ZN14SdSpiAltDriver4sendEh>
   d644e:	21ff      	movs	r1, #255	; 0xff
   d6450:	6860      	ldr	r0, [r4, #4]
   d6452:	f000 f8dd 	bl	d6610 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6456:	6860      	ldr	r0, [r4, #4]
   d6458:	f000 f8bf 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d645c:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d645e:	f000 001f 	and.w	r0, r0, #31
   d6462:	2805      	cmp	r0, #5
   d6464:	d006      	beq.n	d6474 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6466:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6468:	4620      	mov	r0, r4
   d646a:	7023      	strb	r3, [r4, #0]
   d646c:	f7ff fe29 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6470:	2000      	movs	r0, #0
   d6472:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6474:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6476:	bd38      	pop	{r3, r4, r5, pc}

000d6478 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6478:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d647a:	7a83      	ldrb	r3, [r0, #10]
   d647c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d647e:	bf18      	it	ne
   d6480:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6482:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6484:	460a      	mov	r2, r1
   d6486:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6488:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d648a:	f7ff fe73 	bl	d6174 <_ZN9SdSpiCard11cardCommandEhm>
   d648e:	4606      	mov	r6, r0
   d6490:	b108      	cbz	r0, d6496 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d6492:	2332      	movs	r3, #50	; 0x32
   d6494:	e01d      	b.n	d64d2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d6496:	462a      	mov	r2, r5
   d6498:	21fe      	movs	r1, #254	; 0xfe
   d649a:	4620      	mov	r0, r4
   d649c:	f7ff ffc7 	bl	d642e <_ZN9SdSpiCard9writeDataEhPKh>
   d64a0:	b1c0      	cbz	r0, d64d4 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d64a2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d64a6:	4620      	mov	r0, r4
   d64a8:	f7ff fe4f 	bl	d614a <_ZN9SdSpiCard11waitNotBusyEt>
   d64ac:	4605      	mov	r5, r0
   d64ae:	b908      	cbnz	r0, d64b4 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d64b0:	235a      	movs	r3, #90	; 0x5a
   d64b2:	e00e      	b.n	d64d2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d64b4:	4632      	mov	r2, r6
   d64b6:	210d      	movs	r1, #13
   d64b8:	4620      	mov	r0, r4
   d64ba:	f7ff fe5b 	bl	d6174 <_ZN9SdSpiCard11cardCommandEhm>
   d64be:	b938      	cbnz	r0, d64d0 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d64c0:	6860      	ldr	r0, [r4, #4]
   d64c2:	f000 f88a 	bl	d65da <_ZN14SdSpiAltDriver7receiveEv>
   d64c6:	b918      	cbnz	r0, d64d0 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d64c8:	4620      	mov	r0, r4
   d64ca:	f7ff fdfa 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d64ce:	e005      	b.n	d64dc <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d64d0:	2329      	movs	r3, #41	; 0x29
   d64d2:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d64d4:	4620      	mov	r0, r4
   d64d6:	f7ff fdf4 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d64da:	2500      	movs	r5, #0
}
   d64dc:	4628      	mov	r0, r5
   d64de:	bd70      	pop	{r4, r5, r6, pc}

000d64e0 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d64e0:	b538      	push	{r3, r4, r5, lr}
   d64e2:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d64e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d64e8:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d64ea:	f7ff fe2e 	bl	d614a <_ZN9SdSpiCard11waitNotBusyEt>
   d64ee:	b910      	cbnz	r0, d64f6 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d64f0:	235b      	movs	r3, #91	; 0x5b
   d64f2:	7023      	strb	r3, [r4, #0]
   d64f4:	e005      	b.n	d6502 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d64f6:	462a      	mov	r2, r5
   d64f8:	21fc      	movs	r1, #252	; 0xfc
   d64fa:	4620      	mov	r0, r4
   d64fc:	f7ff ff97 	bl	d642e <_ZN9SdSpiCard9writeDataEhPKh>
   d6500:	b918      	cbnz	r0, d650a <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6502:	4620      	mov	r0, r4
   d6504:	f7ff fddd 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6508:	2000      	movs	r0, #0
}
   d650a:	bd38      	pop	{r3, r4, r5, pc}

000d650c <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d650c:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d650e:	7a83      	ldrb	r3, [r0, #10]
   d6510:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6512:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6514:	bf18      	it	ne
   d6516:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6518:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d651a:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d651c:	f7ff fe2a 	bl	d6174 <_ZN9SdSpiCard11cardCommandEhm>
   d6520:	b130      	cbz	r0, d6530 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6522:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6524:	4620      	mov	r0, r4
   d6526:	7023      	strb	r3, [r4, #0]
   d6528:	f7ff fdcb 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d652c:	2000      	movs	r0, #0
   d652e:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6530:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6532:	bd10      	pop	{r4, pc}

000d6534 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6534:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6536:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d653a:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d653c:	f7ff fe05 	bl	d614a <_ZN9SdSpiCard11waitNotBusyEt>
   d6540:	4605      	mov	r5, r0
   d6542:	b120      	cbz	r0, d654e <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6544:	21fd      	movs	r1, #253	; 0xfd
   d6546:	6860      	ldr	r0, [r4, #4]
   d6548:	f000 f862 	bl	d6610 <_ZN14SdSpiAltDriver4sendEh>
   d654c:	e001      	b.n	d6552 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d654e:	2356      	movs	r3, #86	; 0x56
   d6550:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6552:	4620      	mov	r0, r4
   d6554:	f7ff fdb5 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6558:	4628      	mov	r0, r5
   d655a:	bd38      	pop	{r3, r4, r5, pc}

000d655c <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d655e:	4605      	mov	r5, r0
   d6560:	4616      	mov	r6, r2
   d6562:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6564:	f7ff ffd2 	bl	d650c <_ZN9SdSpiCard10writeStartEm>
   d6568:	b170      	cbz	r0, d6588 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d656a:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d656c:	42bc      	cmp	r4, r7
   d656e:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6572:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6574:	d004      	beq.n	d6580 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6576:	f7ff ffb3 	bl	d64e0 <_ZN9SdSpiCard9writeDataEPKh>
   d657a:	b128      	cbz	r0, d6588 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d657c:	3401      	adds	r4, #1
   d657e:	e7f5      	b.n	d656c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6580:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6584:	f7ff bfd6 	b.w	d6534 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6588:	4628      	mov	r0, r5
   d658a:	f7ff fd9a 	bl	d60c2 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d658e:	2000      	movs	r0, #0
   d6590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6592 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6592:	f000 b9cf 	b.w	d6934 <HAL_Pin_Map>

000d6596 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6596:	f000 b9cd 	b.w	d6934 <HAL_Pin_Map>

000d659a <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d659a:	f000 b9cb 	b.w	d6934 <HAL_Pin_Map>
	...

000d65a0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d65a0:	4b01      	ldr	r3, [pc, #4]	; (d65a8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d65a2:	2201      	movs	r2, #1
   d65a4:	701a      	strb	r2, [r3, #0]
   d65a6:	4770      	bx	lr
   d65a8:	2003e3d8 	.word	0x2003e3d8

000d65ac <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d65ac:	1d01      	adds	r1, r0, #4
   d65ae:	6800      	ldr	r0, [r0, #0]
   d65b0:	f000 bc94 	b.w	d6edc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d65b4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d65b4:	b510      	push	{r4, lr}
   d65b6:	4604      	mov	r4, r0
  m_csPin = csPin;
   d65b8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d65ba:	6800      	ldr	r0, [r0, #0]
   d65bc:	f000 fc64 	bl	d6e88 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d65c0:	7d20      	ldrb	r0, [r4, #20]
   d65c2:	2101      	movs	r1, #1
   d65c4:	f001 fd94 	bl	d80f0 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d65c8:	7d20      	ldrb	r0, [r4, #20]
   d65ca:	2101      	movs	r1, #1
}
   d65cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d65d0:	f001 bd9f 	b.w	d8112 <digitalWrite>

000d65d4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d65d4:	6800      	ldr	r0, [r0, #0]
   d65d6:	f000 bc68 	b.w	d6eaa <_ZN8SPIClass14endTransactionEv>

000d65da <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d65da:	21ff      	movs	r1, #255	; 0xff
   d65dc:	6800      	ldr	r0, [r0, #0]
   d65de:	f000 bced 	b.w	d6fbc <_ZN8SPIClass8transferEh>
	...

000d65e4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d65e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d65e6:	4b08      	ldr	r3, [pc, #32]	; (d6608 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d65e8:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d65ea:	2500      	movs	r5, #0
   d65ec:	4c07      	ldr	r4, [pc, #28]	; (d660c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d65ee:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d65f0:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d65f2:	4613      	mov	r3, r2
   d65f4:	460a      	mov	r2, r1
   d65f6:	4629      	mov	r1, r5
   d65f8:	f000 fce6 	bl	d6fc8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d65fc:	7823      	ldrb	r3, [r4, #0]
   d65fe:	2b00      	cmp	r3, #0
   d6600:	d0fc      	beq.n	d65fc <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6602:	2000      	movs	r0, #0
   d6604:	b003      	add	sp, #12
   d6606:	bd30      	pop	{r4, r5, pc}
   d6608:	000d65a1 	.word	0x000d65a1
   d660c:	2003e3d8 	.word	0x2003e3d8

000d6610 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6610:	6800      	ldr	r0, [r0, #0]
   d6612:	f000 bcd3 	b.w	d6fbc <_ZN8SPIClass8transferEh>
	...

000d6618 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6618:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d661a:	4b07      	ldr	r3, [pc, #28]	; (d6638 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d661c:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d661e:	2500      	movs	r5, #0
   d6620:	4c06      	ldr	r4, [pc, #24]	; (d663c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6622:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6624:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6626:	4613      	mov	r3, r2
   d6628:	462a      	mov	r2, r5
   d662a:	f000 fccd 	bl	d6fc8 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d662e:	7823      	ldrb	r3, [r4, #0]
   d6630:	2b00      	cmp	r3, #0
   d6632:	d0fc      	beq.n	d662e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6634:	b003      	add	sp, #12
   d6636:	bd30      	pop	{r4, r5, pc}
   d6638:	000d65a1 	.word	0x000d65a1
   d663c:	2003e3d8 	.word	0x2003e3d8

000d6640 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6640:	f000 b978 	b.w	d6934 <HAL_Pin_Map>

000d6644 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d6644:	b510      	push	{r4, lr}
   d6646:	4b05      	ldr	r3, [pc, #20]	; (d665c <_ZN10JsonBufferD1Ev+0x18>)
   d6648:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d664a:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d664c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d664e:	b91b      	cbnz	r3, d6658 <_ZN10JsonBufferD1Ev+0x14>
   d6650:	6840      	ldr	r0, [r0, #4]
   d6652:	b108      	cbz	r0, d6658 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d6654:	f000 fba2 	bl	d6d9c <free>
	}
}
   d6658:	4620      	mov	r0, r4
   d665a:	bd10      	pop	{r4, pc}
   d665c:	000d9474 	.word	0x000d9474

000d6660 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d6660:	b510      	push	{r4, lr}
   d6662:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d6664:	f7ff ffee 	bl	d6644 <_ZN10JsonBufferD1Ev>
   d6668:	4620      	mov	r0, r4
   d666a:	2114      	movs	r1, #20
   d666c:	f001 fdd0 	bl	d8210 <_ZdlPvj>
   d6670:	4620      	mov	r0, r4
   d6672:	bd10      	pop	{r4, pc}

000d6674 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d6674:	b510      	push	{r4, lr}
   d6676:	4b03      	ldr	r3, [pc, #12]	; (d6684 <_ZN10JsonWriterD1Ev+0x10>)
   d6678:	6003      	str	r3, [r0, #0]
   d667a:	4604      	mov	r4, r0
   d667c:	f7ff ffe2 	bl	d6644 <_ZN10JsonBufferD1Ev>

}
   d6680:	4620      	mov	r0, r4
   d6682:	bd10      	pop	{r4, pc}
   d6684:	000d9484 	.word	0x000d9484

000d6688 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d6688:	b510      	push	{r4, lr}
   d668a:	4604      	mov	r4, r0

}
   d668c:	f7ff fff2 	bl	d6674 <_ZN10JsonWriterD1Ev>
   d6690:	4620      	mov	r0, r4
   d6692:	2130      	movs	r1, #48	; 0x30
   d6694:	f001 fdbc 	bl	d8210 <_ZdlPvj>
   d6698:	4620      	mov	r0, r4
   d669a:	bd10      	pop	{r4, pc}

000d669c <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d669c:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d669e:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d66a0:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d66a2:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d66a4:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d66a6:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d66a8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d66ac:	4770      	bx	lr
	...

000d66b0 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d66b0:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d66b2:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d66b4:	60c3      	str	r3, [r0, #12]
   d66b6:	2301      	movs	r3, #1
   d66b8:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d66ba:	4b05      	ldr	r3, [pc, #20]	; (d66d0 <_ZN10JsonWriterC1EPcj+0x20>)
   d66bc:	6003      	str	r3, [r0, #0]
   d66be:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d66c2:	6041      	str	r1, [r0, #4]
   d66c4:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d66c6:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d66c8:	f7ff ffe8 	bl	d669c <_ZN10JsonWriter4initEv>
}
   d66cc:	bd10      	pop	{r4, pc}
   d66ce:	bf00      	nop
   d66d0:	000d9484 	.word	0x000d9484

000d66d4 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d66d4:	68c3      	ldr	r3, [r0, #12]
   d66d6:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d66d8:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d66da:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d66dc:	bf3f      	itttt	cc
   d66de:	6842      	ldrcc	r2, [r0, #4]
   d66e0:	1c5c      	addcc	r4, r3, #1
   d66e2:	60c4      	strcc	r4, [r0, #12]
   d66e4:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d66e6:	bf24      	itt	cs
   d66e8:	2301      	movcs	r3, #1
   d66ea:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d66ee:	bd10      	pop	{r4, pc}

000d66f0 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d66f0:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d66f2:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d66f4:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d66f6:	b143      	cbz	r3, d670a <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d66f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d66fc:	7e59      	ldrb	r1, [r3, #25]
   d66fe:	b109      	cbz	r1, d6704 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d6700:	f7ff ffe8 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d6704:	6963      	ldr	r3, [r4, #20]
   d6706:	3b01      	subs	r3, #1
   d6708:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d670a:	68a3      	ldr	r3, [r4, #8]
   d670c:	68e0      	ldr	r0, [r4, #12]
   d670e:	6861      	ldr	r1, [r4, #4]
   d6710:	4298      	cmp	r0, r3
   d6712:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d6716:	bf2a      	itet	cs
   d6718:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d671a:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d671c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d6720:	bd10      	pop	{r4, pc}

000d6722 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d6722:	b570      	push	{r4, r5, r6, lr}
   d6724:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d6726:	68c0      	ldr	r0, [r0, #12]
   d6728:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d672a:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d672c:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d672e:	4613      	mov	r3, r2
   d6730:	4430      	add	r0, r6
   d6732:	460a      	mov	r2, r1
   d6734:	4629      	mov	r1, r5
   d6736:	f000 fb39 	bl	d6dac <vsnprintf>
	if (count <= spaceAvailable) {
   d673a:	4285      	cmp	r5, r0
		offset += count;
   d673c:	bf2d      	iteet	cs
   d673e:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d6740:	68a3      	ldrcc	r3, [r4, #8]
   d6742:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d6744:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d6746:	bf36      	itet	cc
   d6748:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d674a:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d674c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d6750:	bd70      	pop	{r4, r5, r6, pc}

000d6752 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d6752:	b40e      	push	{r1, r2, r3}
   d6754:	b503      	push	{r0, r1, lr}
   d6756:	aa03      	add	r2, sp, #12
   d6758:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d675c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d675e:	f7ff ffe0 	bl	d6722 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d6762:	b002      	add	sp, #8
   d6764:	f85d eb04 	ldr.w	lr, [sp], #4
   d6768:	b003      	add	sp, #12
   d676a:	4770      	bx	lr

000d676c <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d676c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6770:	4604      	mov	r4, r0
   d6772:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d6774:	4617      	mov	r7, r2
   d6776:	b112      	cbz	r2, d677e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d6778:	2122      	movs	r1, #34	; 0x22
   d677a:	f7ff ffab 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d677e:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d6780:	5d71      	ldrb	r1, [r6, r5]
   d6782:	eb06 0805 	add.w	r8, r6, r5
   d6786:	2900      	cmp	r1, #0
   d6788:	d071      	beq.n	d686e <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d678a:	68e2      	ldr	r2, [r4, #12]
   d678c:	68a3      	ldr	r3, [r4, #8]
   d678e:	429a      	cmp	r2, r3
   d6790:	d26d      	bcs.n	d686e <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d6792:	060b      	lsls	r3, r1, #24
   d6794:	d533      	bpl.n	d67fe <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d6796:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d679a:	2be0      	cmp	r3, #224	; 0xe0
   d679c:	d117      	bne.n	d67ce <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d679e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d67a2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d67a6:	2a80      	cmp	r2, #128	; 0x80
   d67a8:	d111      	bne.n	d67ce <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d67aa:	f105 0802 	add.w	r8, r5, #2
   d67ae:	f816 2008 	ldrb.w	r2, [r6, r8]
   d67b2:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d67b6:	2880      	cmp	r0, #128	; 0x80
   d67b8:	d109      	bne.n	d67ce <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d67ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d67be:	019b      	lsls	r3, r3, #6
   d67c0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d67c4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d67c8:	431a      	orrs	r2, r3
   d67ca:	b292      	uxth	r2, r2
   d67cc:	e011      	b.n	d67f2 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d67ce:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d67d2:	2bc0      	cmp	r3, #192	; 0xc0
   d67d4:	d146      	bne.n	d6864 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d67d6:	f105 0801 	add.w	r8, r5, #1
   d67da:	f816 3008 	ldrb.w	r3, [r6, r8]
   d67de:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d67e2:	2a80      	cmp	r2, #128	; 0x80
   d67e4:	d13e      	bne.n	d6864 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d67e6:	0189      	lsls	r1, r1, #6
   d67e8:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d67ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d67f0:	431a      	orrs	r2, r3
   d67f2:	4923      	ldr	r1, [pc, #140]	; (d6880 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d67f4:	4620      	mov	r0, r4
   d67f6:	f7ff ffac 	bl	d6752 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d67fa:	4645      	mov	r5, r8
   d67fc:	e035      	b.n	d686a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d67fe:	290c      	cmp	r1, #12
   d6800:	d018      	beq.n	d6834 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d6802:	d80b      	bhi.n	d681c <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d6804:	2909      	cmp	r1, #9
   d6806:	d021      	beq.n	d684c <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d6808:	290a      	cmp	r1, #10
   d680a:	d019      	beq.n	d6840 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d680c:	2908      	cmp	r1, #8
   d680e:	d129      	bne.n	d6864 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d6810:	215c      	movs	r1, #92	; 0x5c
   d6812:	4620      	mov	r0, r4
   d6814:	f7ff ff5e 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d6818:	2162      	movs	r1, #98	; 0x62
   d681a:	e023      	b.n	d6864 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d681c:	2922      	cmp	r1, #34	; 0x22
   d681e:	d01b      	beq.n	d6858 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d6820:	295c      	cmp	r1, #92	; 0x5c
   d6822:	d019      	beq.n	d6858 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d6824:	290d      	cmp	r1, #13
   d6826:	d11d      	bne.n	d6864 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d6828:	215c      	movs	r1, #92	; 0x5c
   d682a:	4620      	mov	r0, r4
   d682c:	f7ff ff52 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d6830:	2172      	movs	r1, #114	; 0x72
   d6832:	e017      	b.n	d6864 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d6834:	215c      	movs	r1, #92	; 0x5c
   d6836:	4620      	mov	r0, r4
   d6838:	f7ff ff4c 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d683c:	2166      	movs	r1, #102	; 0x66
   d683e:	e011      	b.n	d6864 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d6840:	215c      	movs	r1, #92	; 0x5c
   d6842:	4620      	mov	r0, r4
   d6844:	f7ff ff46 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d6848:	216e      	movs	r1, #110	; 0x6e
   d684a:	e00b      	b.n	d6864 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d684c:	215c      	movs	r1, #92	; 0x5c
   d684e:	4620      	mov	r0, r4
   d6850:	f7ff ff40 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d6854:	2174      	movs	r1, #116	; 0x74
   d6856:	e005      	b.n	d6864 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d6858:	215c      	movs	r1, #92	; 0x5c
   d685a:	4620      	mov	r0, r4
   d685c:	f7ff ff3a 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d6860:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d6864:	4620      	mov	r0, r4
   d6866:	f7ff ff35 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d686a:	3501      	adds	r5, #1
   d686c:	e788      	b.n	d6780 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d686e:	b12f      	cbz	r7, d687c <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d6870:	4620      	mov	r0, r4
   d6872:	2122      	movs	r1, #34	; 0x22
	}

}
   d6874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d6878:	f7ff bf2c 	b.w	d66d4 <_ZN10JsonWriter10insertCharEc>
   d687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6880:	000d9498 	.word	0x000d9498

000d6884 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d6884:	6942      	ldr	r2, [r0, #20]
   d6886:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d688a:	7e1a      	ldrb	r2, [r3, #24]
   d688c:	b112      	cbz	r2, d6894 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d688e:	2200      	movs	r2, #0
   d6890:	761a      	strb	r2, [r3, #24]
   d6892:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d6894:	212c      	movs	r1, #44	; 0x2c
   d6896:	f7ff bf1d 	b.w	d66d4 <_ZN10JsonWriter10insertCharEc>

000d689a <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d689a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d689c:	6943      	ldr	r3, [r0, #20]
   d689e:	3301      	adds	r3, #1
   d68a0:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d68a2:	460e      	mov	r6, r1
   d68a4:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d68a6:	d80e      	bhi.n	d68c6 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d68a8:	f7ff ffec 	bl	d6884 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d68ac:	6943      	ldr	r3, [r0, #20]
   d68ae:	1c5a      	adds	r2, r3, #1
   d68b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d68b4:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d68b6:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d68b8:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d68ba:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d68bc:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d68be:	f7ff ff09 	bl	d66d4 <_ZN10JsonWriter10insertCharEc>
   d68c2:	4620      	mov	r0, r4
   d68c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d68c6:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d68c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d68cc <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d68cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d68ce:	4604      	mov	r4, r0
   d68d0:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d68d4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d68d6:	2d00      	cmp	r5, #0
   d68d8:	db0a      	blt.n	d68f0 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d68da:	f002 f88d 	bl	d89f8 <__aeabi_f2d>
   d68de:	462a      	mov	r2, r5
   d68e0:	e9cd 0100 	strd	r0, r1, [sp]
   d68e4:	4908      	ldr	r1, [pc, #32]	; (d6908 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d68e6:	4620      	mov	r0, r4
   d68e8:	f7ff ff33 	bl	d6752 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d68ec:	b003      	add	sp, #12
   d68ee:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d68f0:	f002 f882 	bl	d89f8 <__aeabi_f2d>
   d68f4:	460b      	mov	r3, r1
   d68f6:	4905      	ldr	r1, [pc, #20]	; (d690c <_ZN10JsonWriter11insertValueEf+0x40>)
   d68f8:	4602      	mov	r2, r0
   d68fa:	4620      	mov	r0, r4
	}
}
   d68fc:	b003      	add	sp, #12
   d68fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d6902:	f7ff bf26 	b.w	d6752 <_ZN10JsonWriter13insertsprintfEPKcz>
   d6906:	bf00      	nop
   d6908:	000d94aa 	.word	0x000d94aa
   d690c:	000d94af 	.word	0x000d94af

000d6910 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d6910:	f000 b810 	b.w	d6934 <HAL_Pin_Map>

000d6914 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6914:	b508      	push	{r3, lr}
   d6916:	4b02      	ldr	r3, [pc, #8]	; (d6920 <netdb_freeaddrinfo+0xc>)
   d6918:	681b      	ldr	r3, [r3, #0]
   d691a:	689b      	ldr	r3, [r3, #8]
   d691c:	9301      	str	r3, [sp, #4]
   d691e:	bd08      	pop	{r3, pc}
   d6920:	00030268 	.word	0x00030268

000d6924 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6924:	b508      	push	{r3, lr}
   d6926:	4b02      	ldr	r3, [pc, #8]	; (d6930 <netdb_getaddrinfo+0xc>)
   d6928:	681b      	ldr	r3, [r3, #0]
   d692a:	68db      	ldr	r3, [r3, #12]
   d692c:	9301      	str	r3, [sp, #4]
   d692e:	bd08      	pop	{r3, pc}
   d6930:	00030268 	.word	0x00030268

000d6934 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6934:	b508      	push	{r3, lr}
   d6936:	4b02      	ldr	r3, [pc, #8]	; (d6940 <HAL_Pin_Map+0xc>)
   d6938:	681b      	ldr	r3, [r3, #0]
   d693a:	681b      	ldr	r3, [r3, #0]
   d693c:	9301      	str	r3, [sp, #4]
   d693e:	bd08      	pop	{r3, pc}
   d6940:	0003022c 	.word	0x0003022c

000d6944 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6944:	b508      	push	{r3, lr}
   d6946:	4b02      	ldr	r3, [pc, #8]	; (d6950 <HAL_Validate_Pin_Function+0xc>)
   d6948:	681b      	ldr	r3, [r3, #0]
   d694a:	685b      	ldr	r3, [r3, #4]
   d694c:	9301      	str	r3, [sp, #4]
   d694e:	bd08      	pop	{r3, pc}
   d6950:	0003022c 	.word	0x0003022c

000d6954 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6954:	b508      	push	{r3, lr}
   d6956:	4b02      	ldr	r3, [pc, #8]	; (d6960 <HAL_Pin_Mode+0xc>)
   d6958:	681b      	ldr	r3, [r3, #0]
   d695a:	689b      	ldr	r3, [r3, #8]
   d695c:	9301      	str	r3, [sp, #4]
   d695e:	bd08      	pop	{r3, pc}
   d6960:	0003022c 	.word	0x0003022c

000d6964 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6964:	b508      	push	{r3, lr}
   d6966:	4b02      	ldr	r3, [pc, #8]	; (d6970 <HAL_Get_Pin_Mode+0xc>)
   d6968:	681b      	ldr	r3, [r3, #0]
   d696a:	68db      	ldr	r3, [r3, #12]
   d696c:	9301      	str	r3, [sp, #4]
   d696e:	bd08      	pop	{r3, pc}
   d6970:	0003022c 	.word	0x0003022c

000d6974 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6974:	b508      	push	{r3, lr}
   d6976:	4b02      	ldr	r3, [pc, #8]	; (d6980 <HAL_GPIO_Write+0xc>)
   d6978:	681b      	ldr	r3, [r3, #0]
   d697a:	691b      	ldr	r3, [r3, #16]
   d697c:	9301      	str	r3, [sp, #4]
   d697e:	bd08      	pop	{r3, pc}
   d6980:	0003022c 	.word	0x0003022c

000d6984 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d6984:	b508      	push	{r3, lr}
   d6986:	4b02      	ldr	r3, [pc, #8]	; (d6990 <HAL_ADC_Read+0xc>)
   d6988:	681b      	ldr	r3, [r3, #0]
   d698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d698c:	9301      	str	r3, [sp, #4]
   d698e:	bd08      	pop	{r3, pc}
   d6990:	0003022c 	.word	0x0003022c

000d6994 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6994:	b508      	push	{r3, lr}
   d6996:	4b02      	ldr	r3, [pc, #8]	; (d69a0 <HAL_SPI_Begin+0xc>)
   d6998:	681b      	ldr	r3, [r3, #0]
   d699a:	681b      	ldr	r3, [r3, #0]
   d699c:	9301      	str	r3, [sp, #4]
   d699e:	bd08      	pop	{r3, pc}
   d69a0:	00030230 	.word	0x00030230

000d69a4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d69a4:	b508      	push	{r3, lr}
   d69a6:	4b02      	ldr	r3, [pc, #8]	; (d69b0 <HAL_SPI_Send_Receive_Data+0xc>)
   d69a8:	681b      	ldr	r3, [r3, #0]
   d69aa:	695b      	ldr	r3, [r3, #20]
   d69ac:	9301      	str	r3, [sp, #4]
   d69ae:	bd08      	pop	{r3, pc}
   d69b0:	00030230 	.word	0x00030230

000d69b4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d69b4:	b508      	push	{r3, lr}
   d69b6:	4b02      	ldr	r3, [pc, #8]	; (d69c0 <HAL_SPI_Init+0xc>)
   d69b8:	681b      	ldr	r3, [r3, #0]
   d69ba:	69db      	ldr	r3, [r3, #28]
   d69bc:	9301      	str	r3, [sp, #4]
   d69be:	bd08      	pop	{r3, pc}
   d69c0:	00030230 	.word	0x00030230

000d69c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d69c4:	b508      	push	{r3, lr}
   d69c6:	4b02      	ldr	r3, [pc, #8]	; (d69d0 <HAL_SPI_Is_Enabled+0xc>)
   d69c8:	681b      	ldr	r3, [r3, #0]
   d69ca:	6a1b      	ldr	r3, [r3, #32]
   d69cc:	9301      	str	r3, [sp, #4]
   d69ce:	bd08      	pop	{r3, pc}
   d69d0:	00030230 	.word	0x00030230

000d69d4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d69d4:	b508      	push	{r3, lr}
   d69d6:	4b02      	ldr	r3, [pc, #8]	; (d69e0 <HAL_SPI_Info+0xc>)
   d69d8:	681b      	ldr	r3, [r3, #0]
   d69da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d69dc:	9301      	str	r3, [sp, #4]
   d69de:	bd08      	pop	{r3, pc}
   d69e0:	00030230 	.word	0x00030230

000d69e4 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d69e4:	b508      	push	{r3, lr}
   d69e6:	4b02      	ldr	r3, [pc, #8]	; (d69f0 <HAL_SPI_DMA_Transfer+0xc>)
   d69e8:	681b      	ldr	r3, [r3, #0]
   d69ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d69ec:	9301      	str	r3, [sp, #4]
   d69ee:	bd08      	pop	{r3, pc}
   d69f0:	00030230 	.word	0x00030230

000d69f4 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d69f4:	b508      	push	{r3, lr}
   d69f6:	4b02      	ldr	r3, [pc, #8]	; (d6a00 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d69f8:	681b      	ldr	r3, [r3, #0]
   d69fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d69fc:	9301      	str	r3, [sp, #4]
   d69fe:	bd08      	pop	{r3, pc}
   d6a00:	00030230 	.word	0x00030230

000d6a04 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6a04:	b508      	push	{r3, lr}
   d6a06:	4b02      	ldr	r3, [pc, #8]	; (d6a10 <HAL_SPI_Set_Settings+0xc>)
   d6a08:	681b      	ldr	r3, [r3, #0]
   d6a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6a0c:	9301      	str	r3, [sp, #4]
   d6a0e:	bd08      	pop	{r3, pc}
   d6a10:	00030230 	.word	0x00030230

000d6a14 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6a14:	b508      	push	{r3, lr}
   d6a16:	4b02      	ldr	r3, [pc, #8]	; (d6a20 <HAL_SPI_Acquire+0xc>)
   d6a18:	681b      	ldr	r3, [r3, #0]
   d6a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a1c:	9301      	str	r3, [sp, #4]
   d6a1e:	bd08      	pop	{r3, pc}
   d6a20:	00030230 	.word	0x00030230

000d6a24 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6a24:	b508      	push	{r3, lr}
   d6a26:	4b02      	ldr	r3, [pc, #8]	; (d6a30 <HAL_SPI_Release+0xc>)
   d6a28:	681b      	ldr	r3, [r3, #0]
   d6a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a2c:	9301      	str	r3, [sp, #4]
   d6a2e:	bd08      	pop	{r3, pc}
   d6a30:	00030230 	.word	0x00030230

000d6a34 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6a34:	b508      	push	{r3, lr}
   d6a36:	4b02      	ldr	r3, [pc, #8]	; (d6a40 <HAL_RNG_GetRandomNumber+0xc>)
   d6a38:	681b      	ldr	r3, [r3, #0]
   d6a3a:	685b      	ldr	r3, [r3, #4]
   d6a3c:	9301      	str	r3, [sp, #4]
   d6a3e:	bd08      	pop	{r3, pc}
   d6a40:	00030218 	.word	0x00030218

000d6a44 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6a44:	b508      	push	{r3, lr}
   d6a46:	4b02      	ldr	r3, [pc, #8]	; (d6a50 <HAL_Delay_Microseconds+0xc>)
   d6a48:	681b      	ldr	r3, [r3, #0]
   d6a4a:	68db      	ldr	r3, [r3, #12]
   d6a4c:	9301      	str	r3, [sp, #4]
   d6a4e:	bd08      	pop	{r3, pc}
   d6a50:	00030218 	.word	0x00030218

000d6a54 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6a54:	b508      	push	{r3, lr}
   d6a56:	4b02      	ldr	r3, [pc, #8]	; (d6a60 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6a58:	681b      	ldr	r3, [r3, #0]
   d6a5a:	691b      	ldr	r3, [r3, #16]
   d6a5c:	9301      	str	r3, [sp, #4]
   d6a5e:	bd08      	pop	{r3, pc}
   d6a60:	00030218 	.word	0x00030218

000d6a64 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6a64:	b508      	push	{r3, lr}
   d6a66:	4b02      	ldr	r3, [pc, #8]	; (d6a70 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6a68:	681b      	ldr	r3, [r3, #0]
   d6a6a:	695b      	ldr	r3, [r3, #20]
   d6a6c:	9301      	str	r3, [sp, #4]
   d6a6e:	bd08      	pop	{r3, pc}
   d6a70:	00030218 	.word	0x00030218

000d6a74 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6a74:	b508      	push	{r3, lr}
   d6a76:	4b02      	ldr	r3, [pc, #8]	; (d6a80 <os_thread_is_current+0xc>)
   d6a78:	681b      	ldr	r3, [r3, #0]
   d6a7a:	689b      	ldr	r3, [r3, #8]
   d6a7c:	9301      	str	r3, [sp, #4]
   d6a7e:	bd08      	pop	{r3, pc}
   d6a80:	00030248 	.word	0x00030248

000d6a84 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6a84:	b508      	push	{r3, lr}
   d6a86:	4b02      	ldr	r3, [pc, #8]	; (d6a90 <os_thread_yield+0xc>)
   d6a88:	681b      	ldr	r3, [r3, #0]
   d6a8a:	68db      	ldr	r3, [r3, #12]
   d6a8c:	9301      	str	r3, [sp, #4]
   d6a8e:	bd08      	pop	{r3, pc}
   d6a90:	00030248 	.word	0x00030248

000d6a94 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6a94:	b508      	push	{r3, lr}
   d6a96:	4b02      	ldr	r3, [pc, #8]	; (d6aa0 <os_thread_join+0xc>)
   d6a98:	681b      	ldr	r3, [r3, #0]
   d6a9a:	691b      	ldr	r3, [r3, #16]
   d6a9c:	9301      	str	r3, [sp, #4]
   d6a9e:	bd08      	pop	{r3, pc}
   d6aa0:	00030248 	.word	0x00030248

000d6aa4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6aa4:	b508      	push	{r3, lr}
   d6aa6:	4b02      	ldr	r3, [pc, #8]	; (d6ab0 <os_thread_cleanup+0xc>)
   d6aa8:	681b      	ldr	r3, [r3, #0]
   d6aaa:	695b      	ldr	r3, [r3, #20]
   d6aac:	9301      	str	r3, [sp, #4]
   d6aae:	bd08      	pop	{r3, pc}
   d6ab0:	00030248 	.word	0x00030248

000d6ab4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6ab4:	b508      	push	{r3, lr}
   d6ab6:	4b02      	ldr	r3, [pc, #8]	; (d6ac0 <os_mutex_recursive_create+0xc>)
   d6ab8:	681b      	ldr	r3, [r3, #0]
   d6aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6abc:	9301      	str	r3, [sp, #4]
   d6abe:	bd08      	pop	{r3, pc}
   d6ac0:	00030248 	.word	0x00030248

000d6ac4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6ac4:	b508      	push	{r3, lr}
   d6ac6:	4b02      	ldr	r3, [pc, #8]	; (d6ad0 <os_mutex_recursive_destroy+0xc>)
   d6ac8:	681b      	ldr	r3, [r3, #0]
   d6aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6acc:	9301      	str	r3, [sp, #4]
   d6ace:	bd08      	pop	{r3, pc}
   d6ad0:	00030248 	.word	0x00030248

000d6ad4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6ad4:	b508      	push	{r3, lr}
   d6ad6:	4b02      	ldr	r3, [pc, #8]	; (d6ae0 <inet_inet_ntop+0xc>)
   d6ad8:	681b      	ldr	r3, [r3, #0]
   d6ada:	695b      	ldr	r3, [r3, #20]
   d6adc:	9301      	str	r3, [sp, #4]
   d6ade:	bd08      	pop	{r3, pc}
   d6ae0:	00030264 	.word	0x00030264

000d6ae4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6ae4:	b508      	push	{r3, lr}
   d6ae6:	4b02      	ldr	r3, [pc, #8]	; (d6af0 <HAL_USART_Init+0xc>)
   d6ae8:	681b      	ldr	r3, [r3, #0]
   d6aea:	681b      	ldr	r3, [r3, #0]
   d6aec:	9301      	str	r3, [sp, #4]
   d6aee:	bd08      	pop	{r3, pc}
   d6af0:	0003023c 	.word	0x0003023c

000d6af4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6af4:	b508      	push	{r3, lr}
   d6af6:	4b02      	ldr	r3, [pc, #8]	; (d6b00 <HAL_USART_Write_Data+0xc>)
   d6af8:	681b      	ldr	r3, [r3, #0]
   d6afa:	68db      	ldr	r3, [r3, #12]
   d6afc:	9301      	str	r3, [sp, #4]
   d6afe:	bd08      	pop	{r3, pc}
   d6b00:	0003023c 	.word	0x0003023c

000d6b04 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6b04:	b508      	push	{r3, lr}
   d6b06:	4b02      	ldr	r3, [pc, #8]	; (d6b10 <HAL_USART_Available_Data+0xc>)
   d6b08:	681b      	ldr	r3, [r3, #0]
   d6b0a:	691b      	ldr	r3, [r3, #16]
   d6b0c:	9301      	str	r3, [sp, #4]
   d6b0e:	bd08      	pop	{r3, pc}
   d6b10:	0003023c 	.word	0x0003023c

000d6b14 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6b14:	b508      	push	{r3, lr}
   d6b16:	4b02      	ldr	r3, [pc, #8]	; (d6b20 <HAL_USART_Read_Data+0xc>)
   d6b18:	681b      	ldr	r3, [r3, #0]
   d6b1a:	695b      	ldr	r3, [r3, #20]
   d6b1c:	9301      	str	r3, [sp, #4]
   d6b1e:	bd08      	pop	{r3, pc}
   d6b20:	0003023c 	.word	0x0003023c

000d6b24 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6b24:	b508      	push	{r3, lr}
   d6b26:	4b02      	ldr	r3, [pc, #8]	; (d6b30 <HAL_USART_Peek_Data+0xc>)
   d6b28:	681b      	ldr	r3, [r3, #0]
   d6b2a:	699b      	ldr	r3, [r3, #24]
   d6b2c:	9301      	str	r3, [sp, #4]
   d6b2e:	bd08      	pop	{r3, pc}
   d6b30:	0003023c 	.word	0x0003023c

000d6b34 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6b34:	b508      	push	{r3, lr}
   d6b36:	4b02      	ldr	r3, [pc, #8]	; (d6b40 <HAL_USART_Flush_Data+0xc>)
   d6b38:	681b      	ldr	r3, [r3, #0]
   d6b3a:	69db      	ldr	r3, [r3, #28]
   d6b3c:	9301      	str	r3, [sp, #4]
   d6b3e:	bd08      	pop	{r3, pc}
   d6b40:	0003023c 	.word	0x0003023c

000d6b44 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6b44:	b508      	push	{r3, lr}
   d6b46:	4b02      	ldr	r3, [pc, #8]	; (d6b50 <HAL_USART_Is_Enabled+0xc>)
   d6b48:	681b      	ldr	r3, [r3, #0]
   d6b4a:	6a1b      	ldr	r3, [r3, #32]
   d6b4c:	9301      	str	r3, [sp, #4]
   d6b4e:	bd08      	pop	{r3, pc}
   d6b50:	0003023c 	.word	0x0003023c

000d6b54 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6b54:	b508      	push	{r3, lr}
   d6b56:	4b02      	ldr	r3, [pc, #8]	; (d6b60 <HAL_USART_Available_Data_For_Write+0xc>)
   d6b58:	681b      	ldr	r3, [r3, #0]
   d6b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b5c:	9301      	str	r3, [sp, #4]
   d6b5e:	bd08      	pop	{r3, pc}
   d6b60:	0003023c 	.word	0x0003023c

000d6b64 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6b64:	b508      	push	{r3, lr}
   d6b66:	4b02      	ldr	r3, [pc, #8]	; (d6b70 <HAL_I2C_Write_Data+0xc>)
   d6b68:	681b      	ldr	r3, [r3, #0]
   d6b6a:	6a1b      	ldr	r3, [r3, #32]
   d6b6c:	9301      	str	r3, [sp, #4]
   d6b6e:	bd08      	pop	{r3, pc}
   d6b70:	00030228 	.word	0x00030228

000d6b74 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6b74:	b508      	push	{r3, lr}
   d6b76:	4b02      	ldr	r3, [pc, #8]	; (d6b80 <HAL_I2C_Available_Data+0xc>)
   d6b78:	681b      	ldr	r3, [r3, #0]
   d6b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b7c:	9301      	str	r3, [sp, #4]
   d6b7e:	bd08      	pop	{r3, pc}
   d6b80:	00030228 	.word	0x00030228

000d6b84 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6b84:	b508      	push	{r3, lr}
   d6b86:	4b02      	ldr	r3, [pc, #8]	; (d6b90 <HAL_I2C_Read_Data+0xc>)
   d6b88:	681b      	ldr	r3, [r3, #0]
   d6b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b8c:	9301      	str	r3, [sp, #4]
   d6b8e:	bd08      	pop	{r3, pc}
   d6b90:	00030228 	.word	0x00030228

000d6b94 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6b94:	b508      	push	{r3, lr}
   d6b96:	4b02      	ldr	r3, [pc, #8]	; (d6ba0 <HAL_I2C_Peek_Data+0xc>)
   d6b98:	681b      	ldr	r3, [r3, #0]
   d6b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b9c:	9301      	str	r3, [sp, #4]
   d6b9e:	bd08      	pop	{r3, pc}
   d6ba0:	00030228 	.word	0x00030228

000d6ba4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6ba4:	b508      	push	{r3, lr}
   d6ba6:	4b02      	ldr	r3, [pc, #8]	; (d6bb0 <HAL_I2C_Flush_Data+0xc>)
   d6ba8:	681b      	ldr	r3, [r3, #0]
   d6baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6bac:	9301      	str	r3, [sp, #4]
   d6bae:	bd08      	pop	{r3, pc}
   d6bb0:	00030228 	.word	0x00030228

000d6bb4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6bb4:	b508      	push	{r3, lr}
   d6bb6:	4b02      	ldr	r3, [pc, #8]	; (d6bc0 <HAL_I2C_Is_Enabled+0xc>)
   d6bb8:	681b      	ldr	r3, [r3, #0]
   d6bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6bbc:	9301      	str	r3, [sp, #4]
   d6bbe:	bd08      	pop	{r3, pc}
   d6bc0:	00030228 	.word	0x00030228

000d6bc4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6bc4:	b508      	push	{r3, lr}
   d6bc6:	4b02      	ldr	r3, [pc, #8]	; (d6bd0 <HAL_I2C_Init+0xc>)
   d6bc8:	681b      	ldr	r3, [r3, #0]
   d6bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6bcc:	9301      	str	r3, [sp, #4]
   d6bce:	bd08      	pop	{r3, pc}
   d6bd0:	00030228 	.word	0x00030228

000d6bd4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6bd4:	b508      	push	{r3, lr}
   d6bd6:	4b02      	ldr	r3, [pc, #8]	; (d6be0 <HAL_USB_USART_Init+0xc>)
   d6bd8:	681b      	ldr	r3, [r3, #0]
   d6bda:	681b      	ldr	r3, [r3, #0]
   d6bdc:	9301      	str	r3, [sp, #4]
   d6bde:	bd08      	pop	{r3, pc}
   d6be0:	0003024c 	.word	0x0003024c

000d6be4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6be4:	b508      	push	{r3, lr}
   d6be6:	4b02      	ldr	r3, [pc, #8]	; (d6bf0 <HAL_USB_USART_Begin+0xc>)
   d6be8:	681b      	ldr	r3, [r3, #0]
   d6bea:	685b      	ldr	r3, [r3, #4]
   d6bec:	9301      	str	r3, [sp, #4]
   d6bee:	bd08      	pop	{r3, pc}
   d6bf0:	0003024c 	.word	0x0003024c

000d6bf4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6bf4:	b508      	push	{r3, lr}
   d6bf6:	4b02      	ldr	r3, [pc, #8]	; (d6c00 <HAL_USB_USART_Available_Data+0xc>)
   d6bf8:	681b      	ldr	r3, [r3, #0]
   d6bfa:	691b      	ldr	r3, [r3, #16]
   d6bfc:	9301      	str	r3, [sp, #4]
   d6bfe:	bd08      	pop	{r3, pc}
   d6c00:	0003024c 	.word	0x0003024c

000d6c04 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6c04:	b508      	push	{r3, lr}
   d6c06:	4b02      	ldr	r3, [pc, #8]	; (d6c10 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6c08:	681b      	ldr	r3, [r3, #0]
   d6c0a:	695b      	ldr	r3, [r3, #20]
   d6c0c:	9301      	str	r3, [sp, #4]
   d6c0e:	bd08      	pop	{r3, pc}
   d6c10:	0003024c 	.word	0x0003024c

000d6c14 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6c14:	b508      	push	{r3, lr}
   d6c16:	4b02      	ldr	r3, [pc, #8]	; (d6c20 <HAL_USB_USART_Receive_Data+0xc>)
   d6c18:	681b      	ldr	r3, [r3, #0]
   d6c1a:	699b      	ldr	r3, [r3, #24]
   d6c1c:	9301      	str	r3, [sp, #4]
   d6c1e:	bd08      	pop	{r3, pc}
   d6c20:	0003024c 	.word	0x0003024c

000d6c24 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6c24:	b508      	push	{r3, lr}
   d6c26:	4b02      	ldr	r3, [pc, #8]	; (d6c30 <HAL_USB_USART_Send_Data+0xc>)
   d6c28:	681b      	ldr	r3, [r3, #0]
   d6c2a:	69db      	ldr	r3, [r3, #28]
   d6c2c:	9301      	str	r3, [sp, #4]
   d6c2e:	bd08      	pop	{r3, pc}
   d6c30:	0003024c 	.word	0x0003024c

000d6c34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6c34:	b508      	push	{r3, lr}
   d6c36:	4b02      	ldr	r3, [pc, #8]	; (d6c40 <HAL_USB_USART_Flush_Data+0xc>)
   d6c38:	681b      	ldr	r3, [r3, #0]
   d6c3a:	6a1b      	ldr	r3, [r3, #32]
   d6c3c:	9301      	str	r3, [sp, #4]
   d6c3e:	bd08      	pop	{r3, pc}
   d6c40:	0003024c 	.word	0x0003024c

000d6c44 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6c44:	b508      	push	{r3, lr}
   d6c46:	4b02      	ldr	r3, [pc, #8]	; (d6c50 <set_system_mode+0xc>)
   d6c48:	681b      	ldr	r3, [r3, #0]
   d6c4a:	685b      	ldr	r3, [r3, #4]
   d6c4c:	9301      	str	r3, [sp, #4]
   d6c4e:	bd08      	pop	{r3, pc}
   d6c50:	00030220 	.word	0x00030220

000d6c54 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6c54:	b508      	push	{r3, lr}
   d6c56:	4b02      	ldr	r3, [pc, #8]	; (d6c60 <system_delay_ms+0xc>)
   d6c58:	681b      	ldr	r3, [r3, #0]
   d6c5a:	695b      	ldr	r3, [r3, #20]
   d6c5c:	9301      	str	r3, [sp, #4]
   d6c5e:	bd08      	pop	{r3, pc}
   d6c60:	00030220 	.word	0x00030220

000d6c64 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6c64:	b508      	push	{r3, lr}
   d6c66:	4b02      	ldr	r3, [pc, #8]	; (d6c70 <application_thread_current+0xc>)
   d6c68:	681b      	ldr	r3, [r3, #0]
   d6c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6c6c:	9301      	str	r3, [sp, #4]
   d6c6e:	bd08      	pop	{r3, pc}
   d6c70:	00030220 	.word	0x00030220

000d6c74 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6c74:	b508      	push	{r3, lr}
   d6c76:	4b02      	ldr	r3, [pc, #8]	; (d6c80 <application_thread_invoke+0xc>)
   d6c78:	681b      	ldr	r3, [r3, #0]
   d6c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6c7c:	9301      	str	r3, [sp, #4]
   d6c7e:	bd08      	pop	{r3, pc}
   d6c80:	00030220 	.word	0x00030220

000d6c84 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6c84:	b508      	push	{r3, lr}
   d6c86:	4b03      	ldr	r3, [pc, #12]	; (d6c94 <system_ctrl_set_app_request_handler+0x10>)
   d6c88:	681b      	ldr	r3, [r3, #0]
   d6c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6c8e:	9301      	str	r3, [sp, #4]
   d6c90:	bd08      	pop	{r3, pc}
   d6c92:	0000      	.short	0x0000
   d6c94:	00030220 	.word	0x00030220

000d6c98 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4b03      	ldr	r3, [pc, #12]	; (d6ca8 <system_ctrl_set_result+0x10>)
   d6c9c:	681b      	ldr	r3, [r3, #0]
   d6c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6ca2:	9301      	str	r3, [sp, #4]
   d6ca4:	bd08      	pop	{r3, pc}
   d6ca6:	0000      	.short	0x0000
   d6ca8:	00030220 	.word	0x00030220

000d6cac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6cac:	b508      	push	{r3, lr}
   d6cae:	4b02      	ldr	r3, [pc, #8]	; (d6cb8 <network_connect+0xc>)
   d6cb0:	681b      	ldr	r3, [r3, #0]
   d6cb2:	685b      	ldr	r3, [r3, #4]
   d6cb4:	9301      	str	r3, [sp, #4]
   d6cb6:	bd08      	pop	{r3, pc}
   d6cb8:	00030240 	.word	0x00030240

000d6cbc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6cbc:	b508      	push	{r3, lr}
   d6cbe:	4b02      	ldr	r3, [pc, #8]	; (d6cc8 <network_connecting+0xc>)
   d6cc0:	681b      	ldr	r3, [r3, #0]
   d6cc2:	689b      	ldr	r3, [r3, #8]
   d6cc4:	9301      	str	r3, [sp, #4]
   d6cc6:	bd08      	pop	{r3, pc}
   d6cc8:	00030240 	.word	0x00030240

000d6ccc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6ccc:	b508      	push	{r3, lr}
   d6cce:	4b02      	ldr	r3, [pc, #8]	; (d6cd8 <network_disconnect+0xc>)
   d6cd0:	681b      	ldr	r3, [r3, #0]
   d6cd2:	68db      	ldr	r3, [r3, #12]
   d6cd4:	9301      	str	r3, [sp, #4]
   d6cd6:	bd08      	pop	{r3, pc}
   d6cd8:	00030240 	.word	0x00030240

000d6cdc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6cdc:	b508      	push	{r3, lr}
   d6cde:	4b02      	ldr	r3, [pc, #8]	; (d6ce8 <network_ready+0xc>)
   d6ce0:	681b      	ldr	r3, [r3, #0]
   d6ce2:	691b      	ldr	r3, [r3, #16]
   d6ce4:	9301      	str	r3, [sp, #4]
   d6ce6:	bd08      	pop	{r3, pc}
   d6ce8:	00030240 	.word	0x00030240

000d6cec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6cec:	b508      	push	{r3, lr}
   d6cee:	4b02      	ldr	r3, [pc, #8]	; (d6cf8 <network_on+0xc>)
   d6cf0:	681b      	ldr	r3, [r3, #0]
   d6cf2:	695b      	ldr	r3, [r3, #20]
   d6cf4:	9301      	str	r3, [sp, #4]
   d6cf6:	bd08      	pop	{r3, pc}
   d6cf8:	00030240 	.word	0x00030240

000d6cfc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6cfc:	b508      	push	{r3, lr}
   d6cfe:	4b02      	ldr	r3, [pc, #8]	; (d6d08 <network_off+0xc>)
   d6d00:	681b      	ldr	r3, [r3, #0]
   d6d02:	699b      	ldr	r3, [r3, #24]
   d6d04:	9301      	str	r3, [sp, #4]
   d6d06:	bd08      	pop	{r3, pc}
   d6d08:	00030240 	.word	0x00030240

000d6d0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6d0c:	b508      	push	{r3, lr}
   d6d0e:	4b02      	ldr	r3, [pc, #8]	; (d6d18 <network_listen+0xc>)
   d6d10:	681b      	ldr	r3, [r3, #0]
   d6d12:	69db      	ldr	r3, [r3, #28]
   d6d14:	9301      	str	r3, [sp, #4]
   d6d16:	bd08      	pop	{r3, pc}
   d6d18:	00030240 	.word	0x00030240

000d6d1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6d1c:	b508      	push	{r3, lr}
   d6d1e:	4b02      	ldr	r3, [pc, #8]	; (d6d28 <network_listening+0xc>)
   d6d20:	681b      	ldr	r3, [r3, #0]
   d6d22:	6a1b      	ldr	r3, [r3, #32]
   d6d24:	9301      	str	r3, [sp, #4]
   d6d26:	bd08      	pop	{r3, pc}
   d6d28:	00030240 	.word	0x00030240

000d6d2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6d2c:	b508      	push	{r3, lr}
   d6d2e:	4b02      	ldr	r3, [pc, #8]	; (d6d38 <network_set_listen_timeout+0xc>)
   d6d30:	681b      	ldr	r3, [r3, #0]
   d6d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d34:	9301      	str	r3, [sp, #4]
   d6d36:	bd08      	pop	{r3, pc}
   d6d38:	00030240 	.word	0x00030240

000d6d3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6d3c:	b508      	push	{r3, lr}
   d6d3e:	4b02      	ldr	r3, [pc, #8]	; (d6d48 <network_get_listen_timeout+0xc>)
   d6d40:	681b      	ldr	r3, [r3, #0]
   d6d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d44:	9301      	str	r3, [sp, #4]
   d6d46:	bd08      	pop	{r3, pc}
   d6d48:	00030240 	.word	0x00030240

000d6d4c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6d4c:	b508      	push	{r3, lr}
   d6d4e:	4b02      	ldr	r3, [pc, #8]	; (d6d58 <spark_process+0xc>)
   d6d50:	681b      	ldr	r3, [r3, #0]
   d6d52:	689b      	ldr	r3, [r3, #8]
   d6d54:	9301      	str	r3, [sp, #4]
   d6d56:	bd08      	pop	{r3, pc}
   d6d58:	00030244 	.word	0x00030244

000d6d5c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6d5c:	b508      	push	{r3, lr}
   d6d5e:	4b02      	ldr	r3, [pc, #8]	; (d6d68 <spark_cloud_flag_connected+0xc>)
   d6d60:	681b      	ldr	r3, [r3, #0]
   d6d62:	695b      	ldr	r3, [r3, #20]
   d6d64:	9301      	str	r3, [sp, #4]
   d6d66:	bd08      	pop	{r3, pc}
   d6d68:	00030244 	.word	0x00030244

000d6d6c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6d6c:	b508      	push	{r3, lr}
   d6d6e:	4b02      	ldr	r3, [pc, #8]	; (d6d78 <spark_send_event+0xc>)
   d6d70:	681b      	ldr	r3, [r3, #0]
   d6d72:	6a1b      	ldr	r3, [r3, #32]
   d6d74:	9301      	str	r3, [sp, #4]
   d6d76:	bd08      	pop	{r3, pc}
   d6d78:	00030244 	.word	0x00030244

000d6d7c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6d7c:	b508      	push	{r3, lr}
   d6d7e:	4b02      	ldr	r3, [pc, #8]	; (d6d88 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6d80:	681b      	ldr	r3, [r3, #0]
   d6d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6d84:	9301      	str	r3, [sp, #4]
   d6d86:	bd08      	pop	{r3, pc}
   d6d88:	00030244 	.word	0x00030244

000d6d8c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6d8c:	b508      	push	{r3, lr}
   d6d8e:	4b02      	ldr	r3, [pc, #8]	; (d6d98 <malloc+0xc>)
   d6d90:	681b      	ldr	r3, [r3, #0]
   d6d92:	681b      	ldr	r3, [r3, #0]
   d6d94:	9301      	str	r3, [sp, #4]
   d6d96:	bd08      	pop	{r3, pc}
   d6d98:	0003021c 	.word	0x0003021c

000d6d9c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6d9c:	b508      	push	{r3, lr}
   d6d9e:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <free+0xc>)
   d6da0:	681b      	ldr	r3, [r3, #0]
   d6da2:	685b      	ldr	r3, [r3, #4]
   d6da4:	9301      	str	r3, [sp, #4]
   d6da6:	bd08      	pop	{r3, pc}
   d6da8:	0003021c 	.word	0x0003021c

000d6dac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6dac:	b508      	push	{r3, lr}
   d6dae:	4b02      	ldr	r3, [pc, #8]	; (d6db8 <vsnprintf+0xc>)
   d6db0:	681b      	ldr	r3, [r3, #0]
   d6db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6db4:	9301      	str	r3, [sp, #4]
   d6db6:	bd08      	pop	{r3, pc}
   d6db8:	0003021c 	.word	0x0003021c

000d6dbc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6dbc:	b508      	push	{r3, lr}
   d6dbe:	4b02      	ldr	r3, [pc, #8]	; (d6dc8 <abort+0xc>)
   d6dc0:	681b      	ldr	r3, [r3, #0]
   d6dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6dc4:	9301      	str	r3, [sp, #4]
   d6dc6:	bd08      	pop	{r3, pc}
   d6dc8:	0003021c 	.word	0x0003021c

000d6dcc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6dcc:	b508      	push	{r3, lr}
   d6dce:	4b02      	ldr	r3, [pc, #8]	; (d6dd8 <_malloc_r+0xc>)
   d6dd0:	681b      	ldr	r3, [r3, #0]
   d6dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6dd4:	9301      	str	r3, [sp, #4]
   d6dd6:	bd08      	pop	{r3, pc}
   d6dd8:	0003021c 	.word	0x0003021c

000d6ddc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6ddc:	b508      	push	{r3, lr}
   d6dde:	4b02      	ldr	r3, [pc, #8]	; (d6de8 <__errno+0xc>)
   d6de0:	681b      	ldr	r3, [r3, #0]
   d6de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6de4:	9301      	str	r3, [sp, #4]
   d6de6:	bd08      	pop	{r3, pc}
   d6de8:	0003021c 	.word	0x0003021c

000d6dec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6dec:	2200      	movs	r2, #0
   d6dee:	4611      	mov	r1, r2
   d6df0:	6840      	ldr	r0, [r0, #4]
   d6df2:	f7ff bf93 	b.w	d6d1c <network_listening>

000d6df6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6df6:	2200      	movs	r2, #0
   d6df8:	4611      	mov	r1, r2
   d6dfa:	6840      	ldr	r0, [r0, #4]
   d6dfc:	f7ff bf9e 	b.w	d6d3c <network_get_listen_timeout>

000d6e00 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6e00:	2200      	movs	r2, #0
   d6e02:	6840      	ldr	r0, [r0, #4]
   d6e04:	f7ff bf92 	b.w	d6d2c <network_set_listen_timeout>

000d6e08 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e08:	2200      	movs	r2, #0
   d6e0a:	f081 0101 	eor.w	r1, r1, #1
   d6e0e:	6840      	ldr	r0, [r0, #4]
   d6e10:	f7ff bf7c 	b.w	d6d0c <network_listen>

000d6e14 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6e14:	2300      	movs	r3, #0
   d6e16:	461a      	mov	r2, r3
   d6e18:	4619      	mov	r1, r3
   d6e1a:	6840      	ldr	r0, [r0, #4]
   d6e1c:	f7ff bf6e 	b.w	d6cfc <network_off>

000d6e20 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6e20:	2300      	movs	r3, #0
   d6e22:	461a      	mov	r2, r3
   d6e24:	4619      	mov	r1, r3
   d6e26:	6840      	ldr	r0, [r0, #4]
   d6e28:	f7ff bf60 	b.w	d6cec <network_on>

000d6e2c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e2c:	2200      	movs	r2, #0
   d6e2e:	4611      	mov	r1, r2
   d6e30:	6840      	ldr	r0, [r0, #4]
   d6e32:	f7ff bf53 	b.w	d6cdc <network_ready>

000d6e36 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e36:	2200      	movs	r2, #0
   d6e38:	4611      	mov	r1, r2
   d6e3a:	6840      	ldr	r0, [r0, #4]
   d6e3c:	f7ff bf3e 	b.w	d6cbc <network_connecting>

000d6e40 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e40:	2200      	movs	r2, #0
   d6e42:	2102      	movs	r1, #2
   d6e44:	6840      	ldr	r0, [r0, #4]
   d6e46:	f7ff bf41 	b.w	d6ccc <network_disconnect>

000d6e4a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e4a:	2300      	movs	r3, #0
   d6e4c:	461a      	mov	r2, r3
   d6e4e:	6840      	ldr	r0, [r0, #4]
   d6e50:	f7ff bf2c 	b.w	d6cac <network_connect>

000d6e54 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6e54:	4b02      	ldr	r3, [pc, #8]	; (d6e60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6e56:	2203      	movs	r2, #3
   d6e58:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6e5a:	4a02      	ldr	r2, [pc, #8]	; (d6e64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6e5c:	601a      	str	r2, [r3, #0]
   d6e5e:	4770      	bx	lr
   d6e60:	2003e3dc 	.word	0x2003e3dc
   d6e64:	000d94c4 	.word	0x000d94c4

000d6e68 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6e68:	2100      	movs	r1, #0
   d6e6a:	f7ff bdd3 	b.w	d6a14 <HAL_SPI_Acquire>

000d6e6e <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6e6e:	2100      	movs	r1, #0
   d6e70:	f7ff bdd8 	b.w	d6a24 <HAL_SPI_Release>

000d6e74 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6e74:	b510      	push	{r4, lr}
   d6e76:	4604      	mov	r4, r0
{
    _spi = spi;
   d6e78:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6e7a:	4608      	mov	r0, r1
   d6e7c:	f7ff fd9a 	bl	d69b4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6e80:	2300      	movs	r3, #0
   d6e82:	6063      	str	r3, [r4, #4]
}
   d6e84:	4620      	mov	r0, r4
   d6e86:	bd10      	pop	{r4, pc}

000d6e88 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6e88:	b510      	push	{r4, lr}
   d6e8a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6e8c:	7800      	ldrb	r0, [r0, #0]
   d6e8e:	f7ff ffeb 	bl	d6e68 <_ZN8SPIClass4lockEv.isra.0>
   d6e92:	b948      	cbnz	r0, d6ea8 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6e94:	7820      	ldrb	r0, [r4, #0]
   d6e96:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6e9a:	f7ff fd7b 	bl	d6994 <HAL_SPI_Begin>
        unlock();
   d6e9e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6ea4:	f7ff bfe3 	b.w	d6e6e <_ZN8SPIClass6unlockEv.isra.1>
   d6ea8:	bd10      	pop	{r4, pc}

000d6eaa <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6eaa:	7800      	ldrb	r0, [r0, #0]
   d6eac:	f7ff bfdf 	b.w	d6e6e <_ZN8SPIClass6unlockEv.isra.1>

000d6eb0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6eb0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6eb2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6eb4:	6018      	str	r0, [r3, #0]
   d6eb6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6eb8:	6818      	ldr	r0, [r3, #0]
   d6eba:	4288      	cmp	r0, r1
   d6ebc:	b2e5      	uxtb	r5, r4
   d6ebe:	d906      	bls.n	d6ece <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6ec0:	3401      	adds	r4, #1
   d6ec2:	2c08      	cmp	r4, #8
   d6ec4:	d002      	beq.n	d6ecc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6ec6:	0840      	lsrs	r0, r0, #1
   d6ec8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6eca:	e7f5      	b.n	d6eb8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6ecc:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6ece:	4b02      	ldr	r3, [pc, #8]	; (d6ed8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6ed0:	5d5b      	ldrb	r3, [r3, r5]
   d6ed2:	7013      	strb	r3, [r2, #0]
   d6ed4:	bd30      	pop	{r4, r5, pc}
   d6ed6:	bf00      	nop
   d6ed8:	000d94f0 	.word	0x000d94f0

000d6edc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6ee0:	4607      	mov	r7, r0
   d6ee2:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6ee4:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6ee6:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6ee8:	f7ff ffbe 	bl	d6e68 <_ZN8SPIClass4lockEv.isra.0>
   d6eec:	2800      	cmp	r0, #0
   d6eee:	db62      	blt.n	d6fb6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6ef0:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6ef2:	2214      	movs	r2, #20
   d6ef4:	2100      	movs	r1, #0
   d6ef6:	a809      	add	r0, sp, #36	; 0x24
   d6ef8:	f002 f8fa 	bl	d90f0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6efc:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6efe:	4620      	mov	r0, r4
   d6f00:	2200      	movs	r2, #0
   d6f02:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6f04:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6f08:	f7ff fd64 	bl	d69d4 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6f0c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6f10:	b154      	cbz	r4, d6f28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6f12:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6f16:	b935      	cbnz	r5, d6f26 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6f18:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6f1c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6f20:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6f24:	e003      	b.n	d6f2e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6f26:	2400      	movs	r4, #0
   d6f28:	46a1      	mov	r9, r4
   d6f2a:	46a0      	mov	r8, r4
   d6f2c:	2501      	movs	r5, #1
   d6f2e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6f30:	b105      	cbz	r5, d6f34 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d6f32:	b9bb      	cbnz	r3, d6f64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6f34:	429d      	cmp	r5, r3
   d6f36:	d10b      	bne.n	d6f50 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6f38:	68b2      	ldr	r2, [r6, #8]
   d6f3a:	4542      	cmp	r2, r8
   d6f3c:	d108      	bne.n	d6f50 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6f3e:	f88d 9020 	strb.w	r9, [sp, #32]
   d6f42:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6f46:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6f4a:	89b2      	ldrh	r2, [r6, #12]
   d6f4c:	4291      	cmp	r1, r2
   d6f4e:	d009      	beq.n	d6f64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6f50:	b153      	cbz	r3, d6f68 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6f52:	2400      	movs	r4, #0
   d6f54:	7838      	ldrb	r0, [r7, #0]
   d6f56:	9401      	str	r4, [sp, #4]
   d6f58:	9400      	str	r4, [sp, #0]
   d6f5a:	4623      	mov	r3, r4
   d6f5c:	4622      	mov	r2, r4
   d6f5e:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6f60:	f7ff fd50 	bl	d6a04 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6f64:	2000      	movs	r0, #0
   d6f66:	e026      	b.n	d6fb6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6f68:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6f6c:	68b1      	ldr	r1, [r6, #8]
   d6f6e:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6f70:	ab04      	add	r3, sp, #16
   d6f72:	f10d 020f 	add.w	r2, sp, #15
   d6f76:	f7ff ff9b 	bl	d6eb0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6f7a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6f7c:	b105      	cbz	r5, d6f80 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6f7e:	b9b1      	cbnz	r1, d6fae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6f80:	42a9      	cmp	r1, r5
   d6f82:	d008      	beq.n	d6f96 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6f84:	2400      	movs	r4, #0
   d6f86:	7838      	ldrb	r0, [r7, #0]
   d6f88:	9401      	str	r4, [sp, #4]
   d6f8a:	7b74      	ldrb	r4, [r6, #13]
   d6f8c:	7b33      	ldrb	r3, [r6, #12]
   d6f8e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6f92:	9400      	str	r4, [sp, #0]
   d6f94:	e7e4      	b.n	d6f60 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6f96:	68b3      	ldr	r3, [r6, #8]
   d6f98:	4543      	cmp	r3, r8
   d6f9a:	d3f3      	bcc.n	d6f84 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6f9c:	f88d 9020 	strb.w	r9, [sp, #32]
   d6fa0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6fa4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6fa8:	89b3      	ldrh	r3, [r6, #12]
   d6faa:	429a      	cmp	r2, r3
   d6fac:	d1ea      	bne.n	d6f84 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6fae:	9b04      	ldr	r3, [sp, #16]
   d6fb0:	4543      	cmp	r3, r8
   d6fb2:	d1e7      	bne.n	d6f84 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6fb4:	e7d6      	b.n	d6f64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6fb6:	b00f      	add	sp, #60	; 0x3c
   d6fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6fbc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6fbc:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6fbe:	7800      	ldrb	r0, [r0, #0]
   d6fc0:	f7ff fcf0 	bl	d69a4 <HAL_SPI_Send_Receive_Data>
}
   d6fc4:	b2c0      	uxtb	r0, r0
   d6fc6:	bd08      	pop	{r3, pc}

000d6fc8 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6fc8:	b530      	push	{r4, r5, lr}
   d6fca:	b087      	sub	sp, #28
   d6fcc:	4604      	mov	r4, r0
   d6fce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6fd0:	7800      	ldrb	r0, [r0, #0]
   d6fd2:	9500      	str	r5, [sp, #0]
   d6fd4:	f7ff fd06 	bl	d69e4 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d6fd8:	b93d      	cbnz	r5, d6fea <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d6fda:	a902      	add	r1, sp, #8
   d6fdc:	7820      	ldrb	r0, [r4, #0]
   d6fde:	f7ff fd09 	bl	d69f4 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d6fe2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6fe6:	07db      	lsls	r3, r3, #31
   d6fe8:	d4f7      	bmi.n	d6fda <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d6fea:	b007      	add	sp, #28
   d6fec:	bd30      	pop	{r4, r5, pc}

000d6fee <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6fee:	7800      	ldrb	r0, [r0, #0]
   d6ff0:	f7ff bce8 	b.w	d69c4 <HAL_SPI_Is_Enabled>

000d6ff4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6ff4:	b510      	push	{r4, lr}
   d6ff6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6ff8:	6800      	ldr	r0, [r0, #0]
   d6ffa:	b118      	cbz	r0, d7004 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6ffc:	f7ff fece 	bl	d6d9c <free>
            wakeupSource_ = nullptr;
   d7000:	2300      	movs	r3, #0
   d7002:	6023      	str	r3, [r4, #0]
   d7004:	bd10      	pop	{r4, pc}

000d7006 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7006:	b510      	push	{r4, lr}
   d7008:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d700a:	f7ff fff3 	bl	d6ff4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d700e:	4620      	mov	r0, r4
   d7010:	bd10      	pop	{r4, pc}
	...

000d7014 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7014:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7016:	4c09      	ldr	r4, [pc, #36]	; (d703c <_GLOBAL__sub_I_System+0x28>)
   d7018:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d701a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d701e:	6020      	str	r0, [r4, #0]
   d7020:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7022:	71a0      	strb	r0, [r4, #6]
   d7024:	8120      	strh	r0, [r4, #8]
   d7026:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7028:	f7ff fe0c 	bl	d6c44 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d702c:	4620      	mov	r0, r4
   d702e:	4a04      	ldr	r2, [pc, #16]	; (d7040 <_GLOBAL__sub_I_System+0x2c>)
   d7030:	4904      	ldr	r1, [pc, #16]	; (d7044 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7036:	f001 b8dd 	b.w	d81f4 <__aeabi_atexit>
   d703a:	bf00      	nop
   d703c:	2003e3e4 	.word	0x2003e3e4
   d7040:	2003be84 	.word	0x2003be84
   d7044:	000d7007 	.word	0x000d7007

000d7048 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7048:	b510      	push	{r4, lr}
   d704a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d704c:	6800      	ldr	r0, [r0, #0]
   d704e:	b108      	cbz	r0, d7054 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7050:	f7ff fd38 	bl	d6ac4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d7054:	4620      	mov	r0, r4
   d7056:	bd10      	pop	{r4, pc}

000d7058 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7058:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d705a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d705c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d705e:	689b      	ldr	r3, [r3, #8]
   d7060:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7062:	68a3      	ldr	r3, [r4, #8]
   d7064:	3b01      	subs	r3, #1
   d7066:	60a3      	str	r3, [r4, #8]
   d7068:	b92b      	cbnz	r3, d7076 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d706a:	6823      	ldr	r3, [r4, #0]
   d706c:	4620      	mov	r0, r4
   d706e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7074:	4718      	bx	r3
   d7076:	bd10      	pop	{r4, pc}

000d7078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7078:	680b      	ldr	r3, [r1, #0]
   d707a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d707c:	b113      	cbz	r3, d7084 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d707e:	685a      	ldr	r2, [r3, #4]
   d7080:	3201      	adds	r2, #1
   d7082:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d7084:	4770      	bx	lr

000d7086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d7086:	b510      	push	{r4, lr}
   d7088:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d708a:	6800      	ldr	r0, [r0, #0]
   d708c:	b128      	cbz	r0, d709a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d708e:	6843      	ldr	r3, [r0, #4]
   d7090:	3b01      	subs	r3, #1
   d7092:	6043      	str	r3, [r0, #4]
   d7094:	b90b      	cbnz	r3, d709a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7096:	f7ff ffdf 	bl	d7058 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d709a:	4620      	mov	r0, r4
   d709c:	bd10      	pop	{r4, pc}
	...

000d70a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d70a0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d70a2:	4c06      	ldr	r4, [pc, #24]	; (d70bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d70a4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d70a6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d70a8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d70aa:	f7ff fd03 	bl	d6ab4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d70ae:	4620      	mov	r0, r4
   d70b0:	4a03      	ldr	r2, [pc, #12]	; (d70c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d70b2:	4904      	ldr	r1, [pc, #16]	; (d70c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d70b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d70b8:	f001 b89c 	b.w	d81f4 <__aeabi_atexit>
   d70bc:	2003e3f0 	.word	0x2003e3f0
   d70c0:	2003be84 	.word	0x2003be84
   d70c4:	000d7049 	.word	0x000d7049

000d70c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d70c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70ca:	4606      	mov	r6, r0
   d70cc:	460d      	mov	r5, r1
   d70ce:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d70d0:	2400      	movs	r4, #0
  while (size--) {
   d70d2:	42bd      	cmp	r5, r7
   d70d4:	d00c      	beq.n	d70f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d70d6:	6833      	ldr	r3, [r6, #0]
   d70d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d70dc:	689b      	ldr	r3, [r3, #8]
   d70de:	4630      	mov	r0, r6
   d70e0:	4798      	blx	r3
     if (chunk>=0)
   d70e2:	2800      	cmp	r0, #0
   d70e4:	db01      	blt.n	d70ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d70e6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d70e8:	e7f3      	b.n	d70d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d70ea:	2c00      	cmp	r4, #0
   d70ec:	bf08      	it	eq
   d70ee:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d70f0:	4620      	mov	r0, r4
   d70f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70f4 <_ZN5Print5printEPKc>:
   d70f4:	b508      	push	{r3, lr}
   d70f6:	f7fe fe07 	bl	d5d08 <_ZN5Print5writeEPKc>
   d70fa:	bd08      	pop	{r3, pc}

000d70fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d70fc:	6803      	ldr	r3, [r0, #0]
   d70fe:	689b      	ldr	r3, [r3, #8]
   d7100:	4718      	bx	r3

000d7102 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d7102:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7104:	f7fe fe00 	bl	d5d08 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d7108:	bd08      	pop	{r3, pc}

000d710a <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d710a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d710c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d710e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7110:	f7ff fff4 	bl	d70fc <_ZN5Print5printEc>
  n += print('\n');
   d7114:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7116:	4604      	mov	r4, r0
  n += print('\n');
   d7118:	4628      	mov	r0, r5
   d711a:	f7ff ffef 	bl	d70fc <_ZN5Print5printEc>
  return n;
}
   d711e:	4420      	add	r0, r4
   d7120:	bd38      	pop	{r3, r4, r5, pc}

000d7122 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7122:	b538      	push	{r3, r4, r5, lr}
   d7124:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7126:	f7fe fdef 	bl	d5d08 <_ZN5Print5writeEPKc>
   d712a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d712c:	4628      	mov	r0, r5
   d712e:	f7ff ffec 	bl	d710a <_ZN5Print7printlnEv>
  return n;
}
   d7132:	4420      	add	r0, r4
   d7134:	bd38      	pop	{r3, r4, r5, pc}

000d7136 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d7136:	f7ff bff4 	b.w	d7122 <_ZN5Print7printlnEPKc>

000d713a <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d713a:	b530      	push	{r4, r5, lr}
   d713c:	b08b      	sub	sp, #44	; 0x2c
   d713e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7140:	2100      	movs	r1, #0
   d7142:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7146:	2a01      	cmp	r2, #1
   d7148:	bf98      	it	ls
   d714a:	220a      	movls	r2, #10
   d714c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7150:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7154:	fb05 3312 	mls	r3, r5, r2, r3
   d7158:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d715c:	2b09      	cmp	r3, #9
   d715e:	bf94      	ite	ls
   d7160:	3330      	addls	r3, #48	; 0x30
   d7162:	3337      	addhi	r3, #55	; 0x37
   d7164:	b2db      	uxtb	r3, r3
   d7166:	4621      	mov	r1, r4
   d7168:	f804 3901 	strb.w	r3, [r4], #-1
   d716c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d716e:	2d00      	cmp	r5, #0
   d7170:	d1ee      	bne.n	d7150 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7172:	f7fe fdc9 	bl	d5d08 <_ZN5Print5writeEPKc>
}
   d7176:	b00b      	add	sp, #44	; 0x2c
   d7178:	bd30      	pop	{r4, r5, pc}

000d717a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d717a:	b40c      	push	{r2, r3}
   d717c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7180:	b087      	sub	sp, #28
   d7182:	af00      	add	r7, sp, #0
   d7184:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7188:	4605      	mov	r5, r0
   d718a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d718e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7190:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7192:	4623      	mov	r3, r4
   d7194:	464a      	mov	r2, r9
   d7196:	2114      	movs	r1, #20
   d7198:	1d38      	adds	r0, r7, #4
   d719a:	f7ff fe07 	bl	d6dac <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d719e:	2813      	cmp	r0, #19
   d71a0:	d805      	bhi.n	d71ae <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d71a2:	1d39      	adds	r1, r7, #4
   d71a4:	4628      	mov	r0, r5
   d71a6:	f7fe fdaf 	bl	d5d08 <_ZN5Print5writeEPKc>
   d71aa:	4604      	mov	r4, r0
   d71ac:	e013      	b.n	d71d6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d71ae:	f100 0308 	add.w	r3, r0, #8
   d71b2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d71b6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d71b8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d71bc:	1c41      	adds	r1, r0, #1
   d71be:	4623      	mov	r3, r4
   d71c0:	464a      	mov	r2, r9
   d71c2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d71c4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d71c6:	f7ff fdf1 	bl	d6dac <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d71ca:	4669      	mov	r1, sp
   d71cc:	4628      	mov	r0, r5
   d71ce:	f7fe fd9b 	bl	d5d08 <_ZN5Print5writeEPKc>
   d71d2:	4604      	mov	r4, r0
   d71d4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d71d6:	b11e      	cbz	r6, d71e0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d71d8:	4628      	mov	r0, r5
   d71da:	f7ff ff96 	bl	d710a <_ZN5Print7printlnEv>
   d71de:	4404      	add	r4, r0
    return n;
}
   d71e0:	4620      	mov	r0, r4
   d71e2:	371c      	adds	r7, #28
   d71e4:	46bd      	mov	sp, r7
   d71e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d71ea:	b002      	add	sp, #8
   d71ec:	4770      	bx	lr
	...

000d71f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d71f0:	4b01      	ldr	r3, [pc, #4]	; (d71f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d71f2:	4a02      	ldr	r2, [pc, #8]	; (d71fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d71f4:	601a      	str	r2, [r3, #0]
   d71f6:	4770      	bx	lr
   d71f8:	2003e3f4 	.word	0x2003e3f4
   d71fc:	000d956b 	.word	0x000d956b

000d7200 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7200:	4b02      	ldr	r3, [pc, #8]	; (d720c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7202:	681a      	ldr	r2, [r3, #0]
   d7204:	4b02      	ldr	r3, [pc, #8]	; (d7210 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7206:	601a      	str	r2, [r3, #0]
   d7208:	4770      	bx	lr
   d720a:	bf00      	nop
   d720c:	2003be18 	.word	0x2003be18
   d7210:	2003e3f8 	.word	0x2003e3f8

000d7214 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d7214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7218:	ed2d 8b02 	vpush	{d8}
   d721c:	eeb0 8a44 	vmov.f32	s16, s8
   d7220:	eef0 8a64 	vmov.f32	s17, s9
   d7224:	ec55 4b11 	vmov	r4, r5, d1
   d7228:	ec57 6b12 	vmov	r6, r7, d2
   d722c:	b083      	sub	sp, #12
    if (fromEnd == fromStart) {
   d722e:	ee11 2a10 	vmov	r2, s2
   d7232:	462b      	mov	r3, r5
   d7234:	ee12 0a10 	vmov	r0, s4
   d7238:	4639      	mov	r1, r7
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d723a:	ed8d 0b00 	vstr	d0, [sp]
   d723e:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   d7242:	f001 fe95 	bl	d8f70 <__aeabi_dcmpeq>
   d7246:	ed9d 0b00 	vldr	d0, [sp]
   d724a:	bb38      	cbnz	r0, d729c <_Z3mapddddd+0x88>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d724c:	ec51 0b10 	vmov	r0, r1, d0
   d7250:	4622      	mov	r2, r4
   d7252:	462b      	mov	r3, r5
   d7254:	f001 fa70 	bl	d8738 <__aeabi_dsub>
   d7258:	4652      	mov	r2, sl
   d725a:	4680      	mov	r8, r0
   d725c:	4689      	mov	r9, r1
   d725e:	465b      	mov	r3, fp
   d7260:	ec51 0b18 	vmov	r0, r1, d8
   d7264:	f001 fa68 	bl	d8738 <__aeabi_dsub>
   d7268:	4602      	mov	r2, r0
   d726a:	460b      	mov	r3, r1
   d726c:	4640      	mov	r0, r8
   d726e:	4649      	mov	r1, r9
   d7270:	f001 fc16 	bl	d8aa0 <__aeabi_dmul>
   d7274:	4622      	mov	r2, r4
   d7276:	4680      	mov	r8, r0
   d7278:	4689      	mov	r9, r1
   d727a:	462b      	mov	r3, r5
   d727c:	4630      	mov	r0, r6
   d727e:	4639      	mov	r1, r7
   d7280:	f001 fa5a 	bl	d8738 <__aeabi_dsub>
   d7284:	4602      	mov	r2, r0
   d7286:	460b      	mov	r3, r1
   d7288:	4640      	mov	r0, r8
   d728a:	4649      	mov	r1, r9
   d728c:	f001 fd32 	bl	d8cf4 <__aeabi_ddiv>
   d7290:	4652      	mov	r2, sl
   d7292:	465b      	mov	r3, fp
   d7294:	f001 fa52 	bl	d873c <__adddf3>
   d7298:	ec41 0b10 	vmov	d0, r0, r1
}
   d729c:	b003      	add	sp, #12
   d729e:	ecbd 8b02 	vpop	{d8}
   d72a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d72a6 <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d72a6:	2100      	movs	r1, #0
   d72a8:	f7ff bcd4 	b.w	d6c54 <system_delay_ms>

000d72ac <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d72ac:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d72ae:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d72b0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d72b2:	b113      	cbz	r3, d72ba <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d72b4:	2203      	movs	r2, #3
   d72b6:	4601      	mov	r1, r0
   d72b8:	4798      	blx	r3
    }
   d72ba:	4620      	mov	r0, r4
   d72bc:	bd10      	pop	{r4, pc}

000d72be <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d72be:	b510      	push	{r4, lr}
   d72c0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d72c2:	f7ff fff3 	bl	d72ac <_ZNSt14_Function_baseD1Ev>
   d72c6:	4620      	mov	r0, r4
   d72c8:	bd10      	pop	{r4, pc}

000d72ca <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d72ca:	b513      	push	{r0, r1, r4, lr}
   d72cc:	460b      	mov	r3, r1
   d72ce:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d72d0:	c803      	ldmia	r0, {r0, r1}
   d72d2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d72d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d72da:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d72de:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d72e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d72e6:	b002      	add	sp, #8
   d72e8:	bd10      	pop	{r4, pc}
	...

000d72ec <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d72ec:	4803      	ldr	r0, [pc, #12]	; (d72fc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d72ee:	4a04      	ldr	r2, [pc, #16]	; (d7300 <_GLOBAL__sub_I_RGB+0x14>)
   d72f0:	4904      	ldr	r1, [pc, #16]	; (d7304 <_GLOBAL__sub_I_RGB+0x18>)
   d72f2:	2300      	movs	r3, #0
   d72f4:	6083      	str	r3, [r0, #8]
   d72f6:	f000 bf7d 	b.w	d81f4 <__aeabi_atexit>
   d72fa:	bf00      	nop
   d72fc:	2003e3fc 	.word	0x2003e3fc
   d7300:	2003be84 	.word	0x2003be84
   d7304:	000d72bf 	.word	0x000d72bf

000d7308 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7308:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d730a:	4b0c      	ldr	r3, [pc, #48]	; (d733c <serialEventRun+0x34>)
   d730c:	b133      	cbz	r3, d731c <serialEventRun+0x14>
   d730e:	f000 fc1b 	bl	d7b48 <_Z16_fetch_usbserialv>
   d7312:	6803      	ldr	r3, [r0, #0]
   d7314:	691b      	ldr	r3, [r3, #16]
   d7316:	4798      	blx	r3
   d7318:	2800      	cmp	r0, #0
   d731a:	dc09      	bgt.n	d7330 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d731c:	4b08      	ldr	r3, [pc, #32]	; (d7340 <serialEventRun+0x38>)
   d731e:	b163      	cbz	r3, d733a <serialEventRun+0x32>
   d7320:	f000 fc94 	bl	d7c4c <_Z22__fetch_global_Serial1v>
   d7324:	6803      	ldr	r3, [r0, #0]
   d7326:	691b      	ldr	r3, [r3, #16]
   d7328:	4798      	blx	r3
   d732a:	2800      	cmp	r0, #0
   d732c:	dc03      	bgt.n	d7336 <serialEventRun+0x2e>
   d732e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7330:	f3af 8000 	nop.w
   d7334:	e7f2      	b.n	d731c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7336:	f3af 8000 	nop.w
   d733a:	bd08      	pop	{r3, pc}
	...

000d7344 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7344:	b508      	push	{r3, lr}
	serialEventRun();
   d7346:	f7ff ffdf 	bl	d7308 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d734a:	f7ff fb8b 	bl	d6a64 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d734e:	4b01      	ldr	r3, [pc, #4]	; (d7354 <_post_loop+0x10>)
   d7350:	6018      	str	r0, [r3, #0]
   d7352:	bd08      	pop	{r3, pc}
   d7354:	2003e730 	.word	0x2003e730

000d7358 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7358:	4802      	ldr	r0, [pc, #8]	; (d7364 <_Z33system_initialize_user_backup_ramv+0xc>)
   d735a:	4a03      	ldr	r2, [pc, #12]	; (d7368 <_Z33system_initialize_user_backup_ramv+0x10>)
   d735c:	4903      	ldr	r1, [pc, #12]	; (d736c <_Z33system_initialize_user_backup_ramv+0x14>)
   d735e:	1a12      	subs	r2, r2, r0
   d7360:	f001 bebb 	b.w	d90da <memcpy>
   d7364:	2003f400 	.word	0x2003f400
   d7368:	2003f404 	.word	0x2003f404
   d736c:	000d9850 	.word	0x000d9850

000d7370 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7370:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7372:	2300      	movs	r3, #0
   d7374:	9300      	str	r3, [sp, #0]
   d7376:	461a      	mov	r2, r3
   d7378:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d737c:	f7ff fc8c 	bl	d6c98 <system_ctrl_set_result>
}
   d7380:	b003      	add	sp, #12
   d7382:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7388 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7388:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d738a:	8843      	ldrh	r3, [r0, #2]
   d738c:	2b0a      	cmp	r3, #10
   d738e:	d008      	beq.n	d73a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7390:	2b50      	cmp	r3, #80	; 0x50
   d7392:	d109      	bne.n	d73a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7394:	4b09      	ldr	r3, [pc, #36]	; (d73bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7396:	681b      	ldr	r3, [r3, #0]
   d7398:	b13b      	cbz	r3, d73aa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d739a:	b003      	add	sp, #12
   d739c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d73a0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d73a2:	f7ff ffe5 	bl	d7370 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d73a6:	e006      	b.n	d73b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d73a8:	2300      	movs	r3, #0
   d73aa:	9300      	str	r3, [sp, #0]
   d73ac:	461a      	mov	r2, r3
   d73ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d73b2:	f7ff fc71 	bl	d6c98 <system_ctrl_set_result>
        break;
    }
}
   d73b6:	b003      	add	sp, #12
   d73b8:	f85d fb04 	ldr.w	pc, [sp], #4
   d73bc:	2003e40c 	.word	0x2003e40c

000d73c0 <module_user_init_hook>:

void module_user_init_hook()
{
   d73c0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d73c2:	4c10      	ldr	r4, [pc, #64]	; (d7404 <module_user_init_hook+0x44>)
   d73c4:	4d10      	ldr	r5, [pc, #64]	; (d7408 <module_user_init_hook+0x48>)
   d73c6:	6823      	ldr	r3, [r4, #0]
   d73c8:	42ab      	cmp	r3, r5
   d73ca:	4b10      	ldr	r3, [pc, #64]	; (d740c <module_user_init_hook+0x4c>)
   d73cc:	bf0c      	ite	eq
   d73ce:	2201      	moveq	r2, #1
   d73d0:	2200      	movne	r2, #0
   d73d2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d73d4:	d002      	beq.n	d73dc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d73d6:	f7ff ffbf 	bl	d7358 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d73da:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d73dc:	f7ff fb2a 	bl	d6a34 <HAL_RNG_GetRandomNumber>
   d73e0:	4604      	mov	r4, r0
    srand(seed);
   d73e2:	f001 fe8d 	bl	d9100 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d73e6:	4b0a      	ldr	r3, [pc, #40]	; (d7410 <module_user_init_hook+0x50>)
   d73e8:	b113      	cbz	r3, d73f0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d73ea:	4620      	mov	r0, r4
   d73ec:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d73f0:	2100      	movs	r1, #0
   d73f2:	4807      	ldr	r0, [pc, #28]	; (d7410 <module_user_init_hook+0x50>)
   d73f4:	f7ff fcc2 	bl	d6d7c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d73f8:	2100      	movs	r1, #0
   d73fa:	4806      	ldr	r0, [pc, #24]	; (d7414 <module_user_init_hook+0x54>)
}
   d73fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7400:	f7ff bc40 	b.w	d6c84 <system_ctrl_set_app_request_handler>
   d7404:	2003f400 	.word	0x2003f400
   d7408:	9a271c1e 	.word	0x9a271c1e
   d740c:	2003e410 	.word	0x2003e410
   d7410:	00000000 	.word	0x00000000
   d7414:	000d7389 	.word	0x000d7389

000d7418 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7418:	4770      	bx	lr

000d741a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d741a:	2000      	movs	r0, #0
   d741c:	4770      	bx	lr

000d741e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d741e:	b510      	push	{r4, lr}
   d7420:	2110      	movs	r1, #16
   d7422:	4604      	mov	r4, r0
   d7424:	f000 fef4 	bl	d8210 <_ZdlPvj>
   d7428:	4620      	mov	r0, r4
   d742a:	bd10      	pop	{r4, pc}

000d742c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d742c:	b508      	push	{r3, lr}
      { delete this; }
   d742e:	b108      	cbz	r0, d7434 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7430:	f7ff fff5 	bl	d741e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7434:	bd08      	pop	{r3, pc}

000d7436 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7436:	2200      	movs	r2, #0
   d7438:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d743a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d743c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d7440:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7442:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7446:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7448:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d744a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d744c:	680c      	ldr	r4, [r1, #0]
   d744e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7450:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d7452:	bd10      	pop	{r4, pc}

000d7454 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7454:	b510      	push	{r4, lr}
   d7456:	4604      	mov	r4, r0
    free((void*)msg_);
   d7458:	6800      	ldr	r0, [r0, #0]
   d745a:	f7ff fc9f 	bl	d6d9c <free>
}
   d745e:	4620      	mov	r0, r4
   d7460:	bd10      	pop	{r4, pc}

000d7462 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d7462:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7464:	68c4      	ldr	r4, [r0, #12]
   d7466:	b1f4      	cbz	r4, d74a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7468:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d746a:	2b02      	cmp	r3, #2
   d746c:	d103      	bne.n	d7476 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d746e:	f104 000c 	add.w	r0, r4, #12
   d7472:	f7ff ffef 	bl	d7454 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7476:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7478:	b135      	cbz	r5, d7488 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d747a:	4628      	mov	r0, r5
   d747c:	f7ff ff16 	bl	d72ac <_ZNSt14_Function_baseD1Ev>
   d7480:	2110      	movs	r1, #16
   d7482:	4628      	mov	r0, r5
   d7484:	f000 fec4 	bl	d8210 <_ZdlPvj>
   d7488:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d748a:	b135      	cbz	r5, d749a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d748c:	4628      	mov	r0, r5
   d748e:	f7ff ff0d 	bl	d72ac <_ZNSt14_Function_baseD1Ev>
   d7492:	2110      	movs	r1, #16
   d7494:	4628      	mov	r0, r5
   d7496:	f000 febb 	bl	d8210 <_ZdlPvj>
   d749a:	4620      	mov	r0, r4
   d749c:	2114      	movs	r1, #20
   d749e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d74a2:	f000 beb5 	b.w	d8210 <_ZdlPvj>
   d74a6:	bd38      	pop	{r3, r4, r5, pc}

000d74a8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d74a8:	b513      	push	{r0, r1, r4, lr}
   d74aa:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d74ac:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d74b0:	2300      	movs	r3, #0
   d74b2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d74b4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d74b6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d74b8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d74ba:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d74bc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d74be:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d74c0:	f7ff fde1 	bl	d7086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74c4:	4620      	mov	r0, r4
   d74c6:	b002      	add	sp, #8
   d74c8:	bd10      	pop	{r4, pc}

000d74ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d74ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d74cc:	460c      	mov	r4, r1
   d74ce:	ad02      	add	r5, sp, #8
   d74d0:	f854 3b04 	ldr.w	r3, [r4], #4
   d74d4:	f845 3d08 	str.w	r3, [r5, #-8]!
   d74d8:	4606      	mov	r6, r0
   d74da:	460f      	mov	r7, r1
   d74dc:	a801      	add	r0, sp, #4
   d74de:	4621      	mov	r1, r4
   d74e0:	f7ff fdca 	bl	d7078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d74e4:	4629      	mov	r1, r5
   d74e6:	4630      	mov	r0, r6
   d74e8:	f7ff ffde 	bl	d74a8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d74ec:	a801      	add	r0, sp, #4
   d74ee:	f7ff fdca 	bl	d7086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74f2:	4620      	mov	r0, r4
   d74f4:	f7ff fdc7 	bl	d7086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d74f8:	4638      	mov	r0, r7
   d74fa:	2108      	movs	r1, #8
   d74fc:	f000 fe88 	bl	d8210 <_ZdlPvj>
        return p;
    }
   d7500:	4630      	mov	r0, r6
   d7502:	b003      	add	sp, #12
   d7504:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7508:	b538      	push	{r3, r4, r5, lr}
   d750a:	2300      	movs	r3, #0
   d750c:	4604      	mov	r4, r0
   d750e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7510:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7512:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7514:	f7fc fdc1 	bl	d409a <_Znwj>
   d7518:	b128      	cbz	r0, d7526 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d751a:	2301      	movs	r3, #1
   d751c:	6043      	str	r3, [r0, #4]
   d751e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7520:	4b02      	ldr	r3, [pc, #8]	; (d752c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7522:	6003      	str	r3, [r0, #0]
   d7524:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7526:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7528:	4620      	mov	r0, r4
   d752a:	bd38      	pop	{r3, r4, r5, pc}
   d752c:	000d9608 	.word	0x000d9608

000d7530 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7530:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7532:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7534:	b90a      	cbnz	r2, d753a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7536:	f000 fe7e 	bl	d8236 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d753a:	68c3      	ldr	r3, [r0, #12]
    }
   d753c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7540:	4718      	bx	r3

000d7542 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7542:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7544:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7546:	f100 0110 	add.w	r1, r0, #16
   d754a:	f7ff fff1 	bl	d7530 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d754e:	bd08      	pop	{r3, pc}

000d7550 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7550:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7552:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7554:	b90a      	cbnz	r2, d755a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7556:	f000 fe6e 	bl	d8236 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d755a:	68c3      	ldr	r3, [r0, #12]
    }
   d755c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7560:	4718      	bx	r3

000d7562 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7562:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7564:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7566:	f100 0110 	add.w	r1, r0, #16
   d756a:	f7ff fff1 	bl	d7550 <_ZNKSt8functionIFvRKbEEclES1_>
   d756e:	bd08      	pop	{r3, pc}

000d7570 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7570:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7572:	2300      	movs	r3, #0
   d7574:	6083      	str	r3, [r0, #8]
   d7576:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7578:	4604      	mov	r4, r0
   d757a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d757c:	b12b      	cbz	r3, d758a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d757e:	2202      	movs	r2, #2
   d7580:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7582:	68eb      	ldr	r3, [r5, #12]
   d7584:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7586:	68ab      	ldr	r3, [r5, #8]
   d7588:	60a3      	str	r3, [r4, #8]
	}
    }
   d758a:	4620      	mov	r0, r4
   d758c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7590 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7590:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7592:	b089      	sub	sp, #36	; 0x24
   d7594:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7596:	4668      	mov	r0, sp
   d7598:	f7ff ff4d 	bl	d7436 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d759c:	2300      	movs	r3, #0
   d759e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d75a2:	f04f 0202 	mov.w	r2, #2
   d75a6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d75aa:	2b00      	cmp	r3, #0
   d75ac:	d103      	bne.n	d75b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d75ae:	e8c4 2f41 	strexb	r1, r2, [r4]
   d75b2:	2900      	cmp	r1, #0
   d75b4:	d1f7      	bne.n	d75a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d75b6:	d002      	beq.n	d75be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d75b8:	f88d 3008 	strb.w	r3, [sp, #8]
   d75bc:	e063      	b.n	d7686 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d75be:	f114 050c 	adds.w	r5, r4, #12
   d75c2:	d003      	beq.n	d75cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d75c4:	4669      	mov	r1, sp
   d75c6:	4628      	mov	r0, r5
   d75c8:	f7ff ff35 	bl	d7436 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d75cc:	f3bf 8f5f 	dmb	sy
   d75d0:	2301      	movs	r3, #1
   d75d2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d75d4:	2000      	movs	r0, #0
   d75d6:	f104 0308 	add.w	r3, r4, #8
   d75da:	f3bf 8f5f 	dmb	sy
   d75de:	e853 6f00 	ldrex	r6, [r3]
   d75e2:	e843 0200 	strex	r2, r0, [r3]
   d75e6:	2a00      	cmp	r2, #0
   d75e8:	d1f9      	bne.n	d75de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d75ea:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d75ee:	2e00      	cmp	r6, #0
   d75f0:	d049      	beq.n	d7686 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d75f2:	f7ff fb37 	bl	d6c64 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d75f6:	b120      	cbz	r0, d7602 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d75f8:	4629      	mov	r1, r5
   d75fa:	4630      	mov	r0, r6
   d75fc:	f7ff ff98 	bl	d7530 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7600:	e03a      	b.n	d7678 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7602:	4631      	mov	r1, r6
   d7604:	a802      	add	r0, sp, #8
   d7606:	f7ff ffb3 	bl	d7570 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d760a:	68e0      	ldr	r0, [r4, #12]
   d760c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7610:	b108      	cbz	r0, d7616 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d7612:	f001 fd9d 	bl	d9150 <strdup>
   d7616:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7618:	2010      	movs	r0, #16
   d761a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d761e:	f7fc fd3c 	bl	d409a <_Znwj>
   d7622:	4605      	mov	r5, r0
   d7624:	b1e8      	cbz	r0, d7662 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7626:	2700      	movs	r7, #0
   d7628:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d762a:	2018      	movs	r0, #24
   d762c:	f7fc fd35 	bl	d409a <_Znwj>
   d7630:	4604      	mov	r4, r0
   d7632:	b188      	cbz	r0, d7658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7634:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7636:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7638:	a802      	add	r0, sp, #8
   d763a:	f7ff fe46 	bl	d72ca <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d763e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7640:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7642:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7644:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7646:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7648:	a906      	add	r1, sp, #24
   d764a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d764c:	60e3      	str	r3, [r4, #12]
   d764e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7652:	9205      	str	r2, [sp, #20]
   d7654:	f7ff feef 	bl	d7436 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7658:	4b0d      	ldr	r3, [pc, #52]	; (d7690 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d765a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d765c:	4b0d      	ldr	r3, [pc, #52]	; (d7694 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d765e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7660:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d7662:	a806      	add	r0, sp, #24
   d7664:	f7ff fef6 	bl	d7454 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7668:	a802      	add	r0, sp, #8
   d766a:	f7ff fe1f 	bl	d72ac <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d766e:	2200      	movs	r2, #0
   d7670:	4629      	mov	r1, r5
   d7672:	4809      	ldr	r0, [pc, #36]	; (d7698 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d7674:	f7ff fafe 	bl	d6c74 <application_thread_invoke>
   d7678:	4630      	mov	r0, r6
   d767a:	f7ff fe17 	bl	d72ac <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d767e:	2110      	movs	r1, #16
   d7680:	4630      	mov	r0, r6
   d7682:	f000 fdc5 	bl	d8210 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d7686:	4668      	mov	r0, sp
   d7688:	f7ff fee4 	bl	d7454 <_ZN8particle5ErrorD1Ev>
    }
   d768c:	b009      	add	sp, #36	; 0x24
   d768e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7690:	000d7543 	.word	0x000d7543
   d7694:	000d77b9 	.word	0x000d77b9
   d7698:	000d7c99 	.word	0x000d7c99

000d769c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d769c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76a0:	b08b      	sub	sp, #44	; 0x2c
   d76a2:	4606      	mov	r6, r0
   d76a4:	460f      	mov	r7, r1
   d76a6:	4690      	mov	r8, r2
   d76a8:	4699      	mov	r9, r3
   d76aa:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d76ae:	f7ff fb55 	bl	d6d5c <spark_cloud_flag_connected>
   d76b2:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d76b4:	4683      	mov	fp, r0
   d76b6:	bb30      	cbnz	r0, d7706 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d76b8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d76bc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d76be:	a905      	add	r1, sp, #20
   d76c0:	4628      	mov	r0, r5
   d76c2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d76c6:	f7ff feb6 	bl	d7436 <_ZN8particle5ErrorC1EOS0_>
   d76ca:	2014      	movs	r0, #20
   d76cc:	f7fc fce5 	bl	d409a <_Znwj>
   d76d0:	4604      	mov	r4, r0
   d76d2:	b158      	cbz	r0, d76ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d76d4:	2302      	movs	r3, #2
   d76d6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d76d8:	2301      	movs	r3, #1
   d76da:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d76dc:	f8c0 b004 	str.w	fp, [r0, #4]
   d76e0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d76e4:	4629      	mov	r1, r5
   d76e6:	300c      	adds	r0, #12
   d76e8:	f7ff fea5 	bl	d7436 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d76ec:	4630      	mov	r0, r6
   d76ee:	4621      	mov	r1, r4
   d76f0:	f840 4b04 	str.w	r4, [r0], #4
   d76f4:	f7ff ff08 	bl	d7508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d76f8:	4628      	mov	r0, r5
   d76fa:	f7ff feab 	bl	d7454 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d76fe:	a805      	add	r0, sp, #20
   d7700:	f7ff fea8 	bl	d7454 <_ZN8particle5ErrorD1Ev>
   d7704:	e052      	b.n	d77ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7706:	2400      	movs	r4, #0
   d7708:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d770a:	2014      	movs	r0, #20
   d770c:	606c      	str	r4, [r5, #4]
   d770e:	60ac      	str	r4, [r5, #8]
   d7710:	9307      	str	r3, [sp, #28]
   d7712:	f7fc fcc2 	bl	d409a <_Znwj>
   d7716:	4601      	mov	r1, r0
   d7718:	b118      	cbz	r0, d7722 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d771a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d771c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d771e:	6044      	str	r4, [r0, #4]
   d7720:	6084      	str	r4, [r0, #8]
   d7722:	a804      	add	r0, sp, #16
   d7724:	9103      	str	r1, [sp, #12]
   d7726:	f7ff feef 	bl	d7508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d772a:	4b22      	ldr	r3, [pc, #136]	; (d77b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d772c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d772e:	2008      	movs	r0, #8
   d7730:	f7fc fcb3 	bl	d409a <_Znwj>
   d7734:	4604      	mov	r4, r0
   d7736:	b128      	cbz	r0, d7744 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7738:	9b03      	ldr	r3, [sp, #12]
   d773a:	f840 3b04 	str.w	r3, [r0], #4
   d773e:	a904      	add	r1, sp, #16
   d7740:	f7ff fc9a 	bl	d7078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7744:	9500      	str	r5, [sp, #0]
   d7746:	fa5f f38a 	uxtb.w	r3, sl
   d774a:	464a      	mov	r2, r9
   d774c:	4641      	mov	r1, r8
   d774e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7750:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7752:	f7ff fb0b 	bl	d6d6c <spark_send_event>
   d7756:	b920      	cbnz	r0, d7762 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7758:	9b03      	ldr	r3, [sp, #12]
   d775a:	785b      	ldrb	r3, [r3, #1]
   d775c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7760:	b183      	cbz	r3, d7784 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d7762:	9b03      	ldr	r3, [sp, #12]
   d7764:	9305      	str	r3, [sp, #20]
   d7766:	a904      	add	r1, sp, #16
   d7768:	a806      	add	r0, sp, #24
   d776a:	f7ff fc85 	bl	d7078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d776e:	a905      	add	r1, sp, #20
   d7770:	4630      	mov	r0, r6
   d7772:	f7ff fe99 	bl	d74a8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7776:	a806      	add	r0, sp, #24
   d7778:	f7ff fc85 	bl	d7086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d777c:	a804      	add	r0, sp, #16
   d777e:	f7ff fc82 	bl	d7086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7782:	e013      	b.n	d77ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d7784:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7788:	a905      	add	r1, sp, #20
   d778a:	a803      	add	r0, sp, #12
   d778c:	9205      	str	r2, [sp, #20]
   d778e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7792:	f7ff fefd 	bl	d7590 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7796:	a805      	add	r0, sp, #20
   d7798:	f7ff fe5c 	bl	d7454 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d779c:	a805      	add	r0, sp, #20
   d779e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d77a0:	f7ff fe93 	bl	d74ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d77a4:	a806      	add	r0, sp, #24
   d77a6:	f7ff fc6e 	bl	d7086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77aa:	e7da      	b.n	d7762 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d77ac:	4630      	mov	r0, r6
   d77ae:	b00b      	add	sp, #44	; 0x2c
   d77b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d77b4:	000d7929 	.word	0x000d7929

000d77b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d77b8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d77ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77bc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d77be:	d006      	beq.n	d77ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d77c0:	2a03      	cmp	r2, #3
   d77c2:	d017      	beq.n	d77f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d77c4:	2a01      	cmp	r2, #1
   d77c6:	d122      	bne.n	d780e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d77c8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d77ca:	6003      	str	r3, [r0, #0]
	      break;
   d77cc:	e01f      	b.n	d780e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d77ce:	2018      	movs	r0, #24
   d77d0:	680e      	ldr	r6, [r1, #0]
   d77d2:	f7fc fc62 	bl	d409a <_Znwj>
   d77d6:	4605      	mov	r5, r0
   d77d8:	b150      	cbz	r0, d77f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d77da:	4631      	mov	r1, r6
   d77dc:	f7ff fec8 	bl	d7570 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d77e0:	6930      	ldr	r0, [r6, #16]
   d77e2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d77e6:	b108      	cbz	r0, d77ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d77e8:	f001 fcb2 	bl	d9150 <strdup>
   d77ec:	6128      	str	r0, [r5, #16]
   d77ee:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d77f0:	6025      	str	r5, [r4, #0]
   d77f2:	e00c      	b.n	d780e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d77f4:	6804      	ldr	r4, [r0, #0]
   d77f6:	b154      	cbz	r4, d780e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d77f8:	f104 0010 	add.w	r0, r4, #16
   d77fc:	f7ff fe2a 	bl	d7454 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7800:	4620      	mov	r0, r4
   d7802:	f7ff fd53 	bl	d72ac <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7806:	2118      	movs	r1, #24
   d7808:	4620      	mov	r0, r4
   d780a:	f000 fd01 	bl	d8210 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d780e:	2000      	movs	r0, #0
   d7810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7812 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7812:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7814:	2300      	movs	r3, #0
   d7816:	6083      	str	r3, [r0, #8]
   d7818:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d781a:	4604      	mov	r4, r0
   d781c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d781e:	b12b      	cbz	r3, d782c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7820:	2202      	movs	r2, #2
   d7822:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7824:	68eb      	ldr	r3, [r5, #12]
   d7826:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7828:	68ab      	ldr	r3, [r5, #8]
   d782a:	60a3      	str	r3, [r4, #8]
	}
    }
   d782c:	4620      	mov	r0, r4
   d782e:	bd38      	pop	{r3, r4, r5, pc}

000d7830 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7830:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7832:	b570      	push	{r4, r5, r6, lr}
   d7834:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7836:	d006      	beq.n	d7846 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7838:	2a03      	cmp	r2, #3
   d783a:	d011      	beq.n	d7860 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d783c:	2a01      	cmp	r2, #1
   d783e:	d118      	bne.n	d7872 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7840:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7842:	6003      	str	r3, [r0, #0]
	      break;
   d7844:	e015      	b.n	d7872 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7846:	2014      	movs	r0, #20
   d7848:	680e      	ldr	r6, [r1, #0]
   d784a:	f7fc fc26 	bl	d409a <_Znwj>
   d784e:	4605      	mov	r5, r0
   d7850:	b120      	cbz	r0, d785c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7852:	4631      	mov	r1, r6
   d7854:	f7ff ffdd 	bl	d7812 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7858:	7c33      	ldrb	r3, [r6, #16]
   d785a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d785c:	6025      	str	r5, [r4, #0]
   d785e:	e008      	b.n	d7872 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7860:	6804      	ldr	r4, [r0, #0]
   d7862:	b134      	cbz	r4, d7872 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7864:	4620      	mov	r0, r4
   d7866:	f7ff fd21 	bl	d72ac <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d786a:	2114      	movs	r1, #20
   d786c:	4620      	mov	r0, r4
   d786e:	f000 fccf 	bl	d8210 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7872:	2000      	movs	r0, #0
   d7874:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7878 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7878:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d787a:	2300      	movs	r3, #0
   d787c:	b087      	sub	sp, #28
   d787e:	460c      	mov	r4, r1
   d7880:	f3bf 8f5f 	dmb	sy
   d7884:	e850 6f00 	ldrex	r6, [r0]
   d7888:	e840 3200 	strex	r2, r3, [r0]
   d788c:	2a00      	cmp	r2, #0
   d788e:	d1f9      	bne.n	d7884 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7890:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7894:	2e00      	cmp	r6, #0
   d7896:	d03f      	beq.n	d7918 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7898:	4618      	mov	r0, r3
   d789a:	f7ff f9e3 	bl	d6c64 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d789e:	4607      	mov	r7, r0
   d78a0:	b120      	cbz	r0, d78ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d78a2:	4621      	mov	r1, r4
   d78a4:	4630      	mov	r0, r6
   d78a6:	f7ff fe53 	bl	d7550 <_ZNKSt8functionIFvRKbEEclES1_>
   d78aa:	e02e      	b.n	d790a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d78ac:	4631      	mov	r1, r6
   d78ae:	a801      	add	r0, sp, #4
   d78b0:	f7ff ffaf 	bl	d7812 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d78b4:	7823      	ldrb	r3, [r4, #0]
   d78b6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d78ba:	2010      	movs	r0, #16
   d78bc:	f7fc fbed 	bl	d409a <_Znwj>
   d78c0:	4605      	mov	r5, r0
   d78c2:	b1d0      	cbz	r0, d78fa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d78c4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d78c6:	2014      	movs	r0, #20
   d78c8:	f7fc fbe7 	bl	d409a <_Znwj>
   d78cc:	4604      	mov	r4, r0
   d78ce:	b178      	cbz	r0, d78f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d78d0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d78d2:	4601      	mov	r1, r0
   d78d4:	a801      	add	r0, sp, #4
   d78d6:	f7ff fcf8 	bl	d72ca <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78da:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d78dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78de:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d78e2:	9203      	str	r2, [sp, #12]
   d78e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d78e6:	60e3      	str	r3, [r4, #12]
   d78e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d78ec:	9204      	str	r2, [sp, #16]
   d78ee:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d78f0:	4b0a      	ldr	r3, [pc, #40]	; (d791c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d78f2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d78f4:	4b0a      	ldr	r3, [pc, #40]	; (d7920 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d78f6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d78f8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d78fa:	a801      	add	r0, sp, #4
   d78fc:	f7ff fcd6 	bl	d72ac <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7900:	2200      	movs	r2, #0
   d7902:	4629      	mov	r1, r5
   d7904:	4807      	ldr	r0, [pc, #28]	; (d7924 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7906:	f7ff f9b5 	bl	d6c74 <application_thread_invoke>
   d790a:	4630      	mov	r0, r6
   d790c:	f7ff fcce 	bl	d72ac <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7910:	2110      	movs	r1, #16
   d7912:	4630      	mov	r0, r6
   d7914:	f000 fc7c 	bl	d8210 <_ZdlPvj>
        }
    }
   d7918:	b007      	add	sp, #28
   d791a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d791c:	000d7563 	.word	0x000d7563
   d7920:	000d7831 	.word	0x000d7831
   d7924:	000d7c99 	.word	0x000d7c99

000d7928 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7928:	b530      	push	{r4, r5, lr}
   d792a:	b085      	sub	sp, #20
   d792c:	4604      	mov	r4, r0
   d792e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7930:	4668      	mov	r0, sp
   d7932:	4611      	mov	r1, r2
   d7934:	f7ff fdc9 	bl	d74ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7938:	b17c      	cbz	r4, d795a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d793a:	b224      	sxth	r4, r4
   d793c:	4628      	mov	r0, r5
   d793e:	b10d      	cbz	r5, d7944 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7940:	f001 fc06 	bl	d9150 <strdup>
   d7944:	9002      	str	r0, [sp, #8]
   d7946:	a902      	add	r1, sp, #8
   d7948:	4668      	mov	r0, sp
   d794a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d794e:	f7ff fe1f 	bl	d7590 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7952:	a802      	add	r0, sp, #8
   d7954:	f7ff fd7e 	bl	d7454 <_ZN8particle5ErrorD1Ev>
   d7958:	e01d      	b.n	d7996 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d795a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d795c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7960:	f04f 0201 	mov.w	r2, #1
   d7964:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7968:	42a3      	cmp	r3, r4
   d796a:	d103      	bne.n	d7974 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d796c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d7970:	2900      	cmp	r1, #0
   d7972:	d1f7      	bne.n	d7964 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7974:	d002      	beq.n	d797c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7976:	f88d 3008 	strb.w	r3, [sp, #8]
   d797a:	e00c      	b.n	d7996 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d797c:	f110 010c 	adds.w	r1, r0, #12
   d7980:	f04f 0301 	mov.w	r3, #1
   d7984:	bf18      	it	ne
   d7986:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7988:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d798c:	3004      	adds	r0, #4
   d798e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d7992:	f7ff ff71 	bl	d7878 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7996:	a801      	add	r0, sp, #4
   d7998:	f7ff fb75 	bl	d7086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d799c:	b005      	add	sp, #20
   d799e:	bd30      	pop	{r4, r5, pc}

000d79a0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d79a0:	4770      	bx	lr

000d79a2 <_ZN9IPAddressD0Ev>:
   d79a2:	b510      	push	{r4, lr}
   d79a4:	2118      	movs	r1, #24
   d79a6:	4604      	mov	r4, r0
   d79a8:	f000 fc32 	bl	d8210 <_ZdlPvj>
   d79ac:	4620      	mov	r0, r4
   d79ae:	bd10      	pop	{r4, pc}

000d79b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d79b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d79b2:	7d03      	ldrb	r3, [r0, #20]
   d79b4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d79b6:	b08d      	sub	sp, #52	; 0x34
   d79b8:	460e      	mov	r6, r1
   d79ba:	f100 0704 	add.w	r7, r0, #4
   d79be:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d79c2:	d002      	beq.n	d79ca <_ZNK9IPAddress7printToER5Print+0x1a>
   d79c4:	f100 0508 	add.w	r5, r0, #8
   d79c8:	e018      	b.n	d79fc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d79ca:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d79cc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d79ce:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d79d2:	232f      	movs	r3, #47	; 0x2f
   d79d4:	462a      	mov	r2, r5
   d79d6:	200a      	movs	r0, #10
   d79d8:	f7ff f87c 	bl	d6ad4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d79dc:	4628      	mov	r0, r5
   d79de:	f001 fbd2 	bl	d9186 <strlen>
   d79e2:	6833      	ldr	r3, [r6, #0]
   d79e4:	4602      	mov	r2, r0
   d79e6:	68db      	ldr	r3, [r3, #12]
   d79e8:	4629      	mov	r1, r5
   d79ea:	4630      	mov	r0, r6
   d79ec:	4798      	blx	r3
   d79ee:	e00f      	b.n	d7a10 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d79f0:	b124      	cbz	r4, d79fc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d79f2:	212e      	movs	r1, #46	; 0x2e
   d79f4:	4630      	mov	r0, r6
   d79f6:	f7ff fb81 	bl	d70fc <_ZN5Print5printEc>
   d79fa:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d79fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7a00:	220a      	movs	r2, #10
   d7a02:	4630      	mov	r0, r6
   d7a04:	f7ff fb99 	bl	d713a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a08:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a0a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a0c:	d1f0      	bne.n	d79f0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a0e:	4620      	mov	r0, r4
    }
    return n;
}
   d7a10:	b00d      	add	sp, #52	; 0x34
   d7a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7a14 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7a14:	b510      	push	{r4, lr}
   d7a16:	4b05      	ldr	r3, [pc, #20]	; (d7a2c <_ZN9IPAddressC1Ev+0x18>)
   d7a18:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7a1a:	2211      	movs	r2, #17
   d7a1c:	f840 3b04 	str.w	r3, [r0], #4
   d7a20:	2100      	movs	r1, #0
   d7a22:	f001 fb65 	bl	d90f0 <memset>
{
    clear();
}
   d7a26:	4620      	mov	r0, r4
   d7a28:	bd10      	pop	{r4, pc}
   d7a2a:	bf00      	nop
   d7a2c:	000d9624 	.word	0x000d9624

000d7a30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7a30:	4603      	mov	r3, r0
   d7a32:	4a07      	ldr	r2, [pc, #28]	; (d7a50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7a34:	b510      	push	{r4, lr}
   d7a36:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7a3a:	f101 0210 	add.w	r2, r1, #16
   d7a3e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7a42:	f843 4b04 	str.w	r4, [r3], #4
   d7a46:	4291      	cmp	r1, r2
   d7a48:	d1f9      	bne.n	d7a3e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7a4a:	780a      	ldrb	r2, [r1, #0]
   d7a4c:	701a      	strb	r2, [r3, #0]
}
   d7a4e:	bd10      	pop	{r4, pc}
   d7a50:	000d9624 	.word	0x000d9624

000d7a54 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7a54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7a56:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7a5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7a5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7a62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7a66:	2304      	movs	r3, #4
   d7a68:	6041      	str	r1, [r0, #4]
   d7a6a:	7503      	strb	r3, [r0, #20]
   d7a6c:	bd10      	pop	{r4, pc}

000d7a6e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7a6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7a70:	780d      	ldrb	r5, [r1, #0]
   d7a72:	788b      	ldrb	r3, [r1, #2]
   d7a74:	784a      	ldrb	r2, [r1, #1]
   d7a76:	78c9      	ldrb	r1, [r1, #3]
   d7a78:	9100      	str	r1, [sp, #0]
   d7a7a:	4629      	mov	r1, r5
   d7a7c:	f7ff ffea 	bl	d7a54 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7a80:	b003      	add	sp, #12
   d7a82:	bd30      	pop	{r4, r5, pc}

000d7a84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a84:	7441      	strb	r1, [r0, #17]
   d7a86:	4770      	bx	lr

000d7a88 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7a88:	4770      	bx	lr

000d7a8a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7a8a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7a8c:	2100      	movs	r1, #0
   d7a8e:	7c00      	ldrb	r0, [r0, #16]
   d7a90:	f7ff f8c0 	bl	d6c14 <HAL_USB_USART_Receive_Data>
}
   d7a94:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a98:	bf28      	it	cs
   d7a9a:	f04f 30ff 	movcs.w	r0, #4294967295
   d7a9e:	bd08      	pop	{r3, pc}

000d7aa0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7aa0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7aa2:	2101      	movs	r1, #1
   d7aa4:	7c00      	ldrb	r0, [r0, #16]
   d7aa6:	f7ff f8b5 	bl	d6c14 <HAL_USB_USART_Receive_Data>
}
   d7aaa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7aae:	bf28      	it	cs
   d7ab0:	f04f 30ff 	movcs.w	r0, #4294967295
   d7ab4:	bd08      	pop	{r3, pc}

000d7ab6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7ab6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7ab8:	7c00      	ldrb	r0, [r0, #16]
   d7aba:	f7ff f8a3 	bl	d6c04 <HAL_USB_USART_Available_Data_For_Write>
}
   d7abe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ac2:	bd08      	pop	{r3, pc}

000d7ac4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7ac4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7ac6:	7c00      	ldrb	r0, [r0, #16]
   d7ac8:	f7ff f894 	bl	d6bf4 <HAL_USB_USART_Available_Data>
}
   d7acc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ad0:	bd08      	pop	{r3, pc}

000d7ad2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7ad2:	7c00      	ldrb	r0, [r0, #16]
   d7ad4:	f7ff b8ae 	b.w	d6c34 <HAL_USB_USART_Flush_Data>

000d7ad8 <_ZN9USBSerialD0Ev>:
   d7ad8:	b510      	push	{r4, lr}
   d7ada:	2114      	movs	r1, #20
   d7adc:	4604      	mov	r4, r0
   d7ade:	f000 fb97 	bl	d8210 <_ZdlPvj>
   d7ae2:	4620      	mov	r0, r4
   d7ae4:	bd10      	pop	{r4, pc}

000d7ae6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7ae6:	b538      	push	{r3, r4, r5, lr}
   d7ae8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7aea:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7aec:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7aee:	f7ff f889 	bl	d6c04 <HAL_USB_USART_Available_Data_For_Write>
   d7af2:	2800      	cmp	r0, #0
   d7af4:	dc01      	bgt.n	d7afa <_ZN9USBSerial5writeEh+0x14>
   d7af6:	7c60      	ldrb	r0, [r4, #17]
   d7af8:	b128      	cbz	r0, d7b06 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7afa:	4629      	mov	r1, r5
   d7afc:	7c20      	ldrb	r0, [r4, #16]
   d7afe:	f7ff f891 	bl	d6c24 <HAL_USB_USART_Send_Data>
   d7b02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7b06:	bd38      	pop	{r3, r4, r5, pc}

000d7b08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7b08:	b510      	push	{r4, lr}
   d7b0a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7b0c:	2300      	movs	r3, #0
   d7b0e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7b14:	60a3      	str	r3, [r4, #8]
   d7b16:	4b05      	ldr	r3, [pc, #20]	; (d7b2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7b18:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7b1a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7b1c:	4608      	mov	r0, r1
{
  _serial = serial;
   d7b1e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7b20:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7b22:	4611      	mov	r1, r2
   d7b24:	f7ff f856 	bl	d6bd4 <HAL_USB_USART_Init>
}
   d7b28:	4620      	mov	r0, r4
   d7b2a:	bd10      	pop	{r4, pc}
   d7b2c:	000d9638 	.word	0x000d9638

000d7b30 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7b30:	2200      	movs	r2, #0
   d7b32:	7c00      	ldrb	r0, [r0, #16]
   d7b34:	f7ff b856 	b.w	d6be4 <HAL_USB_USART_Begin>

000d7b38 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7b38:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7b3a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7b3c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7b3e:	2100      	movs	r1, #0
   d7b40:	f001 fad6 	bl	d90f0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7b44:	4620      	mov	r0, r4
   d7b46:	bd10      	pop	{r4, pc}

000d7b48 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7b48:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b4a:	4d0e      	ldr	r5, [pc, #56]	; (d7b84 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7b4c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7b4e:	a801      	add	r0, sp, #4
   d7b50:	f7ff fff2 	bl	d7b38 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b54:	6829      	ldr	r1, [r5, #0]
   d7b56:	f011 0401 	ands.w	r4, r1, #1
   d7b5a:	d110      	bne.n	d7b7e <_Z16_fetch_usbserialv+0x36>
   d7b5c:	4628      	mov	r0, r5
   d7b5e:	f7fc faa2 	bl	d40a6 <__cxa_guard_acquire>
   d7b62:	b160      	cbz	r0, d7b7e <_Z16_fetch_usbserialv+0x36>
   d7b64:	aa01      	add	r2, sp, #4
   d7b66:	4621      	mov	r1, r4
   d7b68:	4807      	ldr	r0, [pc, #28]	; (d7b88 <_Z16_fetch_usbserialv+0x40>)
   d7b6a:	f7ff ffcd 	bl	d7b08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7b6e:	4628      	mov	r0, r5
   d7b70:	f7fc fa9e 	bl	d40b0 <__cxa_guard_release>
   d7b74:	4a05      	ldr	r2, [pc, #20]	; (d7b8c <_Z16_fetch_usbserialv+0x44>)
   d7b76:	4906      	ldr	r1, [pc, #24]	; (d7b90 <_Z16_fetch_usbserialv+0x48>)
   d7b78:	4803      	ldr	r0, [pc, #12]	; (d7b88 <_Z16_fetch_usbserialv+0x40>)
   d7b7a:	f000 fb3b 	bl	d81f4 <__aeabi_atexit>
	return _usbserial;
}
   d7b7e:	4802      	ldr	r0, [pc, #8]	; (d7b88 <_Z16_fetch_usbserialv+0x40>)
   d7b80:	b007      	add	sp, #28
   d7b82:	bd30      	pop	{r4, r5, pc}
   d7b84:	2003e414 	.word	0x2003e414
   d7b88:	2003e418 	.word	0x2003e418
   d7b8c:	2003be84 	.word	0x2003be84
   d7b90:	000d7a89 	.word	0x000d7a89

000d7b94 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7b94:	4770      	bx	lr

000d7b96 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b96:	7441      	strb	r1, [r0, #17]
   d7b98:	4770      	bx	lr

000d7b9a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7b9a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7b9c:	7c00      	ldrb	r0, [r0, #16]
   d7b9e:	f7fe ffd9 	bl	d6b54 <HAL_USART_Available_Data_For_Write>
}
   d7ba2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ba6:	bd08      	pop	{r3, pc}

000d7ba8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7ba8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7baa:	7c00      	ldrb	r0, [r0, #16]
   d7bac:	f7fe ffaa 	bl	d6b04 <HAL_USART_Available_Data>
}
   d7bb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7bb4:	bd08      	pop	{r3, pc}

000d7bb6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7bb6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7bb8:	7c00      	ldrb	r0, [r0, #16]
   d7bba:	f7fe ffb3 	bl	d6b24 <HAL_USART_Peek_Data>
}
   d7bbe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7bc2:	bf28      	it	cs
   d7bc4:	f04f 30ff 	movcs.w	r0, #4294967295
   d7bc8:	bd08      	pop	{r3, pc}

000d7bca <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7bca:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7bcc:	7c00      	ldrb	r0, [r0, #16]
   d7bce:	f7fe ffa1 	bl	d6b14 <HAL_USART_Read_Data>
}
   d7bd2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7bd6:	bf28      	it	cs
   d7bd8:	f04f 30ff 	movcs.w	r0, #4294967295
   d7bdc:	bd08      	pop	{r3, pc}

000d7bde <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7bde:	7c00      	ldrb	r0, [r0, #16]
   d7be0:	f7fe bfa8 	b.w	d6b34 <HAL_USART_Flush_Data>

000d7be4 <_ZN11USARTSerialD0Ev>:
   d7be4:	b510      	push	{r4, lr}
   d7be6:	2114      	movs	r1, #20
   d7be8:	4604      	mov	r4, r0
   d7bea:	f000 fb11 	bl	d8210 <_ZdlPvj>
   d7bee:	4620      	mov	r0, r4
   d7bf0:	bd10      	pop	{r4, pc}

000d7bf2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7bf2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7bf4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7bf6:	4604      	mov	r4, r0
   d7bf8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7bfa:	b925      	cbnz	r5, d7c06 <_ZN11USARTSerial5writeEh+0x14>
   d7bfc:	7c00      	ldrb	r0, [r0, #16]
   d7bfe:	f7fe ffa9 	bl	d6b54 <HAL_USART_Available_Data_For_Write>
   d7c02:	2800      	cmp	r0, #0
   d7c04:	dd05      	ble.n	d7c12 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7c06:	4631      	mov	r1, r6
   d7c08:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7c0e:	f7fe bf71 	b.w	d6af4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7c12:	4628      	mov	r0, r5
   d7c14:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7c18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7c18:	b510      	push	{r4, lr}
   d7c1a:	4604      	mov	r4, r0
   d7c1c:	4608      	mov	r0, r1
   d7c1e:	4611      	mov	r1, r2
   d7c20:	2200      	movs	r2, #0
   d7c22:	6062      	str	r2, [r4, #4]
   d7c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7c28:	60a2      	str	r2, [r4, #8]
   d7c2a:	4a05      	ldr	r2, [pc, #20]	; (d7c40 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7c2c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7c2e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7c30:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7c32:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7c34:	461a      	mov	r2, r3
   d7c36:	f7fe ff55 	bl	d6ae4 <HAL_USART_Init>
}
   d7c3a:	4620      	mov	r0, r4
   d7c3c:	bd10      	pop	{r4, pc}
   d7c3e:	bf00      	nop
   d7c40:	000d9668 	.word	0x000d9668

000d7c44 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7c44:	7c00      	ldrb	r0, [r0, #16]
   d7c46:	f7fe bf7d 	b.w	d6b44 <HAL_USART_Is_Enabled>
	...

000d7c4c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7c4c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7c4e:	4d0c      	ldr	r5, [pc, #48]	; (d7c80 <_Z22__fetch_global_Serial1v+0x34>)
   d7c50:	6829      	ldr	r1, [r5, #0]
   d7c52:	f011 0401 	ands.w	r4, r1, #1
   d7c56:	d111      	bne.n	d7c7c <_Z22__fetch_global_Serial1v+0x30>
   d7c58:	4628      	mov	r0, r5
   d7c5a:	f7fc fa24 	bl	d40a6 <__cxa_guard_acquire>
   d7c5e:	b168      	cbz	r0, d7c7c <_Z22__fetch_global_Serial1v+0x30>
   d7c60:	4a08      	ldr	r2, [pc, #32]	; (d7c84 <_Z22__fetch_global_Serial1v+0x38>)
   d7c62:	4b09      	ldr	r3, [pc, #36]	; (d7c88 <_Z22__fetch_global_Serial1v+0x3c>)
   d7c64:	4809      	ldr	r0, [pc, #36]	; (d7c8c <_Z22__fetch_global_Serial1v+0x40>)
   d7c66:	4621      	mov	r1, r4
   d7c68:	f7ff ffd6 	bl	d7c18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7c6c:	4628      	mov	r0, r5
   d7c6e:	f7fc fa1f 	bl	d40b0 <__cxa_guard_release>
   d7c72:	4a07      	ldr	r2, [pc, #28]	; (d7c90 <_Z22__fetch_global_Serial1v+0x44>)
   d7c74:	4907      	ldr	r1, [pc, #28]	; (d7c94 <_Z22__fetch_global_Serial1v+0x48>)
   d7c76:	4805      	ldr	r0, [pc, #20]	; (d7c8c <_Z22__fetch_global_Serial1v+0x40>)
   d7c78:	f000 fabc 	bl	d81f4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7c7c:	4803      	ldr	r0, [pc, #12]	; (d7c8c <_Z22__fetch_global_Serial1v+0x40>)
   d7c7e:	bd38      	pop	{r3, r4, r5, pc}
   d7c80:	2003e4c4 	.word	0x2003e4c4
   d7c84:	2003e4c8 	.word	0x2003e4c8
   d7c88:	2003e440 	.word	0x2003e440
   d7c8c:	2003e42c 	.word	0x2003e42c
   d7c90:	2003be84 	.word	0x2003be84
   d7c94:	000d7b95 	.word	0x000d7b95

000d7c98 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7c98:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7c9a:	6883      	ldr	r3, [r0, #8]
   d7c9c:	4604      	mov	r4, r0
   d7c9e:	b90b      	cbnz	r3, d7ca4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7ca0:	f000 fac9 	bl	d8236 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7ca4:	68c3      	ldr	r3, [r0, #12]
   d7ca6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7ca8:	68a3      	ldr	r3, [r4, #8]
   d7caa:	b11b      	cbz	r3, d7cb4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7cac:	2203      	movs	r2, #3
   d7cae:	4621      	mov	r1, r4
   d7cb0:	4620      	mov	r0, r4
   d7cb2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7cb4:	4620      	mov	r0, r4
   d7cb6:	2110      	movs	r1, #16
}
   d7cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7cbc:	f000 baa8 	b.w	d8210 <_ZdlPvj>

000d7cc0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7cc0:	4770      	bx	lr

000d7cc2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7cc4:	4606      	mov	r6, r0
   d7cc6:	4615      	mov	r5, r2
   d7cc8:	460c      	mov	r4, r1
   d7cca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7ccc:	42bc      	cmp	r4, r7
   d7cce:	d006      	beq.n	d7cde <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7cd0:	6833      	ldr	r3, [r6, #0]
   d7cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7cd6:	689b      	ldr	r3, [r3, #8]
   d7cd8:	4630      	mov	r0, r6
   d7cda:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7cdc:	e7f6      	b.n	d7ccc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7cde:	4628      	mov	r0, r5
   d7ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ce2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7ce2:	2200      	movs	r2, #0
   d7ce4:	7c00      	ldrb	r0, [r0, #16]
   d7ce6:	f7fe bf3d 	b.w	d6b64 <HAL_I2C_Write_Data>

000d7cea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7cea:	2100      	movs	r1, #0
   d7cec:	7c00      	ldrb	r0, [r0, #16]
   d7cee:	f7fe bf41 	b.w	d6b74 <HAL_I2C_Available_Data>

000d7cf2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7cf2:	2100      	movs	r1, #0
   d7cf4:	7c00      	ldrb	r0, [r0, #16]
   d7cf6:	f7fe bf45 	b.w	d6b84 <HAL_I2C_Read_Data>

000d7cfa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7cfa:	2100      	movs	r1, #0
   d7cfc:	7c00      	ldrb	r0, [r0, #16]
   d7cfe:	f7fe bf49 	b.w	d6b94 <HAL_I2C_Peek_Data>

000d7d02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7d02:	2100      	movs	r1, #0
   d7d04:	7c00      	ldrb	r0, [r0, #16]
   d7d06:	f7fe bf4d 	b.w	d6ba4 <HAL_I2C_Flush_Data>

000d7d0a <_ZN7TwoWireD0Ev>:
   d7d0a:	b510      	push	{r4, lr}
   d7d0c:	2114      	movs	r1, #20
   d7d0e:	4604      	mov	r4, r0
   d7d10:	f000 fa7e 	bl	d8210 <_ZdlPvj>
   d7d14:	4620      	mov	r0, r4
   d7d16:	bd10      	pop	{r4, pc}

000d7d18 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7d18:	b510      	push	{r4, lr}
   d7d1a:	4604      	mov	r4, r0
   d7d1c:	2300      	movs	r3, #0
   d7d1e:	6063      	str	r3, [r4, #4]
   d7d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7d24:	60a3      	str	r3, [r4, #8]
   d7d26:	4b04      	ldr	r3, [pc, #16]	; (d7d38 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7d28:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7d2a:	4608      	mov	r0, r1
   d7d2c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7d2e:	4611      	mov	r1, r2
   d7d30:	f7fe ff48 	bl	d6bc4 <HAL_I2C_Init>
}
   d7d34:	4620      	mov	r0, r4
   d7d36:	bd10      	pop	{r4, pc}
   d7d38:	000d9698 	.word	0x000d9698

000d7d3c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7d3c:	2100      	movs	r1, #0
   d7d3e:	7c00      	ldrb	r0, [r0, #16]
   d7d40:	f7fe bf38 	b.w	d6bb4 <HAL_I2C_Is_Enabled>

000d7d44 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d44:	2200      	movs	r2, #0
   d7d46:	4611      	mov	r1, r2
   d7d48:	6840      	ldr	r0, [r0, #4]
   d7d4a:	f7fe bfe7 	b.w	d6d1c <network_listening>

000d7d4e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7d4e:	2200      	movs	r2, #0
   d7d50:	4611      	mov	r1, r2
   d7d52:	6840      	ldr	r0, [r0, #4]
   d7d54:	f7fe bff2 	b.w	d6d3c <network_get_listen_timeout>

000d7d58 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7d58:	2200      	movs	r2, #0
   d7d5a:	6840      	ldr	r0, [r0, #4]
   d7d5c:	f7fe bfe6 	b.w	d6d2c <network_set_listen_timeout>

000d7d60 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7d60:	2200      	movs	r2, #0
   d7d62:	f081 0101 	eor.w	r1, r1, #1
   d7d66:	6840      	ldr	r0, [r0, #4]
   d7d68:	f7fe bfd0 	b.w	d6d0c <network_listen>

000d7d6c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7d6c:	2300      	movs	r3, #0
   d7d6e:	461a      	mov	r2, r3
   d7d70:	2101      	movs	r1, #1
   d7d72:	6840      	ldr	r0, [r0, #4]
   d7d74:	f7fe bfc2 	b.w	d6cfc <network_off>

000d7d78 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7d78:	2300      	movs	r3, #0
   d7d7a:	461a      	mov	r2, r3
   d7d7c:	4619      	mov	r1, r3
   d7d7e:	6840      	ldr	r0, [r0, #4]
   d7d80:	f7fe bfb4 	b.w	d6cec <network_on>

000d7d84 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7d84:	2200      	movs	r2, #0
   d7d86:	4611      	mov	r1, r2
   d7d88:	6840      	ldr	r0, [r0, #4]
   d7d8a:	f7fe bfa7 	b.w	d6cdc <network_ready>

000d7d8e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7d8e:	2200      	movs	r2, #0
   d7d90:	4611      	mov	r1, r2
   d7d92:	6840      	ldr	r0, [r0, #4]
   d7d94:	f7fe bf92 	b.w	d6cbc <network_connecting>

000d7d98 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7d98:	2200      	movs	r2, #0
   d7d9a:	2102      	movs	r1, #2
   d7d9c:	6840      	ldr	r0, [r0, #4]
   d7d9e:	f7fe bf95 	b.w	d6ccc <network_disconnect>

000d7da2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7da2:	2300      	movs	r3, #0
   d7da4:	461a      	mov	r2, r3
   d7da6:	6840      	ldr	r0, [r0, #4]
   d7da8:	f7fe bf80 	b.w	d6cac <network_connect>

000d7dac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7dac:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7dae:	4605      	mov	r5, r0
   d7db0:	b188      	cbz	r0, d7dd6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7db2:	6804      	ldr	r4, [r0, #0]
   d7db4:	b14c      	cbz	r4, d7dca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7db6:	68a3      	ldr	r3, [r4, #8]
   d7db8:	b11b      	cbz	r3, d7dc2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7dba:	2203      	movs	r2, #3
   d7dbc:	4621      	mov	r1, r4
   d7dbe:	4620      	mov	r0, r4
   d7dc0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7dc2:	2110      	movs	r1, #16
   d7dc4:	4620      	mov	r0, r4
   d7dc6:	f000 fa23 	bl	d8210 <_ZdlPvj>
   d7dca:	4628      	mov	r0, r5
   d7dcc:	2114      	movs	r1, #20
      }
   d7dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7dd2:	f000 ba1d 	b.w	d8210 <_ZdlPvj>
   d7dd6:	bd38      	pop	{r3, r4, r5, pc}

000d7dd8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7dd8:	b110      	cbz	r0, d7de0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7dda:	6803      	ldr	r3, [r0, #0]
   d7ddc:	685b      	ldr	r3, [r3, #4]
   d7dde:	4718      	bx	r3
   d7de0:	4770      	bx	lr

000d7de2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7de2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7de4:	6803      	ldr	r3, [r0, #0]
   d7de6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7de8:	b1bb      	cbz	r3, d7e1a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7dea:	6858      	ldr	r0, [r3, #4]
   d7dec:	f7fe fe42 	bl	d6a74 <os_thread_is_current>
   d7df0:	b978      	cbnz	r0, d7e12 <_ZN6ThreadD1Ev+0x30>
   d7df2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7df4:	7c5a      	ldrb	r2, [r3, #17]
   d7df6:	b912      	cbnz	r2, d7dfe <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7df8:	6858      	ldr	r0, [r3, #4]
   d7dfa:	f7fe fe4b 	bl	d6a94 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7dfe:	6823      	ldr	r3, [r4, #0]
   d7e00:	6858      	ldr	r0, [r3, #4]
   d7e02:	f7fe fe4f 	bl	d6aa4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e06:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7e08:	2300      	movs	r3, #0
   d7e0a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7e0c:	b128      	cbz	r0, d7e1a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7e0e:	f7ff ffcd 	bl	d7dac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e12:	6820      	ldr	r0, [r4, #0]
   d7e14:	b108      	cbz	r0, d7e1a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7e16:	f7ff ffc9 	bl	d7dac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7e1a:	4620      	mov	r0, r4
   d7e1c:	bd10      	pop	{r4, pc}

000d7e1e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7e1e:	b538      	push	{r3, r4, r5, lr}
   d7e20:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e22:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7e26:	b108      	cbz	r0, d7e2c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7e28:	f7fc f93b 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7e2c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7e30:	b108      	cbz	r0, d7e36 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7e32:	f7fe fe47 	bl	d6ac4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e36:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7e3a:	b135      	cbz	r5, d7e4a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7e3c:	4628      	mov	r0, r5
   d7e3e:	f7ff ffd0 	bl	d7de2 <_ZN6ThreadD1Ev>
   d7e42:	2104      	movs	r1, #4
   d7e44:	4628      	mov	r0, r5
   d7e46:	f000 f9e3 	bl	d8210 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e4a:	6820      	ldr	r0, [r4, #0]
   d7e4c:	b108      	cbz	r0, d7e52 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7e4e:	f7ff ffc3 	bl	d7dd8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7e52:	4620      	mov	r0, r4
   d7e54:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7e58 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7e58:	b510      	push	{r4, lr}
   d7e5a:	4b04      	ldr	r3, [pc, #16]	; (d7e6c <_ZN5spark9MeshClassD1Ev+0x14>)
   d7e5c:	4604      	mov	r4, r0
   d7e5e:	f840 3b08 	str.w	r3, [r0], #8
   d7e62:	f7ff ffdc 	bl	d7e1e <_ZN5spark11MeshPublishD1Ev>
   d7e66:	4620      	mov	r0, r4
   d7e68:	bd10      	pop	{r4, pc}
   d7e6a:	bf00      	nop
   d7e6c:	000d96c0 	.word	0x000d96c0

000d7e70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7e70:	b538      	push	{r3, r4, r5, lr}
   d7e72:	4c0e      	ldr	r4, [pc, #56]	; (d7eac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7e74:	4b0e      	ldr	r3, [pc, #56]	; (d7eb0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7e76:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7e78:	2500      	movs	r5, #0
   d7e7a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7e7c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7e80:	6063      	str	r3, [r4, #4]
   d7e82:	60a5      	str	r5, [r4, #8]
   d7e84:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7e88:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7e8c:	f7fe fe12 	bl	d6ab4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7e90:	4b08      	ldr	r3, [pc, #32]	; (d7eb4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7e92:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e96:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7e9a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7e9c:	4620      	mov	r0, r4
   d7e9e:	4a06      	ldr	r2, [pc, #24]	; (d7eb8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7ea0:	4906      	ldr	r1, [pc, #24]	; (d7ebc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7ea6:	f000 b9a5 	b.w	d81f4 <__aeabi_atexit>
   d7eaa:	bf00      	nop
   d7eac:	2003e54c 	.word	0x2003e54c
   d7eb0:	000d9728 	.word	0x000d9728
   d7eb4:	000d96c0 	.word	0x000d96c0
   d7eb8:	2003be84 	.word	0x2003be84
   d7ebc:	000d7e59 	.word	0x000d7e59

000d7ec0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7ec0:	2200      	movs	r2, #0
   d7ec2:	4611      	mov	r1, r2
   d7ec4:	6840      	ldr	r0, [r0, #4]
   d7ec6:	f7fe bf09 	b.w	d6cdc <network_ready>

000d7eca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7eca:	2200      	movs	r2, #0
   d7ecc:	4611      	mov	r1, r2
   d7ece:	6840      	ldr	r0, [r0, #4]
   d7ed0:	f7fe bf24 	b.w	d6d1c <network_listening>

000d7ed4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7ed4:	2200      	movs	r2, #0
   d7ed6:	4611      	mov	r1, r2
   d7ed8:	6840      	ldr	r0, [r0, #4]
   d7eda:	f7fe bf2f 	b.w	d6d3c <network_get_listen_timeout>

000d7ede <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7ede:	2200      	movs	r2, #0
   d7ee0:	6840      	ldr	r0, [r0, #4]
   d7ee2:	f7fe bf23 	b.w	d6d2c <network_set_listen_timeout>

000d7ee6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7ee6:	2200      	movs	r2, #0
   d7ee8:	f081 0101 	eor.w	r1, r1, #1
   d7eec:	6840      	ldr	r0, [r0, #4]
   d7eee:	f7fe bf0d 	b.w	d6d0c <network_listen>

000d7ef2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7ef2:	2300      	movs	r3, #0
   d7ef4:	461a      	mov	r2, r3
   d7ef6:	4619      	mov	r1, r3
   d7ef8:	6840      	ldr	r0, [r0, #4]
   d7efa:	f7fe beff 	b.w	d6cfc <network_off>

000d7efe <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7efe:	2300      	movs	r3, #0
   d7f00:	461a      	mov	r2, r3
   d7f02:	4619      	mov	r1, r3
   d7f04:	6840      	ldr	r0, [r0, #4]
   d7f06:	f7fe bef1 	b.w	d6cec <network_on>

000d7f0a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7f0a:	2200      	movs	r2, #0
   d7f0c:	4611      	mov	r1, r2
   d7f0e:	6840      	ldr	r0, [r0, #4]
   d7f10:	f7fe bed4 	b.w	d6cbc <network_connecting>

000d7f14 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7f14:	2200      	movs	r2, #0
   d7f16:	2102      	movs	r1, #2
   d7f18:	6840      	ldr	r0, [r0, #4]
   d7f1a:	f7fe bed7 	b.w	d6ccc <network_disconnect>

000d7f1e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7f1e:	2300      	movs	r3, #0
   d7f20:	461a      	mov	r2, r3
   d7f22:	6840      	ldr	r0, [r0, #4]
   d7f24:	f7fe bec2 	b.w	d6cac <network_connect>

000d7f28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7f28:	4b02      	ldr	r3, [pc, #8]	; (d7f34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7f2a:	2204      	movs	r2, #4
   d7f2c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7f2e:	4a02      	ldr	r2, [pc, #8]	; (d7f38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7f30:	601a      	str	r2, [r3, #0]
   d7f32:	4770      	bx	lr
   d7f34:	2003e720 	.word	0x2003e720
   d7f38:	000d96f4 	.word	0x000d96f4

000d7f3c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7f3c:	2300      	movs	r3, #0
   d7f3e:	461a      	mov	r2, r3
   d7f40:	6840      	ldr	r0, [r0, #4]
   d7f42:	f7fe beb3 	b.w	d6cac <network_connect>

000d7f46 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7f46:	2200      	movs	r2, #0
   d7f48:	2102      	movs	r1, #2
   d7f4a:	6840      	ldr	r0, [r0, #4]
   d7f4c:	f7fe bebe 	b.w	d6ccc <network_disconnect>

000d7f50 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7f50:	2200      	movs	r2, #0
   d7f52:	4611      	mov	r1, r2
   d7f54:	6840      	ldr	r0, [r0, #4]
   d7f56:	f7fe beb1 	b.w	d6cbc <network_connecting>

000d7f5a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7f5a:	2200      	movs	r2, #0
   d7f5c:	4611      	mov	r1, r2
   d7f5e:	6840      	ldr	r0, [r0, #4]
   d7f60:	f7fe bebc 	b.w	d6cdc <network_ready>

000d7f64 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7f64:	2300      	movs	r3, #0
   d7f66:	461a      	mov	r2, r3
   d7f68:	4619      	mov	r1, r3
   d7f6a:	6840      	ldr	r0, [r0, #4]
   d7f6c:	f7fe bebe 	b.w	d6cec <network_on>

000d7f70 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7f70:	2300      	movs	r3, #0
   d7f72:	461a      	mov	r2, r3
   d7f74:	4619      	mov	r1, r3
   d7f76:	6840      	ldr	r0, [r0, #4]
   d7f78:	f7fe bec0 	b.w	d6cfc <network_off>

000d7f7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7f7c:	2200      	movs	r2, #0
   d7f7e:	f081 0101 	eor.w	r1, r1, #1
   d7f82:	6840      	ldr	r0, [r0, #4]
   d7f84:	f7fe bec2 	b.w	d6d0c <network_listen>

000d7f88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7f88:	2200      	movs	r2, #0
   d7f8a:	6840      	ldr	r0, [r0, #4]
   d7f8c:	f7fe bece 	b.w	d6d2c <network_set_listen_timeout>

000d7f90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7f90:	2200      	movs	r2, #0
   d7f92:	4611      	mov	r1, r2
   d7f94:	6840      	ldr	r0, [r0, #4]
   d7f96:	f7fe bed1 	b.w	d6d3c <network_get_listen_timeout>

000d7f9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7f9a:	2200      	movs	r2, #0
   d7f9c:	4611      	mov	r1, r2
   d7f9e:	6840      	ldr	r0, [r0, #4]
   d7fa0:	f7fe bebc 	b.w	d6d1c <network_listening>

000d7fa4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7fa8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7faa:	b095      	sub	sp, #84	; 0x54
   d7fac:	4616      	mov	r6, r2
   d7fae:	460d      	mov	r5, r1
   d7fb0:	4607      	mov	r7, r0
    IPAddress addr;
   d7fb2:	f7ff fd2f 	bl	d7a14 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7fb6:	4621      	mov	r1, r4
   d7fb8:	2220      	movs	r2, #32
   d7fba:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7fbc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7fbe:	f001 f897 	bl	d90f0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7fc2:	2340      	movs	r3, #64	; 0x40
   d7fc4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7fc6:	4621      	mov	r1, r4
   d7fc8:	466b      	mov	r3, sp
   d7fca:	aa0c      	add	r2, sp, #48	; 0x30
   d7fcc:	4630      	mov	r0, r6
   d7fce:	f7fe fca9 	bl	d6924 <netdb_getaddrinfo>
    if (!r) {
   d7fd2:	4604      	mov	r4, r0
   d7fd4:	2800      	cmp	r0, #0
   d7fd6:	d144      	bne.n	d8062 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7fd8:	4602      	mov	r2, r0
   d7fda:	2101      	movs	r1, #1
   d7fdc:	6868      	ldr	r0, [r5, #4]
   d7fde:	f7fe fe7d 	bl	d6cdc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fe2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7fe4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fe6:	4622      	mov	r2, r4
   d7fe8:	6868      	ldr	r0, [r5, #4]
   d7fea:	f7fe fe77 	bl	d6cdc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fee:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7ff0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7ff2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ff4:	2e00      	cmp	r6, #0
   d7ff6:	d034      	beq.n	d8062 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7ff8:	2900      	cmp	r1, #0
   d7ffa:	d132      	bne.n	d8062 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7ffc:	6873      	ldr	r3, [r6, #4]
   d7ffe:	2b02      	cmp	r3, #2
   d8000:	d002      	beq.n	d8008 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8002:	2b0a      	cmp	r3, #10
   d8004:	d009      	beq.n	d801a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8006:	e02a      	b.n	d805e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8008:	f1b8 0f00 	cmp.w	r8, #0
   d800c:	d027      	beq.n	d805e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d800e:	6971      	ldr	r1, [r6, #20]
   d8010:	4638      	mov	r0, r7
   d8012:	3104      	adds	r1, #4
   d8014:	f7ff fd2b 	bl	d7a6e <_ZN9IPAddressaSEPKh>
   d8018:	e020      	b.n	d805c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d801a:	f1b9 0f00 	cmp.w	r9, #0
   d801e:	d01e      	beq.n	d805e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8020:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8022:	2211      	movs	r2, #17
   d8024:	a801      	add	r0, sp, #4
   d8026:	f001 f863 	bl	d90f0 <memset>
                    a.v = 6;
   d802a:	2306      	movs	r3, #6
   d802c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8030:	ad01      	add	r5, sp, #4
   d8032:	f104 0308 	add.w	r3, r4, #8
   d8036:	3418      	adds	r4, #24
   d8038:	6818      	ldr	r0, [r3, #0]
   d803a:	6859      	ldr	r1, [r3, #4]
   d803c:	462a      	mov	r2, r5
   d803e:	c203      	stmia	r2!, {r0, r1}
   d8040:	3308      	adds	r3, #8
   d8042:	42a3      	cmp	r3, r4
   d8044:	4615      	mov	r5, r2
   d8046:	d1f7      	bne.n	d8038 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8048:	a901      	add	r1, sp, #4
   d804a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d804c:	ad07      	add	r5, sp, #28
   d804e:	f7ff fcef 	bl	d7a30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8054:	1d3c      	adds	r4, r7, #4
   d8056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8058:	682b      	ldr	r3, [r5, #0]
   d805a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d805c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d805e:	69f6      	ldr	r6, [r6, #28]
   d8060:	e7c8      	b.n	d7ff4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8062:	9800      	ldr	r0, [sp, #0]
   d8064:	f7fe fc56 	bl	d6914 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8068:	4638      	mov	r0, r7
   d806a:	b015      	add	sp, #84	; 0x54
   d806c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8070 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8070:	4b02      	ldr	r3, [pc, #8]	; (d807c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8072:	4a03      	ldr	r2, [pc, #12]	; (d8080 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8074:	601a      	str	r2, [r3, #0]
   d8076:	2200      	movs	r2, #0
   d8078:	605a      	str	r2, [r3, #4]
   d807a:	4770      	bx	lr
   d807c:	2003e728 	.word	0x2003e728
   d8080:	000d9728 	.word	0x000d9728

000d8084 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8084:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8086:	4e18      	ldr	r6, [pc, #96]	; (d80e8 <pinAvailable+0x64>)
   d8088:	6831      	ldr	r1, [r6, #0]
   d808a:	f011 0501 	ands.w	r5, r1, #1
   d808e:	4604      	mov	r4, r0
   d8090:	d10a      	bne.n	d80a8 <pinAvailable+0x24>
   d8092:	4630      	mov	r0, r6
   d8094:	f7fc f807 	bl	d40a6 <__cxa_guard_acquire>
   d8098:	b130      	cbz	r0, d80a8 <pinAvailable+0x24>
   d809a:	4629      	mov	r1, r5
   d809c:	4813      	ldr	r0, [pc, #76]	; (d80ec <pinAvailable+0x68>)
   d809e:	f7fe fee9 	bl	d6e74 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d80a2:	4630      	mov	r0, r6
   d80a4:	f7fc f804 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d80a8:	4810      	ldr	r0, [pc, #64]	; (d80ec <pinAvailable+0x68>)
   d80aa:	f7fe ffa0 	bl	d6fee <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d80ae:	b128      	cbz	r0, d80bc <pinAvailable+0x38>
   d80b0:	f1a4 030b 	sub.w	r3, r4, #11
   d80b4:	2b02      	cmp	r3, #2
   d80b6:	d801      	bhi.n	d80bc <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d80b8:	2000      	movs	r0, #0
   d80ba:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d80bc:	f000 f874 	bl	d81a8 <_Z19__fetch_global_Wirev>
   d80c0:	f7ff fe3c 	bl	d7d3c <_ZN7TwoWire9isEnabledEv>
   d80c4:	b108      	cbz	r0, d80ca <pinAvailable+0x46>
   d80c6:	2c01      	cmp	r4, #1
   d80c8:	d9f6      	bls.n	d80b8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d80ca:	f7ff fdbf 	bl	d7c4c <_Z22__fetch_global_Serial1v>
   d80ce:	f7ff fdb9 	bl	d7c44 <_ZN11USARTSerial9isEnabledEv>
   d80d2:	b118      	cbz	r0, d80dc <pinAvailable+0x58>
   d80d4:	f1a4 0309 	sub.w	r3, r4, #9
   d80d8:	2b01      	cmp	r3, #1
   d80da:	d9ed      	bls.n	d80b8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d80dc:	2c23      	cmp	r4, #35	; 0x23
   d80de:	bf8c      	ite	hi
   d80e0:	2000      	movhi	r0, #0
   d80e2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d80e4:	bd70      	pop	{r4, r5, r6, pc}
   d80e6:	bf00      	nop
   d80e8:	2003be88 	.word	0x2003be88
   d80ec:	2003be8c 	.word	0x2003be8c

000d80f0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d80f0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d80f2:	b538      	push	{r3, r4, r5, lr}
   d80f4:	4604      	mov	r4, r0
   d80f6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d80f8:	d80a      	bhi.n	d8110 <pinMode+0x20>
   d80fa:	29ff      	cmp	r1, #255	; 0xff
   d80fc:	d008      	beq.n	d8110 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d80fe:	f7ff ffc1 	bl	d8084 <pinAvailable>
   d8102:	b128      	cbz	r0, d8110 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8104:	4629      	mov	r1, r5
   d8106:	4620      	mov	r0, r4
}
   d8108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d810c:	f7fe bc22 	b.w	d6954 <HAL_Pin_Mode>
   d8110:	bd38      	pop	{r3, r4, r5, pc}

000d8112 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8112:	b538      	push	{r3, r4, r5, lr}
   d8114:	4604      	mov	r4, r0
   d8116:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8118:	f7fe fc24 	bl	d6964 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d811c:	28ff      	cmp	r0, #255	; 0xff
   d811e:	d010      	beq.n	d8142 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8120:	2806      	cmp	r0, #6
   d8122:	d804      	bhi.n	d812e <digitalWrite+0x1c>
   d8124:	234d      	movs	r3, #77	; 0x4d
   d8126:	fa23 f000 	lsr.w	r0, r3, r0
   d812a:	07c3      	lsls	r3, r0, #31
   d812c:	d409      	bmi.n	d8142 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d812e:	4620      	mov	r0, r4
   d8130:	f7ff ffa8 	bl	d8084 <pinAvailable>
   d8134:	b128      	cbz	r0, d8142 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8136:	4629      	mov	r1, r5
   d8138:	4620      	mov	r0, r4
}
   d813a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d813e:	f7fe bc19 	b.w	d6974 <HAL_GPIO_Write>
   d8142:	bd38      	pop	{r3, r4, r5, pc}

000d8144 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8144:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8146:	b510      	push	{r4, lr}
   d8148:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d814a:	bf9c      	itt	ls
   d814c:	340e      	addls	r4, #14
   d814e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8150:	4620      	mov	r0, r4
   d8152:	f7ff ff97 	bl	d8084 <pinAvailable>
   d8156:	b150      	cbz	r0, d816e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8158:	2103      	movs	r1, #3
   d815a:	4620      	mov	r0, r4
   d815c:	f7fe fbf2 	bl	d6944 <HAL_Validate_Pin_Function>
   d8160:	2803      	cmp	r0, #3
   d8162:	d104      	bne.n	d816e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8164:	4620      	mov	r0, r4
}
   d8166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d816a:	f7fe bc0b 	b.w	d6984 <HAL_ADC_Read>
}
   d816e:	2000      	movs	r0, #0
   d8170:	bd10      	pop	{r4, pc}
	...

000d8174 <_Z17acquireWireBufferv>:
   d8174:	b570      	push	{r4, r5, r6, lr}
   d8176:	4604      	mov	r4, r0
   d8178:	2514      	movs	r5, #20
   d817a:	462a      	mov	r2, r5
   d817c:	4e09      	ldr	r6, [pc, #36]	; (d81a4 <_Z17acquireWireBufferv+0x30>)
   d817e:	2100      	movs	r1, #0
   d8180:	f000 ffb6 	bl	d90f0 <memset>
   d8184:	8025      	strh	r5, [r4, #0]
   d8186:	2520      	movs	r5, #32
   d8188:	4631      	mov	r1, r6
   d818a:	60a5      	str	r5, [r4, #8]
   d818c:	6125      	str	r5, [r4, #16]
   d818e:	4628      	mov	r0, r5
   d8190:	f000 f840 	bl	d8214 <_ZnajRKSt9nothrow_t>
   d8194:	4631      	mov	r1, r6
   d8196:	6060      	str	r0, [r4, #4]
   d8198:	4628      	mov	r0, r5
   d819a:	f000 f83b 	bl	d8214 <_ZnajRKSt9nothrow_t>
   d819e:	60e0      	str	r0, [r4, #12]
   d81a0:	4620      	mov	r0, r4
   d81a2:	bd70      	pop	{r4, r5, r6, pc}
   d81a4:	000d9754 	.word	0x000d9754

000d81a8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d81a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d81aa:	4d0e      	ldr	r5, [pc, #56]	; (d81e4 <_Z19__fetch_global_Wirev+0x3c>)
   d81ac:	6829      	ldr	r1, [r5, #0]
   d81ae:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d81b2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d81b4:	d113      	bne.n	d81de <_Z19__fetch_global_Wirev+0x36>
   d81b6:	4628      	mov	r0, r5
   d81b8:	f7fb ff75 	bl	d40a6 <__cxa_guard_acquire>
   d81bc:	b178      	cbz	r0, d81de <_Z19__fetch_global_Wirev+0x36>
   d81be:	a801      	add	r0, sp, #4
   d81c0:	f7ff ffd8 	bl	d8174 <_Z17acquireWireBufferv>
   d81c4:	aa01      	add	r2, sp, #4
   d81c6:	4621      	mov	r1, r4
   d81c8:	4807      	ldr	r0, [pc, #28]	; (d81e8 <_Z19__fetch_global_Wirev+0x40>)
   d81ca:	f7ff fda5 	bl	d7d18 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d81ce:	4628      	mov	r0, r5
   d81d0:	f7fb ff6e 	bl	d40b0 <__cxa_guard_release>
   d81d4:	4a05      	ldr	r2, [pc, #20]	; (d81ec <_Z19__fetch_global_Wirev+0x44>)
   d81d6:	4906      	ldr	r1, [pc, #24]	; (d81f0 <_Z19__fetch_global_Wirev+0x48>)
   d81d8:	4803      	ldr	r0, [pc, #12]	; (d81e8 <_Z19__fetch_global_Wirev+0x40>)
   d81da:	f000 f80b 	bl	d81f4 <__aeabi_atexit>
	return wire;
}
   d81de:	4802      	ldr	r0, [pc, #8]	; (d81e8 <_Z19__fetch_global_Wirev+0x40>)
   d81e0:	b007      	add	sp, #28
   d81e2:	bd30      	pop	{r4, r5, pc}
   d81e4:	2003e734 	.word	0x2003e734
   d81e8:	2003e738 	.word	0x2003e738
   d81ec:	2003be84 	.word	0x2003be84
   d81f0:	000d7cc1 	.word	0x000d7cc1

000d81f4 <__aeabi_atexit>:
   d81f4:	460b      	mov	r3, r1
   d81f6:	4601      	mov	r1, r0
   d81f8:	4618      	mov	r0, r3
   d81fa:	f000 bf51 	b.w	d90a0 <__cxa_atexit>
	...

000d8200 <_ZSt15get_new_handlerv>:
   d8200:	4b02      	ldr	r3, [pc, #8]	; (d820c <_ZSt15get_new_handlerv+0xc>)
   d8202:	6818      	ldr	r0, [r3, #0]
   d8204:	f3bf 8f5f 	dmb	sy
   d8208:	4770      	bx	lr
   d820a:	bf00      	nop
   d820c:	2003e74c 	.word	0x2003e74c

000d8210 <_ZdlPvj>:
   d8210:	f7fb bf45 	b.w	d409e <_ZdlPv>

000d8214 <_ZnajRKSt9nothrow_t>:
   d8214:	f000 b800 	b.w	d8218 <_ZnwjRKSt9nothrow_t>

000d8218 <_ZnwjRKSt9nothrow_t>:
   d8218:	b510      	push	{r4, lr}
   d821a:	2800      	cmp	r0, #0
   d821c:	bf14      	ite	ne
   d821e:	4604      	movne	r4, r0
   d8220:	2401      	moveq	r4, #1
   d8222:	4620      	mov	r0, r4
   d8224:	f7fe fdb2 	bl	d6d8c <malloc>
   d8228:	b920      	cbnz	r0, d8234 <_ZnwjRKSt9nothrow_t+0x1c>
   d822a:	f7ff ffe9 	bl	d8200 <_ZSt15get_new_handlerv>
   d822e:	b108      	cbz	r0, d8234 <_ZnwjRKSt9nothrow_t+0x1c>
   d8230:	4780      	blx	r0
   d8232:	e7f6      	b.n	d8222 <_ZnwjRKSt9nothrow_t+0xa>
   d8234:	bd10      	pop	{r4, pc}

000d8236 <_ZSt25__throw_bad_function_callv>:
   d8236:	b508      	push	{r3, lr}
   d8238:	f7fe fdc0 	bl	d6dbc <abort>

000d823c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d823c:	4b18      	ldr	r3, [pc, #96]	; (d82a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d823e:	681a      	ldr	r2, [r3, #0]
   d8240:	07d1      	lsls	r1, r2, #31
   d8242:	bf5c      	itt	pl
   d8244:	2201      	movpl	r2, #1
   d8246:	601a      	strpl	r2, [r3, #0]
   d8248:	4b16      	ldr	r3, [pc, #88]	; (d82a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d824a:	681a      	ldr	r2, [r3, #0]
   d824c:	07d2      	lsls	r2, r2, #31
   d824e:	bf5c      	itt	pl
   d8250:	2201      	movpl	r2, #1
   d8252:	601a      	strpl	r2, [r3, #0]
   d8254:	4b14      	ldr	r3, [pc, #80]	; (d82a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8256:	681a      	ldr	r2, [r3, #0]
   d8258:	07d0      	lsls	r0, r2, #31
   d825a:	bf5c      	itt	pl
   d825c:	2201      	movpl	r2, #1
   d825e:	601a      	strpl	r2, [r3, #0]
   d8260:	4b12      	ldr	r3, [pc, #72]	; (d82ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8262:	681a      	ldr	r2, [r3, #0]
   d8264:	07d1      	lsls	r1, r2, #31
   d8266:	bf5c      	itt	pl
   d8268:	2201      	movpl	r2, #1
   d826a:	601a      	strpl	r2, [r3, #0]
   d826c:	4b10      	ldr	r3, [pc, #64]	; (d82b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d826e:	681a      	ldr	r2, [r3, #0]
   d8270:	07d2      	lsls	r2, r2, #31
   d8272:	bf5c      	itt	pl
   d8274:	2201      	movpl	r2, #1
   d8276:	601a      	strpl	r2, [r3, #0]
   d8278:	4b0e      	ldr	r3, [pc, #56]	; (d82b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d827a:	681a      	ldr	r2, [r3, #0]
   d827c:	07d0      	lsls	r0, r2, #31
   d827e:	bf5c      	itt	pl
   d8280:	2201      	movpl	r2, #1
   d8282:	601a      	strpl	r2, [r3, #0]
   d8284:	4b0c      	ldr	r3, [pc, #48]	; (d82b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8286:	681a      	ldr	r2, [r3, #0]
   d8288:	07d1      	lsls	r1, r2, #31
   d828a:	bf5c      	itt	pl
   d828c:	2201      	movpl	r2, #1
   d828e:	601a      	strpl	r2, [r3, #0]
   d8290:	4b0a      	ldr	r3, [pc, #40]	; (d82bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8292:	681a      	ldr	r2, [r3, #0]
   d8294:	07d2      	lsls	r2, r2, #31
   d8296:	bf5c      	itt	pl
   d8298:	2201      	movpl	r2, #1
   d829a:	601a      	strpl	r2, [r3, #0]
   d829c:	4770      	bx	lr
   d829e:	bf00      	nop
   d82a0:	2003e76c 	.word	0x2003e76c
   d82a4:	2003e768 	.word	0x2003e768
   d82a8:	2003e764 	.word	0x2003e764
   d82ac:	2003e760 	.word	0x2003e760
   d82b0:	2003e75c 	.word	0x2003e75c
   d82b4:	2003e758 	.word	0x2003e758
   d82b8:	2003e754 	.word	0x2003e754
   d82bc:	2003e750 	.word	0x2003e750

000d82c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d82c0:	4b24      	ldr	r3, [pc, #144]	; (d8354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d82c2:	681a      	ldr	r2, [r3, #0]
   d82c4:	07d0      	lsls	r0, r2, #31
   d82c6:	bf5c      	itt	pl
   d82c8:	2201      	movpl	r2, #1
   d82ca:	601a      	strpl	r2, [r3, #0]
   d82cc:	4b22      	ldr	r3, [pc, #136]	; (d8358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d82ce:	681a      	ldr	r2, [r3, #0]
   d82d0:	07d1      	lsls	r1, r2, #31
   d82d2:	bf5c      	itt	pl
   d82d4:	2201      	movpl	r2, #1
   d82d6:	601a      	strpl	r2, [r3, #0]
   d82d8:	4b20      	ldr	r3, [pc, #128]	; (d835c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d82da:	681a      	ldr	r2, [r3, #0]
   d82dc:	07d2      	lsls	r2, r2, #31
   d82de:	bf5c      	itt	pl
   d82e0:	2201      	movpl	r2, #1
   d82e2:	601a      	strpl	r2, [r3, #0]
   d82e4:	4b1e      	ldr	r3, [pc, #120]	; (d8360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d82e6:	681a      	ldr	r2, [r3, #0]
   d82e8:	07d0      	lsls	r0, r2, #31
   d82ea:	bf5c      	itt	pl
   d82ec:	2201      	movpl	r2, #1
   d82ee:	601a      	strpl	r2, [r3, #0]
   d82f0:	4b1c      	ldr	r3, [pc, #112]	; (d8364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d82f2:	681a      	ldr	r2, [r3, #0]
   d82f4:	07d1      	lsls	r1, r2, #31
   d82f6:	bf5c      	itt	pl
   d82f8:	2201      	movpl	r2, #1
   d82fa:	601a      	strpl	r2, [r3, #0]
   d82fc:	4b1a      	ldr	r3, [pc, #104]	; (d8368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d82fe:	681a      	ldr	r2, [r3, #0]
   d8300:	07d2      	lsls	r2, r2, #31
   d8302:	bf5c      	itt	pl
   d8304:	2201      	movpl	r2, #1
   d8306:	601a      	strpl	r2, [r3, #0]
   d8308:	4b18      	ldr	r3, [pc, #96]	; (d836c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d830a:	681a      	ldr	r2, [r3, #0]
   d830c:	07d0      	lsls	r0, r2, #31
   d830e:	bf5c      	itt	pl
   d8310:	2201      	movpl	r2, #1
   d8312:	601a      	strpl	r2, [r3, #0]
   d8314:	4b16      	ldr	r3, [pc, #88]	; (d8370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8316:	681a      	ldr	r2, [r3, #0]
   d8318:	07d1      	lsls	r1, r2, #31
   d831a:	bf5c      	itt	pl
   d831c:	2201      	movpl	r2, #1
   d831e:	601a      	strpl	r2, [r3, #0]
   d8320:	4b14      	ldr	r3, [pc, #80]	; (d8374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8322:	681a      	ldr	r2, [r3, #0]
   d8324:	07d2      	lsls	r2, r2, #31
   d8326:	bf5c      	itt	pl
   d8328:	2201      	movpl	r2, #1
   d832a:	601a      	strpl	r2, [r3, #0]
   d832c:	4b12      	ldr	r3, [pc, #72]	; (d8378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d832e:	681a      	ldr	r2, [r3, #0]
   d8330:	07d0      	lsls	r0, r2, #31
   d8332:	bf5c      	itt	pl
   d8334:	2201      	movpl	r2, #1
   d8336:	601a      	strpl	r2, [r3, #0]
   d8338:	4b10      	ldr	r3, [pc, #64]	; (d837c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d833a:	681a      	ldr	r2, [r3, #0]
   d833c:	07d1      	lsls	r1, r2, #31
   d833e:	bf5c      	itt	pl
   d8340:	2201      	movpl	r2, #1
   d8342:	601a      	strpl	r2, [r3, #0]
   d8344:	4b0e      	ldr	r3, [pc, #56]	; (d8380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8346:	681a      	ldr	r2, [r3, #0]
   d8348:	07d2      	lsls	r2, r2, #31
   d834a:	bf5c      	itt	pl
   d834c:	2201      	movpl	r2, #1
   d834e:	601a      	strpl	r2, [r3, #0]
   d8350:	4770      	bx	lr
   d8352:	bf00      	nop
   d8354:	2003e79c 	.word	0x2003e79c
   d8358:	2003e798 	.word	0x2003e798
   d835c:	2003e794 	.word	0x2003e794
   d8360:	2003e790 	.word	0x2003e790
   d8364:	2003e78c 	.word	0x2003e78c
   d8368:	2003e788 	.word	0x2003e788
   d836c:	2003e784 	.word	0x2003e784
   d8370:	2003e780 	.word	0x2003e780
   d8374:	2003e77c 	.word	0x2003e77c
   d8378:	2003e778 	.word	0x2003e778
   d837c:	2003e774 	.word	0x2003e774
   d8380:	2003e770 	.word	0x2003e770

000d8384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8384:	4b24      	ldr	r3, [pc, #144]	; (d8418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8386:	681a      	ldr	r2, [r3, #0]
   d8388:	07d0      	lsls	r0, r2, #31
   d838a:	bf5c      	itt	pl
   d838c:	2201      	movpl	r2, #1
   d838e:	601a      	strpl	r2, [r3, #0]
   d8390:	4b22      	ldr	r3, [pc, #136]	; (d841c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8392:	681a      	ldr	r2, [r3, #0]
   d8394:	07d1      	lsls	r1, r2, #31
   d8396:	bf5c      	itt	pl
   d8398:	2201      	movpl	r2, #1
   d839a:	601a      	strpl	r2, [r3, #0]
   d839c:	4b20      	ldr	r3, [pc, #128]	; (d8420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d839e:	681a      	ldr	r2, [r3, #0]
   d83a0:	07d2      	lsls	r2, r2, #31
   d83a2:	bf5c      	itt	pl
   d83a4:	2201      	movpl	r2, #1
   d83a6:	601a      	strpl	r2, [r3, #0]
   d83a8:	4b1e      	ldr	r3, [pc, #120]	; (d8424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d83aa:	681a      	ldr	r2, [r3, #0]
   d83ac:	07d0      	lsls	r0, r2, #31
   d83ae:	bf5c      	itt	pl
   d83b0:	2201      	movpl	r2, #1
   d83b2:	601a      	strpl	r2, [r3, #0]
   d83b4:	4b1c      	ldr	r3, [pc, #112]	; (d8428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d83b6:	681a      	ldr	r2, [r3, #0]
   d83b8:	07d1      	lsls	r1, r2, #31
   d83ba:	bf5c      	itt	pl
   d83bc:	2201      	movpl	r2, #1
   d83be:	601a      	strpl	r2, [r3, #0]
   d83c0:	4b1a      	ldr	r3, [pc, #104]	; (d842c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d83c2:	681a      	ldr	r2, [r3, #0]
   d83c4:	07d2      	lsls	r2, r2, #31
   d83c6:	bf5c      	itt	pl
   d83c8:	2201      	movpl	r2, #1
   d83ca:	601a      	strpl	r2, [r3, #0]
   d83cc:	4b18      	ldr	r3, [pc, #96]	; (d8430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d83ce:	681a      	ldr	r2, [r3, #0]
   d83d0:	07d0      	lsls	r0, r2, #31
   d83d2:	bf5c      	itt	pl
   d83d4:	2201      	movpl	r2, #1
   d83d6:	601a      	strpl	r2, [r3, #0]
   d83d8:	4b16      	ldr	r3, [pc, #88]	; (d8434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d83da:	681a      	ldr	r2, [r3, #0]
   d83dc:	07d1      	lsls	r1, r2, #31
   d83de:	bf5c      	itt	pl
   d83e0:	2201      	movpl	r2, #1
   d83e2:	601a      	strpl	r2, [r3, #0]
   d83e4:	4b14      	ldr	r3, [pc, #80]	; (d8438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d83e6:	681a      	ldr	r2, [r3, #0]
   d83e8:	07d2      	lsls	r2, r2, #31
   d83ea:	bf5c      	itt	pl
   d83ec:	2201      	movpl	r2, #1
   d83ee:	601a      	strpl	r2, [r3, #0]
   d83f0:	4b12      	ldr	r3, [pc, #72]	; (d843c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d83f2:	681a      	ldr	r2, [r3, #0]
   d83f4:	07d0      	lsls	r0, r2, #31
   d83f6:	bf5c      	itt	pl
   d83f8:	2201      	movpl	r2, #1
   d83fa:	601a      	strpl	r2, [r3, #0]
   d83fc:	4b10      	ldr	r3, [pc, #64]	; (d8440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d83fe:	681a      	ldr	r2, [r3, #0]
   d8400:	07d1      	lsls	r1, r2, #31
   d8402:	bf5c      	itt	pl
   d8404:	2201      	movpl	r2, #1
   d8406:	601a      	strpl	r2, [r3, #0]
   d8408:	4b0e      	ldr	r3, [pc, #56]	; (d8444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d840a:	681a      	ldr	r2, [r3, #0]
   d840c:	07d2      	lsls	r2, r2, #31
   d840e:	bf5c      	itt	pl
   d8410:	2201      	movpl	r2, #1
   d8412:	601a      	strpl	r2, [r3, #0]
   d8414:	4770      	bx	lr
   d8416:	bf00      	nop
   d8418:	2003e7cc 	.word	0x2003e7cc
   d841c:	2003e7c8 	.word	0x2003e7c8
   d8420:	2003e7c4 	.word	0x2003e7c4
   d8424:	2003e7c0 	.word	0x2003e7c0
   d8428:	2003e7bc 	.word	0x2003e7bc
   d842c:	2003e7b8 	.word	0x2003e7b8
   d8430:	2003e7b4 	.word	0x2003e7b4
   d8434:	2003e7b0 	.word	0x2003e7b0
   d8438:	2003e7ac 	.word	0x2003e7ac
   d843c:	2003e7a8 	.word	0x2003e7a8
   d8440:	2003e7a4 	.word	0x2003e7a4
   d8444:	2003e7a0 	.word	0x2003e7a0

000d8448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8448:	4b18      	ldr	r3, [pc, #96]	; (d84ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d844a:	681a      	ldr	r2, [r3, #0]
   d844c:	07d1      	lsls	r1, r2, #31
   d844e:	bf5c      	itt	pl
   d8450:	2201      	movpl	r2, #1
   d8452:	601a      	strpl	r2, [r3, #0]
   d8454:	4b16      	ldr	r3, [pc, #88]	; (d84b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8456:	681a      	ldr	r2, [r3, #0]
   d8458:	07d2      	lsls	r2, r2, #31
   d845a:	bf5c      	itt	pl
   d845c:	2201      	movpl	r2, #1
   d845e:	601a      	strpl	r2, [r3, #0]
   d8460:	4b14      	ldr	r3, [pc, #80]	; (d84b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8462:	681a      	ldr	r2, [r3, #0]
   d8464:	07d0      	lsls	r0, r2, #31
   d8466:	bf5c      	itt	pl
   d8468:	2201      	movpl	r2, #1
   d846a:	601a      	strpl	r2, [r3, #0]
   d846c:	4b12      	ldr	r3, [pc, #72]	; (d84b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d846e:	681a      	ldr	r2, [r3, #0]
   d8470:	07d1      	lsls	r1, r2, #31
   d8472:	bf5c      	itt	pl
   d8474:	2201      	movpl	r2, #1
   d8476:	601a      	strpl	r2, [r3, #0]
   d8478:	4b10      	ldr	r3, [pc, #64]	; (d84bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d847a:	681a      	ldr	r2, [r3, #0]
   d847c:	07d2      	lsls	r2, r2, #31
   d847e:	bf5c      	itt	pl
   d8480:	2201      	movpl	r2, #1
   d8482:	601a      	strpl	r2, [r3, #0]
   d8484:	4b0e      	ldr	r3, [pc, #56]	; (d84c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8486:	681a      	ldr	r2, [r3, #0]
   d8488:	07d0      	lsls	r0, r2, #31
   d848a:	bf5c      	itt	pl
   d848c:	2201      	movpl	r2, #1
   d848e:	601a      	strpl	r2, [r3, #0]
   d8490:	4b0c      	ldr	r3, [pc, #48]	; (d84c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8492:	681a      	ldr	r2, [r3, #0]
   d8494:	07d1      	lsls	r1, r2, #31
   d8496:	bf5c      	itt	pl
   d8498:	2201      	movpl	r2, #1
   d849a:	601a      	strpl	r2, [r3, #0]
   d849c:	4b0a      	ldr	r3, [pc, #40]	; (d84c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d849e:	681a      	ldr	r2, [r3, #0]
   d84a0:	07d2      	lsls	r2, r2, #31
   d84a2:	bf5c      	itt	pl
   d84a4:	2201      	movpl	r2, #1
   d84a6:	601a      	strpl	r2, [r3, #0]
   d84a8:	4770      	bx	lr
   d84aa:	bf00      	nop
   d84ac:	2003e7ec 	.word	0x2003e7ec
   d84b0:	2003e7e8 	.word	0x2003e7e8
   d84b4:	2003e7e4 	.word	0x2003e7e4
   d84b8:	2003e7e0 	.word	0x2003e7e0
   d84bc:	2003e7dc 	.word	0x2003e7dc
   d84c0:	2003e7d8 	.word	0x2003e7d8
   d84c4:	2003e7d4 	.word	0x2003e7d4
   d84c8:	2003e7d0 	.word	0x2003e7d0

000d84cc <sqrt>:
   d84cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d84d0:	ed2d 8b02 	vpush	{d8}
   d84d4:	b08b      	sub	sp, #44	; 0x2c
   d84d6:	ec55 4b10 	vmov	r4, r5, d0
   d84da:	f000 f857 	bl	d858c <__ieee754_sqrt>
   d84de:	4b29      	ldr	r3, [pc, #164]	; (d8584 <sqrt+0xb8>)
   d84e0:	eeb0 8a40 	vmov.f32	s16, s0
   d84e4:	eef0 8a60 	vmov.f32	s17, s1
   d84e8:	f993 6000 	ldrsb.w	r6, [r3]
   d84ec:	1c73      	adds	r3, r6, #1
   d84ee:	d012      	beq.n	d8516 <sqrt+0x4a>
   d84f0:	4622      	mov	r2, r4
   d84f2:	462b      	mov	r3, r5
   d84f4:	4620      	mov	r0, r4
   d84f6:	4629      	mov	r1, r5
   d84f8:	f000 fd6c 	bl	d8fd4 <__aeabi_dcmpun>
   d84fc:	4607      	mov	r7, r0
   d84fe:	b950      	cbnz	r0, d8516 <sqrt+0x4a>
   d8500:	f04f 0800 	mov.w	r8, #0
   d8504:	f04f 0900 	mov.w	r9, #0
   d8508:	4620      	mov	r0, r4
   d850a:	4629      	mov	r1, r5
   d850c:	4642      	mov	r2, r8
   d850e:	464b      	mov	r3, r9
   d8510:	f000 fd38 	bl	d8f84 <__aeabi_dcmplt>
   d8514:	b940      	cbnz	r0, d8528 <sqrt+0x5c>
   d8516:	eeb0 0a48 	vmov.f32	s0, s16
   d851a:	eef0 0a68 	vmov.f32	s1, s17
   d851e:	b00b      	add	sp, #44	; 0x2c
   d8520:	ecbd 8b02 	vpop	{d8}
   d8524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8528:	4b17      	ldr	r3, [pc, #92]	; (d8588 <sqrt+0xbc>)
   d852a:	9708      	str	r7, [sp, #32]
   d852c:	2201      	movs	r2, #1
   d852e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8532:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d8536:	e88d 000c 	stmia.w	sp, {r2, r3}
   d853a:	b1b6      	cbz	r6, d856a <sqrt+0x9e>
   d853c:	4642      	mov	r2, r8
   d853e:	464b      	mov	r3, r9
   d8540:	4640      	mov	r0, r8
   d8542:	4649      	mov	r1, r9
   d8544:	f000 fbd6 	bl	d8cf4 <__aeabi_ddiv>
   d8548:	2e02      	cmp	r6, #2
   d854a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d854e:	d10e      	bne.n	d856e <sqrt+0xa2>
   d8550:	f7fe fc44 	bl	d6ddc <__errno>
   d8554:	2321      	movs	r3, #33	; 0x21
   d8556:	6003      	str	r3, [r0, #0]
   d8558:	9b08      	ldr	r3, [sp, #32]
   d855a:	b973      	cbnz	r3, d857a <sqrt+0xae>
   d855c:	ed9d 0b06 	vldr	d0, [sp, #24]
   d8560:	b00b      	add	sp, #44	; 0x2c
   d8562:	ecbd 8b02 	vpop	{d8}
   d8566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d856a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d856e:	4668      	mov	r0, sp
   d8570:	f000 f8dc 	bl	d872c <matherr>
   d8574:	2800      	cmp	r0, #0
   d8576:	d1ef      	bne.n	d8558 <sqrt+0x8c>
   d8578:	e7ea      	b.n	d8550 <sqrt+0x84>
   d857a:	f7fe fc2f 	bl	d6ddc <__errno>
   d857e:	9b08      	ldr	r3, [sp, #32]
   d8580:	6003      	str	r3, [r0, #0]
   d8582:	e7eb      	b.n	d855c <sqrt+0x90>
   d8584:	2003be1c 	.word	0x2003be1c
   d8588:	000d9758 	.word	0x000d9758

000d858c <__ieee754_sqrt>:
   d858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8590:	4965      	ldr	r1, [pc, #404]	; (d8728 <__ieee754_sqrt+0x19c>)
   d8592:	ec55 4b10 	vmov	r4, r5, d0
   d8596:	460e      	mov	r6, r1
   d8598:	4029      	ands	r1, r5
   d859a:	42b1      	cmp	r1, r6
   d859c:	f000 8097 	beq.w	d86ce <__ieee754_sqrt+0x142>
   d85a0:	2d00      	cmp	r5, #0
   d85a2:	462b      	mov	r3, r5
   d85a4:	ee10 2a10 	vmov	r2, s0
   d85a8:	dd74      	ble.n	d8694 <__ieee754_sqrt+0x108>
   d85aa:	152f      	asrs	r7, r5, #20
   d85ac:	d07f      	beq.n	d86ae <__ieee754_sqrt+0x122>
   d85ae:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d85b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d85b6:	07f9      	lsls	r1, r7, #31
   d85b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d85bc:	d465      	bmi.n	d868a <__ieee754_sqrt+0xfe>
   d85be:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d85c2:	2600      	movs	r6, #0
   d85c4:	440b      	add	r3, r1
   d85c6:	107f      	asrs	r7, r7, #1
   d85c8:	0052      	lsls	r2, r2, #1
   d85ca:	46b6      	mov	lr, r6
   d85cc:	2016      	movs	r0, #22
   d85ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d85d2:	eb0e 0401 	add.w	r4, lr, r1
   d85d6:	429c      	cmp	r4, r3
   d85d8:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d85dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d85e0:	dc03      	bgt.n	d85ea <__ieee754_sqrt+0x5e>
   d85e2:	1b1b      	subs	r3, r3, r4
   d85e4:	eb04 0e01 	add.w	lr, r4, r1
   d85e8:	440e      	add	r6, r1
   d85ea:	3801      	subs	r0, #1
   d85ec:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d85f0:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d85f4:	d1ed      	bne.n	d85d2 <__ieee754_sqrt+0x46>
   d85f6:	4684      	mov	ip, r0
   d85f8:	2420      	movs	r4, #32
   d85fa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d85fe:	e009      	b.n	d8614 <__ieee754_sqrt+0x88>
   d8600:	d020      	beq.n	d8644 <__ieee754_sqrt+0xb8>
   d8602:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d8606:	3c01      	subs	r4, #1
   d8608:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d860c:	442b      	add	r3, r5
   d860e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8612:	d020      	beq.n	d8656 <__ieee754_sqrt+0xca>
   d8614:	459e      	cmp	lr, r3
   d8616:	eb01 050c 	add.w	r5, r1, ip
   d861a:	daf1      	bge.n	d8600 <__ieee754_sqrt+0x74>
   d861c:	2d00      	cmp	r5, #0
   d861e:	eb05 0c01 	add.w	ip, r5, r1
   d8622:	db09      	blt.n	d8638 <__ieee754_sqrt+0xac>
   d8624:	46f0      	mov	r8, lr
   d8626:	4295      	cmp	r5, r2
   d8628:	ebce 0303 	rsb	r3, lr, r3
   d862c:	d900      	bls.n	d8630 <__ieee754_sqrt+0xa4>
   d862e:	3b01      	subs	r3, #1
   d8630:	1b52      	subs	r2, r2, r5
   d8632:	4408      	add	r0, r1
   d8634:	46c6      	mov	lr, r8
   d8636:	e7e4      	b.n	d8602 <__ieee754_sqrt+0x76>
   d8638:	f1bc 0f00 	cmp.w	ip, #0
   d863c:	dbf2      	blt.n	d8624 <__ieee754_sqrt+0x98>
   d863e:	f10e 0801 	add.w	r8, lr, #1
   d8642:	e7f0      	b.n	d8626 <__ieee754_sqrt+0x9a>
   d8644:	4295      	cmp	r5, r2
   d8646:	d81e      	bhi.n	d8686 <__ieee754_sqrt+0xfa>
   d8648:	2d00      	cmp	r5, #0
   d864a:	eb05 0c01 	add.w	ip, r5, r1
   d864e:	db50      	blt.n	d86f2 <__ieee754_sqrt+0x166>
   d8650:	4698      	mov	r8, r3
   d8652:	2300      	movs	r3, #0
   d8654:	e7ec      	b.n	d8630 <__ieee754_sqrt+0xa4>
   d8656:	4313      	orrs	r3, r2
   d8658:	d004      	beq.n	d8664 <__ieee754_sqrt+0xd8>
   d865a:	1c42      	adds	r2, r0, #1
   d865c:	d04d      	beq.n	d86fa <__ieee754_sqrt+0x16e>
   d865e:	f000 0301 	and.w	r3, r0, #1
   d8662:	4418      	add	r0, r3
   d8664:	0840      	lsrs	r0, r0, #1
   d8666:	1071      	asrs	r1, r6, #1
   d8668:	07f3      	lsls	r3, r6, #31
   d866a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d866e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8672:	bf48      	it	mi
   d8674:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d8678:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d867c:	4602      	mov	r2, r0
   d867e:	ec43 2b10 	vmov	d0, r2, r3
   d8682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8686:	4673      	mov	r3, lr
   d8688:	e7bb      	b.n	d8602 <__ieee754_sqrt+0x76>
   d868a:	005b      	lsls	r3, r3, #1
   d868c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d8690:	0052      	lsls	r2, r2, #1
   d8692:	e794      	b.n	d85be <__ieee754_sqrt+0x32>
   d8694:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d8698:	4321      	orrs	r1, r4
   d869a:	d028      	beq.n	d86ee <__ieee754_sqrt+0x162>
   d869c:	bbad      	cbnz	r5, d870a <__ieee754_sqrt+0x17e>
   d869e:	462f      	mov	r7, r5
   d86a0:	0ad3      	lsrs	r3, r2, #11
   d86a2:	3f15      	subs	r7, #21
   d86a4:	0552      	lsls	r2, r2, #21
   d86a6:	2b00      	cmp	r3, #0
   d86a8:	d0fa      	beq.n	d86a0 <__ieee754_sqrt+0x114>
   d86aa:	02dd      	lsls	r5, r3, #11
   d86ac:	d428      	bmi.n	d8700 <__ieee754_sqrt+0x174>
   d86ae:	2100      	movs	r1, #0
   d86b0:	e000      	b.n	d86b4 <__ieee754_sqrt+0x128>
   d86b2:	4601      	mov	r1, r0
   d86b4:	005b      	lsls	r3, r3, #1
   d86b6:	02dc      	lsls	r4, r3, #11
   d86b8:	f101 0001 	add.w	r0, r1, #1
   d86bc:	d5f9      	bpl.n	d86b2 <__ieee754_sqrt+0x126>
   d86be:	f1c0 0420 	rsb	r4, r0, #32
   d86c2:	fa22 f404 	lsr.w	r4, r2, r4
   d86c6:	4323      	orrs	r3, r4
   d86c8:	1a7f      	subs	r7, r7, r1
   d86ca:	4082      	lsls	r2, r0
   d86cc:	e76f      	b.n	d85ae <__ieee754_sqrt+0x22>
   d86ce:	ee10 2a10 	vmov	r2, s0
   d86d2:	462b      	mov	r3, r5
   d86d4:	ee10 0a10 	vmov	r0, s0
   d86d8:	4629      	mov	r1, r5
   d86da:	f000 f9e1 	bl	d8aa0 <__aeabi_dmul>
   d86de:	4622      	mov	r2, r4
   d86e0:	462b      	mov	r3, r5
   d86e2:	f000 f82b 	bl	d873c <__adddf3>
   d86e6:	ec41 0b10 	vmov	d0, r0, r1
   d86ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d86ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d86f2:	f1bc 0f00 	cmp.w	ip, #0
   d86f6:	daa2      	bge.n	d863e <__ieee754_sqrt+0xb2>
   d86f8:	e7aa      	b.n	d8650 <__ieee754_sqrt+0xc4>
   d86fa:	3601      	adds	r6, #1
   d86fc:	4620      	mov	r0, r4
   d86fe:	e7b2      	b.n	d8666 <__ieee754_sqrt+0xda>
   d8700:	2420      	movs	r4, #32
   d8702:	f04f 31ff 	mov.w	r1, #4294967295
   d8706:	2000      	movs	r0, #0
   d8708:	e7db      	b.n	d86c2 <__ieee754_sqrt+0x136>
   d870a:	ee10 2a10 	vmov	r2, s0
   d870e:	462b      	mov	r3, r5
   d8710:	4620      	mov	r0, r4
   d8712:	4629      	mov	r1, r5
   d8714:	f000 f810 	bl	d8738 <__aeabi_dsub>
   d8718:	4602      	mov	r2, r0
   d871a:	460b      	mov	r3, r1
   d871c:	f000 faea 	bl	d8cf4 <__aeabi_ddiv>
   d8720:	ec41 0b10 	vmov	d0, r0, r1
   d8724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8728:	7ff00000 	.word	0x7ff00000

000d872c <matherr>:
   d872c:	2000      	movs	r0, #0
   d872e:	4770      	bx	lr

000d8730 <__aeabi_drsub>:
   d8730:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8734:	e002      	b.n	d873c <__adddf3>
   d8736:	bf00      	nop

000d8738 <__aeabi_dsub>:
   d8738:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d873c <__adddf3>:
   d873c:	b530      	push	{r4, r5, lr}
   d873e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8742:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8746:	ea94 0f05 	teq	r4, r5
   d874a:	bf08      	it	eq
   d874c:	ea90 0f02 	teqeq	r0, r2
   d8750:	bf1f      	itttt	ne
   d8752:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8756:	ea55 0c02 	orrsne.w	ip, r5, r2
   d875a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d875e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8762:	f000 80e2 	beq.w	d892a <__adddf3+0x1ee>
   d8766:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d876a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d876e:	bfb8      	it	lt
   d8770:	426d      	neglt	r5, r5
   d8772:	dd0c      	ble.n	d878e <__adddf3+0x52>
   d8774:	442c      	add	r4, r5
   d8776:	ea80 0202 	eor.w	r2, r0, r2
   d877a:	ea81 0303 	eor.w	r3, r1, r3
   d877e:	ea82 0000 	eor.w	r0, r2, r0
   d8782:	ea83 0101 	eor.w	r1, r3, r1
   d8786:	ea80 0202 	eor.w	r2, r0, r2
   d878a:	ea81 0303 	eor.w	r3, r1, r3
   d878e:	2d36      	cmp	r5, #54	; 0x36
   d8790:	bf88      	it	hi
   d8792:	bd30      	pophi	{r4, r5, pc}
   d8794:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8798:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d879c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d87a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d87a4:	d002      	beq.n	d87ac <__adddf3+0x70>
   d87a6:	4240      	negs	r0, r0
   d87a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d87ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d87b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d87b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d87b8:	d002      	beq.n	d87c0 <__adddf3+0x84>
   d87ba:	4252      	negs	r2, r2
   d87bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d87c0:	ea94 0f05 	teq	r4, r5
   d87c4:	f000 80a7 	beq.w	d8916 <__adddf3+0x1da>
   d87c8:	f1a4 0401 	sub.w	r4, r4, #1
   d87cc:	f1d5 0e20 	rsbs	lr, r5, #32
   d87d0:	db0d      	blt.n	d87ee <__adddf3+0xb2>
   d87d2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d87d6:	fa22 f205 	lsr.w	r2, r2, r5
   d87da:	1880      	adds	r0, r0, r2
   d87dc:	f141 0100 	adc.w	r1, r1, #0
   d87e0:	fa03 f20e 	lsl.w	r2, r3, lr
   d87e4:	1880      	adds	r0, r0, r2
   d87e6:	fa43 f305 	asr.w	r3, r3, r5
   d87ea:	4159      	adcs	r1, r3
   d87ec:	e00e      	b.n	d880c <__adddf3+0xd0>
   d87ee:	f1a5 0520 	sub.w	r5, r5, #32
   d87f2:	f10e 0e20 	add.w	lr, lr, #32
   d87f6:	2a01      	cmp	r2, #1
   d87f8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d87fc:	bf28      	it	cs
   d87fe:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8802:	fa43 f305 	asr.w	r3, r3, r5
   d8806:	18c0      	adds	r0, r0, r3
   d8808:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d880c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8810:	d507      	bpl.n	d8822 <__adddf3+0xe6>
   d8812:	f04f 0e00 	mov.w	lr, #0
   d8816:	f1dc 0c00 	rsbs	ip, ip, #0
   d881a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d881e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8822:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8826:	d31b      	bcc.n	d8860 <__adddf3+0x124>
   d8828:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d882c:	d30c      	bcc.n	d8848 <__adddf3+0x10c>
   d882e:	0849      	lsrs	r1, r1, #1
   d8830:	ea5f 0030 	movs.w	r0, r0, rrx
   d8834:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8838:	f104 0401 	add.w	r4, r4, #1
   d883c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8840:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8844:	f080 809a 	bcs.w	d897c <__adddf3+0x240>
   d8848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d884c:	bf08      	it	eq
   d884e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8852:	f150 0000 	adcs.w	r0, r0, #0
   d8856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d885a:	ea41 0105 	orr.w	r1, r1, r5
   d885e:	bd30      	pop	{r4, r5, pc}
   d8860:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8864:	4140      	adcs	r0, r0
   d8866:	eb41 0101 	adc.w	r1, r1, r1
   d886a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d886e:	f1a4 0401 	sub.w	r4, r4, #1
   d8872:	d1e9      	bne.n	d8848 <__adddf3+0x10c>
   d8874:	f091 0f00 	teq	r1, #0
   d8878:	bf04      	itt	eq
   d887a:	4601      	moveq	r1, r0
   d887c:	2000      	moveq	r0, #0
   d887e:	fab1 f381 	clz	r3, r1
   d8882:	bf08      	it	eq
   d8884:	3320      	addeq	r3, #32
   d8886:	f1a3 030b 	sub.w	r3, r3, #11
   d888a:	f1b3 0220 	subs.w	r2, r3, #32
   d888e:	da0c      	bge.n	d88aa <__adddf3+0x16e>
   d8890:	320c      	adds	r2, #12
   d8892:	dd08      	ble.n	d88a6 <__adddf3+0x16a>
   d8894:	f102 0c14 	add.w	ip, r2, #20
   d8898:	f1c2 020c 	rsb	r2, r2, #12
   d889c:	fa01 f00c 	lsl.w	r0, r1, ip
   d88a0:	fa21 f102 	lsr.w	r1, r1, r2
   d88a4:	e00c      	b.n	d88c0 <__adddf3+0x184>
   d88a6:	f102 0214 	add.w	r2, r2, #20
   d88aa:	bfd8      	it	le
   d88ac:	f1c2 0c20 	rsble	ip, r2, #32
   d88b0:	fa01 f102 	lsl.w	r1, r1, r2
   d88b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d88b8:	bfdc      	itt	le
   d88ba:	ea41 010c 	orrle.w	r1, r1, ip
   d88be:	4090      	lslle	r0, r2
   d88c0:	1ae4      	subs	r4, r4, r3
   d88c2:	bfa2      	ittt	ge
   d88c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d88c8:	4329      	orrge	r1, r5
   d88ca:	bd30      	popge	{r4, r5, pc}
   d88cc:	ea6f 0404 	mvn.w	r4, r4
   d88d0:	3c1f      	subs	r4, #31
   d88d2:	da1c      	bge.n	d890e <__adddf3+0x1d2>
   d88d4:	340c      	adds	r4, #12
   d88d6:	dc0e      	bgt.n	d88f6 <__adddf3+0x1ba>
   d88d8:	f104 0414 	add.w	r4, r4, #20
   d88dc:	f1c4 0220 	rsb	r2, r4, #32
   d88e0:	fa20 f004 	lsr.w	r0, r0, r4
   d88e4:	fa01 f302 	lsl.w	r3, r1, r2
   d88e8:	ea40 0003 	orr.w	r0, r0, r3
   d88ec:	fa21 f304 	lsr.w	r3, r1, r4
   d88f0:	ea45 0103 	orr.w	r1, r5, r3
   d88f4:	bd30      	pop	{r4, r5, pc}
   d88f6:	f1c4 040c 	rsb	r4, r4, #12
   d88fa:	f1c4 0220 	rsb	r2, r4, #32
   d88fe:	fa20 f002 	lsr.w	r0, r0, r2
   d8902:	fa01 f304 	lsl.w	r3, r1, r4
   d8906:	ea40 0003 	orr.w	r0, r0, r3
   d890a:	4629      	mov	r1, r5
   d890c:	bd30      	pop	{r4, r5, pc}
   d890e:	fa21 f004 	lsr.w	r0, r1, r4
   d8912:	4629      	mov	r1, r5
   d8914:	bd30      	pop	{r4, r5, pc}
   d8916:	f094 0f00 	teq	r4, #0
   d891a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d891e:	bf06      	itte	eq
   d8920:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8924:	3401      	addeq	r4, #1
   d8926:	3d01      	subne	r5, #1
   d8928:	e74e      	b.n	d87c8 <__adddf3+0x8c>
   d892a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d892e:	bf18      	it	ne
   d8930:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8934:	d029      	beq.n	d898a <__adddf3+0x24e>
   d8936:	ea94 0f05 	teq	r4, r5
   d893a:	bf08      	it	eq
   d893c:	ea90 0f02 	teqeq	r0, r2
   d8940:	d005      	beq.n	d894e <__adddf3+0x212>
   d8942:	ea54 0c00 	orrs.w	ip, r4, r0
   d8946:	bf04      	itt	eq
   d8948:	4619      	moveq	r1, r3
   d894a:	4610      	moveq	r0, r2
   d894c:	bd30      	pop	{r4, r5, pc}
   d894e:	ea91 0f03 	teq	r1, r3
   d8952:	bf1e      	ittt	ne
   d8954:	2100      	movne	r1, #0
   d8956:	2000      	movne	r0, #0
   d8958:	bd30      	popne	{r4, r5, pc}
   d895a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d895e:	d105      	bne.n	d896c <__adddf3+0x230>
   d8960:	0040      	lsls	r0, r0, #1
   d8962:	4149      	adcs	r1, r1
   d8964:	bf28      	it	cs
   d8966:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d896a:	bd30      	pop	{r4, r5, pc}
   d896c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8970:	bf3c      	itt	cc
   d8972:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8976:	bd30      	popcc	{r4, r5, pc}
   d8978:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d897c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8980:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8984:	f04f 0000 	mov.w	r0, #0
   d8988:	bd30      	pop	{r4, r5, pc}
   d898a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d898e:	bf1a      	itte	ne
   d8990:	4619      	movne	r1, r3
   d8992:	4610      	movne	r0, r2
   d8994:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8998:	bf1c      	itt	ne
   d899a:	460b      	movne	r3, r1
   d899c:	4602      	movne	r2, r0
   d899e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d89a2:	bf06      	itte	eq
   d89a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d89a8:	ea91 0f03 	teqeq	r1, r3
   d89ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d89b0:	bd30      	pop	{r4, r5, pc}
   d89b2:	bf00      	nop

000d89b4 <__aeabi_ui2d>:
   d89b4:	f090 0f00 	teq	r0, #0
   d89b8:	bf04      	itt	eq
   d89ba:	2100      	moveq	r1, #0
   d89bc:	4770      	bxeq	lr
   d89be:	b530      	push	{r4, r5, lr}
   d89c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89c8:	f04f 0500 	mov.w	r5, #0
   d89cc:	f04f 0100 	mov.w	r1, #0
   d89d0:	e750      	b.n	d8874 <__adddf3+0x138>
   d89d2:	bf00      	nop

000d89d4 <__aeabi_i2d>:
   d89d4:	f090 0f00 	teq	r0, #0
   d89d8:	bf04      	itt	eq
   d89da:	2100      	moveq	r1, #0
   d89dc:	4770      	bxeq	lr
   d89de:	b530      	push	{r4, r5, lr}
   d89e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d89ec:	bf48      	it	mi
   d89ee:	4240      	negmi	r0, r0
   d89f0:	f04f 0100 	mov.w	r1, #0
   d89f4:	e73e      	b.n	d8874 <__adddf3+0x138>
   d89f6:	bf00      	nop

000d89f8 <__aeabi_f2d>:
   d89f8:	0042      	lsls	r2, r0, #1
   d89fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d89fe:	ea4f 0131 	mov.w	r1, r1, rrx
   d8a02:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8a06:	bf1f      	itttt	ne
   d8a08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8a0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8a10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8a14:	4770      	bxne	lr
   d8a16:	f092 0f00 	teq	r2, #0
   d8a1a:	bf14      	ite	ne
   d8a1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8a20:	4770      	bxeq	lr
   d8a22:	b530      	push	{r4, r5, lr}
   d8a24:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8a28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8a30:	e720      	b.n	d8874 <__adddf3+0x138>
   d8a32:	bf00      	nop

000d8a34 <__aeabi_ul2d>:
   d8a34:	ea50 0201 	orrs.w	r2, r0, r1
   d8a38:	bf08      	it	eq
   d8a3a:	4770      	bxeq	lr
   d8a3c:	b530      	push	{r4, r5, lr}
   d8a3e:	f04f 0500 	mov.w	r5, #0
   d8a42:	e00a      	b.n	d8a5a <__aeabi_l2d+0x16>

000d8a44 <__aeabi_l2d>:
   d8a44:	ea50 0201 	orrs.w	r2, r0, r1
   d8a48:	bf08      	it	eq
   d8a4a:	4770      	bxeq	lr
   d8a4c:	b530      	push	{r4, r5, lr}
   d8a4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8a52:	d502      	bpl.n	d8a5a <__aeabi_l2d+0x16>
   d8a54:	4240      	negs	r0, r0
   d8a56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8a66:	f43f aedc 	beq.w	d8822 <__adddf3+0xe6>
   d8a6a:	f04f 0203 	mov.w	r2, #3
   d8a6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a72:	bf18      	it	ne
   d8a74:	3203      	addne	r2, #3
   d8a76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a7a:	bf18      	it	ne
   d8a7c:	3203      	addne	r2, #3
   d8a7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8a82:	f1c2 0320 	rsb	r3, r2, #32
   d8a86:	fa00 fc03 	lsl.w	ip, r0, r3
   d8a8a:	fa20 f002 	lsr.w	r0, r0, r2
   d8a8e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8a92:	ea40 000e 	orr.w	r0, r0, lr
   d8a96:	fa21 f102 	lsr.w	r1, r1, r2
   d8a9a:	4414      	add	r4, r2
   d8a9c:	e6c1      	b.n	d8822 <__adddf3+0xe6>
   d8a9e:	bf00      	nop

000d8aa0 <__aeabi_dmul>:
   d8aa0:	b570      	push	{r4, r5, r6, lr}
   d8aa2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8aa6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8aaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8aae:	bf1d      	ittte	ne
   d8ab0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ab4:	ea94 0f0c 	teqne	r4, ip
   d8ab8:	ea95 0f0c 	teqne	r5, ip
   d8abc:	f000 f8de 	bleq	d8c7c <__aeabi_dmul+0x1dc>
   d8ac0:	442c      	add	r4, r5
   d8ac2:	ea81 0603 	eor.w	r6, r1, r3
   d8ac6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8aca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8ace:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8ad2:	bf18      	it	ne
   d8ad4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8adc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8ae0:	d038      	beq.n	d8b54 <__aeabi_dmul+0xb4>
   d8ae2:	fba0 ce02 	umull	ip, lr, r0, r2
   d8ae6:	f04f 0500 	mov.w	r5, #0
   d8aea:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8aee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8af2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8af6:	f04f 0600 	mov.w	r6, #0
   d8afa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8afe:	f09c 0f00 	teq	ip, #0
   d8b02:	bf18      	it	ne
   d8b04:	f04e 0e01 	orrne.w	lr, lr, #1
   d8b08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8b0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8b10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8b14:	d204      	bcs.n	d8b20 <__aeabi_dmul+0x80>
   d8b16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8b1a:	416d      	adcs	r5, r5
   d8b1c:	eb46 0606 	adc.w	r6, r6, r6
   d8b20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8b24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8b28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8b2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8b30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8b34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8b38:	bf88      	it	hi
   d8b3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8b3e:	d81e      	bhi.n	d8b7e <__aeabi_dmul+0xde>
   d8b40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8b44:	bf08      	it	eq
   d8b46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8b4a:	f150 0000 	adcs.w	r0, r0, #0
   d8b4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8b52:	bd70      	pop	{r4, r5, r6, pc}
   d8b54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8b58:	ea46 0101 	orr.w	r1, r6, r1
   d8b5c:	ea40 0002 	orr.w	r0, r0, r2
   d8b60:	ea81 0103 	eor.w	r1, r1, r3
   d8b64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8b68:	bfc2      	ittt	gt
   d8b6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8b6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8b72:	bd70      	popgt	{r4, r5, r6, pc}
   d8b74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b78:	f04f 0e00 	mov.w	lr, #0
   d8b7c:	3c01      	subs	r4, #1
   d8b7e:	f300 80ab 	bgt.w	d8cd8 <__aeabi_dmul+0x238>
   d8b82:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8b86:	bfde      	ittt	le
   d8b88:	2000      	movle	r0, #0
   d8b8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8b8e:	bd70      	pople	{r4, r5, r6, pc}
   d8b90:	f1c4 0400 	rsb	r4, r4, #0
   d8b94:	3c20      	subs	r4, #32
   d8b96:	da35      	bge.n	d8c04 <__aeabi_dmul+0x164>
   d8b98:	340c      	adds	r4, #12
   d8b9a:	dc1b      	bgt.n	d8bd4 <__aeabi_dmul+0x134>
   d8b9c:	f104 0414 	add.w	r4, r4, #20
   d8ba0:	f1c4 0520 	rsb	r5, r4, #32
   d8ba4:	fa00 f305 	lsl.w	r3, r0, r5
   d8ba8:	fa20 f004 	lsr.w	r0, r0, r4
   d8bac:	fa01 f205 	lsl.w	r2, r1, r5
   d8bb0:	ea40 0002 	orr.w	r0, r0, r2
   d8bb4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8bb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8bbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8bc0:	fa21 f604 	lsr.w	r6, r1, r4
   d8bc4:	eb42 0106 	adc.w	r1, r2, r6
   d8bc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8bcc:	bf08      	it	eq
   d8bce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8bd2:	bd70      	pop	{r4, r5, r6, pc}
   d8bd4:	f1c4 040c 	rsb	r4, r4, #12
   d8bd8:	f1c4 0520 	rsb	r5, r4, #32
   d8bdc:	fa00 f304 	lsl.w	r3, r0, r4
   d8be0:	fa20 f005 	lsr.w	r0, r0, r5
   d8be4:	fa01 f204 	lsl.w	r2, r1, r4
   d8be8:	ea40 0002 	orr.w	r0, r0, r2
   d8bec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8bf0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8bf4:	f141 0100 	adc.w	r1, r1, #0
   d8bf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8bfc:	bf08      	it	eq
   d8bfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c02:	bd70      	pop	{r4, r5, r6, pc}
   d8c04:	f1c4 0520 	rsb	r5, r4, #32
   d8c08:	fa00 f205 	lsl.w	r2, r0, r5
   d8c0c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8c10:	fa20 f304 	lsr.w	r3, r0, r4
   d8c14:	fa01 f205 	lsl.w	r2, r1, r5
   d8c18:	ea43 0302 	orr.w	r3, r3, r2
   d8c1c:	fa21 f004 	lsr.w	r0, r1, r4
   d8c20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c24:	fa21 f204 	lsr.w	r2, r1, r4
   d8c28:	ea20 0002 	bic.w	r0, r0, r2
   d8c2c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8c30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c34:	bf08      	it	eq
   d8c36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c3a:	bd70      	pop	{r4, r5, r6, pc}
   d8c3c:	f094 0f00 	teq	r4, #0
   d8c40:	d10f      	bne.n	d8c62 <__aeabi_dmul+0x1c2>
   d8c42:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8c46:	0040      	lsls	r0, r0, #1
   d8c48:	eb41 0101 	adc.w	r1, r1, r1
   d8c4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8c50:	bf08      	it	eq
   d8c52:	3c01      	subeq	r4, #1
   d8c54:	d0f7      	beq.n	d8c46 <__aeabi_dmul+0x1a6>
   d8c56:	ea41 0106 	orr.w	r1, r1, r6
   d8c5a:	f095 0f00 	teq	r5, #0
   d8c5e:	bf18      	it	ne
   d8c60:	4770      	bxne	lr
   d8c62:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8c66:	0052      	lsls	r2, r2, #1
   d8c68:	eb43 0303 	adc.w	r3, r3, r3
   d8c6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8c70:	bf08      	it	eq
   d8c72:	3d01      	subeq	r5, #1
   d8c74:	d0f7      	beq.n	d8c66 <__aeabi_dmul+0x1c6>
   d8c76:	ea43 0306 	orr.w	r3, r3, r6
   d8c7a:	4770      	bx	lr
   d8c7c:	ea94 0f0c 	teq	r4, ip
   d8c80:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8c84:	bf18      	it	ne
   d8c86:	ea95 0f0c 	teqne	r5, ip
   d8c8a:	d00c      	beq.n	d8ca6 <__aeabi_dmul+0x206>
   d8c8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c90:	bf18      	it	ne
   d8c92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c96:	d1d1      	bne.n	d8c3c <__aeabi_dmul+0x19c>
   d8c98:	ea81 0103 	eor.w	r1, r1, r3
   d8c9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ca0:	f04f 0000 	mov.w	r0, #0
   d8ca4:	bd70      	pop	{r4, r5, r6, pc}
   d8ca6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8caa:	bf06      	itte	eq
   d8cac:	4610      	moveq	r0, r2
   d8cae:	4619      	moveq	r1, r3
   d8cb0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8cb4:	d019      	beq.n	d8cea <__aeabi_dmul+0x24a>
   d8cb6:	ea94 0f0c 	teq	r4, ip
   d8cba:	d102      	bne.n	d8cc2 <__aeabi_dmul+0x222>
   d8cbc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8cc0:	d113      	bne.n	d8cea <__aeabi_dmul+0x24a>
   d8cc2:	ea95 0f0c 	teq	r5, ip
   d8cc6:	d105      	bne.n	d8cd4 <__aeabi_dmul+0x234>
   d8cc8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8ccc:	bf1c      	itt	ne
   d8cce:	4610      	movne	r0, r2
   d8cd0:	4619      	movne	r1, r3
   d8cd2:	d10a      	bne.n	d8cea <__aeabi_dmul+0x24a>
   d8cd4:	ea81 0103 	eor.w	r1, r1, r3
   d8cd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8cdc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8ce0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ce4:	f04f 0000 	mov.w	r0, #0
   d8ce8:	bd70      	pop	{r4, r5, r6, pc}
   d8cea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8cee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8cf2:	bd70      	pop	{r4, r5, r6, pc}

000d8cf4 <__aeabi_ddiv>:
   d8cf4:	b570      	push	{r4, r5, r6, lr}
   d8cf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8cfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8cfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8d02:	bf1d      	ittte	ne
   d8d04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8d08:	ea94 0f0c 	teqne	r4, ip
   d8d0c:	ea95 0f0c 	teqne	r5, ip
   d8d10:	f000 f8a7 	bleq	d8e62 <__aeabi_ddiv+0x16e>
   d8d14:	eba4 0405 	sub.w	r4, r4, r5
   d8d18:	ea81 0e03 	eor.w	lr, r1, r3
   d8d1c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8d20:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8d24:	f000 8088 	beq.w	d8e38 <__aeabi_ddiv+0x144>
   d8d28:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8d2c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8d30:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8d34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8d38:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8d3c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8d40:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8d44:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8d48:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8d4c:	429d      	cmp	r5, r3
   d8d4e:	bf08      	it	eq
   d8d50:	4296      	cmpeq	r6, r2
   d8d52:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8d56:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8d5a:	d202      	bcs.n	d8d62 <__aeabi_ddiv+0x6e>
   d8d5c:	085b      	lsrs	r3, r3, #1
   d8d5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d62:	1ab6      	subs	r6, r6, r2
   d8d64:	eb65 0503 	sbc.w	r5, r5, r3
   d8d68:	085b      	lsrs	r3, r3, #1
   d8d6a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8d72:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8d76:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d7e:	bf22      	ittt	cs
   d8d80:	1ab6      	subcs	r6, r6, r2
   d8d82:	4675      	movcs	r5, lr
   d8d84:	ea40 000c 	orrcs.w	r0, r0, ip
   d8d88:	085b      	lsrs	r3, r3, #1
   d8d8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d96:	bf22      	ittt	cs
   d8d98:	1ab6      	subcs	r6, r6, r2
   d8d9a:	4675      	movcs	r5, lr
   d8d9c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8da0:	085b      	lsrs	r3, r3, #1
   d8da2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8da6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8daa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8dae:	bf22      	ittt	cs
   d8db0:	1ab6      	subcs	r6, r6, r2
   d8db2:	4675      	movcs	r5, lr
   d8db4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8db8:	085b      	lsrs	r3, r3, #1
   d8dba:	ea4f 0232 	mov.w	r2, r2, rrx
   d8dbe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8dc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8dc6:	bf22      	ittt	cs
   d8dc8:	1ab6      	subcs	r6, r6, r2
   d8dca:	4675      	movcs	r5, lr
   d8dcc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8dd0:	ea55 0e06 	orrs.w	lr, r5, r6
   d8dd4:	d018      	beq.n	d8e08 <__aeabi_ddiv+0x114>
   d8dd6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8dda:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8dde:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8de2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8de6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8dea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8dee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8df2:	d1c0      	bne.n	d8d76 <__aeabi_ddiv+0x82>
   d8df4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8df8:	d10b      	bne.n	d8e12 <__aeabi_ddiv+0x11e>
   d8dfa:	ea41 0100 	orr.w	r1, r1, r0
   d8dfe:	f04f 0000 	mov.w	r0, #0
   d8e02:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8e06:	e7b6      	b.n	d8d76 <__aeabi_ddiv+0x82>
   d8e08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e0c:	bf04      	itt	eq
   d8e0e:	4301      	orreq	r1, r0
   d8e10:	2000      	moveq	r0, #0
   d8e12:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8e16:	bf88      	it	hi
   d8e18:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8e1c:	f63f aeaf 	bhi.w	d8b7e <__aeabi_dmul+0xde>
   d8e20:	ebb5 0c03 	subs.w	ip, r5, r3
   d8e24:	bf04      	itt	eq
   d8e26:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8e2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8e2e:	f150 0000 	adcs.w	r0, r0, #0
   d8e32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8e36:	bd70      	pop	{r4, r5, r6, pc}
   d8e38:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8e3c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8e40:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8e44:	bfc2      	ittt	gt
   d8e46:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8e4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8e4e:	bd70      	popgt	{r4, r5, r6, pc}
   d8e50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e54:	f04f 0e00 	mov.w	lr, #0
   d8e58:	3c01      	subs	r4, #1
   d8e5a:	e690      	b.n	d8b7e <__aeabi_dmul+0xde>
   d8e5c:	ea45 0e06 	orr.w	lr, r5, r6
   d8e60:	e68d      	b.n	d8b7e <__aeabi_dmul+0xde>
   d8e62:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8e66:	ea94 0f0c 	teq	r4, ip
   d8e6a:	bf08      	it	eq
   d8e6c:	ea95 0f0c 	teqeq	r5, ip
   d8e70:	f43f af3b 	beq.w	d8cea <__aeabi_dmul+0x24a>
   d8e74:	ea94 0f0c 	teq	r4, ip
   d8e78:	d10a      	bne.n	d8e90 <__aeabi_ddiv+0x19c>
   d8e7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8e7e:	f47f af34 	bne.w	d8cea <__aeabi_dmul+0x24a>
   d8e82:	ea95 0f0c 	teq	r5, ip
   d8e86:	f47f af25 	bne.w	d8cd4 <__aeabi_dmul+0x234>
   d8e8a:	4610      	mov	r0, r2
   d8e8c:	4619      	mov	r1, r3
   d8e8e:	e72c      	b.n	d8cea <__aeabi_dmul+0x24a>
   d8e90:	ea95 0f0c 	teq	r5, ip
   d8e94:	d106      	bne.n	d8ea4 <__aeabi_ddiv+0x1b0>
   d8e96:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e9a:	f43f aefd 	beq.w	d8c98 <__aeabi_dmul+0x1f8>
   d8e9e:	4610      	mov	r0, r2
   d8ea0:	4619      	mov	r1, r3
   d8ea2:	e722      	b.n	d8cea <__aeabi_dmul+0x24a>
   d8ea4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8ea8:	bf18      	it	ne
   d8eaa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8eae:	f47f aec5 	bne.w	d8c3c <__aeabi_dmul+0x19c>
   d8eb2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8eb6:	f47f af0d 	bne.w	d8cd4 <__aeabi_dmul+0x234>
   d8eba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8ebe:	f47f aeeb 	bne.w	d8c98 <__aeabi_dmul+0x1f8>
   d8ec2:	e712      	b.n	d8cea <__aeabi_dmul+0x24a>

000d8ec4 <__gedf2>:
   d8ec4:	f04f 3cff 	mov.w	ip, #4294967295
   d8ec8:	e006      	b.n	d8ed8 <__cmpdf2+0x4>
   d8eca:	bf00      	nop

000d8ecc <__ledf2>:
   d8ecc:	f04f 0c01 	mov.w	ip, #1
   d8ed0:	e002      	b.n	d8ed8 <__cmpdf2+0x4>
   d8ed2:	bf00      	nop

000d8ed4 <__cmpdf2>:
   d8ed4:	f04f 0c01 	mov.w	ip, #1
   d8ed8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8edc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8ee0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ee4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ee8:	bf18      	it	ne
   d8eea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8eee:	d01b      	beq.n	d8f28 <__cmpdf2+0x54>
   d8ef0:	b001      	add	sp, #4
   d8ef2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8ef6:	bf0c      	ite	eq
   d8ef8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8efc:	ea91 0f03 	teqne	r1, r3
   d8f00:	bf02      	ittt	eq
   d8f02:	ea90 0f02 	teqeq	r0, r2
   d8f06:	2000      	moveq	r0, #0
   d8f08:	4770      	bxeq	lr
   d8f0a:	f110 0f00 	cmn.w	r0, #0
   d8f0e:	ea91 0f03 	teq	r1, r3
   d8f12:	bf58      	it	pl
   d8f14:	4299      	cmppl	r1, r3
   d8f16:	bf08      	it	eq
   d8f18:	4290      	cmpeq	r0, r2
   d8f1a:	bf2c      	ite	cs
   d8f1c:	17d8      	asrcs	r0, r3, #31
   d8f1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8f22:	f040 0001 	orr.w	r0, r0, #1
   d8f26:	4770      	bx	lr
   d8f28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f30:	d102      	bne.n	d8f38 <__cmpdf2+0x64>
   d8f32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8f36:	d107      	bne.n	d8f48 <__cmpdf2+0x74>
   d8f38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f40:	d1d6      	bne.n	d8ef0 <__cmpdf2+0x1c>
   d8f42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8f46:	d0d3      	beq.n	d8ef0 <__cmpdf2+0x1c>
   d8f48:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8f4c:	4770      	bx	lr
   d8f4e:	bf00      	nop

000d8f50 <__aeabi_cdrcmple>:
   d8f50:	4684      	mov	ip, r0
   d8f52:	4610      	mov	r0, r2
   d8f54:	4662      	mov	r2, ip
   d8f56:	468c      	mov	ip, r1
   d8f58:	4619      	mov	r1, r3
   d8f5a:	4663      	mov	r3, ip
   d8f5c:	e000      	b.n	d8f60 <__aeabi_cdcmpeq>
   d8f5e:	bf00      	nop

000d8f60 <__aeabi_cdcmpeq>:
   d8f60:	b501      	push	{r0, lr}
   d8f62:	f7ff ffb7 	bl	d8ed4 <__cmpdf2>
   d8f66:	2800      	cmp	r0, #0
   d8f68:	bf48      	it	mi
   d8f6a:	f110 0f00 	cmnmi.w	r0, #0
   d8f6e:	bd01      	pop	{r0, pc}

000d8f70 <__aeabi_dcmpeq>:
   d8f70:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f74:	f7ff fff4 	bl	d8f60 <__aeabi_cdcmpeq>
   d8f78:	bf0c      	ite	eq
   d8f7a:	2001      	moveq	r0, #1
   d8f7c:	2000      	movne	r0, #0
   d8f7e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f82:	bf00      	nop

000d8f84 <__aeabi_dcmplt>:
   d8f84:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f88:	f7ff ffea 	bl	d8f60 <__aeabi_cdcmpeq>
   d8f8c:	bf34      	ite	cc
   d8f8e:	2001      	movcc	r0, #1
   d8f90:	2000      	movcs	r0, #0
   d8f92:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f96:	bf00      	nop

000d8f98 <__aeabi_dcmple>:
   d8f98:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f9c:	f7ff ffe0 	bl	d8f60 <__aeabi_cdcmpeq>
   d8fa0:	bf94      	ite	ls
   d8fa2:	2001      	movls	r0, #1
   d8fa4:	2000      	movhi	r0, #0
   d8fa6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8faa:	bf00      	nop

000d8fac <__aeabi_dcmpge>:
   d8fac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8fb0:	f7ff ffce 	bl	d8f50 <__aeabi_cdrcmple>
   d8fb4:	bf94      	ite	ls
   d8fb6:	2001      	movls	r0, #1
   d8fb8:	2000      	movhi	r0, #0
   d8fba:	f85d fb08 	ldr.w	pc, [sp], #8
   d8fbe:	bf00      	nop

000d8fc0 <__aeabi_dcmpgt>:
   d8fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8fc4:	f7ff ffc4 	bl	d8f50 <__aeabi_cdrcmple>
   d8fc8:	bf34      	ite	cc
   d8fca:	2001      	movcc	r0, #1
   d8fcc:	2000      	movcs	r0, #0
   d8fce:	f85d fb08 	ldr.w	pc, [sp], #8
   d8fd2:	bf00      	nop

000d8fd4 <__aeabi_dcmpun>:
   d8fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fdc:	d102      	bne.n	d8fe4 <__aeabi_dcmpun+0x10>
   d8fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8fe2:	d10a      	bne.n	d8ffa <__aeabi_dcmpun+0x26>
   d8fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fec:	d102      	bne.n	d8ff4 <__aeabi_dcmpun+0x20>
   d8fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8ff2:	d102      	bne.n	d8ffa <__aeabi_dcmpun+0x26>
   d8ff4:	f04f 0000 	mov.w	r0, #0
   d8ff8:	4770      	bx	lr
   d8ffa:	f04f 0001 	mov.w	r0, #1
   d8ffe:	4770      	bx	lr

000d9000 <__aeabi_d2f>:
   d9000:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9004:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9008:	bf24      	itt	cs
   d900a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d900e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9012:	d90d      	bls.n	d9030 <__aeabi_d2f+0x30>
   d9014:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9018:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d901c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9020:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9024:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9028:	bf08      	it	eq
   d902a:	f020 0001 	biceq.w	r0, r0, #1
   d902e:	4770      	bx	lr
   d9030:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9034:	d121      	bne.n	d907a <__aeabi_d2f+0x7a>
   d9036:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d903a:	bfbc      	itt	lt
   d903c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9040:	4770      	bxlt	lr
   d9042:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9046:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d904a:	f1c2 0218 	rsb	r2, r2, #24
   d904e:	f1c2 0c20 	rsb	ip, r2, #32
   d9052:	fa10 f30c 	lsls.w	r3, r0, ip
   d9056:	fa20 f002 	lsr.w	r0, r0, r2
   d905a:	bf18      	it	ne
   d905c:	f040 0001 	orrne.w	r0, r0, #1
   d9060:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9064:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9068:	fa03 fc0c 	lsl.w	ip, r3, ip
   d906c:	ea40 000c 	orr.w	r0, r0, ip
   d9070:	fa23 f302 	lsr.w	r3, r3, r2
   d9074:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9078:	e7cc      	b.n	d9014 <__aeabi_d2f+0x14>
   d907a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d907e:	d107      	bne.n	d9090 <__aeabi_d2f+0x90>
   d9080:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9084:	bf1e      	ittt	ne
   d9086:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d908a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d908e:	4770      	bxne	lr
   d9090:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9094:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9098:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d909c:	4770      	bx	lr
   d909e:	bf00      	nop

000d90a0 <__cxa_atexit>:
   d90a0:	b510      	push	{r4, lr}
   d90a2:	4c05      	ldr	r4, [pc, #20]	; (d90b8 <__cxa_atexit+0x18>)
   d90a4:	4613      	mov	r3, r2
   d90a6:	b12c      	cbz	r4, d90b4 <__cxa_atexit+0x14>
   d90a8:	460a      	mov	r2, r1
   d90aa:	4601      	mov	r1, r0
   d90ac:	2002      	movs	r0, #2
   d90ae:	f3af 8000 	nop.w
   d90b2:	bd10      	pop	{r4, pc}
   d90b4:	4620      	mov	r0, r4
   d90b6:	bd10      	pop	{r4, pc}
   d90b8:	00000000 	.word	0x00000000

000d90bc <memcmp>:
   d90bc:	b510      	push	{r4, lr}
   d90be:	3901      	subs	r1, #1
   d90c0:	4402      	add	r2, r0
   d90c2:	4290      	cmp	r0, r2
   d90c4:	d007      	beq.n	d90d6 <memcmp+0x1a>
   d90c6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d90ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d90ce:	42a3      	cmp	r3, r4
   d90d0:	d0f7      	beq.n	d90c2 <memcmp+0x6>
   d90d2:	1b18      	subs	r0, r3, r4
   d90d4:	bd10      	pop	{r4, pc}
   d90d6:	2000      	movs	r0, #0
   d90d8:	bd10      	pop	{r4, pc}

000d90da <memcpy>:
   d90da:	b510      	push	{r4, lr}
   d90dc:	1e43      	subs	r3, r0, #1
   d90de:	440a      	add	r2, r1
   d90e0:	4291      	cmp	r1, r2
   d90e2:	d004      	beq.n	d90ee <memcpy+0x14>
   d90e4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d90e8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d90ec:	e7f8      	b.n	d90e0 <memcpy+0x6>
   d90ee:	bd10      	pop	{r4, pc}

000d90f0 <memset>:
   d90f0:	4402      	add	r2, r0
   d90f2:	4603      	mov	r3, r0
   d90f4:	4293      	cmp	r3, r2
   d90f6:	d002      	beq.n	d90fe <memset+0xe>
   d90f8:	f803 1b01 	strb.w	r1, [r3], #1
   d90fc:	e7fa      	b.n	d90f4 <memset+0x4>
   d90fe:	4770      	bx	lr

000d9100 <srand>:
   d9100:	b538      	push	{r3, r4, r5, lr}
   d9102:	4b12      	ldr	r3, [pc, #72]	; (d914c <srand+0x4c>)
   d9104:	681c      	ldr	r4, [r3, #0]
   d9106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9108:	4605      	mov	r5, r0
   d910a:	b9d3      	cbnz	r3, d9142 <srand+0x42>
   d910c:	2018      	movs	r0, #24
   d910e:	f7fd fe3d 	bl	d6d8c <malloc>
   d9112:	f243 330e 	movw	r3, #13070	; 0x330e
   d9116:	63a0      	str	r0, [r4, #56]	; 0x38
   d9118:	8003      	strh	r3, [r0, #0]
   d911a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d911e:	8043      	strh	r3, [r0, #2]
   d9120:	f241 2334 	movw	r3, #4660	; 0x1234
   d9124:	8083      	strh	r3, [r0, #4]
   d9126:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d912a:	80c3      	strh	r3, [r0, #6]
   d912c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9130:	8103      	strh	r3, [r0, #8]
   d9132:	2305      	movs	r3, #5
   d9134:	8143      	strh	r3, [r0, #10]
   d9136:	230b      	movs	r3, #11
   d9138:	8183      	strh	r3, [r0, #12]
   d913a:	2201      	movs	r2, #1
   d913c:	2300      	movs	r3, #0
   d913e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9142:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9144:	2200      	movs	r2, #0
   d9146:	611d      	str	r5, [r3, #16]
   d9148:	615a      	str	r2, [r3, #20]
   d914a:	bd38      	pop	{r3, r4, r5, pc}
   d914c:	2003be80 	.word	0x2003be80

000d9150 <strdup>:
   d9150:	4b02      	ldr	r3, [pc, #8]	; (d915c <strdup+0xc>)
   d9152:	4601      	mov	r1, r0
   d9154:	6818      	ldr	r0, [r3, #0]
   d9156:	f000 b803 	b.w	d9160 <_strdup_r>
   d915a:	bf00      	nop
   d915c:	2003be80 	.word	0x2003be80

000d9160 <_strdup_r>:
   d9160:	b570      	push	{r4, r5, r6, lr}
   d9162:	4606      	mov	r6, r0
   d9164:	4608      	mov	r0, r1
   d9166:	460c      	mov	r4, r1
   d9168:	f000 f80d 	bl	d9186 <strlen>
   d916c:	1c45      	adds	r5, r0, #1
   d916e:	4629      	mov	r1, r5
   d9170:	4630      	mov	r0, r6
   d9172:	f7fd fe2b 	bl	d6dcc <_malloc_r>
   d9176:	4606      	mov	r6, r0
   d9178:	b118      	cbz	r0, d9182 <_strdup_r+0x22>
   d917a:	462a      	mov	r2, r5
   d917c:	4621      	mov	r1, r4
   d917e:	f7ff ffac 	bl	d90da <memcpy>
   d9182:	4630      	mov	r0, r6
   d9184:	bd70      	pop	{r4, r5, r6, pc}

000d9186 <strlen>:
   d9186:	4603      	mov	r3, r0
   d9188:	f813 2b01 	ldrb.w	r2, [r3], #1
   d918c:	2a00      	cmp	r2, #0
   d918e:	d1fb      	bne.n	d9188 <strlen+0x2>
   d9190:	1a18      	subs	r0, r3, r0
   d9192:	3801      	subs	r0, #1
   d9194:	4770      	bx	lr

000d9196 <link_code_end>:
	...

000d9198 <dynalib_user>:
   d9198:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d91a8:	0000 0000                                   ....

000d91ac <_ZTVN8particle13__SPISettingsE>:
	...
   d91b4:	40b9 000d                                   .@..

000d91b8 <_ZTV6SdFile>:
	...
   d91c0:	40b7 000d 4117 000d 414f 000d 4111 000d     .@...A..OA...A..

000d91d0 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d91d8:	4125 000d 4139 000d 6564 6166 6c75 2074     %A..9A..default 
   d91e8:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   d91f8:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   d9208:	5053 5349 7465 6974 676e 2073 7325 6c25     SPISettings %s%l
   d9218:	2075 7325 4d20 444f 2545 3e64 6d00 6369     u %s MODE%d>.mic
   d9228:	2031 203d 6925 7c20 6d20 6369 2032 203d     1 = %i | mic2 = 
   d9238:	6925 7c20 6d20 6369 2033 203d 6925 7c20     %i | mic3 = %i |
   d9248:	5420 6d69 2065 203d 6925 000a 6177 7469      Time = %i..wait
   d9258:	6e69 2067 6f66 2072 6f73 6e75 0064 3154     ing for sound.T1
   d9268:	3d20 2520 2069 207c 3254 3d20 2520 2069      = %i | T2 = %i 
   d9278:	207c 3354 3d20 2520 0a69 4300 6e61 7427     | T3 = %i..Can't
   d9288:	6120 6363 7365 2073 4453 6320 7261 2e64      access SD card.
   d9298:	4420 206f 6f6e 2074 6572 6f66 6d72 7461      Do not reformat
   d92a8:	002e 6f4e 6320 7261 2c64 7720 6f72 676e     ..No card, wrong
   d92b8:	6320 6968 2070 6573 656c 7463 7020 6e69      chip select pin
   d92c8:	202c 726f 5320 4950 7020 6f72 6c62 6d65     , or SPI problem
   d92d8:	003f 4453 6520 7272 726f 6f43 6564 203a     ?.SD errorCode: 
   d92e8:	5830 2c00 5830 4900 766e 6c61 6469 6620     0X.,0X.Invalid f
   d92f8:	726f 616d 2c74 7220 6665 726f 616d 2074     ormat, reformat 
   d9308:	4453 002e 6143 276e 2074 706f 6e65 7220     SD..Can't open r
   d9318:	6f6f 2074 6964 6572 7463 726f 2e79 4e00     oot directory..N
   d9328:	206f 7265 6f72 2072 6f66 6e75 2e64 4100     o error found..A
   d9338:	3d20 2520 2e30 6636 7c20 4220 3d20 2520      = %0.6f | B = %
   d9348:	2e30 6636 000a 2054 203d 3025 322e 0a66     0.6f..T = %0.2f.
   d9358:	5800 3d20 2520 2e30 6632 7c20 5920 3d20     .X = %0.2f | Y =
   d9368:	2520 2e30 6632 000a 2061 203d 3025 322e      %0.2f..a = %0.2
   d9378:	2066 207c 2062 203d 3025 322e 2066 207c     f | b = %0.2f | 
   d9388:	2063 203d 3025 322e 0a66 5300 6174 7472     c = %0.2f..Start
   d9398:	6e69 2067 6144 6174 4c20 676f 6967 676e     ing Data Logging
   d93a8:	0a20 4300 6e61 7427 6320 6572 7461 2065      ..Can't create 
   d93b8:	6966 656c 6e20 6d61 0065 6966 656c 6f2e     file name.file.o
   d93c8:	6570 006e 6f4c 6767 6e69 2067 6f74 203a     pen.Logging to: 
   d93d8:	7325 0a20 2500 2e30 6638 2c20 2520 2e30     %s ..%0.8f , %0.
   d93e8:	6632 000a 6f44 656e 0a20 5200 6165 7964     2f..Done ..Ready
   d93f8:	6620 726f 6e20 7865 2074 6164 6174 6c20      for next data l
   d9408:	676f 0a20 4c00 6e6f 6967 7574 6564 4c00     og ..Longitude.L
   d9418:	7461 7469 6475 0065 6f4e 7369 0065 6f4c     atitude.Noise.Lo
   d9428:	676e 7469 6475 3a65 2520 2e30 6637 207c     ngitude: %0.7f| 
   d9438:	614c 6974 7574 6564 203a 3025 372e 0a66     Latitude: %0.7f.
   d9448:	0000 0000 c000 4001 1000 4002 2000 4002     .......@...@. .@

000d9458 <CSWTCH.65>:
   d9458:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d9468:	0050 0000                                   P...

000d946c <_ZTV10JsonBuffer>:
	...
   d9474:	6645 000d 6661 000d                         Ef..af..

000d947c <_ZTV10JsonWriter>:
	...
   d9484:	6675 000d 6689 000d 6425 2500 756c 2500     uf...f..%d.%lu.%
   d9494:	3430 0078 755c 3025 5834 7400 7572 0065     04x.\u%04X.true.
   d94a4:	6166 736c 0065 2e25 662a 2500 0066 2e25     false.%.*f.%f.%.
   d94b4:	6c2a 0066 6c25 0066                         *lf.%lf.

000d94bc <_ZTVN5spark13EthernetClassE>:
	...
   d94c4:	6e4b 000d 6e41 000d 6e37 000d 6e2d 000d     Kn..An..7n..-n..
   d94d4:	6e21 000d 6e15 000d 6e09 000d 6e01 000d     !n...n...n...n..
   d94e4:	6df7 000d 6ded 000d 7fa5 000d               .m...m......

000d94f0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d94f0:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d9500:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d9510:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d9520:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d9530:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d9540:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d9550:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d9560:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d9570:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d9580:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d9590:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d95a0:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d95b0:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d95c0:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d95d0:	6c61 006c 005a 2b25 3330 3a64 3025 7532     all.Z.%+03d:%02u
   d95e0:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d95f0:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d9600 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9608:	7419 000d 741f 000d 7463 000d 742d 000d     .t...t..ct..-t..
   d9618:	741b 000d                                   .t..

000d961c <_ZTV9IPAddress>:
	...
   d9624:	79b1 000d 79a1 000d 79a3 000d               .y...y...y..

000d9630 <_ZTV9USBSerial>:
	...
   d9638:	7a89 000d 7ad9 000d 7ae7 000d 70c9 000d     .z...z...z...p..
   d9648:	7ac5 000d 7a8b 000d 7aa1 000d 7ad3 000d     .z...z...z...z..
   d9658:	7ab7 000d 7a85 000d                         .z...z..

000d9660 <_ZTV11USARTSerial>:
	...
   d9668:	7b95 000d 7be5 000d 7bf3 000d 70c9 000d     .{...{...{...p..
   d9678:	7ba9 000d 7bcb 000d 7bb7 000d 7bdf 000d     .{...{...{...{..
   d9688:	7b97 000d 7b9b 000d                         .{...{..

000d9690 <_ZTV7TwoWire>:
	...
   d9698:	7cc1 000d 7d0b 000d 7ce3 000d 7cc3 000d     .|...}...|...|..
   d96a8:	7ceb 000d 7cf3 000d 7cfb 000d 7d03 000d     .|...|...|...}..

000d96b8 <_ZTVN5spark9MeshClassE>:
	...
   d96c0:	7da3 000d 7d99 000d 7d8f 000d 7d85 000d     .}...}...}...}..
   d96d0:	7d79 000d 7d6d 000d 7d61 000d 7d59 000d     y}..m}..a}..Y}..
   d96e0:	7d4f 000d 7d45 000d 7fa5 000d               O}..E}......

000d96ec <_ZTVN5spark9WiFiClassE>:
	...
   d96f4:	7f1f 000d 7f15 000d 7f0b 000d 7ec1 000d     .............~..
   d9704:	7eff 000d 7ef3 000d 7ee7 000d 7edf 000d     .~...~...~...~..
   d9714:	7ed5 000d 7ecb 000d 7fa5 000d               .~...~......

000d9720 <_ZTVN5spark12NetworkClassE>:
	...
   d9728:	7f3d 000d 7f47 000d 7f51 000d 7f5b 000d     =...G...Q...[...
   d9738:	7f65 000d 7f71 000d 7f7d 000d 7f89 000d     e...q...}.......
   d9748:	7f91 000d 7f9b 000d 7fa5 000d               ............

000d9754 <_ZSt7nothrow>:
   d9754:	0000 0000 7173 7472 0000 0000               ....sqrt....

000d9760 <__sf_fake_stdin>:
	...

000d9780 <__sf_fake_stdout>:
	...

000d97a0 <__sf_fake_stderr>:
	...
   d97c0:	0043                                        C.

000d97c2 <link_const_variable_data_end>:
	...

000d97c4 <link_constructors_location>:
   d97c4:	000d4ac5 	.word	0x000d4ac5
   d97c8:	000d5015 	.word	0x000d5015
   d97cc:	000d5029 	.word	0x000d5029
   d97d0:	000d502d 	.word	0x000d502d
   d97d4:	000d5655 	.word	0x000d5655
   d97d8:	000d5659 	.word	0x000d5659
   d97dc:	000d565d 	.word	0x000d565d
   d97e0:	000d5661 	.word	0x000d5661
   d97e4:	000d5d05 	.word	0x000d5d05
   d97e8:	000d5d29 	.word	0x000d5d29
   d97ec:	000d5d2d 	.word	0x000d5d2d
   d97f0:	000d6051 	.word	0x000d6051
   d97f4:	000d6055 	.word	0x000d6055
   d97f8:	000d6059 	.word	0x000d6059
   d97fc:	000d6593 	.word	0x000d6593
   d9800:	000d6597 	.word	0x000d6597
   d9804:	000d659b 	.word	0x000d659b
   d9808:	000d6641 	.word	0x000d6641
   d980c:	000d6911 	.word	0x000d6911
   d9810:	000d6e55 	.word	0x000d6e55
   d9814:	000d7015 	.word	0x000d7015
   d9818:	000d70a1 	.word	0x000d70a1
   d981c:	000d71f1 	.word	0x000d71f1
   d9820:	000d7201 	.word	0x000d7201
   d9824:	000d72ed 	.word	0x000d72ed
   d9828:	000d7e71 	.word	0x000d7e71
   d982c:	000d7f29 	.word	0x000d7f29
   d9830:	000d8071 	.word	0x000d8071
   d9834:	000d823d 	.word	0x000d823d
   d9838:	000d82c1 	.word	0x000d82c1
   d983c:	000d8385 	.word	0x000d8385
   d9840:	000d8449 	.word	0x000d8449

000d9844 <link_constructors_end>:
	...
